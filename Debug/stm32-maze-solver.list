
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a380  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a508  0800a508  0000b508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a52c  0800a52c  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a52c  0800a52c  0000b52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a534  0800a534  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a534  0800a534  0000b534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a538  0800a538  0000b538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a53c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000b0c  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b88  20000b88  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b295  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042de  00000000  00000000  00027341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  0002b620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bc  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e82  00000000  00000000  0002e114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f93d  00000000  00000000  00053f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0f6e  00000000  00000000  000738d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00154841  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a50  00000000  00000000  00154884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0015b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a4f0 	.word	0x0800a4f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a4f0 	.word	0x0800a4f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fdfa 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f814 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa10 	bl	8000924 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f9ee 	bl	80008e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000508:	f000 f8d8 	bl	80006bc <MX_I2C1_Init>
  MX_I2S3_Init();
 800050c:	f000 f904 	bl	8000718 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000510:	f000 f930 	bl	8000774 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000514:	f009 fb96 	bl	8009c44 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000518:	f000 f870 	bl	80005fc <MX_ADC1_Init>
  MX_TIM3_Init();
 800051c:	f000 f960 	bl	80007e0 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000520:	f009 fbb6 	bl	8009c90 <MX_USB_HOST_Process>
 8000524:	e7fc      	b.n	8000520 <main+0x2c>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f009 ff4c 	bl	800a3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <SystemClock_Config+0xd0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fd60 	bl	8005074 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ba:	f000 fad1 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2105      	movs	r1, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 ffc1 	bl	8005564 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e8:	f000 faba 	bl	8000b60 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	@ 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000610:	4a28      	ldr	r2, [pc, #160]	@ (80006b4 <MX_ADC1_Init+0xb8>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000616:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000622:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000624:	2201      	movs	r2, #1
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000628:	4b21      	ldr	r3, [pc, #132]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 800062a:	2201      	movs	r2, #1
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 800063e:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <MX_ADC1_Init+0xbc>)
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000648:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 800064a:	2202      	movs	r2, #2
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000650:	2201      	movs	r2, #1
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	4814      	ldr	r0, [pc, #80]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 800065e:	f000 fddd 	bl	800121c <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 fa7a 	bl	8000b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800066c:	2308      	movs	r3, #8
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000674:	2305      	movs	r3, #5
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 800067e:	f000 fe11 	bl	80012a4 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 fa6a 	bl	8000b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800068c:	2309      	movs	r3, #9
 800068e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_ADC1_Init+0xb4>)
 800069a:	f000 fe03 	bl	80012a4 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006a4:	f000 fa5c 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000098 	.word	0x20000098
 80006b4:	40012000 	.word	0x40012000
 80006b8:	0f000001 	.word	0x0f000001

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f003 fed7 	bl	80044ac <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 fa2c 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000140 	.word	0x20000140
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_I2S3_Init+0x54>)
 800071e:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <MX_I2S3_Init+0x58>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2S3_Init+0x54>)
 8000724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000728:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <MX_I2S3_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_I2S3_Init+0x54>)
 800073e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000742:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_I2S3_Init+0x54>)
 8000758:	f003 ffec 	bl	8004734 <HAL_I2S_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000762:	f000 f9fd 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000194 	.word	0x20000194
 8000770:	40003c00 	.word	0x40003c00

08000774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800077a:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <MX_SPI1_Init+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007c0:	220a      	movs	r2, #10
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007c6:	f005 fa1b 	bl	8005c00 <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f9c6 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200001dc 	.word	0x200001dc
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	@ 0x38
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000810:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000812:	4a33      	ldr	r2, [pc, #204]	@ (80008e0 <MX_TIM3_Init+0x100>)
 8000814:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000816:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000818:	2253      	movs	r2, #83	@ 0x53
 800081a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <MX_TIM3_Init+0xfc>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000822:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000824:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000828:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <MX_TIM3_Init+0xfc>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000836:	4829      	ldr	r0, [pc, #164]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000838:	f005 fa6b 	bl	8005d12 <HAL_TIM_Base_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000842:	f000 f98d 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000850:	4619      	mov	r1, r3
 8000852:	4822      	ldr	r0, [pc, #136]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000854:	f005 fbc8 	bl	8005fe8 <HAL_TIM_ConfigClockSource>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800085e:	f000 f97f 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000862:	481e      	ldr	r0, [pc, #120]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000864:	f005 faa4 	bl	8005db0 <HAL_TIM_PWM_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800086e:	f000 f977 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	4619      	mov	r1, r3
 8000880:	4816      	ldr	r0, [pc, #88]	@ (80008dc <MX_TIM3_Init+0xfc>)
 8000882:	f005 ff69 	bl	8006758 <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800088c:	f000 f968 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000890:	2360      	movs	r3, #96	@ 0x60
 8000892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2208      	movs	r2, #8
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM3_Init+0xfc>)
 80008a8:	f005 fadc 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008b2:	f000 f955 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	220c      	movs	r2, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	@ (80008dc <MX_TIM3_Init+0xfc>)
 80008be:	f005 fad1 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80008c8:	f000 f94a 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <MX_TIM3_Init+0xfc>)
 80008ce:	f000 fb1f 	bl	8000f10 <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3738      	adds	r7, #56	@ 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000234 	.word	0x20000234
 80008e0:	40000400 	.word	0x40000400

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2038      	movs	r0, #56	@ 0x38
 800090c:	f000 ffc3 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000910:	2038      	movs	r0, #56	@ 0x38
 8000912:	f000 ffdc 	bl	80018ce <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	@ 0x30
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	4b82      	ldr	r3, [pc, #520]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a81      	ldr	r2, [pc, #516]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000944:	f043 0310 	orr.w	r3, r3, #16
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b48 <MX_GPIO_Init+0x224>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	4b7b      	ldr	r3, [pc, #492]	@ (8000b48 <MX_GPIO_Init+0x224>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a7a      	ldr	r2, [pc, #488]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b78      	ldr	r3, [pc, #480]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b74      	ldr	r3, [pc, #464]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a73      	ldr	r2, [pc, #460]	@ (8000b48 <MX_GPIO_Init+0x224>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b71      	ldr	r3, [pc, #452]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b6d      	ldr	r3, [pc, #436]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a6c      	ldr	r2, [pc, #432]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b48 <MX_GPIO_Init+0x224>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b66      	ldr	r3, [pc, #408]	@ (8000b48 <MX_GPIO_Init+0x224>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a65      	ldr	r2, [pc, #404]	@ (8000b48 <MX_GPIO_Init+0x224>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b63      	ldr	r3, [pc, #396]	@ (8000b48 <MX_GPIO_Init+0x224>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b5f      	ldr	r3, [pc, #380]	@ (8000b48 <MX_GPIO_Init+0x224>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a5e      	ldr	r2, [pc, #376]	@ (8000b48 <MX_GPIO_Init+0x224>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b5c      	ldr	r3, [pc, #368]	@ (8000b48 <MX_GPIO_Init+0x224>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2108      	movs	r1, #8
 80009e6:	4859      	ldr	r0, [pc, #356]	@ (8000b4c <MX_GPIO_Init+0x228>)
 80009e8:	f001 fc12 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	4857      	ldr	r0, [pc, #348]	@ (8000b50 <MX_GPIO_Init+0x22c>)
 80009f2:	f001 fc0d 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin|MI1_Pin|MD0_Pin|MD1_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80009fc:	4855      	ldr	r0, [pc, #340]	@ (8000b54 <MX_GPIO_Init+0x230>)
 80009fe:	f001 fc07 	bl	8002210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a02:	2200      	movs	r2, #0
 8000a04:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a08:	4853      	ldr	r0, [pc, #332]	@ (8000b58 <MX_GPIO_Init+0x234>)
 8000a0a:	f001 fc01 	bl	8002210 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4849      	ldr	r0, [pc, #292]	@ (8000b4c <MX_GPIO_Init+0x228>)
 8000a26:	f001 fa57 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4843      	ldr	r0, [pc, #268]	@ (8000b50 <MX_GPIO_Init+0x22c>)
 8000a42:	f001 fa49 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a46:	2308      	movs	r3, #8
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a56:	2305      	movs	r3, #5
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483b      	ldr	r0, [pc, #236]	@ (8000b50 <MX_GPIO_Init+0x22c>)
 8000a62:	f001 fa39 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4838      	ldr	r0, [pc, #224]	@ (8000b5c <MX_GPIO_Init+0x238>)
 8000a7c:	f001 fa2c 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a80:	2304      	movs	r3, #4
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4830      	ldr	r0, [pc, #192]	@ (8000b54 <MX_GPIO_Init+0x230>)
 8000a94:	f001 fa20 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4827      	ldr	r0, [pc, #156]	@ (8000b54 <MX_GPIO_Init+0x230>)
 8000ab6:	f001 fa0f 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin|MI1_Pin|MD0_Pin|MD1_Pin;
 8000aba:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4820      	ldr	r0, [pc, #128]	@ (8000b54 <MX_GPIO_Init+0x230>)
 8000ad4:	f001 fa00 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ad8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000adc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4819      	ldr	r0, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0x234>)
 8000af2:	f001 f9f1 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin|LineSensor_Pin;
 8000af6:	23c0      	movs	r3, #192	@ 0xc0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <MX_GPIO_Init+0x22c>)
 8000b0a:	f001 f9e5 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b0e:	2320      	movs	r3, #32
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_GPIO_Init+0x234>)
 8000b22:	f001 f9d9 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b2a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_GPIO_Init+0x228>)
 8000b3c:	f001 f9cc 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	@ 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40020000 	.word	0x40020000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 fe68 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <HAL_ADC_MspInit+0xdc>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d157      	bne.n	8000c8e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <HAL_ADC_MspInit+0xe0>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c9c <HAL_ADC_MspInit+0xe0>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bee:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <HAL_ADC_MspInit+0xe0>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <HAL_ADC_MspInit+0xe0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a26      	ldr	r2, [pc, #152]	@ (8000c9c <HAL_ADC_MspInit+0xe0>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <HAL_ADC_MspInit+0xe0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8000c16:	2303      	movs	r3, #3
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	481d      	ldr	r0, [pc, #116]	@ (8000ca0 <HAL_ADC_MspInit+0xe4>)
 8000c2a:	f001 f955 	bl	8001ed8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c72:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c74:	f000 fe46 	bl	8001904 <HAL_DMA_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c7e:	f7ff ff6f 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c86:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c88:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	@ 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40012000 	.word	0x40012000
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	200000e0 	.word	0x200000e0
 8000ca8:	40026410 	.word	0x40026410

08000cac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_I2C_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12c      	bne.n	8000d28 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <HAL_I2C_MspInit+0x8c>)
 8000d08:	f001 f8e6 	bl	8001ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000d16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_I2C_MspInit+0x88>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020400 	.word	0x40020400

08000d3c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	@ 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a31      	ldr	r2, [pc, #196]	@ (8000e2c <HAL_I2S_MspInit+0xf0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d15a      	bne.n	8000e22 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d70:	23c0      	movs	r3, #192	@ 0xc0
 8000d72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 fdfd 	bl	800597c <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d88:	f7ff feea 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	4a26      	ldr	r2, [pc, #152]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	4a18      	ldr	r2, [pc, #96]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000de0:	2310      	movs	r3, #16
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df0:	2306      	movs	r3, #6
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <HAL_I2S_MspInit+0xf8>)
 8000dfc:	f001 f86c 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e12:	2306      	movs	r3, #6
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4806      	ldr	r0, [pc, #24]	@ (8000e38 <HAL_I2S_MspInit+0xfc>)
 8000e1e:	f001 f85b 	bl	8001ed8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e22:	bf00      	nop
 8000e24:	3738      	adds	r7, #56	@ 0x38
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40003c00 	.word	0x40003c00
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	40020800 	.word	0x40020800

08000e3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a19      	ldr	r2, [pc, #100]	@ (8000ec0 <HAL_SPI_MspInit+0x84>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e96:	23e0      	movs	r3, #224	@ 0xe0
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <HAL_SPI_MspInit+0x8c>)
 8000eb2:	f001 f811 	bl	8001ed8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	@ 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40013000 	.word	0x40013000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_TIM_Base_MspInit+0x3c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10d      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_TIM_Base_MspInit+0x40>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a09      	ldr	r2, [pc, #36]	@ (8000f0c <HAL_TIM_Base_MspInit+0x40>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <HAL_TIM_Base_MspInit+0x40>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <HAL_TIM_MspPostInit+0x68>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d11e      	bne.n	8000f70 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <HAL_TIM_MspPostInit+0x6c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <HAL_TIM_MspPostInit+0x6c>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <HAL_TIM_MspPostInit+0x6c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8000f4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <HAL_TIM_MspPostInit+0x70>)
 8000f6c:	f000 ffb4 	bl	8001ed8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40000400 	.word	0x40000400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020800 	.word	0x40020800

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 f8db 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <DMA2_Stream0_IRQHandler+0x10>)
 8000fea:	f000 fd39 	bl	8001a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000e0 	.word	0x200000e0

08000ff8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <OTG_FS_IRQHandler+0x10>)
 8000ffe:	f001 fc01 	bl	8002804 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000660 	.word	0x20000660

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	@ (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f009 f9e2 	bl	800a404 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20020000 	.word	0x20020000
 800106c:	00000400 	.word	0x00000400
 8001070:	2000027c 	.word	0x2000027c
 8001074:	20000b88 	.word	0x20000b88

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a0:	f7ff ffea 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f009 f9a1 	bl	800a410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fa11 	bl	80004f4 <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010e0:	0800a53c 	.word	0x0800a53c
  ldr r2, =_sbss
 80010e4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010e8:	20000b88 	.word	0x20000b88

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <HAL_Init+0x40>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <HAL_Init+0x40>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_Init+0x40>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 fbb1 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f808 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fd22 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fbc9 	bl	80018ea <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001170:	f000 fb91 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	@ (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000280 	.word	0x20000280

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000280 	.word	0x20000280

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008

0800121c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e033      	b.n	800129a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fcbe 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	d118      	bne.n	800128c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001262:	f023 0302 	bic.w	r3, r3, #2
 8001266:	f043 0202 	orr.w	r2, r3, #2
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f93a 	bl	80014e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f023 0303 	bic.w	r3, r3, #3
 8001282:	f043 0201 	orr.w	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	641a      	str	r2, [r3, #64]	@ 0x40
 800128a:	e001      	b.n	8001290 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1c>
 80012bc:	2302      	movs	r3, #2
 80012be:	e105      	b.n	80014cc <HAL_ADC_ConfigChannel+0x228>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d925      	bls.n	800131c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68d9      	ldr	r1, [r3, #12]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	3b1e      	subs	r3, #30
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43da      	mvns	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68d9      	ldr	r1, [r3, #12]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	4603      	mov	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4403      	add	r3, r0
 800130e:	3b1e      	subs	r3, #30
 8001310:	409a      	lsls	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	e022      	b.n	8001362 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6919      	ldr	r1, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	2207      	movs	r2, #7
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	400a      	ands	r2, r1
 800133e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6919      	ldr	r1, [r3, #16]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	4603      	mov	r3, r0
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4403      	add	r3, r0
 8001358:	409a      	lsls	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b06      	cmp	r3, #6
 8001368:	d824      	bhi.n	80013b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	3b05      	subs	r3, #5
 800137c:	221f      	movs	r2, #31
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b05      	subs	r3, #5
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b2:	e04c      	b.n	800144e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d824      	bhi.n	8001406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b23      	subs	r3, #35	@ 0x23
 80013ce:	221f      	movs	r2, #31
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b23      	subs	r3, #35	@ 0x23
 80013f8:	fa00 f203 	lsl.w	r2, r0, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	631a      	str	r2, [r3, #48]	@ 0x30
 8001404:	e023      	b.n	800144e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b41      	subs	r3, #65	@ 0x41
 8001418:	221f      	movs	r2, #31
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	400a      	ands	r2, r1
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b41      	subs	r3, #65	@ 0x41
 8001442:	fa00 f203 	lsl.w	r2, r0, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144e:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <HAL_ADC_ConfigChannel+0x234>)
 8001450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <HAL_ADC_ConfigChannel+0x238>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d109      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1cc>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d105      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <HAL_ADC_ConfigChannel+0x238>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d123      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x21e>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b10      	cmp	r3, #16
 8001480:	d003      	beq.n	800148a <HAL_ADC_ConfigChannel+0x1e6>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b11      	cmp	r3, #17
 8001488:	d11b      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b10      	cmp	r3, #16
 800149c:	d111      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_ADC_ConfigChannel+0x23c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_ADC_ConfigChannel+0x240>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9a      	lsrs	r2, r3, #18
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014b4:	e002      	b.n	80014bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f9      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40012300 	.word	0x40012300
 80014dc:	40012000 	.word	0x40012000
 80014e0:	20000000 	.word	0x20000000
 80014e4:	431bde83 	.word	0x431bde83

080014e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f0:	4b79      	ldr	r3, [pc, #484]	@ (80016d8 <ADC_Init+0x1f0>)
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800151c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	021a      	lsls	r2, r3, #8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	4a58      	ldr	r2, [pc, #352]	@ (80016dc <ADC_Init+0x1f4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d022      	beq.n	80015c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800158e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6899      	ldr	r1, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6899      	ldr	r1, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	e00f      	b.n	80015e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0202 	bic.w	r2, r2, #2
 80015f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
 8001600:	005a      	lsls	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d01b      	beq.n	800164c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001622:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001632:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	3b01      	subs	r3, #1
 8001640:	035a      	lsls	r2, r3, #13
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	e007      	b.n	800165c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800165a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	3b01      	subs	r3, #1
 8001678:	051a      	lsls	r2, r3, #20
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6899      	ldr	r1, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800169e:	025a      	lsls	r2, r3, #9
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6899      	ldr	r1, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	029a      	lsls	r2, r3, #10
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40012300 	.word	0x40012300
 80016dc:	0f000001 	.word	0x0f000001

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff3e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff8e 	bl	80017d4 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5d 	bl	8001780 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff31 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff fc54 	bl	80011bc <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e099      	b.n	8001a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001940:	e00f      	b.n	8001962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001942:	f7ff fc3b 	bl	80011bc <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b05      	cmp	r3, #5
 800194e:	d908      	bls.n	8001962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e078      	b.n	8001a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e8      	bne.n	8001942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <HAL_DMA_Init+0x158>)
 800197c:	4013      	ands	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d107      	bne.n	80019cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	4313      	orrs	r3, r2
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f023 0307 	bic.w	r3, r3, #7
 80019e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d117      	bne.n	8001a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f9e9 	bl	8001de0 <DMA_CheckFifoParam>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a22:	2301      	movs	r3, #1
 8001a24:	e016      	b.n	8001a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f9a0 	bl	8001d74 <DMA_CalcBaseAndBitshift>
 8001a34:	4603      	mov	r3, r0
 8001a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	223f      	movs	r2, #63	@ 0x3f
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	f010803f 	.word	0xf010803f

08001a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca8 <HAL_DMA_IRQHandler+0x248>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a8e      	ldr	r2, [pc, #568]	@ (8001cac <HAL_DMA_IRQHandler+0x24c>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0a9b      	lsrs	r3, r3, #10
 8001a78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01a      	beq.n	8001acc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab8:	2208      	movs	r2, #8
 8001aba:	409a      	lsls	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aee:	2201      	movs	r2, #1
 8001af0:	409a      	lsls	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	f043 0202 	orr.w	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b06:	2204      	movs	r2, #4
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d012      	beq.n	8001b38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00b      	beq.n	8001b38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b24:	2204      	movs	r2, #4
 8001b26:	409a      	lsls	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b30:	f043 0204 	orr.w	r2, r3, #4
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d043      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d03c      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d018      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d024      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
 8001b8e:	e01f      	b.n	8001bd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01b      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
 8001ba0:	e016      	b.n	8001bd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0208 	bic.w	r2, r2, #8
 8001bbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 808f 	beq.w	8001d00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8087 	beq.w	8001d00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d136      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0216 	bic.w	r2, r2, #22
 8001c18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d103      	bne.n	8001c3a <HAL_DMA_IRQHandler+0x1da>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0208 	bic.w	r2, r2, #8
 8001c48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4e:	223f      	movs	r2, #63	@ 0x3f
 8001c50:	409a      	lsls	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d07e      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
        }
        return;
 8001c76:	e079      	b.n	8001d6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01d      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10d      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d031      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
 8001ca4:	e02c      	b.n	8001d00 <HAL_DMA_IRQHandler+0x2a0>
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d023      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
 8001cc0:	e01e      	b.n	8001d00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10f      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0210 	bic.w	r2, r2, #16
 8001cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d032      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2205      	movs	r2, #5
 8001d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d307      	bcc.n	8001d48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f2      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x2cc>
 8001d46:	e000      	b.n	8001d4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d6c:	bf00      	nop
    }
  }
}
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	3b10      	subs	r3, #16
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d8e:	4a13      	ldr	r2, [pc, #76]	@ (8001ddc <DMA_CalcBaseAndBitshift+0x68>)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d909      	bls.n	8001db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001daa:	f023 0303 	bic.w	r3, r3, #3
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001db4:	e007      	b.n	8001dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	aaaaaaab 	.word	0xaaaaaaab
 8001ddc:	0800a524 	.word	0x0800a524

08001de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11f      	bne.n	8001e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d856      	bhi.n	8001eae <DMA_CheckFifoParam+0xce>
 8001e00:	a201      	add	r2, pc, #4	@ (adr r2, 8001e08 <DMA_CheckFifoParam+0x28>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e2b 	.word	0x08001e2b
 8001e10:	08001e19 	.word	0x08001e19
 8001e14:	08001eaf 	.word	0x08001eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d046      	beq.n	8001eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e28:	e043      	b.n	8001eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e32:	d140      	bne.n	8001eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e38:	e03d      	b.n	8001eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e42:	d121      	bne.n	8001e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d837      	bhi.n	8001eba <DMA_CheckFifoParam+0xda>
 8001e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <DMA_CheckFifoParam+0x70>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001e61 	.word	0x08001e61
 8001e54:	08001e67 	.word	0x08001e67
 8001e58:	08001e61 	.word	0x08001e61
 8001e5c:	08001e79 	.word	0x08001e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e030      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d025      	beq.n	8001ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e76:	e022      	b.n	8001ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e80:	d11f      	bne.n	8001ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e86:	e01c      	b.n	8001ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d903      	bls.n	8001e96 <DMA_CheckFifoParam+0xb6>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d003      	beq.n	8001e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e94:	e018      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
      break;
 8001e9a:	e015      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8001eac:	e00b      	b.n	8001ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e00a      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e008      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e006      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
 8001ebc:	e004      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ebe:	bf00      	nop
 8001ec0:	e002      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ec2:	bf00      	nop
 8001ec4:	e000      	b.n	8001ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e16b      	b.n	80021cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 815a 	bne.w	80021c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d130      	bne.n	8001f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0201 	and.w	r2, r3, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d017      	beq.n	8001fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80b4 	beq.w	80021c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b60      	ldr	r3, [pc, #384]	@ (80021e4 <HAL_GPIO_Init+0x30c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	4a5f      	ldr	r2, [pc, #380]	@ (80021e4 <HAL_GPIO_Init+0x30c>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206c:	6453      	str	r3, [r2, #68]	@ 0x44
 800206e:	4b5d      	ldr	r3, [pc, #372]	@ (80021e4 <HAL_GPIO_Init+0x30c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207a:	4a5b      	ldr	r2, [pc, #364]	@ (80021e8 <HAL_GPIO_Init+0x310>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a52      	ldr	r2, [pc, #328]	@ (80021ec <HAL_GPIO_Init+0x314>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02b      	beq.n	80020fe <HAL_GPIO_Init+0x226>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a51      	ldr	r2, [pc, #324]	@ (80021f0 <HAL_GPIO_Init+0x318>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d025      	beq.n	80020fa <HAL_GPIO_Init+0x222>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a50      	ldr	r2, [pc, #320]	@ (80021f4 <HAL_GPIO_Init+0x31c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <HAL_GPIO_Init+0x21e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4f      	ldr	r2, [pc, #316]	@ (80021f8 <HAL_GPIO_Init+0x320>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x21a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4e      	ldr	r2, [pc, #312]	@ (80021fc <HAL_GPIO_Init+0x324>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x216>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002200 <HAL_GPIO_Init+0x328>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x212>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002204 <HAL_GPIO_Init+0x32c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x20e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002208 <HAL_GPIO_Init+0x330>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x20a>
 80020de:	2307      	movs	r3, #7
 80020e0:	e00e      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020e2:	2308      	movs	r3, #8
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002110:	4935      	ldr	r1, [pc, #212]	@ (80021e8 <HAL_GPIO_Init+0x310>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <HAL_GPIO_Init+0x334>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a32      	ldr	r2, [pc, #200]	@ (800220c <HAL_GPIO_Init+0x334>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b30      	ldr	r3, [pc, #192]	@ (800220c <HAL_GPIO_Init+0x334>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a27      	ldr	r2, [pc, #156]	@ (800220c <HAL_GPIO_Init+0x334>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002172:	4b26      	ldr	r3, [pc, #152]	@ (800220c <HAL_GPIO_Init+0x334>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002196:	4a1d      	ldr	r2, [pc, #116]	@ (800220c <HAL_GPIO_Init+0x334>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_GPIO_Init+0x334>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c0:	4a12      	ldr	r2, [pc, #72]	@ (800220c <HAL_GPIO_Init+0x334>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f ae90 	bls.w	8001ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3724      	adds	r7, #36	@ 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40021400 	.word	0x40021400
 8002204:	40021800 	.word	0x40021800
 8002208:	40021c00 	.word	0x40021c00
 800220c:	40013c00 	.word	0x40013c00

08002210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002220:	787b      	ldrb	r3, [r7, #1]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800222c:	e003      	b.n	8002236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	041a      	lsls	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	619a      	str	r2, [r3, #24]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af02      	add	r7, sp, #8
 8002248:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e059      	b.n	8002308 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f007 fd46 	bl	8009d00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002282:	d102      	bne.n	800228a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f004 fb53 	bl	800693a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7c1a      	ldrb	r2, [r3, #16]
 800229c:	f88d 2000 	strb.w	r2, [sp]
 80022a0:	3304      	adds	r3, #4
 80022a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a4:	f004 fad4 	bl	8006850 <USB_CoreInit>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2202      	movs	r2, #2
 80022b2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e026      	b.n	8002308 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 fb4b 	bl	800695c <USB_SetCurrentMode>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e017      	b.n	8002308 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7c1a      	ldrb	r2, [r3, #16]
 80022e0:	f88d 2000 	strb.w	r2, [sp]
 80022e4:	3304      	adds	r3, #4
 80022e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e8:	f004 fcf4 	bl	8006cd4 <USB_HostInit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e004      	b.n	8002308 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b08b      	sub	sp, #44	@ 0x2c
 8002314:	af04      	add	r7, sp, #16
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	70fb      	strb	r3, [r7, #3]
 8002322:	460b      	mov	r3, r1
 8002324:	70bb      	strb	r3, [r7, #2]
 8002326:	4613      	mov	r3, r2
 8002328:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800232a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800232c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_HCD_HC_Init+0x2c>
 8002338:	2302      	movs	r3, #2
 800233a:	e09d      	b.n	8002478 <HAL_HCD_HC_Init+0x168>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3319      	adds	r3, #25
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3314      	adds	r3, #20
 8002368:	787a      	ldrb	r2, [r7, #1]
 800236a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3315      	adds	r3, #21
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3326      	adds	r3, #38	@ 0x26
 8002390:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002394:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	78bb      	ldrb	r3, [r7, #2]
 800239a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800239e:	b2d8      	uxtb	r0, r3
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3316      	adds	r3, #22
 80023ae:	4602      	mov	r2, r0
 80023b0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fbc8 	bl	8002b4c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80023bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da0a      	bge.n	80023da <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3317      	adds	r3, #23
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e009      	b.n	80023ee <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3317      	adds	r3, #23
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fdd2 	bl	8006f9c <USB_GetHostSpeed>
 80023f8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80023fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10b      	bne.n	800241a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002402:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_HCD_HC_Init+0x10a>
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2bbc      	cmp	r3, #188	@ 0xbc
 8002414:	d901      	bls.n	800241a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002416:	23bc      	movs	r3, #188	@ 0xbc
 8002418:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3318      	adds	r3, #24
 800242a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800242e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	b298      	uxth	r0, r3
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3328      	adds	r3, #40	@ 0x28
 8002444:	4602      	mov	r2, r0
 8002446:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	b29b      	uxth	r3, r3
 8002450:	787c      	ldrb	r4, [r7, #1]
 8002452:	78ba      	ldrb	r2, [r7, #2]
 8002454:	78f9      	ldrb	r1, [r7, #3]
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4623      	mov	r3, r4
 8002466:	f004 fdc1 	bl	8006fec <USB_HC_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_HCD_HC_Halt+0x1e>
 800249a:	2302      	movs	r3, #2
 800249c:	e00f      	b.n	80024be <HAL_HCD_HC_Halt+0x3e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f005 f953 	bl	800775a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	70fb      	strb	r3, [r7, #3]
 80024da:	460b      	mov	r3, r1
 80024dc:	70bb      	strb	r3, [r7, #2]
 80024de:	4613      	mov	r3, r2
 80024e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3317      	adds	r3, #23
 80024f2:	78ba      	ldrb	r2, [r7, #2]
 80024f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3326      	adds	r3, #38	@ 0x26
 8002506:	787a      	ldrb	r2, [r7, #1]
 8002508:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800250a:	7c3b      	ldrb	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d114      	bne.n	800253a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	332a      	adds	r3, #42	@ 0x2a
 8002520:	2203      	movs	r2, #3
 8002522:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3319      	adds	r3, #25
 8002534:	7f3a      	ldrb	r2, [r7, #28]
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e009      	b.n	800254e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	332a      	adds	r3, #42	@ 0x2a
 800254a:	2202      	movs	r2, #2
 800254c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800254e:	787b      	ldrb	r3, [r7, #1]
 8002550:	2b03      	cmp	r3, #3
 8002552:	f200 8102 	bhi.w	800275a <HAL_HCD_HC_SubmitRequest+0x292>
 8002556:	a201      	add	r2, pc, #4	@ (adr r2, 800255c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002745 	.word	0x08002745
 8002564:	08002631 	.word	0x08002631
 8002568:	080026bb 	.word	0x080026bb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800256c:	7c3b      	ldrb	r3, [r7, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	f040 80f5 	bne.w	800275e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002574:	78bb      	ldrb	r3, [r7, #2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d12d      	bne.n	80025d6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800257a:	8b3b      	ldrh	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	333d      	adds	r3, #61	@ 0x3d
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	333d      	adds	r3, #61	@ 0x3d
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	332a      	adds	r3, #42	@ 0x2a
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80025be:	e0ce      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	332a      	adds	r3, #42	@ 0x2a
 80025d0:	2202      	movs	r2, #2
 80025d2:	701a      	strb	r2, [r3, #0]
      break;
 80025d4:	e0c3      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	331a      	adds	r3, #26
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 80b8 	bne.w	800275e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	333c      	adds	r3, #60	@ 0x3c
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	332a      	adds	r3, #42	@ 0x2a
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
      break;
 8002618:	e0a1      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	332a      	adds	r3, #42	@ 0x2a
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
      break;
 800262e:	e096      	b.n	800275e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002630:	78bb      	ldrb	r3, [r7, #2]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d120      	bne.n	8002678 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	333d      	adds	r3, #61	@ 0x3d
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	332a      	adds	r3, #42	@ 0x2a
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002660:	e07e      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	332a      	adds	r3, #42	@ 0x2a
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
      break;
 8002676:	e073      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	333c      	adds	r3, #60	@ 0x3c
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	332a      	adds	r3, #42	@ 0x2a
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
      break;
 80026a2:	e05d      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	332a      	adds	r3, #42	@ 0x2a
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
      break;
 80026b8:	e052      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026ba:	78bb      	ldrb	r3, [r7, #2]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d120      	bne.n	8002702 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	333d      	adds	r3, #61	@ 0x3d
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	332a      	adds	r3, #42	@ 0x2a
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ea:	e039      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	332a      	adds	r3, #42	@ 0x2a
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      break;
 8002700:	e02e      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	333c      	adds	r3, #60	@ 0x3c
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	332a      	adds	r3, #42	@ 0x2a
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
      break;
 800272c:	e018      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	332a      	adds	r3, #42	@ 0x2a
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
      break;
 8002742:	e00d      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	332a      	adds	r3, #42	@ 0x2a
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
      break;
 8002758:	e002      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800275e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	332c      	adds	r3, #44	@ 0x2c
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	8b39      	ldrh	r1, [r7, #24]
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4403      	add	r3, r0
 8002784:	3334      	adds	r3, #52	@ 0x34
 8002786:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	@ 0x4c
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3338      	adds	r3, #56	@ 0x38
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3315      	adds	r3, #21
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	334d      	adds	r3, #77	@ 0x4d
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	3310      	adds	r3, #16
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	1d19      	adds	r1, r3, #4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	799b      	ldrb	r3, [r3, #6]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f004 fd26 	bl	8007244 <USB_HC_StartXfer>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop

08002804 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fa14 	bl	8006c48 <USB_GetMode>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	f040 80fb 	bne.w	8002a1e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f004 f9d7 	bl	8006be0 <USB_ReadInterrupts>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80f1 	beq.w	8002a1c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 f9ce 	bl	8006be0 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800284e:	d104      	bne.n	800285a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002858:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f004 f9be 	bl	8006be0 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800286e:	d104      	bne.n	800287a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002878:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f004 f9ae 	bl	8006be0 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800288a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800288e:	d104      	bne.n	800289a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 f99e 	bl	8006be0 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d103      	bne.n	80028b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2202      	movs	r2, #2
 80028b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 f990 	bl	8006be0 <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028ca:	d120      	bne.n	800290e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80028d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d113      	bne.n	800290e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028e6:	2110      	movs	r1, #16
 80028e8:	6938      	ldr	r0, [r7, #16]
 80028ea:	f004 f883 	bl	80069f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028ee:	6938      	ldr	r0, [r7, #16]
 80028f0:	f004 f8b2 	bl	8006a58 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7a5b      	ldrb	r3, [r3, #9]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d105      	bne.n	8002908 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f004 faaa 	bl	8006e5c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f007 fa77 	bl	8009dfc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f004 f964 	bl	8006be0 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800291e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002922:	d102      	bne.n	800292a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 fd4d 	bl	80043c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f004 f956 	bl	8006be0 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b08      	cmp	r3, #8
 800293c:	d106      	bne.n	800294c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f007 fa40 	bl	8009dc4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2208      	movs	r2, #8
 800294a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f004 f945 	bl	8006be0 <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002960:	d139      	bne.n	80029d6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 fee6 	bl	8007738 <USB_HC_ReadInterrupt>
 800296c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e025      	b.n	80029c0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800299a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299e:	d106      	bne.n	80029ae <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f905 	bl	8002bb6 <HCD_HC_IN_IRQHandler>
 80029ac:	e005      	b.n	80029ba <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 ff67 	bl	8003888 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	795b      	ldrb	r3, [r3, #5]
 80029c4:	461a      	mov	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d3d3      	bcc.n	8002974 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 f900 	bl	8006be0 <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d101      	bne.n	80029ee <HAL_HCD_IRQHandler+0x1ea>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_HCD_IRQHandler+0x1ec>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d014      	beq.n	8002a1e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0210 	bic.w	r2, r2, #16
 8002a02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f001 fbfe 	bl	8004206 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0210 	orr.w	r2, r2, #16
 8002a18:	619a      	str	r2, [r3, #24]
 8002a1a:	e000      	b.n	8002a1e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002a1c:	bf00      	nop
    }
  }
}
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_HCD_Start+0x16>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e013      	b.n	8002a62 <HAL_HCD_Start+0x3e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fa6e 	bl	8006f2a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 ff60 	bl	8006918 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_HCD_Stop+0x16>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e00d      	b.n	8002a9c <HAL_HCD_Stop+0x32>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 ffc1 	bl	8007a14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 fa10 	bl	8006ed6 <USB_ResetPort>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334c      	adds	r3, #76	@ 0x4c
 8002adc:	781b      	ldrb	r3, [r3, #0]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3338      	adds	r3, #56	@ 0x38
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fa52 	bl	8006fca <USB_GetCurrentFrame>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 fa2d 	bl	8006f9c <USB_GetHostSpeed>
 8002b42:	4603      	mov	r3, r0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	331a      	adds	r3, #26
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	331b      	adds	r3, #27
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3325      	adds	r3, #37	@ 0x25
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3324      	adds	r3, #36	@ 0x24
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 f816 	bl	8006c06 <USB_ReadChInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d11a      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334d      	adds	r3, #77	@ 0x4d
 8002c06:	2207      	movs	r2, #7
 8002c08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 fda1 	bl	800775a <USB_HC_Halt>
 8002c18:	e09e      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 ffef 	bl	8006c06 <USB_ReadChInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c32:	d11b      	bne.n	8002c6c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334d      	adds	r3, #77	@ 0x4d
 8002c58:	2208      	movs	r2, #8
 8002c5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f004 fd78 	bl	800775a <USB_HC_Halt>
 8002c6a:	e075      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 ffc6 	bl	8006c06 <USB_ReadChInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11a      	bne.n	8002cba <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c90:	461a      	mov	r2, r3
 8002c92:	2308      	movs	r3, #8
 8002c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	334d      	adds	r3, #77	@ 0x4d
 8002ca6:	2206      	movs	r2, #6
 8002ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f004 fd51 	bl	800775a <USB_HC_Halt>
 8002cb8:	e04e      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 ff9f 	bl	8006c06 <USB_ReadChInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd2:	d11b      	bne.n	8002d0c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	@ 0x4d
 8002cf8:	2209      	movs	r2, #9
 8002cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fd28 	bl	800775a <USB_HC_Halt>
 8002d0a:	e025      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 ff76 	bl	8006c06 <USB_ReadChInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d20:	2b80      	cmp	r3, #128	@ 0x80
 8002d22:	d119      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	334d      	adds	r3, #77	@ 0x4d
 8002d46:	2207      	movs	r2, #7
 8002d48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 fd01 	bl	800775a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 ff50 	bl	8006c06 <USB_ReadChInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d70:	d112      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 fced 	bl	800775a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	f000 bd75 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 ff30 	bl	8006c06 <USB_ReadChInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 8128 	bne.w	8003002 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	331b      	adds	r3, #27
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d119      	bne.n	8002e0e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	331b      	adds	r3, #27
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	799b      	ldrb	r3, [r3, #6]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01b      	beq.n	8002e4e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3330      	adds	r3, #48	@ 0x30
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	1ac9      	subs	r1, r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4403      	add	r3, r0
 8002e4a:	3338      	adds	r3, #56	@ 0x38
 8002e4c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	334d      	adds	r3, #77	@ 0x4d
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3344      	adds	r3, #68	@ 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	2301      	movs	r3, #1
 8002e86:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3326      	adds	r3, #38	@ 0x26
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3326      	adds	r3, #38	@ 0x26
 8002eae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d110      	bne.n	8002ed6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fc4c 	bl	800775a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	6093      	str	r3, [r2, #8]
 8002ed4:	e03d      	b.n	8002f52 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3326      	adds	r3, #38	@ 0x26
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d00a      	beq.n	8002f02 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3326      	adds	r3, #38	@ 0x26
 8002efc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d127      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	0151      	lsls	r1, r2, #5
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	440a      	add	r2, r1
 8002f18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f20:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	334c      	adds	r3, #76	@ 0x4c
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	334c      	adds	r3, #76	@ 0x4c
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f006 ff63 	bl	8009e18 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	799b      	ldrb	r3, [r3, #6]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d13b      	bne.n	8002fd2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3338      	adds	r3, #56	@ 0x38
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4403      	add	r3, r0
 8002f7a:	3328      	adds	r3, #40	@ 0x28
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	440b      	add	r3, r1
 8002f80:	1e59      	subs	r1, r3, #1
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4403      	add	r3, r0
 8002f90:	3328      	adds	r3, #40	@ 0x28
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8470 	beq.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	333c      	adds	r3, #60	@ 0x3c
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2d8      	uxtb	r0, r3
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	333c      	adds	r3, #60	@ 0x3c
 8002fca:	4602      	mov	r2, r0
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	f000 bc58 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	333c      	adds	r3, #60	@ 0x3c
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333c      	adds	r3, #60	@ 0x3c
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	f000 bc40 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fdfb 	bl	8006c06 <USB_ReadChInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b20      	cmp	r3, #32
 8003018:	d131      	bne.n	800307e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	2320      	movs	r3, #32
 800302a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	331a      	adds	r3, #26
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 841f 	bne.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	331b      	adds	r3, #27
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	334d      	adds	r3, #77	@ 0x4d
 8003068:	2203      	movs	r2, #3
 800306a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f004 fb70 	bl	800775a <USB_HC_Halt>
 800307a:	f000 bc02 	b.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f003 fdbd 	bl	8006c06 <USB_ReadChInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	f040 8305 	bne.w	80036a2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2302      	movs	r3, #2
 80030a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334d      	adds	r3, #77	@ 0x4d
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d114      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	334d      	adds	r3, #77	@ 0x4d
 80030d0:	2202      	movs	r2, #2
 80030d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334c      	adds	r3, #76	@ 0x4c
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e2cc      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334d      	adds	r3, #77	@ 0x4d
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b06      	cmp	r3, #6
 80030fe:	d114      	bne.n	800312a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	334d      	adds	r3, #77	@ 0x4d
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334c      	adds	r3, #76	@ 0x4c
 8003124:	2205      	movs	r2, #5
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e2ac      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	@ 0x4d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b07      	cmp	r3, #7
 800313e:	d00b      	beq.n	8003158 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	334d      	adds	r3, #77	@ 0x4d
 8003150:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003152:	2b09      	cmp	r3, #9
 8003154:	f040 80a6 	bne.w	80032a4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	334d      	adds	r3, #77	@ 0x4d
 8003168:	2202      	movs	r2, #2
 800316a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3344      	adds	r3, #68	@ 0x44
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4403      	add	r3, r0
 800318c:	3344      	adds	r3, #68	@ 0x44
 800318e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3344      	adds	r3, #68	@ 0x44
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d943      	bls.n	800322e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3344      	adds	r3, #68	@ 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	331a      	adds	r3, #26
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d123      	bne.n	8003218 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	331b      	adds	r3, #27
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	331c      	adds	r3, #28
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	0151      	lsls	r1, r2, #5
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	440a      	add	r2, r1
 800320e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003216:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334c      	adds	r3, #76	@ 0x4c
 8003228:	2204      	movs	r2, #4
 800322a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800322c:	e229      	b.n	8003682 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334c      	adds	r3, #76	@ 0x4c
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3326      	adds	r3, #38	@ 0x26
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3326      	adds	r3, #38	@ 0x26
 8003268:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800326a:	2b02      	cmp	r3, #2
 800326c:	f040 8209 	bne.w	8003682 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003286:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800328e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a2:	e1ee      	b.n	8003682 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	f040 80c8 	bne.w	800344c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	@ 0x4d
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	331b      	adds	r3, #27
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 81ce 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3326      	adds	r3, #38	@ 0x26
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d16b      	bne.n	80033d6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3348      	adds	r3, #72	@ 0x48
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	3348      	adds	r3, #72	@ 0x48
 8003320:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3348      	adds	r3, #72	@ 0x48
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d943      	bls.n	80033c0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3348      	adds	r3, #72	@ 0x48
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	331b      	adds	r3, #27
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3344      	adds	r3, #68	@ 0x44
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d809      	bhi.n	800338a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	331c      	adds	r3, #28
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334c      	adds	r3, #76	@ 0x4c
 80033ba:	2204      	movs	r2, #4
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e014      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	334c      	adds	r3, #76	@ 0x4c
 80033d0:	2202      	movs	r2, #2
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e009      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334c      	adds	r3, #76	@ 0x4c
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3326      	adds	r3, #38	@ 0x26
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3326      	adds	r3, #38	@ 0x26
 8003410:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003412:	2b02      	cmp	r3, #2
 8003414:	f040 8136 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800342e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003436:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e11b      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	@ 0x4d
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b03      	cmp	r3, #3
 8003460:	f040 8081 	bne.w	8003566 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334d      	adds	r3, #77	@ 0x4d
 8003474:	2202      	movs	r2, #2
 8003476:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	331b      	adds	r3, #27
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	f040 80fa 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	@ 0x4c
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	0151      	lsls	r1, r2, #5
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	440a      	add	r2, r1
 80034da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034e2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	0151      	lsls	r1, r2, #5
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	440a      	add	r2, r1
 80034fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034fe:	f023 0320 	bic.w	r3, r3, #32
 8003502:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3326      	adds	r3, #38	@ 0x26
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3326      	adds	r3, #38	@ 0x26
 800352a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800352c:	2b02      	cmp	r3, #2
 800352e:	f040 80a9 	bne.w	8003684 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003548:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003550:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e08e      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	@ 0x4d
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d143      	bne.n	8003604 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334d      	adds	r3, #77	@ 0x4d
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334c      	adds	r3, #76	@ 0x4c
 80035a0:	2202      	movs	r2, #2
 80035a2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3326      	adds	r3, #38	@ 0x26
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3326      	adds	r3, #38	@ 0x26
 80035ca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d159      	bne.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035e6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035ee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e03f      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	334d      	adds	r3, #77	@ 0x4d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b08      	cmp	r3, #8
 8003618:	d126      	bne.n	8003668 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	334d      	adds	r3, #77	@ 0x4d
 800362a:	2202      	movs	r2, #2
 800362c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3344      	adds	r3, #68	@ 0x44
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	3344      	adds	r3, #68	@ 0x44
 8003650:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334c      	adds	r3, #76	@ 0x4c
 8003662:	2204      	movs	r2, #4
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e00d      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334d      	adds	r3, #77	@ 0x4d
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	f000 8100 	beq.w	8003880 <HCD_HC_IN_IRQHandler+0xcca>
 8003680:	e000      	b.n	8003684 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003682:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	334c      	adds	r3, #76	@ 0x4c
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f006 fbbc 	bl	8009e18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036a0:	e0ef      	b.n	8003882 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 faab 	bl	8006c06 <USB_ReadChInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b40      	cmp	r3, #64	@ 0x40
 80036b8:	d12f      	bne.n	800371a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c6:	461a      	mov	r2, r3
 80036c8:	2340      	movs	r3, #64	@ 0x40
 80036ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334d      	adds	r3, #77	@ 0x4d
 80036dc:	2205      	movs	r2, #5
 80036de:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	331a      	adds	r3, #26
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3344      	adds	r3, #68	@ 0x44
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f004 f821 	bl	800775a <USB_HC_Halt>
 8003718:	e0b3      	b.n	8003882 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f003 fa6f 	bl	8006c06 <USB_ReadChInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	f040 80a7 	bne.w	8003882 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3326      	adds	r3, #38	@ 0x26
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d11b      	bne.n	8003782 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3344      	adds	r3, #68	@ 0x44
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	334d      	adds	r3, #77	@ 0x4d
 800376e:	2204      	movs	r2, #4
 8003770:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f003 ffed 	bl	800775a <USB_HC_Halt>
 8003780:	e03f      	b.n	8003802 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3326      	adds	r3, #38	@ 0x26
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	3326      	adds	r3, #38	@ 0x26
 80037a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d129      	bne.n	8003802 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3344      	adds	r3, #68	@ 0x44
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	799b      	ldrb	r3, [r3, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HCD_HC_IN_IRQHandler+0xc2a>
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	331b      	adds	r3, #27
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	@ 0x4d
 80037f0:	2204      	movs	r2, #4
 80037f2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 ffac 	bl	800775a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	331b      	adds	r3, #27
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d129      	bne.n	800386c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	331b      	adds	r3, #27
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	440a      	add	r2, r1
 8003842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	440a      	add	r2, r1
 8003862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003866:	f043 0320 	orr.w	r3, r3, #32
 800386a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	2310      	movs	r3, #16
 800387c:	6093      	str	r3, [r2, #8]
 800387e:	e000      	b.n	8003882 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003880:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f003 f9ad 	bl	8006c06 <USB_ReadChInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d11b      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c2:	461a      	mov	r2, r3
 80038c4:	2304      	movs	r3, #4
 80038c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	334d      	adds	r3, #77	@ 0x4d
 80038d8:	2207      	movs	r2, #7
 80038da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 ff38 	bl	800775a <USB_HC_Halt>
 80038ea:	f000 bc89 	b.w	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 f985 	bl	8006c06 <USB_ReadChInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b20      	cmp	r3, #32
 8003904:	f040 8082 	bne.w	8003a0c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003914:	461a      	mov	r2, r3
 8003916:	2320      	movs	r3, #32
 8003918:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3319      	adds	r3, #25
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d124      	bne.n	800397a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3319      	adds	r3, #25
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334c      	adds	r3, #76	@ 0x4c
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	334d      	adds	r3, #77	@ 0x4d
 8003968:	2203      	movs	r2, #3
 800396a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fef0 	bl	800775a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	331a      	adds	r3, #26
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	f040 8437 	bne.w	8004200 <HCD_HC_OUT_IRQHandler+0x978>
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	331b      	adds	r3, #27
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 842b 	bne.w	8004200 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3326      	adds	r3, #38	@ 0x26
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d009      	beq.n	80039d4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	331b      	adds	r3, #27
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	334d      	adds	r3, #77	@ 0x4d
 80039e4:	2203      	movs	r2, #3
 80039e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 feb2 	bl	800775a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3344      	adds	r3, #68	@ 0x44
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e3f9      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 f8f6 	bl	8006c06 <USB_ReadChInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a24:	d111      	bne.n	8003a4a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a32:	461a      	mov	r2, r3
 8003a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 fe89 	bl	800775a <USB_HC_Halt>
 8003a48:	e3da      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 f8d7 	bl	8006c06 <USB_ReadChInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d168      	bne.n	8003b34 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3344      	adds	r3, #68	@ 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 f8c1 	bl	8006c06 <USB_ReadChInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8a:	2b40      	cmp	r3, #64	@ 0x40
 8003a8c:	d112      	bne.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3319      	adds	r3, #25
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2340      	movs	r3, #64	@ 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	331b      	adds	r3, #27
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	331b      	adds	r3, #27
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334d      	adds	r3, #77	@ 0x4d
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 fe14 	bl	800775a <USB_HC_Halt>
 8003b32:	e365      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 f862 	bl	8006c06 <USB_ReadChInterrupts>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	d139      	bne.n	8003bc0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	334d      	adds	r3, #77	@ 0x4d
 8003b5c:	2205      	movs	r2, #5
 8003b5e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	331a      	adds	r3, #26
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3319      	adds	r3, #25
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	3344      	adds	r3, #68	@ 0x44
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fdd7 	bl	800775a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2340      	movs	r3, #64	@ 0x40
 8003bbc:	6093      	str	r3, [r2, #8]
 8003bbe:	e31f      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 f81c 	bl	8006c06 <USB_ReadChInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d11a      	bne.n	8003c0e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be4:	461a      	mov	r2, r3
 8003be6:	2308      	movs	r3, #8
 8003be8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	@ 0x4d
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f003 fda7 	bl	800775a <USB_HC_Halt>
 8003c0c:	e2f8      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f002 fff5 	bl	8006c06 <USB_ReadChInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d144      	bne.n	8003cb0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	3344      	adds	r3, #68	@ 0x44
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334d      	adds	r3, #77	@ 0x4d
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3319      	adds	r3, #25
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d114      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3318      	adds	r3, #24
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3319      	adds	r3, #25
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 fd5f 	bl	800775a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2310      	movs	r3, #16
 8003cac:	6093      	str	r3, [r2, #8]
 8003cae:	e2a7      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 ffa4 	bl	8006c06 <USB_ReadChInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	f040 8083 	bne.w	8003dd0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	799b      	ldrb	r3, [r3, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d111      	bne.n	8003cf6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	@ 0x4d
 8003ce2:	2207      	movs	r2, #7
 8003ce4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 fd33 	bl	800775a <USB_HC_Halt>
 8003cf4:	e062      	b.n	8003dbc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3344      	adds	r3, #68	@ 0x44
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1c59      	adds	r1, r3, #1
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	3344      	adds	r3, #68	@ 0x44
 8003d18:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3344      	adds	r3, #68	@ 0x44
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d922      	bls.n	8003d76 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3344      	adds	r3, #68	@ 0x44
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	334c      	adds	r3, #76	@ 0x4c
 8003d54:	2204      	movs	r2, #4
 8003d56:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	334c      	adds	r3, #76	@ 0x4c
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f006 f852 	bl	8009e18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d74:	e022      	b.n	8003dbc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334c      	adds	r3, #76	@ 0x4c
 8003d86:	2202      	movs	r2, #2
 8003d88:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003da0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003da8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	6093      	str	r3, [r2, #8]
 8003dce:	e217      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 ff14 	bl	8006c06 <USB_ReadChInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de8:	d11b      	bne.n	8003e22 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	334d      	adds	r3, #77	@ 0x4d
 8003dfa:	2209      	movs	r2, #9
 8003dfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 fca7 	bl	800775a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e1e:	6093      	str	r3, [r2, #8]
 8003e20:	e1ee      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f002 feeb 	bl	8006c06 <USB_ReadChInterrupts>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	f040 81df 	bne.w	80041fa <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	334d      	adds	r3, #77	@ 0x4d
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 8093 	bne.w	8003f8c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	334d      	adds	r3, #77	@ 0x4d
 8003e76:	2202      	movs	r2, #2
 8003e78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334c      	adds	r3, #76	@ 0x4c
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3326      	adds	r3, #38	@ 0x26
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d00b      	beq.n	8003ebc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3326      	adds	r3, #38	@ 0x26
 8003eb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	f040 8190 	bne.w	80041dc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	799b      	ldrb	r3, [r3, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d115      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	333d      	adds	r3, #61	@ 0x3d
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	f083 0301 	eor.w	r3, r3, #1
 8003edc:	b2d8      	uxtb	r0, r3
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	333d      	adds	r3, #61	@ 0x3d
 8003eec:	4602      	mov	r2, r0
 8003eee:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	799b      	ldrb	r3, [r3, #6]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	f040 8171 	bne.w	80041dc <HCD_HC_OUT_IRQHandler+0x954>
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	3334      	adds	r3, #52	@ 0x34
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8165 	beq.w	80041dc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	3334      	adds	r3, #52	@ 0x34
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4403      	add	r3, r0
 8003f32:	3328      	adds	r3, #40	@ 0x28
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	440b      	add	r3, r1
 8003f38:	1e59      	subs	r1, r3, #1
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4403      	add	r3, r0
 8003f48:	3328      	adds	r3, #40	@ 0x28
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f50:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 813f 	beq.w	80041dc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	333d      	adds	r3, #61	@ 0x3d
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	f083 0301 	eor.w	r3, r3, #1
 8003f76:	b2d8      	uxtb	r0, r3
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	333d      	adds	r3, #61	@ 0x3d
 8003f86:	4602      	mov	r2, r0
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e127      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	334d      	adds	r3, #77	@ 0x4d
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d120      	bne.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	334d      	adds	r3, #77	@ 0x4d
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	331b      	adds	r3, #27
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 8107 	bne.w	80041dc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	334c      	adds	r3, #76	@ 0x4c
 8003fde:	2202      	movs	r2, #2
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e0fb      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334d      	adds	r3, #77	@ 0x4d
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d13a      	bne.n	8004070 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334d      	adds	r3, #77	@ 0x4d
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	334c      	adds	r3, #76	@ 0x4c
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	331b      	adds	r3, #27
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	f040 80d1 	bne.w	80041dc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	331b      	adds	r3, #27
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	440a      	add	r2, r1
 8004064:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406c:	6053      	str	r3, [r2, #4]
 800406e:	e0b5      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	334d      	adds	r3, #77	@ 0x4d
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d114      	bne.n	80040b0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	334d      	adds	r3, #77	@ 0x4d
 8004096:	2202      	movs	r2, #2
 8004098:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	334c      	adds	r3, #76	@ 0x4c
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e095      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	334d      	adds	r3, #77	@ 0x4d
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d114      	bne.n	80040f0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334d      	adds	r3, #77	@ 0x4d
 80040d6:	2202      	movs	r2, #2
 80040d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	334c      	adds	r3, #76	@ 0x4c
 80040ea:	2205      	movs	r2, #5
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e075      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	334d      	adds	r3, #77	@ 0x4d
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b07      	cmp	r3, #7
 8004104:	d00a      	beq.n	800411c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	334d      	adds	r3, #77	@ 0x4d
 8004116:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004118:	2b09      	cmp	r3, #9
 800411a:	d170      	bne.n	80041fe <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	334d      	adds	r3, #77	@ 0x4d
 800412c:	2202      	movs	r2, #2
 800412e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3344      	adds	r3, #68	@ 0x44
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	1c59      	adds	r1, r3, #1
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	3344      	adds	r3, #68	@ 0x44
 8004152:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3344      	adds	r3, #68	@ 0x44
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d914      	bls.n	8004194 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	3344      	adds	r3, #68	@ 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	334c      	adds	r3, #76	@ 0x4c
 800418e:	2204      	movs	r2, #4
 8004190:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004192:	e022      	b.n	80041da <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	334c      	adds	r3, #76	@ 0x4c
 80041a4:	2202      	movs	r2, #2
 80041a6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d4:	461a      	mov	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	334c      	adds	r3, #76	@ 0x4c
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f005 fe10 	bl	8009e18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041f8:	e002      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80041fe:	bf00      	nop
  }
}
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	@ 0x28
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	0c5b      	lsrs	r3, r3, #17
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d004      	beq.n	800424c <HCD_RXQLVL_IRQHandler+0x46>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b05      	cmp	r3, #5
 8004246:	f000 80b6 	beq.w	80043b6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800424a:	e0b7      	b.n	80043bc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80b3 	beq.w	80043ba <HCD_RXQLVL_IRQHandler+0x1b4>
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	332c      	adds	r3, #44	@ 0x2c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80a7 	beq.w	80043ba <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	3338      	adds	r3, #56	@ 0x38
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	18d1      	adds	r1, r2, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4403      	add	r3, r0
 8004290:	3334      	adds	r3, #52	@ 0x34
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4299      	cmp	r1, r3
 8004296:	f200 8083 	bhi.w	80043a0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	332c      	adds	r3, #44	@ 0x2c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	b292      	uxth	r2, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f002 fc3b 	bl	8006b30 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	332c      	adds	r3, #44	@ 0x2c
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	18d1      	adds	r1, r2, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4403      	add	r3, r0
 80042de:	332c      	adds	r3, #44	@ 0x2c
 80042e0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3338      	adds	r3, #56	@ 0x38
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	18d1      	adds	r1, r2, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4403      	add	r3, r0
 8004306:	3338      	adds	r3, #56	@ 0x38
 8004308:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	0cdb      	lsrs	r3, r3, #19
 800431a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800431e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	3328      	adds	r3, #40	@ 0x28
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4293      	cmp	r3, r2
 8004338:	d13f      	bne.n	80043ba <HCD_RXQLVL_IRQHandler+0x1b4>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d03c      	beq.n	80043ba <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004356:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800435e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	333c      	adds	r3, #60	@ 0x3c
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f083 0301 	eor.w	r3, r3, #1
 8004388:	b2d8      	uxtb	r0, r3
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	333c      	adds	r3, #60	@ 0x3c
 800439a:	4602      	mov	r2, r0
 800439c:	701a      	strb	r2, [r3, #0]
      break;
 800439e:	e00c      	b.n	80043ba <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	334c      	adds	r3, #76	@ 0x4c
 80043b0:	2204      	movs	r2, #4
 80043b2:	701a      	strb	r2, [r3, #0]
      break;
 80043b4:	e001      	b.n	80043ba <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80043ba:	bf00      	nop
  }
}
 80043bc:	bf00      	nop
 80043be:	3728      	adds	r7, #40	@ 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80043f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d10b      	bne.n	8004414 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f005 fcea 	bl	8009de0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b08      	cmp	r3, #8
 800441c:	d132      	bne.n	8004484 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d126      	bne.n	800447e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7a5b      	ldrb	r3, [r3, #9]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d113      	bne.n	8004460 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800443e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004442:	d106      	bne.n	8004452 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f002 fd06 	bl	8006e5c <USB_InitFSLSPClkSel>
 8004450:	e011      	b.n	8004476 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	4618      	mov	r0, r3
 800445a:	f002 fcff 	bl	8006e5c <USB_InitFSLSPClkSel>
 800445e:	e00a      	b.n	8004476 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	79db      	ldrb	r3, [r3, #7]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800446e:	461a      	mov	r2, r3
 8004470:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004474:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f005 fcdc 	bl	8009e34 <HAL_HCD_PortEnabled_Callback>
 800447c:	e002      	b.n	8004484 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f005 fce6 	bl	8009e50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b20      	cmp	r3, #32
 800448c:	d103      	bne.n	8004496 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f043 0320 	orr.w	r3, r3, #32
 8004494:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800449c:	461a      	mov	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6013      	str	r3, [r2, #0]
}
 80044a2:	bf00      	nop
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e12b      	b.n	8004716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fbea 	bl	8000cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	@ 0x24
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800450e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004510:	f001 fa20 	bl	8005954 <HAL_RCC_GetPCLK1Freq>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a81      	ldr	r2, [pc, #516]	@ (8004720 <HAL_I2C_Init+0x274>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d807      	bhi.n	8004530 <HAL_I2C_Init+0x84>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a80      	ldr	r2, [pc, #512]	@ (8004724 <HAL_I2C_Init+0x278>)
 8004524:	4293      	cmp	r3, r2
 8004526:	bf94      	ite	ls
 8004528:	2301      	movls	r3, #1
 800452a:	2300      	movhi	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e006      	b.n	800453e <HAL_I2C_Init+0x92>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a7d      	ldr	r2, [pc, #500]	@ (8004728 <HAL_I2C_Init+0x27c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	bf94      	ite	ls
 8004538:	2301      	movls	r3, #1
 800453a:	2300      	movhi	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0e7      	b.n	8004716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a78      	ldr	r2, [pc, #480]	@ (800472c <HAL_I2C_Init+0x280>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0c9b      	lsrs	r3, r3, #18
 8004550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a6a      	ldr	r2, [pc, #424]	@ (8004720 <HAL_I2C_Init+0x274>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d802      	bhi.n	8004580 <HAL_I2C_Init+0xd4>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3301      	adds	r3, #1
 800457e:	e009      	b.n	8004594 <HAL_I2C_Init+0xe8>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	4a69      	ldr	r2, [pc, #420]	@ (8004730 <HAL_I2C_Init+0x284>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	099b      	lsrs	r3, r3, #6
 8004592:	3301      	adds	r3, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	430b      	orrs	r3, r1
 800459a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	495c      	ldr	r1, [pc, #368]	@ (8004720 <HAL_I2C_Init+0x274>)
 80045b0:	428b      	cmp	r3, r1
 80045b2:	d819      	bhi.n	80045e8 <HAL_I2C_Init+0x13c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e59      	subs	r1, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045c8:	400b      	ands	r3, r1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_I2C_Init+0x138>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1e59      	subs	r1, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045dc:	3301      	adds	r3, #1
 80045de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e2:	e051      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 80045e4:	2304      	movs	r3, #4
 80045e6:	e04f      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d111      	bne.n	8004614 <HAL_I2C_Init+0x168>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	440b      	add	r3, r1
 80045fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004602:	3301      	adds	r3, #1
 8004604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e012      	b.n	800463a <HAL_I2C_Init+0x18e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	0099      	lsls	r1, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	fbb0 f3f3 	udiv	r3, r0, r3
 800462a:	3301      	adds	r3, #1
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Init+0x196>
 800463e:	2301      	movs	r3, #1
 8004640:	e022      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <HAL_I2C_Init+0x1bc>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e58      	subs	r0, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	440b      	add	r3, r1
 8004658:	fbb0 f3f3 	udiv	r3, r0, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004666:	e00f      	b.n	8004688 <HAL_I2C_Init+0x1dc>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e58      	subs	r0, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	0099      	lsls	r1, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	6809      	ldr	r1, [r1, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6911      	ldr	r1, [r2, #16]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68d2      	ldr	r2, [r2, #12]
 80046c2:	4311      	orrs	r1, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	000186a0 	.word	0x000186a0
 8004724:	001e847f 	.word	0x001e847f
 8004728:	003d08ff 	.word	0x003d08ff
 800472c:	431bde83 	.word	0x431bde83
 8004730:	10624dd3 	.word	0x10624dd3

08004734 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e128      	b.n	8004998 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a90      	ldr	r2, [pc, #576]	@ (80049a0 <HAL_I2S_Init+0x26c>)
 800475e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fc faeb 	bl	8000d3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800477c:	f023 030f 	bic.w	r3, r3, #15
 8004780:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2202      	movs	r2, #2
 8004788:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d060      	beq.n	8004854 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800479a:	2310      	movs	r3, #16
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e001      	b.n	80047a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80047a0:	2320      	movs	r3, #32
 80047a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d802      	bhi.n	80047b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80047b2:	2001      	movs	r0, #1
 80047b4:	f001 f9c4 	bl	8005b40 <HAL_RCCEx_GetPeriphCLKFreq>
 80047b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c2:	d125      	bne.n	8004810 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	3305      	adds	r3, #5
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e01f      	b.n	800482e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	3305      	adds	r3, #5
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e00e      	b.n	800482e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fbb2 f2f3 	udiv	r2, r2, r3
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	3305      	adds	r3, #5
 800482c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4a5c      	ldr	r2, [pc, #368]	@ (80049a4 <HAL_I2S_Init+0x270>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	08db      	lsrs	r3, r3, #3
 8004838:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e003      	b.n	800485c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004854:	2302      	movs	r3, #2
 8004856:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d902      	bls.n	8004868 <HAL_I2S_Init+0x134>
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2bff      	cmp	r3, #255	@ 0xff
 8004866:	d907      	bls.n	8004878 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486c:	f043 0210 	orr.w	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e08f      	b.n	8004998 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	ea42 0103 	orr.w	r1, r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	430a      	orrs	r2, r1
 800488a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004896:	f023 030f 	bic.w	r3, r3, #15
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6851      	ldr	r1, [r2, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6892      	ldr	r2, [r2, #8]
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68d2      	ldr	r2, [r2, #12]
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6992      	ldr	r2, [r2, #24]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d161      	bne.n	8004988 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a38      	ldr	r2, [pc, #224]	@ (80049a8 <HAL_I2S_Init+0x274>)
 80048c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a37      	ldr	r2, [pc, #220]	@ (80049ac <HAL_I2S_Init+0x278>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_I2S_Init+0x1a4>
 80048d4:	4b36      	ldr	r3, [pc, #216]	@ (80049b0 <HAL_I2S_Init+0x27c>)
 80048d6:	e001      	b.n	80048dc <HAL_I2S_Init+0x1a8>
 80048d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	4932      	ldr	r1, [pc, #200]	@ (80049ac <HAL_I2S_Init+0x278>)
 80048e4:	428a      	cmp	r2, r1
 80048e6:	d101      	bne.n	80048ec <HAL_I2S_Init+0x1b8>
 80048e8:	4a31      	ldr	r2, [pc, #196]	@ (80049b0 <HAL_I2S_Init+0x27c>)
 80048ea:	e001      	b.n	80048f0 <HAL_I2S_Init+0x1bc>
 80048ec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80048f0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80048f4:	f023 030f 	bic.w	r3, r3, #15
 80048f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2b      	ldr	r2, [pc, #172]	@ (80049ac <HAL_I2S_Init+0x278>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_I2S_Init+0x1d4>
 8004904:	4b2a      	ldr	r3, [pc, #168]	@ (80049b0 <HAL_I2S_Init+0x27c>)
 8004906:	e001      	b.n	800490c <HAL_I2S_Init+0x1d8>
 8004908:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800490c:	2202      	movs	r2, #2
 800490e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a25      	ldr	r2, [pc, #148]	@ (80049ac <HAL_I2S_Init+0x278>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d101      	bne.n	800491e <HAL_I2S_Init+0x1ea>
 800491a:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <HAL_I2S_Init+0x27c>)
 800491c:	e001      	b.n	8004922 <HAL_I2S_Init+0x1ee>
 800491e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492e:	d003      	beq.n	8004938 <HAL_I2S_Init+0x204>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d103      	bne.n	8004940 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e001      	b.n	8004944 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800494e:	4313      	orrs	r3, r2
 8004950:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004958:	4313      	orrs	r3, r2
 800495a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004962:	4313      	orrs	r3, r2
 8004964:	b29a      	uxth	r2, r3
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	4313      	orrs	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004970:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a0d      	ldr	r2, [pc, #52]	@ (80049ac <HAL_I2S_Init+0x278>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_I2S_Init+0x24c>
 800497c:	4b0c      	ldr	r3, [pc, #48]	@ (80049b0 <HAL_I2S_Init+0x27c>)
 800497e:	e001      	b.n	8004984 <HAL_I2S_Init+0x250>
 8004980:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004984:	897a      	ldrh	r2, [r7, #10]
 8004986:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	08004aab 	.word	0x08004aab
 80049a4:	cccccccd 	.word	0xcccccccd
 80049a8:	08004bc1 	.word	0x08004bc1
 80049ac:	40003800 	.word	0x40003800
 80049b0:	40003400 	.word	0x40003400

080049b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10e      	bne.n	8004a44 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff ffb8 	bl	80049b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10e      	bne.n	8004aa2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff93 	bl	80049c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b086      	sub	sp, #24
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d13a      	bne.n	8004b3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d109      	bne.n	8004ae4 <I2S_IRQHandler+0x3a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b40      	cmp	r3, #64	@ 0x40
 8004adc:	d102      	bne.n	8004ae4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ffb4 	bl	8004a4c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d126      	bne.n	8004b3c <I2S_IRQHandler+0x92>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d11f      	bne.n	8004b3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	f043 0202 	orr.w	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ff50 	bl	80049dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d136      	bne.n	8004bb6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d109      	bne.n	8004b66 <I2S_IRQHandler+0xbc>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5c:	2b80      	cmp	r3, #128	@ 0x80
 8004b5e:	d102      	bne.n	8004b66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ff45 	bl	80049f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d122      	bne.n	8004bb6 <I2S_IRQHandler+0x10c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d11b      	bne.n	8004bb6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba8:	f043 0204 	orr.w	r2, r3, #4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff13 	bl	80049dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a92      	ldr	r2, [pc, #584]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004bda:	4b92      	ldr	r3, [pc, #584]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bdc:	e001      	b.n	8004be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004bde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a8b      	ldr	r2, [pc, #556]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bfa:	e001      	b.n	8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004bfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c0c:	d004      	beq.n	8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f040 8099 	bne.w	8004d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d107      	bne.n	8004c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f925 	bl	8004e7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d107      	bne.n	8004c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9c8 	bl	8004fdc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d13a      	bne.n	8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d035      	beq.n	8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a6e      	ldr	r2, [pc, #440]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c6c:	e001      	b.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4969      	ldr	r1, [pc, #420]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c7a:	428b      	cmp	r3, r1
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c7e:	4b69      	ldr	r3, [pc, #420]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c80:	e001      	b.n	8004c86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	f043 0202 	orr.w	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff fe88 	bl	80049dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	f040 80c3 	bne.w	8004e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80bd 	beq.w	8004e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cf2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a49      	ldr	r2, [pc, #292]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004cfe:	4b49      	ldr	r3, [pc, #292]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d00:	e001      	b.n	8004d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4944      	ldr	r1, [pc, #272]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d0e:	428b      	cmp	r3, r1
 8004d10:	d101      	bne.n	8004d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d12:	4b44      	ldr	r3, [pc, #272]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d14:	e001      	b.n	8004d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d1e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	f043 0204 	orr.w	r2, r3, #4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fe4a 	bl	80049dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d48:	e089      	b.n	8004e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d107      	bne.n	8004d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8be 	bl	8004ee0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f8fd 	bl	8004f78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d12f      	bne.n	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02a      	beq.n	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004da0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004dac:	4b1d      	ldr	r3, [pc, #116]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dae:	e001      	b.n	8004db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004db0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4919      	ldr	r1, [pc, #100]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004dc0:	4b18      	ldr	r3, [pc, #96]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dc2:	e001      	b.n	8004dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dc8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004dcc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f043 0202 	orr.w	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff fdfa 	bl	80049dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d136      	bne.n	8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d031      	beq.n	8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a07      	ldr	r2, [pc, #28]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e06:	4b07      	ldr	r3, [pc, #28]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e08:	e001      	b.n	8004e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4902      	ldr	r1, [pc, #8]	@ (8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e16:	428b      	cmp	r3, r1
 8004e18:	d106      	bne.n	8004e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e1a:	4b02      	ldr	r3, [pc, #8]	@ (8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e1c:	e006      	b.n	8004e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e1e:	bf00      	nop
 8004e20:	40003800 	.word	0x40003800
 8004e24:	40003400 	.word	0x40003400
 8004e28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e30:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fdc0 	bl	80049dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e5c:	e000      	b.n	8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e5e:	bf00      	nop
}
 8004e60:	bf00      	nop
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	1c99      	adds	r1, r3, #2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d113      	bne.n	8004ed6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ebc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ffc9 	bl	8004e68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	1c99      	adds	r1, r3, #2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ef2:	8819      	ldrh	r1, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <I2SEx_TxISR_I2SExt+0x90>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <I2SEx_TxISR_I2SExt+0x22>
 8004efe:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <I2SEx_TxISR_I2SExt+0x94>)
 8004f00:	e001      	b.n	8004f06 <I2SEx_TxISR_I2SExt+0x26>
 8004f02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f06:	460a      	mov	r2, r1
 8004f08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d121      	bne.n	8004f66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a12      	ldr	r2, [pc, #72]	@ (8004f70 <I2SEx_TxISR_I2SExt+0x90>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <I2SEx_TxISR_I2SExt+0x50>
 8004f2c:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <I2SEx_TxISR_I2SExt+0x94>)
 8004f2e:	e001      	b.n	8004f34 <I2SEx_TxISR_I2SExt+0x54>
 8004f30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	490d      	ldr	r1, [pc, #52]	@ (8004f70 <I2SEx_TxISR_I2SExt+0x90>)
 8004f3c:	428b      	cmp	r3, r1
 8004f3e:	d101      	bne.n	8004f44 <I2SEx_TxISR_I2SExt+0x64>
 8004f40:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <I2SEx_TxISR_I2SExt+0x94>)
 8004f42:	e001      	b.n	8004f48 <I2SEx_TxISR_I2SExt+0x68>
 8004f44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ff81 	bl	8004e68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40003800 	.word	0x40003800
 8004f74:	40003400 	.word	0x40003400

08004f78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68d8      	ldr	r0, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	1c99      	adds	r1, r3, #2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004f90:	b282      	uxth	r2, r0
 8004f92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d113      	bne.n	8004fd4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ff4a 	bl	8004e68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a20      	ldr	r2, [pc, #128]	@ (800506c <I2SEx_RxISR_I2SExt+0x90>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d101      	bne.n	8004ff2 <I2SEx_RxISR_I2SExt+0x16>
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <I2SEx_RxISR_I2SExt+0x94>)
 8004ff0:	e001      	b.n	8004ff6 <I2SEx_RxISR_I2SExt+0x1a>
 8004ff2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ff6:	68d8      	ldr	r0, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	1c99      	adds	r1, r3, #2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005002:	b282      	uxth	r2, r0
 8005004:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d121      	bne.n	8005062 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a12      	ldr	r2, [pc, #72]	@ (800506c <I2SEx_RxISR_I2SExt+0x90>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <I2SEx_RxISR_I2SExt+0x50>
 8005028:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <I2SEx_RxISR_I2SExt+0x94>)
 800502a:	e001      	b.n	8005030 <I2SEx_RxISR_I2SExt+0x54>
 800502c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	490d      	ldr	r1, [pc, #52]	@ (800506c <I2SEx_RxISR_I2SExt+0x90>)
 8005038:	428b      	cmp	r3, r1
 800503a:	d101      	bne.n	8005040 <I2SEx_RxISR_I2SExt+0x64>
 800503c:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <I2SEx_RxISR_I2SExt+0x94>)
 800503e:	e001      	b.n	8005044 <I2SEx_RxISR_I2SExt+0x68>
 8005040:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005044:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005048:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff ff03 	bl	8004e68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40003800 	.word	0x40003800
 8005070:	40003400 	.word	0x40003400

08005074 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e267      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d075      	beq.n	800517e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005092:	4b88      	ldr	r3, [pc, #544]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b04      	cmp	r3, #4
 800509c:	d00c      	beq.n	80050b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509e:	4b85      	ldr	r3, [pc, #532]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d112      	bne.n	80050d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050aa:	4b82      	ldr	r3, [pc, #520]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050b6:	d10b      	bne.n	80050d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	4b7e      	ldr	r3, [pc, #504]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d05b      	beq.n	800517c <HAL_RCC_OscConfig+0x108>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d157      	bne.n	800517c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e242      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d8:	d106      	bne.n	80050e8 <HAL_RCC_OscConfig+0x74>
 80050da:	4b76      	ldr	r3, [pc, #472]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a75      	ldr	r2, [pc, #468]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e01d      	b.n	8005124 <HAL_RCC_OscConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f0:	d10c      	bne.n	800510c <HAL_RCC_OscConfig+0x98>
 80050f2:	4b70      	ldr	r3, [pc, #448]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a6f      	ldr	r2, [pc, #444]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80050f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b6d      	ldr	r3, [pc, #436]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6c      	ldr	r2, [pc, #432]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e00b      	b.n	8005124 <HAL_RCC_OscConfig+0xb0>
 800510c:	4b69      	ldr	r3, [pc, #420]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a68      	ldr	r2, [pc, #416]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b66      	ldr	r3, [pc, #408]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a65      	ldr	r2, [pc, #404]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 800511e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512c:	f7fc f846 	bl	80011bc <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fc f842 	bl	80011bc <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	@ 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e207      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	4b5b      	ldr	r3, [pc, #364]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0xc0>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fc f832 	bl	80011bc <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fc f82e 	bl	80011bc <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	@ 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1f3      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516e:	4b51      	ldr	r3, [pc, #324]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0xe8>
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d063      	beq.n	8005252 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800518a:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005196:	4b47      	ldr	r3, [pc, #284]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d11c      	bne.n	80051dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a2:	4b44      	ldr	r3, [pc, #272]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ae:	4b41      	ldr	r3, [pc, #260]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_RCC_OscConfig+0x152>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e1c7      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c6:	4b3b      	ldr	r3, [pc, #236]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4937      	ldr	r1, [pc, #220]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051da:	e03a      	b.n	8005252 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e4:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <HAL_RCC_OscConfig+0x244>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fb ffe7 	bl	80011bc <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fb ffe3 	bl	80011bc <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e1a8      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	4b2b      	ldr	r3, [pc, #172]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b28      	ldr	r3, [pc, #160]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4925      	ldr	r1, [pc, #148]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]
 8005224:	e015      	b.n	8005252 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b24      	ldr	r3, [pc, #144]	@ (80052b8 <HAL_RCC_OscConfig+0x244>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fb ffc6 	bl	80011bc <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005234:	f7fb ffc2 	bl	80011bc <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e187      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005246:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d036      	beq.n	80052cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005266:	4b15      	ldr	r3, [pc, #84]	@ (80052bc <HAL_RCC_OscConfig+0x248>)
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fb ffa6 	bl	80011bc <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005274:	f7fb ffa2 	bl	80011bc <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e167      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <HAL_RCC_OscConfig+0x240>)
 8005288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x200>
 8005292:	e01b      	b.n	80052cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005294:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <HAL_RCC_OscConfig+0x248>)
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529a:	f7fb ff8f 	bl	80011bc <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	e00e      	b.n	80052c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a2:	f7fb ff8b 	bl	80011bc <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d907      	bls.n	80052c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e150      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
 80052b4:	40023800 	.word	0x40023800
 80052b8:	42470000 	.word	0x42470000
 80052bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c0:	4b88      	ldr	r3, [pc, #544]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80052c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ea      	bne.n	80052a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8097 	beq.w	8005408 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052de:	4b81      	ldr	r3, [pc, #516]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	4b7d      	ldr	r3, [pc, #500]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	4a7c      	ldr	r2, [pc, #496]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052fa:	4b7a      	ldr	r3, [pc, #488]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530a:	4b77      	ldr	r3, [pc, #476]	@ (80054e8 <HAL_RCC_OscConfig+0x474>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d118      	bne.n	8005348 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005316:	4b74      	ldr	r3, [pc, #464]	@ (80054e8 <HAL_RCC_OscConfig+0x474>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a73      	ldr	r2, [pc, #460]	@ (80054e8 <HAL_RCC_OscConfig+0x474>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005322:	f7fb ff4b 	bl	80011bc <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532a:	f7fb ff47 	bl	80011bc <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e10c      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533c:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <HAL_RCC_OscConfig+0x474>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <HAL_RCC_OscConfig+0x2ea>
 8005350:	4b64      	ldr	r3, [pc, #400]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005354:	4a63      	ldr	r2, [pc, #396]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	6713      	str	r3, [r2, #112]	@ 0x70
 800535c:	e01c      	b.n	8005398 <HAL_RCC_OscConfig+0x324>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b05      	cmp	r3, #5
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0x30c>
 8005366:	4b5f      	ldr	r3, [pc, #380]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	4a5e      	ldr	r2, [pc, #376]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 800536c:	f043 0304 	orr.w	r3, r3, #4
 8005370:	6713      	str	r3, [r2, #112]	@ 0x70
 8005372:	4b5c      	ldr	r3, [pc, #368]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005376:	4a5b      	ldr	r2, [pc, #364]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6713      	str	r3, [r2, #112]	@ 0x70
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0x324>
 8005380:	4b58      	ldr	r3, [pc, #352]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005384:	4a57      	ldr	r2, [pc, #348]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	6713      	str	r3, [r2, #112]	@ 0x70
 800538c:	4b55      	ldr	r3, [pc, #340]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005390:	4a54      	ldr	r2, [pc, #336]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005392:	f023 0304 	bic.w	r3, r3, #4
 8005396:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a0:	f7fb ff0c 	bl	80011bc <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a6:	e00a      	b.n	80053be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a8:	f7fb ff08 	bl	80011bc <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0cb      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053be:	4b49      	ldr	r3, [pc, #292]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0ee      	beq.n	80053a8 <HAL_RCC_OscConfig+0x334>
 80053ca:	e014      	b.n	80053f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053cc:	f7fb fef6 	bl	80011bc <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d4:	f7fb fef2 	bl	80011bc <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0b5      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ea:	4b3e      	ldr	r3, [pc, #248]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ee      	bne.n	80053d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d105      	bne.n	8005408 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fc:	4b39      	ldr	r3, [pc, #228]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	4a38      	ldr	r2, [pc, #224]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005406:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a1 	beq.w	8005554 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005412:	4b34      	ldr	r3, [pc, #208]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b08      	cmp	r3, #8
 800541c:	d05c      	beq.n	80054d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d141      	bne.n	80054aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b31      	ldr	r3, [pc, #196]	@ (80054ec <HAL_RCC_OscConfig+0x478>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fb fec6 	bl	80011bc <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005434:	f7fb fec2 	bl	80011bc <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e087      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005446:	4b27      	ldr	r3, [pc, #156]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	019b      	lsls	r3, r3, #6
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	3b01      	subs	r3, #1
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	491b      	ldr	r1, [pc, #108]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800547c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <HAL_RCC_OscConfig+0x478>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005482:	f7fb fe9b 	bl	80011bc <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548a:	f7fb fe97 	bl	80011bc <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e05c      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800549c:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCC_OscConfig+0x416>
 80054a8:	e054      	b.n	8005554 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054aa:	4b10      	ldr	r3, [pc, #64]	@ (80054ec <HAL_RCC_OscConfig+0x478>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b0:	f7fb fe84 	bl	80011bc <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fb fe80 	bl	80011bc <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e045      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ca:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <HAL_RCC_OscConfig+0x470>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x444>
 80054d6:	e03d      	b.n	8005554 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e038      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40007000 	.word	0x40007000
 80054ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <HAL_RCC_OscConfig+0x4ec>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d028      	beq.n	8005550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d121      	bne.n	8005550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d11a      	bne.n	8005550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005526:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005528:	4293      	cmp	r3, r2
 800552a:	d111      	bne.n	8005550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	3b01      	subs	r3, #1
 800553a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d107      	bne.n	8005550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40023800 	.word	0x40023800

08005564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0cc      	b.n	8005712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005578:	4b68      	ldr	r3, [pc, #416]	@ (800571c <HAL_RCC_ClockConfig+0x1b8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d90c      	bls.n	80055a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005586:	4b65      	ldr	r3, [pc, #404]	@ (800571c <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558e:	4b63      	ldr	r3, [pc, #396]	@ (800571c <HAL_RCC_ClockConfig+0x1b8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d001      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0b8      	b.n	8005712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b8:	4b59      	ldr	r3, [pc, #356]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a58      	ldr	r2, [pc, #352]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d0:	4b53      	ldr	r3, [pc, #332]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a52      	ldr	r2, [pc, #328]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055dc:	4b50      	ldr	r3, [pc, #320]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	494d      	ldr	r1, [pc, #308]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d044      	beq.n	8005684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	4b47      	ldr	r3, [pc, #284]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d119      	bne.n	8005642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e07f      	b.n	8005712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d003      	beq.n	8005622 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800561e:	2b03      	cmp	r3, #3
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005622:	4b3f      	ldr	r3, [pc, #252]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e06f      	b.n	8005712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005632:	4b3b      	ldr	r3, [pc, #236]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e067      	b.n	8005712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005642:	4b37      	ldr	r3, [pc, #220]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f023 0203 	bic.w	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4934      	ldr	r1, [pc, #208]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	4313      	orrs	r3, r2
 8005652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005654:	f7fb fdb2 	bl	80011bc <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565a:	e00a      	b.n	8005672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800565c:	f7fb fdae 	bl	80011bc <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e04f      	b.n	8005712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	4b2b      	ldr	r3, [pc, #172]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 020c 	and.w	r2, r3, #12
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	429a      	cmp	r2, r3
 8005682:	d1eb      	bne.n	800565c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005684:	4b25      	ldr	r3, [pc, #148]	@ (800571c <HAL_RCC_ClockConfig+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d20c      	bcs.n	80056ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	4b22      	ldr	r3, [pc, #136]	@ (800571c <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b20      	ldr	r3, [pc, #128]	@ (800571c <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e032      	b.n	8005712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b8:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4916      	ldr	r1, [pc, #88]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056d6:	4b12      	ldr	r3, [pc, #72]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	490e      	ldr	r1, [pc, #56]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ea:	f000 f821 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 80056ee:	4602      	mov	r2, r0
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	490a      	ldr	r1, [pc, #40]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 80056fc:	5ccb      	ldrb	r3, [r1, r3]
 80056fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005702:	4a09      	ldr	r2, [pc, #36]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 8005704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005706:	4b09      	ldr	r3, [pc, #36]	@ (800572c <HAL_RCC_ClockConfig+0x1c8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fb fd12 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40023c00 	.word	0x40023c00
 8005720:	40023800 	.word	0x40023800
 8005724:	0800a50c 	.word	0x0800a50c
 8005728:	20000000 	.word	0x20000000
 800572c:	20000004 	.word	0x20000004

08005730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005734:	b094      	sub	sp, #80	@ 0x50
 8005736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005748:	4b79      	ldr	r3, [pc, #484]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x200>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 030c 	and.w	r3, r3, #12
 8005750:	2b08      	cmp	r3, #8
 8005752:	d00d      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x40>
 8005754:	2b08      	cmp	r3, #8
 8005756:	f200 80e1 	bhi.w	800591c <HAL_RCC_GetSysClockFreq+0x1ec>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x34>
 800575e:	2b04      	cmp	r3, #4
 8005760:	d003      	beq.n	800576a <HAL_RCC_GetSysClockFreq+0x3a>
 8005762:	e0db      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005764:	4b73      	ldr	r3, [pc, #460]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x204>)
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005768:	e0db      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800576a:	4b73      	ldr	r3, [pc, #460]	@ (8005938 <HAL_RCC_GetSysClockFreq+0x208>)
 800576c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800576e:	e0d8      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005770:	4b6f      	ldr	r3, [pc, #444]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x200>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005778:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800577a:	4b6d      	ldr	r3, [pc, #436]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x200>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d063      	beq.n	800584e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005786:	4b6a      	ldr	r3, [pc, #424]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x200>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	099b      	lsrs	r3, r3, #6
 800578c:	2200      	movs	r2, #0
 800578e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005790:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005798:	633b      	str	r3, [r7, #48]	@ 0x30
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	@ 0x34
 800579e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057a2:	4622      	mov	r2, r4
 80057a4:	462b      	mov	r3, r5
 80057a6:	f04f 0000 	mov.w	r0, #0
 80057aa:	f04f 0100 	mov.w	r1, #0
 80057ae:	0159      	lsls	r1, r3, #5
 80057b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b4:	0150      	lsls	r0, r2, #5
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4621      	mov	r1, r4
 80057bc:	1a51      	subs	r1, r2, r1
 80057be:	6139      	str	r1, [r7, #16]
 80057c0:	4629      	mov	r1, r5
 80057c2:	eb63 0301 	sbc.w	r3, r3, r1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d4:	4659      	mov	r1, fp
 80057d6:	018b      	lsls	r3, r1, #6
 80057d8:	4651      	mov	r1, sl
 80057da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057de:	4651      	mov	r1, sl
 80057e0:	018a      	lsls	r2, r1, #6
 80057e2:	4651      	mov	r1, sl
 80057e4:	ebb2 0801 	subs.w	r8, r2, r1
 80057e8:	4659      	mov	r1, fp
 80057ea:	eb63 0901 	sbc.w	r9, r3, r1
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005802:	4690      	mov	r8, r2
 8005804:	4699      	mov	r9, r3
 8005806:	4623      	mov	r3, r4
 8005808:	eb18 0303 	adds.w	r3, r8, r3
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	462b      	mov	r3, r5
 8005810:	eb49 0303 	adc.w	r3, r9, r3
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005822:	4629      	mov	r1, r5
 8005824:	024b      	lsls	r3, r1, #9
 8005826:	4621      	mov	r1, r4
 8005828:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800582c:	4621      	mov	r1, r4
 800582e:	024a      	lsls	r2, r1, #9
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005836:	2200      	movs	r2, #0
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800583a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800583c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005840:	f7fa fcc2 	bl	80001c8 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4613      	mov	r3, r2
 800584a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800584c:	e058      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800584e:	4b38      	ldr	r3, [pc, #224]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x200>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	099b      	lsrs	r3, r3, #6
 8005854:	2200      	movs	r2, #0
 8005856:	4618      	mov	r0, r3
 8005858:	4611      	mov	r1, r2
 800585a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800585e:	623b      	str	r3, [r7, #32]
 8005860:	2300      	movs	r3, #0
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
 8005864:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005868:	4642      	mov	r2, r8
 800586a:	464b      	mov	r3, r9
 800586c:	f04f 0000 	mov.w	r0, #0
 8005870:	f04f 0100 	mov.w	r1, #0
 8005874:	0159      	lsls	r1, r3, #5
 8005876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800587a:	0150      	lsls	r0, r2, #5
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4641      	mov	r1, r8
 8005882:	ebb2 0a01 	subs.w	sl, r2, r1
 8005886:	4649      	mov	r1, r9
 8005888:	eb63 0b01 	sbc.w	fp, r3, r1
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005898:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800589c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058a0:	ebb2 040a 	subs.w	r4, r2, sl
 80058a4:	eb63 050b 	sbc.w	r5, r3, fp
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	00eb      	lsls	r3, r5, #3
 80058b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b6:	00e2      	lsls	r2, r4, #3
 80058b8:	4614      	mov	r4, r2
 80058ba:	461d      	mov	r5, r3
 80058bc:	4643      	mov	r3, r8
 80058be:	18e3      	adds	r3, r4, r3
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	464b      	mov	r3, r9
 80058c4:	eb45 0303 	adc.w	r3, r5, r3
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058d6:	4629      	mov	r1, r5
 80058d8:	028b      	lsls	r3, r1, #10
 80058da:	4621      	mov	r1, r4
 80058dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058e0:	4621      	mov	r1, r4
 80058e2:	028a      	lsls	r2, r1, #10
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ea:	2200      	movs	r2, #0
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	61fa      	str	r2, [r7, #28]
 80058f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f4:	f7fa fc68 	bl	80001c8 <__aeabi_uldivmod>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4613      	mov	r3, r2
 80058fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x200>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	0c1b      	lsrs	r3, r3, #16
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	3301      	adds	r3, #1
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800591a:	e002      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x204>)
 800591e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005924:	4618      	mov	r0, r3
 8005926:	3750      	adds	r7, #80	@ 0x50
 8005928:	46bd      	mov	sp, r7
 800592a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800
 8005934:	00f42400 	.word	0x00f42400
 8005938:	007a1200 	.word	0x007a1200

0800593c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005940:	4b03      	ldr	r3, [pc, #12]	@ (8005950 <HAL_RCC_GetHCLKFreq+0x14>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000000 	.word	0x20000000

08005954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005958:	f7ff fff0 	bl	800593c <HAL_RCC_GetHCLKFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b05      	ldr	r3, [pc, #20]	@ (8005974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	0a9b      	lsrs	r3, r3, #10
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	4903      	ldr	r1, [pc, #12]	@ (8005978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800596a:	5ccb      	ldrb	r3, [r1, r3]
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40023800 	.word	0x40023800
 8005978:	0800a51c 	.word	0x0800a51c

0800597c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d035      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059a4:	4b62      	ldr	r3, [pc, #392]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059aa:	f7fb fc07 	bl	80011bc <HAL_GetTick>
 80059ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059b2:	f7fb fc03 	bl	80011bc <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e0b0      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f0      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	019a      	lsls	r2, r3, #6
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	071b      	lsls	r3, r3, #28
 80059dc:	4955      	ldr	r1, [pc, #340]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059e4:	4b52      	ldr	r3, [pc, #328]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ea:	f7fb fbe7 	bl	80011bc <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059f2:	f7fb fbe3 	bl	80011bc <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e090      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a04:	4b4b      	ldr	r3, [pc, #300]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8083 	beq.w	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	4b44      	ldr	r3, [pc, #272]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	4a43      	ldr	r2, [pc, #268]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a2e:	4b41      	ldr	r3, [pc, #260]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a46:	f7fb fbb9 	bl	80011bc <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4e:	f7fb fbb5 	bl	80011bc <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e062      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a60:	4b35      	ldr	r3, [pc, #212]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a6c:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a74:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d02f      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d028      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a94:	4b29      	ldr	r3, [pc, #164]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a9a:	4b28      	ldr	r3, [pc, #160]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005aa0:	4a24      	ldr	r2, [pc, #144]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005aa6:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d114      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ab2:	f7fb fb83 	bl	80011bc <HAL_GetTick>
 8005ab6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab8:	e00a      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aba:	f7fb fb7f 	bl	80011bc <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e02a      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad0:	4b18      	ldr	r3, [pc, #96]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ee      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae8:	d10d      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005aea:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afe:	490d      	ldr	r1, [pc, #52]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	608b      	str	r3, [r1, #8]
 8005b04:	e005      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b06:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b10:	6093      	str	r3, [r2, #8]
 8005b12:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1e:	4905      	ldr	r1, [pc, #20]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	42470068 	.word	0x42470068
 8005b34:	40023800 	.word	0x40023800
 8005b38:	40007000 	.word	0x40007000
 8005b3c:	42470e40 	.word	0x42470e40

08005b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d13f      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005b5e:	4b24      	ldr	r3, [pc, #144]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b66:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d006      	beq.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b74:	d12f      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b76:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b78:	617b      	str	r3, [r7, #20]
          break;
 8005b7a:	e02f      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b88:	d108      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b8a:	4b19      	ldr	r3, [pc, #100]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b92:	4a19      	ldr	r2, [pc, #100]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e007      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b9c:	4b14      	ldr	r3, [pc, #80]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ba4:	4a15      	ldr	r2, [pc, #84]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005bac:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb2:	099b      	lsrs	r3, r3, #6
 8005bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc6:	0f1b      	lsrs	r3, r3, #28
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	617b      	str	r3, [r7, #20]
          break;
 8005bd4:	e002      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
          break;
 8005bda:	bf00      	nop
        }
      }
      break;
 8005bdc:	e000      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005bde:	bf00      	nop
    }
  }
  return frequency;
 8005be0:	697b      	ldr	r3, [r7, #20]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	00bb8000 	.word	0x00bb8000
 8005bf8:	007a1200 	.word	0x007a1200
 8005bfc:	00f42400 	.word	0x00f42400

08005c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e07b      	b.n	8005d0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d108      	bne.n	8005c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c22:	d009      	beq.n	8005c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
 8005c2a:	e005      	b.n	8005c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fb f8f2 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbc:	ea42 0103 	orr.w	r1, r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	f003 0104 	and.w	r1, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	f003 0210 	and.w	r2, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e041      	b.n	8005da8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fb f8c7 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 fa11 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e041      	b.n	8005e46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f839 	bl	8005e4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f000 f9c2 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e0ae      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	f200 809f 	bhi.w	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005fd1 	.word	0x08005fd1
 8005ea0:	08005fd1 	.word	0x08005fd1
 8005ea4:	08005fd1 	.word	0x08005fd1
 8005ea8:	08005f0d 	.word	0x08005f0d
 8005eac:	08005fd1 	.word	0x08005fd1
 8005eb0:	08005fd1 	.word	0x08005fd1
 8005eb4:	08005fd1 	.word	0x08005fd1
 8005eb8:	08005f4f 	.word	0x08005f4f
 8005ebc:	08005fd1 	.word	0x08005fd1
 8005ec0:	08005fd1 	.word	0x08005fd1
 8005ec4:	08005fd1 	.word	0x08005fd1
 8005ec8:	08005f8f 	.word	0x08005f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f9f6 	bl	80062c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0208 	orr.w	r2, r2, #8
 8005ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0204 	bic.w	r2, r2, #4
 8005ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	619a      	str	r2, [r3, #24]
      break;
 8005f0a:	e064      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa46 	bl	80063a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	021a      	lsls	r2, r3, #8
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	619a      	str	r2, [r3, #24]
      break;
 8005f4c:	e043      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fa9b 	bl	8006490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0208 	orr.w	r2, r2, #8
 8005f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0204 	bic.w	r2, r2, #4
 8005f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69d9      	ldr	r1, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	61da      	str	r2, [r3, #28]
      break;
 8005f8c:	e023      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 faef 	bl	8006578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	021a      	lsls	r2, r3, #8
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	61da      	str	r2, [r3, #28]
      break;
 8005fce:	e002      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_ConfigClockSource+0x1c>
 8006000:	2302      	movs	r3, #2
 8006002:	e0b4      	b.n	800616e <HAL_TIM_ConfigClockSource+0x186>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800602a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800603c:	d03e      	beq.n	80060bc <HAL_TIM_ConfigClockSource+0xd4>
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006042:	f200 8087 	bhi.w	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604a:	f000 8086 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x172>
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006052:	d87f      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006054:	2b70      	cmp	r3, #112	@ 0x70
 8006056:	d01a      	beq.n	800608e <HAL_TIM_ConfigClockSource+0xa6>
 8006058:	2b70      	cmp	r3, #112	@ 0x70
 800605a:	d87b      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b60      	cmp	r3, #96	@ 0x60
 800605e:	d050      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x11a>
 8006060:	2b60      	cmp	r3, #96	@ 0x60
 8006062:	d877      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b50      	cmp	r3, #80	@ 0x50
 8006066:	d03c      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006068:	2b50      	cmp	r3, #80	@ 0x50
 800606a:	d873      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b40      	cmp	r3, #64	@ 0x40
 800606e:	d058      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x13a>
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d86f      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b30      	cmp	r3, #48	@ 0x30
 8006076:	d064      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006078:	2b30      	cmp	r3, #48	@ 0x30
 800607a:	d86b      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b20      	cmp	r3, #32
 800607e:	d060      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006080:	2b20      	cmp	r3, #32
 8006082:	d867      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d05c      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006088:	2b10      	cmp	r3, #16
 800608a:	d05a      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	e062      	b.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800609e:	f000 fb3b 	bl	8006718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	609a      	str	r2, [r3, #8]
      break;
 80060ba:	e04f      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060cc:	f000 fb24 	bl	8006718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060de:	609a      	str	r2, [r3, #8]
      break;
 80060e0:	e03c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ee:	461a      	mov	r2, r3
 80060f0:	f000 fa98 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2150      	movs	r1, #80	@ 0x50
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 faf1 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8006100:	e02c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800610e:	461a      	mov	r2, r3
 8006110:	f000 fab7 	bl	8006682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2160      	movs	r1, #96	@ 0x60
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fae1 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8006120:	e01c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800612e:	461a      	mov	r2, r3
 8006130:	f000 fa78 	bl	8006624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2140      	movs	r1, #64	@ 0x40
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fad1 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8006140:	e00c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f000 fac8 	bl	80066e2 <TIM_ITRx_SetConfig>
      break;
 8006152:	e003      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      break;
 8006158:	e000      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800615a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a43      	ldr	r2, [pc, #268]	@ (8006298 <TIM_Base_SetConfig+0x120>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006196:	d00f      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a40      	ldr	r2, [pc, #256]	@ (800629c <TIM_Base_SetConfig+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a3f      	ldr	r2, [pc, #252]	@ (80062a0 <TIM_Base_SetConfig+0x128>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a3e      	ldr	r2, [pc, #248]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a3d      	ldr	r2, [pc, #244]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a32      	ldr	r2, [pc, #200]	@ (8006298 <TIM_Base_SetConfig+0x120>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d8:	d027      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2f      	ldr	r2, [pc, #188]	@ (800629c <TIM_Base_SetConfig+0x124>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d023      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2e      	ldr	r2, [pc, #184]	@ (80062a0 <TIM_Base_SetConfig+0x128>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2d      	ldr	r2, [pc, #180]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2c      	ldr	r2, [pc, #176]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d017      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2b      	ldr	r2, [pc, #172]	@ (80062ac <TIM_Base_SetConfig+0x134>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2a      	ldr	r2, [pc, #168]	@ (80062b0 <TIM_Base_SetConfig+0x138>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a29      	ldr	r2, [pc, #164]	@ (80062b4 <TIM_Base_SetConfig+0x13c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a28      	ldr	r2, [pc, #160]	@ (80062b8 <TIM_Base_SetConfig+0x140>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a27      	ldr	r2, [pc, #156]	@ (80062bc <TIM_Base_SetConfig+0x144>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a26      	ldr	r2, [pc, #152]	@ (80062c0 <TIM_Base_SetConfig+0x148>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a0e      	ldr	r2, [pc, #56]	@ (8006298 <TIM_Base_SetConfig+0x120>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_Base_SetConfig+0xf2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a10      	ldr	r2, [pc, #64]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d103      	bne.n	8006272 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f043 0204 	orr.w	r2, r3, #4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	601a      	str	r2, [r3, #0]
}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40010000 	.word	0x40010000
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000800 	.word	0x40000800
 80062a4:	40000c00 	.word	0x40000c00
 80062a8:	40010400 	.word	0x40010400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	40014400 	.word	0x40014400
 80062b4:	40014800 	.word	0x40014800
 80062b8:	40001800 	.word	0x40001800
 80062bc:	40001c00 	.word	0x40001c00
 80062c0:	40002000 	.word	0x40002000

080062c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f023 0201 	bic.w	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 0302 	bic.w	r3, r3, #2
 800630c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a20      	ldr	r2, [pc, #128]	@ (800639c <TIM_OC1_SetConfig+0xd8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC1_SetConfig+0x64>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a1f      	ldr	r2, [pc, #124]	@ (80063a0 <TIM_OC1_SetConfig+0xdc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d10c      	bne.n	8006342 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0308 	bic.w	r3, r3, #8
 800632e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f023 0304 	bic.w	r3, r3, #4
 8006340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a15      	ldr	r2, [pc, #84]	@ (800639c <TIM_OC1_SetConfig+0xd8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_OC1_SetConfig+0x8e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a14      	ldr	r2, [pc, #80]	@ (80063a0 <TIM_OC1_SetConfig+0xdc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d111      	bne.n	8006376 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	621a      	str	r2, [r3, #32]
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40010000 	.word	0x40010000
 80063a0:	40010400 	.word	0x40010400

080063a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f023 0210 	bic.w	r2, r3, #16
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a22      	ldr	r2, [pc, #136]	@ (8006488 <TIM_OC2_SetConfig+0xe4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_OC2_SetConfig+0x68>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a21      	ldr	r2, [pc, #132]	@ (800648c <TIM_OC2_SetConfig+0xe8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d10d      	bne.n	8006428 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a17      	ldr	r2, [pc, #92]	@ (8006488 <TIM_OC2_SetConfig+0xe4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC2_SetConfig+0x94>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a16      	ldr	r2, [pc, #88]	@ (800648c <TIM_OC2_SetConfig+0xe8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d113      	bne.n	8006460 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800643e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40010000 	.word	0x40010000
 800648c:	40010400 	.word	0x40010400

08006490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a21      	ldr	r2, [pc, #132]	@ (8006570 <TIM_OC3_SetConfig+0xe0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_OC3_SetConfig+0x66>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a20      	ldr	r2, [pc, #128]	@ (8006574 <TIM_OC3_SetConfig+0xe4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10d      	bne.n	8006512 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <TIM_OC3_SetConfig+0xe0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d003      	beq.n	8006522 <TIM_OC3_SetConfig+0x92>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a15      	ldr	r2, [pc, #84]	@ (8006574 <TIM_OC3_SetConfig+0xe4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d113      	bne.n	800654a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	621a      	str	r2, [r3, #32]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400

08006578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	031b      	lsls	r3, r3, #12
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a12      	ldr	r2, [pc, #72]	@ (800661c <TIM_OC4_SetConfig+0xa4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_OC4_SetConfig+0x68>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a11      	ldr	r2, [pc, #68]	@ (8006620 <TIM_OC4_SetConfig+0xa8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d109      	bne.n	80065f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40010400 	.word	0x40010400

08006624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800664e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 030a 	bic.w	r3, r3, #10
 8006660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006682:	b480      	push	{r7}
 8006684:	b087      	sub	sp, #28
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0210 	bic.w	r2, r3, #16
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	031b      	lsls	r3, r3, #12
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	f043 0307 	orr.w	r3, r3, #7
 8006704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	021a      	lsls	r2, r3, #8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	431a      	orrs	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4313      	orrs	r3, r2
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	609a      	str	r2, [r3, #8]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800676c:	2302      	movs	r3, #2
 800676e:	e05a      	b.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a21      	ldr	r2, [pc, #132]	@ (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067bc:	d01d      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d018      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00e      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a17      	ldr	r2, [pc, #92]	@ (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a15      	ldr	r2, [pc, #84]	@ (800684c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d10c      	bne.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4313      	orrs	r3, r2
 800680a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40010000 	.word	0x40010000
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40010400 	.word	0x40010400
 8006848:	40014000 	.word	0x40014000
 800684c:	40001800 	.word	0x40001800

08006850 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006850:	b084      	sub	sp, #16
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	f107 001c 	add.w	r0, r7, #28
 800685e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006862:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006866:	2b01      	cmp	r3, #1
 8006868:	d123      	bne.n	80068b2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800687e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006892:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006896:	2b01      	cmp	r3, #1
 8006898:	d105      	bne.n	80068a6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9dc 	bl	8006c64 <USB_CoreReset>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
 80068b0:	e01b      	b.n	80068ea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9d0 	bl	8006c64 <USB_CoreReset>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	@ 0x38
 80068dc:	e005      	b.n	80068ea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068ea:	7fbb      	ldrb	r3, [r7, #30]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d10b      	bne.n	8006908 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f043 0206 	orr.w	r2, r3, #6
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f043 0220 	orr.w	r2, r3, #32
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006914:	b004      	add	sp, #16
 8006916:	4770      	bx	lr

08006918 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f043 0201 	orr.w	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 0201 	bic.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d115      	bne.n	80069aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800698a:	200a      	movs	r0, #10
 800698c:	f7fa fc22 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	330a      	adds	r3, #10
 8006994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f956 	bl	8006c48 <USB_GetMode>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d01e      	beq.n	80069e0 <USB_SetCurrentMode+0x84>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80069a6:	d9f0      	bls.n	800698a <USB_SetCurrentMode+0x2e>
 80069a8:	e01a      	b.n	80069e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d115      	bne.n	80069dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069bc:	200a      	movs	r0, #10
 80069be:	f7fa fc09 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	330a      	adds	r3, #10
 80069c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f93d 	bl	8006c48 <USB_GetMode>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <USB_SetCurrentMode+0x84>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80069d8:	d9f0      	bls.n	80069bc <USB_SetCurrentMode+0x60>
 80069da:	e001      	b.n	80069e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e005      	b.n	80069ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80069e4:	d101      	bne.n	80069ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a0e:	d901      	bls.n	8006a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e01b      	b.n	8006a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	daf2      	bge.n	8006a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	019b      	lsls	r3, r3, #6
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a38:	d901      	bls.n	8006a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e006      	b.n	8006a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d0f0      	beq.n	8006a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a70:	d901      	bls.n	8006a76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e018      	b.n	8006aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	daf2      	bge.n	8006a64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2210      	movs	r2, #16
 8006a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a94:	d901      	bls.n	8006a9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e006      	b.n	8006aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d0f0      	beq.n	8006a88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b089      	sub	sp, #36	@ 0x24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4611      	mov	r1, r2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	71fb      	strb	r3, [r7, #7]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d123      	bne.n	8006b22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ada:	88bb      	ldrh	r3, [r7, #4]
 8006adc:	3303      	adds	r3, #3
 8006ade:	089b      	lsrs	r3, r3, #2
 8006ae0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	e018      	b.n	8006b1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	031a      	lsls	r2, r3, #12
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af4:	461a      	mov	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	3301      	adds	r3, #1
 8006b00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	3301      	adds	r3, #1
 8006b06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	3301      	adds	r3, #1
 8006b12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	3301      	adds	r3, #1
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d3e2      	bcc.n	8006ae8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3724      	adds	r7, #36	@ 0x24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b08b      	sub	sp, #44	@ 0x2c
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	089b      	lsrs	r3, r3, #2
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b56:	2300      	movs	r3, #0
 8006b58:	623b      	str	r3, [r7, #32]
 8006b5a:	e014      	b.n	8006b86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	3301      	adds	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	3301      	adds	r3, #1
 8006b78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	3301      	adds	r3, #1
 8006b84:	623b      	str	r3, [r7, #32]
 8006b86:	6a3a      	ldr	r2, [r7, #32]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d3e6      	bcc.n	8006b5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b8e:	8bfb      	ldrh	r3, [r7, #30]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01e      	beq.n	8006bd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	701a      	strb	r2, [r3, #0]
      i++;
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006bc6:	8bfb      	ldrh	r3, [r7, #30]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bcc:	8bfb      	ldrh	r3, [r7, #30]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1ea      	bne.n	8006ba8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	372c      	adds	r7, #44	@ 0x2c
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0301 	and.w	r3, r3, #1
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c7c:	d901      	bls.n	8006c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e022      	b.n	8006cc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	daf2      	bge.n	8006c70 <USB_CoreReset+0xc>

  count = 10U;
 8006c8a:	230a      	movs	r3, #10
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006c8e:	e002      	b.n	8006c96 <USB_CoreReset+0x32>
  {
    count--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f9      	bne.n	8006c90 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f043 0201 	orr.w	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cb4:	d901      	bls.n	8006cba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e006      	b.n	8006cc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d0f0      	beq.n	8006ca8 <USB_CoreReset+0x44>

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d119      	bne.n	8006d5e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d10a      	bne.n	8006d48 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d40:	f043 0304 	orr.w	r3, r3, #4
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e014      	b.n	8006d72 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d56:	f023 0304 	bic.w	r3, r3, #4
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	e009      	b.n	8006d72 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d6c:	f023 0304 	bic.w	r3, r3, #4
 8006d70:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d72:	2110      	movs	r1, #16
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fe3d 	bl	80069f4 <USB_FlushTxFifo>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fe67 	bl	8006a58 <USB_FlushRxFifo>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	e015      	b.n	8006dc6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	461a      	mov	r2, r3
 8006da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006dca:	461a      	mov	r2, r3
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d3e3      	bcc.n	8006d9a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dde:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a18      	ldr	r2, [pc, #96]	@ (8006e44 <USB_HostInit+0x170>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d10b      	bne.n	8006e00 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a15      	ldr	r2, [pc, #84]	@ (8006e48 <USB_HostInit+0x174>)
 8006df4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a14      	ldr	r2, [pc, #80]	@ (8006e4c <USB_HostInit+0x178>)
 8006dfa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006dfe:	e009      	b.n	8006e14 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2280      	movs	r2, #128	@ 0x80
 8006e04:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a11      	ldr	r2, [pc, #68]	@ (8006e50 <USB_HostInit+0x17c>)
 8006e0a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a11      	ldr	r2, [pc, #68]	@ (8006e54 <USB_HostInit+0x180>)
 8006e10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	f043 0210 	orr.w	r2, r3, #16
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <USB_HostInit+0x184>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e40:	b004      	add	sp, #16
 8006e42:	4770      	bx	lr
 8006e44:	40040000 	.word	0x40040000
 8006e48:	01000200 	.word	0x01000200
 8006e4c:	00e00300 	.word	0x00e00300
 8006e50:	00600080 	.word	0x00600080
 8006e54:	004000e0 	.word	0x004000e0
 8006e58:	a3200008 	.word	0xa3200008

08006e5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e7a:	f023 0303 	bic.w	r3, r3, #3
 8006e7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d107      	bne.n	8006eae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006eaa:	6053      	str	r3, [r2, #4]
 8006eac:	e00c      	b.n	8006ec8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d107      	bne.n	8006ec4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006ec0:	6053      	str	r3, [r2, #4]
 8006ec2:	e001      	b.n	8006ec8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006ef6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f04:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006f06:	2064      	movs	r0, #100	@ 0x64
 8006f08:	f7fa f964 	bl	80011d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f18:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006f1a:	200a      	movs	r0, #10
 8006f1c:	f7fa f95a 	bl	80011d4 <HAL_Delay>

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006f4e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <USB_DriveVbus+0x44>
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d106      	bne.n	8006f6e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f6c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f78:	d109      	bne.n	8006f8e <USB_DriveVbus+0x64>
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f8c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0c5b      	lsrs	r3, r3, #17
 8006fba:	f003 0303 	and.w	r3, r3, #3
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	b29b      	uxth	r3, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	70fb      	strb	r3, [r7, #3]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70bb      	strb	r3, [r7, #2]
 8007002:	4613      	mov	r3, r2
 8007004:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4413      	add	r3, r2
 8007016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701a:	461a      	mov	r2, r3
 800701c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007020:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007022:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007026:	2b03      	cmp	r3, #3
 8007028:	d87c      	bhi.n	8007124 <USB_HC_Init+0x138>
 800702a:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <USB_HC_Init+0x44>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007041 	.word	0x08007041
 8007034:	080070e7 	.word	0x080070e7
 8007038:	08007041 	.word	0x08007041
 800703c:	080070a9 	.word	0x080070a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704c:	461a      	mov	r2, r3
 800704e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007052:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007054:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007058:	2b00      	cmp	r3, #0
 800705a:	da10      	bge.n	800707e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4413      	add	r3, r2
 8007064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	440a      	add	r2, r1
 8007072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800707a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800707c:	e055      	b.n	800712a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a6f      	ldr	r2, [pc, #444]	@ (8007240 <USB_HC_Init+0x254>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d151      	bne.n	800712a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	440a      	add	r2, r1
 800709c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80070a4:	60d3      	str	r3, [r2, #12]
      break;
 80070a6:	e040      	b.n	800712a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070a8:	78fb      	ldrb	r3, [r7, #3]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b4:	461a      	mov	r2, r3
 80070b6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80070ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da34      	bge.n	800712e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80070e4:	e023      	b.n	800712e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f2:	461a      	mov	r2, r3
 80070f4:	f240 2325 	movw	r3, #549	@ 0x225
 80070f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da17      	bge.n	8007132 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	4413      	add	r3, r2
 800710a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	440a      	add	r2, r1
 8007118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007120:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007122:	e006      	b.n	8007132 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	77fb      	strb	r3, [r7, #31]
      break;
 8007128:	e004      	b.n	8007134 <USB_HC_Init+0x148>
      break;
 800712a:	bf00      	nop
 800712c:	e002      	b.n	8007134 <USB_HC_Init+0x148>
      break;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <USB_HC_Init+0x148>
      break;
 8007132:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007140:	461a      	mov	r2, r3
 8007142:	2300      	movs	r3, #0
 8007144:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	440a      	add	r2, r1
 800715c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007160:	f043 0302 	orr.w	r3, r3, #2
 8007164:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	2101      	movs	r1, #1
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	6939      	ldr	r1, [r7, #16]
 800717c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007180:	4313      	orrs	r3, r2
 8007182:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007194:	2b00      	cmp	r3, #0
 8007196:	da03      	bge.n	80071a0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e001      	b.n	80071a4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fef9 	bl	8006f9c <USB_GetHostSpeed>
 80071aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80071ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d106      	bne.n	80071c2 <USB_HC_Init+0x1d6>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d003      	beq.n	80071c2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80071ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	e001      	b.n	80071c6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071c6:	787b      	ldrb	r3, [r7, #1]
 80071c8:	059b      	lsls	r3, r3, #22
 80071ca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80071ce:	78bb      	ldrb	r3, [r7, #2]
 80071d0:	02db      	lsls	r3, r3, #11
 80071d2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80071d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071dc:	049b      	lsls	r3, r3, #18
 80071de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80071e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80071e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80071e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80071ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071f4:	78fa      	ldrb	r2, [r7, #3]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007200:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007204:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007206:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800720a:	2b03      	cmp	r3, #3
 800720c:	d003      	beq.n	8007216 <USB_HC_Init+0x22a>
 800720e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10f      	bne.n	8007236 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	78fa      	ldrb	r2, [r7, #3]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	440a      	add	r2, r1
 800722c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007230:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007234:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007236:	7ffb      	ldrb	r3, [r7, #31]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40040000 	.word	0x40040000

08007244 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08c      	sub	sp, #48	@ 0x30
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800725c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007260:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a5d      	ldr	r2, [pc, #372]	@ (80073dc <USB_HC_StartXfer+0x198>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d12f      	bne.n	80072ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d11c      	bne.n	80072aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	7c9b      	ldrb	r3, [r3, #18]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <USB_HC_StartXfer+0x3c>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	7c9b      	ldrb	r3, [r3, #18]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d124      	bne.n	80072ca <USB_HC_StartXfer+0x86>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	799b      	ldrb	r3, [r3, #6]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d120      	bne.n	80072ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	4413      	add	r3, r2
 8007290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	440a      	add	r2, r1
 800729e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a6:	60d3      	str	r3, [r2, #12]
 80072a8:	e00f      	b.n	80072ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	791b      	ldrb	r3, [r3, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <USB_HC_StartXfer+0x86>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	795b      	ldrb	r3, [r3, #5]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d107      	bne.n	80072ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	4619      	mov	r1, r3
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fb6b 	bl	800799c <USB_DoPing>
        return HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e232      	b.n	8007730 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	799b      	ldrb	r3, [r3, #6]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d158      	bne.n	8007384 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80072d2:	2301      	movs	r3, #1
 80072d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	78db      	ldrb	r3, [r3, #3]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	8a92      	ldrh	r2, [r2, #20]
 80072e4:	fb03 f202 	mul.w	r2, r3, r2
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61da      	str	r2, [r3, #28]
 80072ec:	e07c      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	7c9b      	ldrb	r3, [r3, #18]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d130      	bne.n	8007358 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80072fc:	d918      	bls.n	8007330 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	8a9b      	ldrh	r3, [r3, #20]
 8007302:	461a      	mov	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	69da      	ldr	r2, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d003      	beq.n	8007320 <USB_HC_StartXfer+0xdc>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d103      	bne.n	8007328 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2202      	movs	r2, #2
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	e05f      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2201      	movs	r2, #1
 800732c:	60da      	str	r2, [r3, #12]
 800732e:	e05b      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6a1a      	ldr	r2, [r3, #32]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d007      	beq.n	8007350 <USB_HC_StartXfer+0x10c>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d003      	beq.n	8007350 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2204      	movs	r2, #4
 800734c:	60da      	str	r2, [r3, #12]
 800734e:	e04b      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2203      	movs	r2, #3
 8007354:	60da      	str	r2, [r3, #12]
 8007356:	e047      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d10d      	bne.n	800737a <USB_HC_StartXfer+0x136>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	8a92      	ldrh	r2, [r2, #20]
 8007366:	4293      	cmp	r3, r2
 8007368:	d907      	bls.n	800737a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800736a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	8a92      	ldrh	r2, [r2, #20]
 8007370:	fb03 f202 	mul.w	r2, r3, r2
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	61da      	str	r2, [r3, #28]
 8007378:	e036      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	61da      	str	r2, [r3, #28]
 8007382:	e031      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d018      	beq.n	80073be <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	8a92      	ldrh	r2, [r2, #20]
 8007394:	4413      	add	r3, r2
 8007396:	3b01      	subs	r3, #1
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	8a92      	ldrh	r2, [r2, #20]
 800739c:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80073a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80073a4:	8b7b      	ldrh	r3, [r7, #26]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d90b      	bls.n	80073c2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80073aa:	8b7b      	ldrh	r3, [r7, #26]
 80073ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	8a92      	ldrh	r2, [r2, #20]
 80073b4:	fb03 f202 	mul.w	r2, r3, r2
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	61da      	str	r2, [r3, #28]
 80073bc:	e001      	b.n	80073c2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80073be:	2301      	movs	r3, #1
 80073c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	78db      	ldrb	r3, [r3, #3]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	8a92      	ldrh	r2, [r2, #20]
 80073d0:	fb03 f202 	mul.w	r2, r3, r2
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	61da      	str	r2, [r3, #28]
 80073d8:	e006      	b.n	80073e8 <USB_HC_StartXfer+0x1a4>
 80073da:	bf00      	nop
 80073dc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073f2:	04d9      	lsls	r1, r3, #19
 80073f4:	4ba3      	ldr	r3, [pc, #652]	@ (8007684 <USB_HC_StartXfer+0x440>)
 80073f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	7d9b      	ldrb	r3, [r3, #22]
 80073fe:	075b      	lsls	r3, r3, #29
 8007400:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007404:	69f9      	ldr	r1, [r7, #28]
 8007406:	0148      	lsls	r0, r1, #5
 8007408:	6a39      	ldr	r1, [r7, #32]
 800740a:	4401      	add	r1, r0
 800740c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007410:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007412:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6999      	ldr	r1, [r3, #24]
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800742a:	460a      	mov	r2, r1
 800742c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	440a      	add	r2, r1
 800745c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007460:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007464:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	7e7b      	ldrb	r3, [r7, #25]
 8007476:	075b      	lsls	r3, r3, #29
 8007478:	69f9      	ldr	r1, [r7, #28]
 800747a:	0148      	lsls	r0, r1, #5
 800747c:	6a39      	ldr	r1, [r7, #32]
 800747e:	4401      	add	r1, r0
 8007480:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	799b      	ldrb	r3, [r3, #6]
 800748c:	2b01      	cmp	r3, #1
 800748e:	f040 80c3 	bne.w	8007618 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	7c5b      	ldrb	r3, [r3, #17]
 8007496:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800749c:	4313      	orrs	r3, r2
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80074aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80074ae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	6a3a      	ldr	r2, [r7, #32]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80074ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	79db      	ldrb	r3, [r3, #7]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d123      	bne.n	8007520 <USB_HC_StartXfer+0x2dc>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	78db      	ldrb	r3, [r3, #3]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d11f      	bne.n	8007520 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	6a3a      	ldr	r2, [r7, #32]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074fe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	4413      	add	r3, r2
 8007508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	6a3a      	ldr	r2, [r7, #32]
 8007514:	440a      	add	r2, r1
 8007516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800751a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800751e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	7c9b      	ldrb	r3, [r3, #18]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d003      	beq.n	8007530 <USB_HC_StartXfer+0x2ec>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	7c9b      	ldrb	r3, [r3, #18]
 800752c:	2b03      	cmp	r3, #3
 800752e:	d117      	bne.n	8007560 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007534:	2b01      	cmp	r3, #1
 8007536:	d113      	bne.n	8007560 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	78db      	ldrb	r3, [r3, #3]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10f      	bne.n	8007560 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	4413      	add	r3, r2
 8007548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	0151      	lsls	r1, r2, #5
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	440a      	add	r2, r1
 8007556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800755a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800755e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	7c9b      	ldrb	r3, [r3, #18]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d162      	bne.n	800762e <USB_HC_StartXfer+0x3ea>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d15e      	bne.n	800762e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	3b01      	subs	r3, #1
 8007576:	2b03      	cmp	r3, #3
 8007578:	d858      	bhi.n	800762c <USB_HC_StartXfer+0x3e8>
 800757a:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <USB_HC_StartXfer+0x33c>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	08007591 	.word	0x08007591
 8007584:	080075b3 	.word	0x080075b3
 8007588:	080075d5 	.word	0x080075d5
 800758c:	080075f7 	.word	0x080075f7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	4413      	add	r3, r2
 8007598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	6a3a      	ldr	r2, [r7, #32]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ae:	6053      	str	r3, [r2, #4]
          break;
 80075b0:	e03d      	b.n	800762e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075cc:	f043 030e 	orr.w	r3, r3, #14
 80075d0:	6053      	str	r3, [r2, #4]
          break;
 80075d2:	e02c      	b.n	800762e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	6a3a      	ldr	r2, [r7, #32]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075f2:	6053      	str	r3, [r2, #4]
          break;
 80075f4:	e01b      	b.n	800762e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	440a      	add	r2, r1
 800760c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007614:	6053      	str	r3, [r2, #4]
          break;
 8007616:	e00a      	b.n	800762e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	4413      	add	r3, r2
 8007620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007624:	461a      	mov	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	6053      	str	r3, [r2, #4]
 800762a:	e000      	b.n	800762e <USB_HC_StartXfer+0x3ea>
          break;
 800762c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	4413      	add	r3, r2
 8007636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007644:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	78db      	ldrb	r3, [r3, #3]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d004      	beq.n	8007658 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	e003      	b.n	8007660 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800765e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007666:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	4413      	add	r3, r2
 8007670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007674:	461a      	mov	r2, r3
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	e055      	b.n	8007730 <USB_HC_StartXfer+0x4ec>
 8007684:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	78db      	ldrb	r3, [r3, #3]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d14e      	bne.n	800772e <USB_HC_StartXfer+0x4ea>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d04a      	beq.n	800772e <USB_HC_StartXfer+0x4ea>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	79db      	ldrb	r3, [r3, #7]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d146      	bne.n	800772e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	7c9b      	ldrb	r3, [r3, #18]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d831      	bhi.n	800770c <USB_HC_StartXfer+0x4c8>
 80076a8:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <USB_HC_StartXfer+0x46c>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	080076c1 	.word	0x080076c1
 80076bc:	080076e5 	.word	0x080076e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	3303      	adds	r3, #3
 80076c6:	089b      	lsrs	r3, r3, #2
 80076c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80076ca:	8afa      	ldrh	r2, [r7, #22]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d91c      	bls.n	8007710 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f043 0220 	orr.w	r2, r3, #32
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80076e2:	e015      	b.n	8007710 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	3303      	adds	r3, #3
 80076ea:	089b      	lsrs	r3, r3, #2
 80076ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80076ee:	8afa      	ldrh	r2, [r7, #22]
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d90a      	bls.n	8007714 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	619a      	str	r2, [r3, #24]
        }
        break;
 800770a:	e003      	b.n	8007714 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800770c:	bf00      	nop
 800770e:	e002      	b.n	8007716 <USB_HC_StartXfer+0x4d2>
        break;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <USB_HC_StartXfer+0x4d2>
        break;
 8007714:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6999      	ldr	r1, [r3, #24]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	785a      	ldrb	r2, [r3, #1]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	b29b      	uxth	r3, r3
 8007724:	2000      	movs	r0, #0
 8007726:	9000      	str	r0, [sp, #0]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff f9c3 	bl	8006ab4 <USB_WritePacket>
  }

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3728      	adds	r7, #40	@ 0x28
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	b29b      	uxth	r3, r3
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800775a:	b480      	push	{r7}
 800775c:	b089      	sub	sp, #36	@ 0x24
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	0c9b      	lsrs	r3, r3, #18
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	0fdb      	lsrs	r3, r3, #31
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	0fdb      	lsrs	r3, r3, #31
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d10d      	bne.n	80077dc <USB_HC_Halt+0x82>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <USB_HC_Halt+0x82>
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <USB_HC_Halt+0x7e>
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d101      	bne.n	80077dc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e0d8      	b.n	800798e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <USB_HC_Halt+0x8e>
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d173      	bne.n	80078d0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007802:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007806:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d14a      	bne.n	80078aa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d133      	bne.n	8007888 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	440a      	add	r2, r1
 8007836:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800783a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800783e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	440a      	add	r2, r1
 8007856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800785a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800785e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3301      	adds	r3, #1
 8007864:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800786c:	d82e      	bhi.n	80078cc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007880:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007884:	d0ec      	beq.n	8007860 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007886:	e081      	b.n	800798c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	440a      	add	r2, r1
 800789e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078a6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078a8:	e070      	b.n	800798c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078ca:	e05f      	b.n	800798c <USB_HC_Halt+0x232>
            break;
 80078cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078ce:	e05d      	b.n	800798c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d133      	bne.n	8007968 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	440a      	add	r2, r1
 8007916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800791a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800791e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	440a      	add	r2, r1
 8007936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800793a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800793e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3301      	adds	r3, #1
 8007944:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800794c:	d81d      	bhi.n	800798a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007964:	d0ec      	beq.n	8007940 <USB_HC_Halt+0x1e6>
 8007966:	e011      	b.n	800798c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	440a      	add	r2, r1
 800797e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e000      	b.n	800798c <USB_HC_Halt+0x232>
          break;
 800798a:	bf00      	nop
    }
  }

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3724      	adds	r7, #36	@ 0x24
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80079b0:	2301      	movs	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	04da      	lsls	r2, r3, #19
 80079b8:	4b15      	ldr	r3, [pc, #84]	@ (8007a10 <USB_DoPing+0x74>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fa:	461a      	mov	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	1ff80000 	.word	0x1ff80000

08007a14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7fe ff86 	bl	800693a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a2e:	2110      	movs	r1, #16
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7fe ffdf 	bl	80069f4 <USB_FlushTxFifo>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff f809 	bl	8006a58 <USB_FlushRxFifo>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a50:	2300      	movs	r3, #0
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e01f      	b.n	8007a96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	3301      	adds	r3, #1
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b0f      	cmp	r3, #15
 8007a9a:	d9dc      	bls.n	8007a56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61bb      	str	r3, [r7, #24]
 8007aa0:	e034      	b.n	8007b0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ab8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ac0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ac8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ae8:	d80c      	bhi.n	8007b04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007afc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b00:	d0ec      	beq.n	8007adc <USB_StopHost+0xc8>
 8007b02:	e000      	b.n	8007b06 <USB_StopHost+0xf2>
        break;
 8007b04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	61bb      	str	r3, [r7, #24]
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b0f      	cmp	r3, #15
 8007b10:	d9c7      	bls.n	8007aa2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fe fef5 	bl	8006918 <USB_EnableGlobalInt>

  return ret;
 8007b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b089      	sub	sp, #36	@ 0x24
 8007b3c:	af04      	add	r7, sp, #16
 8007b3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007b40:	2301      	movs	r3, #1
 8007b42:	2202      	movs	r2, #2
 8007b44:	2102      	movs	r1, #2
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fc83 	bl	8008452 <USBH_FindInterface>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2bff      	cmp	r3, #255	@ 0xff
 8007b54:	d002      	beq.n	8007b5c <USBH_CDC_InterfaceInit+0x24>
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d901      	bls.n	8007b60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e13d      	b.n	8007ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fc58 	bl	800841a <USBH_SelectInterface>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007b74:	2302      	movs	r3, #2
 8007b76:	e131      	b.n	8007ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007b7e:	2050      	movs	r0, #80	@ 0x50
 8007b80:	f002 fb6a 	bl	800a258 <malloc>
 8007b84:	4603      	mov	r3, r0
 8007b86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e11f      	b.n	8007ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007b9c:	2250      	movs	r2, #80	@ 0x50
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	68b8      	ldr	r0, [r7, #8]
 8007ba2:	f002 fc17 	bl	800a3d4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	211a      	movs	r1, #26
 8007bac:	fb01 f303 	mul.w	r3, r1, r3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da15      	bge.n	8007bea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	211a      	movs	r1, #26
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	4413      	add	r3, r2
 8007bca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	211a      	movs	r1, #26
 8007bda:	fb01 f303 	mul.w	r3, r1, r3
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007be4:	881a      	ldrh	r2, [r3, #0]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 ffc4 	bl	8009b7e <USBH_AllocPipe>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	7819      	ldrb	r1, [r3, #0]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	7858      	ldrb	r0, [r3, #1]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	8952      	ldrh	r2, [r2, #10]
 8007c16:	9202      	str	r2, [sp, #8]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	9201      	str	r2, [sp, #4]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	4623      	mov	r3, r4
 8007c20:	4602      	mov	r2, r0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 ff7c 	bl	8009b20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f002 fa8b 	bl	800a14c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007c36:	2300      	movs	r3, #0
 8007c38:	2200      	movs	r2, #0
 8007c3a:	210a      	movs	r1, #10
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fc08 	bl	8008452 <USBH_FindInterface>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2bff      	cmp	r3, #255	@ 0xff
 8007c4a:	d002      	beq.n	8007c52 <USBH_CDC_InterfaceInit+0x11a>
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d901      	bls.n	8007c56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c52:	2302      	movs	r3, #2
 8007c54:	e0c2      	b.n	8007ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	211a      	movs	r1, #26
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	4413      	add	r3, r2
 8007c62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	b25b      	sxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	da16      	bge.n	8007c9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	211a      	movs	r1, #26
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	4413      	add	r3, r2
 8007c7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	211a      	movs	r1, #26
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007c94:	881a      	ldrh	r2, [r3, #0]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	835a      	strh	r2, [r3, #26]
 8007c9a:	e015      	b.n	8007cc8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	211a      	movs	r1, #26
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007cac:	781a      	ldrb	r2, [r3, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	211a      	movs	r1, #26
 8007cb8:	fb01 f303 	mul.w	r3, r1, r3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007cc2:	881a      	ldrh	r2, [r3, #0]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	211a      	movs	r1, #26
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	b25b      	sxtb	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da16      	bge.n	8007d0e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	211a      	movs	r1, #26
 8007ce6:	fb01 f303 	mul.w	r3, r1, r3
 8007cea:	4413      	add	r3, r2
 8007cec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	211a      	movs	r1, #26
 8007cfc:	fb01 f303 	mul.w	r3, r1, r3
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007d06:	881a      	ldrh	r2, [r3, #0]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	835a      	strh	r2, [r3, #26]
 8007d0c:	e015      	b.n	8007d3a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	211a      	movs	r1, #26
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	4413      	add	r3, r2
 8007d1a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	211a      	movs	r1, #26
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007d34:	881a      	ldrh	r2, [r3, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	7b9b      	ldrb	r3, [r3, #14]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 ff1c 	bl	8009b7e <USBH_AllocPipe>
 8007d46:	4603      	mov	r3, r0
 8007d48:	461a      	mov	r2, r3
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	7bdb      	ldrb	r3, [r3, #15]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 ff12 	bl	8009b7e <USBH_AllocPipe>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	7b59      	ldrb	r1, [r3, #13]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	7b98      	ldrb	r0, [r3, #14]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	8b12      	ldrh	r2, [r2, #24]
 8007d7a:	9202      	str	r2, [sp, #8]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	9201      	str	r2, [sp, #4]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	4623      	mov	r3, r4
 8007d84:	4602      	mov	r2, r0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 feca 	bl	8009b20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	7b19      	ldrb	r1, [r3, #12]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	7bd8      	ldrb	r0, [r3, #15]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	8b52      	ldrh	r2, [r2, #26]
 8007da4:	9202      	str	r2, [sp, #8]
 8007da6:	2202      	movs	r2, #2
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	4623      	mov	r3, r4
 8007dae:	4602      	mov	r2, r0
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 feb5 	bl	8009b20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	7b5b      	ldrb	r3, [r3, #13]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f002 f9c0 	bl	800a14c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	7b1b      	ldrb	r3, [r3, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f002 f9b9 	bl	800a14c <USBH_LL_SetToggle>

  return USBH_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}

08007de4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00e      	beq.n	8007e1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 feaa 	bl	8009b5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 fed5 	bl	8009bc0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	7b1b      	ldrb	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00e      	beq.n	8007e42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	7b1b      	ldrb	r3, [r3, #12]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 fe97 	bl	8009b5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	7b1b      	ldrb	r3, [r3, #12]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 fec2 	bl	8009bc0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	7b5b      	ldrb	r3, [r3, #13]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00e      	beq.n	8007e68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	7b5b      	ldrb	r3, [r3, #13]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fe84 	bl	8009b5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	7b5b      	ldrb	r3, [r3, #13]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 feaf 	bl	8009bc0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f002 f9f3 	bl	800a268 <free>
    phost->pActiveClass->pData = 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e88:	2200      	movs	r2, #0
 8007e8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3340      	adds	r3, #64	@ 0x40
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f8b1 	bl	8008016 <GetLineCoding>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ec4:	2102      	movs	r1, #2
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007eca:	7afb      	ldrb	r3, [r7, #11]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d877      	bhi.n	8007fe8 <USBH_CDC_Process+0x114>
 8007ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8007f00 <USBH_CDC_Process+0x2c>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007f15 	.word	0x08007f15
 8007f04:	08007f1b 	.word	0x08007f1b
 8007f08:	08007f4b 	.word	0x08007f4b
 8007f0c:	08007fbf 	.word	0x08007fbf
 8007f10:	08007fcd 	.word	0x08007fcd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
      break;
 8007f18:	e06d      	b.n	8007ff6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f897 	bl	8008054 <SetLineCoding>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d104      	bne.n	8007f3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007f38:	e058      	b.n	8007fec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d055      	beq.n	8007fec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2204      	movs	r2, #4
 8007f44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007f48:	e050      	b.n	8007fec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	3340      	adds	r3, #64	@ 0x40
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f860 	bl	8008016 <GetLineCoding>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d126      	bne.n	8007fae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f72:	791b      	ldrb	r3, [r3, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d13b      	bne.n	8007ff0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d133      	bne.n	8007ff0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d12b      	bne.n	8007ff0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fa0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d124      	bne.n	8007ff0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f958 	bl	800825c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007fac:	e020      	b.n	8007ff0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d01d      	beq.n	8007ff0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007fbc:	e018      	b.n	8007ff0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f867 	bl	8008092 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f8da 	bl	800817e <CDC_ProcessReception>
      break;
 8007fca:	e014      	b.n	8007ff6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007fcc:	2100      	movs	r1, #0
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f81e 	bl	8009010 <USBH_ClrFeature>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007fe6:	e005      	b.n	8007ff4 <USBH_CDC_Process+0x120>

    default:
      break;
 8007fe8:	bf00      	nop
 8007fea:	e004      	b.n	8007ff6 <USBH_CDC_Process+0x122>
      break;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <USBH_CDC_Process+0x122>
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <USBH_CDC_Process+0x122>
      break;
 8007ff4:	bf00      	nop

  }

  return status;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	22a1      	movs	r2, #161	@ 0xa1
 8008024:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2221      	movs	r2, #33	@ 0x21
 800802a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2207      	movs	r2, #7
 800803c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2207      	movs	r2, #7
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fb17 	bl	8009678 <USBH_CtlReq>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2221      	movs	r2, #33	@ 0x21
 8008062:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2207      	movs	r2, #7
 800807a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2207      	movs	r2, #7
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 faf8 	bl	8009678 <USBH_CtlReq>
 8008088:	4603      	mov	r3, r0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af02      	add	r7, sp, #8
 8008098:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d002      	beq.n	80080b8 <CDC_ProcessTransmission+0x26>
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d023      	beq.n	80080fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80080b6:	e05e      	b.n	8008176 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	8b12      	ldrh	r2, [r2, #24]
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d90b      	bls.n	80080dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	69d9      	ldr	r1, [r3, #28]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8b1a      	ldrh	r2, [r3, #24]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	7b5b      	ldrb	r3, [r3, #13]
 80080d0:	2001      	movs	r0, #1
 80080d2:	9000      	str	r0, [sp, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 fce0 	bl	8009a9a <USBH_BulkSendData>
 80080da:	e00b      	b.n	80080f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	7b5b      	ldrb	r3, [r3, #13]
 80080ea:	2001      	movs	r0, #1
 80080ec:	9000      	str	r0, [sp, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 fcd3 	bl	8009a9a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80080fc:	e03b      	b.n	8008176 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	7b5b      	ldrb	r3, [r3, #13]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 fff7 	bl	800a0f8 <USBH_LL_GetURBState>
 800810a:	4603      	mov	r3, r0
 800810c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800810e:	7afb      	ldrb	r3, [r7, #11]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d128      	bne.n	8008166 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	8b12      	ldrh	r2, [r2, #24]
 800811c:	4293      	cmp	r3, r2
 800811e:	d90e      	bls.n	800813e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	8b12      	ldrh	r2, [r2, #24]
 8008128:	1a9a      	subs	r2, r3, r2
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	8b12      	ldrh	r2, [r2, #24]
 8008136:	441a      	add	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	61da      	str	r2, [r3, #28]
 800813c:	e002      	b.n	8008144 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008154:	e00e      	b.n	8008174 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f868 	bl	8008234 <USBH_CDC_TransmitCallback>
      break;
 8008164:	e006      	b.n	8008174 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d103      	bne.n	8008174 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008174:	bf00      	nop
  }
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b086      	sub	sp, #24
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008190:	2300      	movs	r3, #0
 8008192:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800819a:	2b03      	cmp	r3, #3
 800819c:	d002      	beq.n	80081a4 <CDC_ProcessReception+0x26>
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d00e      	beq.n	80081c0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80081a2:	e043      	b.n	800822c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	6a19      	ldr	r1, [r3, #32]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	8b5a      	ldrh	r2, [r3, #26]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	7b1b      	ldrb	r3, [r3, #12]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 fc97 	bl	8009ae4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2204      	movs	r2, #4
 80081ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80081be:	e035      	b.n	800822c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	7b1b      	ldrb	r3, [r3, #12]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 ff96 	bl	800a0f8 <USBH_LL_GetURBState>
 80081cc:	4603      	mov	r3, r0
 80081ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80081d0:	7cfb      	ldrb	r3, [r7, #19]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d129      	bne.n	800822a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	7b1b      	ldrb	r3, [r3, #12]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fef9 	bl	8009fd4 <USBH_LL_GetLastXferSize>
 80081e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d016      	beq.n	800821c <CDC_ProcessReception+0x9e>
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	8b5b      	ldrh	r3, [r3, #26]
 80081f2:	461a      	mov	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d110      	bne.n	800821c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad2      	subs	r2, r2, r3
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6a1a      	ldr	r2, [r3, #32]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	441a      	add	r2, r3
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2203      	movs	r2, #3
 8008216:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800821a:	e006      	b.n	800822a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f80f 	bl	8008248 <USBH_CDC_ReceiveCallback>
      break;
 800822a:	bf00      	nop
  }
}
 800822c:	bf00      	nop
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008284:	2302      	movs	r3, #2
 8008286:	e029      	b.n	80082dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	79fa      	ldrb	r2, [r7, #7]
 800828c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f81f 	bl	80082e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f001 fdc9 	bl	8009e6c <USBH_LL_Init>

  return USBH_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e009      	b.n	8008306 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	33e0      	adds	r3, #224	@ 0xe0
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	2200      	movs	r2, #0
 80082fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b0f      	cmp	r3, #15
 800830a:	d9f2      	bls.n	80082f2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e009      	b.n	8008326 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800832c:	d3f1      	bcc.n	8008312 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2240      	movs	r2, #64	@ 0x40
 8008352:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	331c      	adds	r3, #28
 800837e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f002 f825 	bl	800a3d4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f002 f81c 	bl	800a3d4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80083a2:	2212      	movs	r2, #18
 80083a4:	2100      	movs	r1, #0
 80083a6:	4618      	mov	r0, r3
 80083a8:	f002 f814 	bl	800a3d4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80083b2:	223e      	movs	r2, #62	@ 0x3e
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f002 f80c 	bl	800a3d4 <memset>

  return USBH_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d016      	beq.n	8008408 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10e      	bne.n	8008402 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80083ea:	1c59      	adds	r1, r3, #1
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	33de      	adds	r3, #222	@ 0xde
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
 8008400:	e004      	b.n	800840c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008402:	2302      	movs	r3, #2
 8008404:	73fb      	strb	r3, [r7, #15]
 8008406:	e001      	b.n	800840c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008408:	2302      	movs	r3, #2
 800840a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	429a      	cmp	r2, r3
 8008434:	d204      	bcs.n	8008440 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	78fa      	ldrb	r2, [r7, #3]
 800843a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800843e:	e001      	b.n	8008444 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008440:	2302      	movs	r3, #2
 8008442:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	4608      	mov	r0, r1
 800845c:	4611      	mov	r1, r2
 800845e:	461a      	mov	r2, r3
 8008460:	4603      	mov	r3, r0
 8008462:	70fb      	strb	r3, [r7, #3]
 8008464:	460b      	mov	r3, r1
 8008466:	70bb      	strb	r3, [r7, #2]
 8008468:	4613      	mov	r3, r2
 800846a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800847a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800847c:	e025      	b.n	80084ca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	221a      	movs	r2, #26
 8008482:	fb02 f303 	mul.w	r3, r2, r3
 8008486:	3308      	adds	r3, #8
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	3302      	adds	r3, #2
 800848e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	795b      	ldrb	r3, [r3, #5]
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	429a      	cmp	r2, r3
 8008498:	d002      	beq.n	80084a0 <USBH_FindInterface+0x4e>
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	2bff      	cmp	r3, #255	@ 0xff
 800849e:	d111      	bne.n	80084c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80084a4:	78ba      	ldrb	r2, [r7, #2]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d002      	beq.n	80084b0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084aa:	78bb      	ldrb	r3, [r7, #2]
 80084ac:	2bff      	cmp	r3, #255	@ 0xff
 80084ae:	d109      	bne.n	80084c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084b4:	787a      	ldrb	r2, [r7, #1]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d002      	beq.n	80084c0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80084ba:	787b      	ldrb	r3, [r7, #1]
 80084bc:	2bff      	cmp	r3, #255	@ 0xff
 80084be:	d101      	bne.n	80084c4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	e006      	b.n	80084d2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	3301      	adds	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d9d6      	bls.n	800847e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80084d0:	23ff      	movs	r3, #255	@ 0xff
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 fcfc 	bl	8009ee4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80084ec:	2101      	movs	r1, #1
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 fe15 	bl	800a11e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af04      	add	r7, sp, #16
 8008506:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008508:	2302      	movs	r3, #2
 800850a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b01      	cmp	r3, #1
 800851a:	d102      	bne.n	8008522 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2203      	movs	r2, #3
 8008520:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b0b      	cmp	r3, #11
 800852a:	f200 81bc 	bhi.w	80088a6 <USBH_Process+0x3a6>
 800852e:	a201      	add	r2, pc, #4	@ (adr r2, 8008534 <USBH_Process+0x34>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008565 	.word	0x08008565
 8008538:	08008597 	.word	0x08008597
 800853c:	08008601 	.word	0x08008601
 8008540:	08008841 	.word	0x08008841
 8008544:	080088a7 	.word	0x080088a7
 8008548:	080086a1 	.word	0x080086a1
 800854c:	080087e7 	.word	0x080087e7
 8008550:	080086d7 	.word	0x080086d7
 8008554:	080086f7 	.word	0x080086f7
 8008558:	08008715 	.word	0x08008715
 800855c:	08008759 	.word	0x08008759
 8008560:	08008829 	.word	0x08008829
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 819c 	beq.w	80088aa <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008578:	20c8      	movs	r0, #200	@ 0xc8
 800857a:	f001 fe1a 	bl	800a1b2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 fd0d 	bl	8009f9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008594:	e189      	b.n	80088aa <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d107      	bne.n	80085b2 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80085b0:	e18a      	b.n	80088c8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80085b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085bc:	d914      	bls.n	80085e8 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80085c4:	3301      	adds	r3, #1
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d903      	bls.n	80085e0 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	220d      	movs	r2, #13
 80085dc:	701a      	strb	r2, [r3, #0]
      break;
 80085de:	e173      	b.n	80088c8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
      break;
 80085e6:	e16f      	b.n	80088c8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80085ee:	f103 020a 	add.w	r2, r3, #10
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80085f8:	200a      	movs	r0, #10
 80085fa:	f001 fdda 	bl	800a1b2 <USBH_Delay>
      break;
 80085fe:	e163      	b.n	80088c8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008610:	2104      	movs	r1, #4
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008616:	2064      	movs	r0, #100	@ 0x64
 8008618:	f001 fdcb 	bl	800a1b2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 fc97 	bl	8009f50 <USBH_LL_GetSpeed>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2205      	movs	r2, #5
 8008630:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008632:	2100      	movs	r1, #0
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 faa2 	bl	8009b7e <USBH_AllocPipe>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008642:	2180      	movs	r1, #128	@ 0x80
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 fa9a 	bl	8009b7e <USBH_AllocPipe>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7919      	ldrb	r1, [r3, #4]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008666:	9202      	str	r2, [sp, #8]
 8008668:	2200      	movs	r2, #0
 800866a:	9201      	str	r2, [sp, #4]
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	4603      	mov	r3, r0
 8008670:	2280      	movs	r2, #128	@ 0x80
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fa54 	bl	8009b20 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7959      	ldrb	r1, [r3, #5]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800868c:	9202      	str	r2, [sp, #8]
 800868e:	2200      	movs	r2, #0
 8008690:	9201      	str	r2, [sp, #4]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	4603      	mov	r3, r0
 8008696:	2200      	movs	r2, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fa41 	bl	8009b20 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800869e:	e113      	b.n	80088c8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f917 	bl	80088d4 <USBH_HandleEnum>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f040 80fd 	bne.w	80088ae <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d103      	bne.n	80086ce <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2208      	movs	r2, #8
 80086ca:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80086cc:	e0ef      	b.n	80088ae <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2207      	movs	r2, #7
 80086d2:	701a      	strb	r2, [r3, #0]
      break;
 80086d4:	e0eb      	b.n	80088ae <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80e8 	beq.w	80088b2 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086e8:	2101      	movs	r1, #1
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2208      	movs	r2, #8
 80086f2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80086f4:	e0dd      	b.n	80088b2 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fc3f 	bl	8008f82 <USBH_SetCfg>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 80d5 	bne.w	80088b6 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2209      	movs	r2, #9
 8008710:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008712:	e0d0      	b.n	80088b6 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b00      	cmp	r3, #0
 8008720:	d016      	beq.n	8008750 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008722:	2101      	movs	r1, #1
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fc4f 	bl	8008fc8 <USBH_SetFeature>
 800872a:	4603      	mov	r3, r0
 800872c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d103      	bne.n	800873e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	220a      	movs	r2, #10
 800873a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800873c:	e0bd      	b.n	80088ba <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b03      	cmp	r3, #3
 8008744:	f040 80b9 	bne.w	80088ba <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	220a      	movs	r2, #10
 800874c:	701a      	strb	r2, [r3, #0]
      break;
 800874e:	e0b4      	b.n	80088ba <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	220a      	movs	r2, #10
 8008754:	701a      	strb	r2, [r3, #0]
      break;
 8008756:	e0b0      	b.n	80088ba <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80ad 	beq.w	80088be <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	e016      	b.n	80087a0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008772:	7bfa      	ldrb	r2, [r7, #15]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	32de      	adds	r2, #222	@ 0xde
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	791a      	ldrb	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008784:	429a      	cmp	r2, r3
 8008786:	d108      	bne.n	800879a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008788:	7bfa      	ldrb	r2, [r7, #15]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	32de      	adds	r2, #222	@ 0xde
 800878e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008798:	e005      	b.n	80087a6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	3301      	adds	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0e5      	beq.n	8008772 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d016      	beq.n	80087de <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	4798      	blx	r3
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2206      	movs	r2, #6
 80087c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087ce:	2103      	movs	r1, #3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80087d4:	e073      	b.n	80088be <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	220d      	movs	r2, #13
 80087da:	701a      	strb	r2, [r3, #0]
      break;
 80087dc:	e06f      	b.n	80088be <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	220d      	movs	r2, #13
 80087e2:	701a      	strb	r2, [r3, #0]
      break;
 80087e4:	e06b      	b.n	80088be <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d017      	beq.n	8008820 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d103      	bne.n	8008810 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	220b      	movs	r2, #11
 800880c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800880e:	e058      	b.n	80088c2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d154      	bne.n	80088c2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	220d      	movs	r2, #13
 800881c:	701a      	strb	r2, [r3, #0]
      break;
 800881e:	e050      	b.n	80088c2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220d      	movs	r2, #13
 8008824:	701a      	strb	r2, [r3, #0]
      break;
 8008826:	e04c      	b.n	80088c2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d049      	beq.n	80088c6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
      }
      break;
 800883e:	e042      	b.n	80088c6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fd4b 	bl	80082e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d009      	beq.n	800886c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800887c:	2105      	movs	r1, #5
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b01      	cmp	r3, #1
 800888c:	d107      	bne.n	800889e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff fe21 	bl	80084de <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800889c:	e014      	b.n	80088c8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fb20 	bl	8009ee4 <USBH_LL_Start>
      break;
 80088a4:	e010      	b.n	80088c8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80088a6:	bf00      	nop
 80088a8:	e00e      	b.n	80088c8 <USBH_Process+0x3c8>
      break;
 80088aa:	bf00      	nop
 80088ac:	e00c      	b.n	80088c8 <USBH_Process+0x3c8>
      break;
 80088ae:	bf00      	nop
 80088b0:	e00a      	b.n	80088c8 <USBH_Process+0x3c8>
    break;
 80088b2:	bf00      	nop
 80088b4:	e008      	b.n	80088c8 <USBH_Process+0x3c8>
      break;
 80088b6:	bf00      	nop
 80088b8:	e006      	b.n	80088c8 <USBH_Process+0x3c8>
      break;
 80088ba:	bf00      	nop
 80088bc:	e004      	b.n	80088c8 <USBH_Process+0x3c8>
      break;
 80088be:	bf00      	nop
 80088c0:	e002      	b.n	80088c8 <USBH_Process+0x3c8>
      break;
 80088c2:	bf00      	nop
 80088c4:	e000      	b.n	80088c8 <USBH_Process+0x3c8>
      break;
 80088c6:	bf00      	nop
  }
  return USBH_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop

080088d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af04      	add	r7, sp, #16
 80088da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80088e0:	2301      	movs	r3, #1
 80088e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	2b07      	cmp	r3, #7
 80088ea:	f200 81bd 	bhi.w	8008c68 <USBH_HandleEnum+0x394>
 80088ee:	a201      	add	r2, pc, #4	@ (adr r2, 80088f4 <USBH_HandleEnum+0x20>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008915 	.word	0x08008915
 80088f8:	080089cf 	.word	0x080089cf
 80088fc:	08008a39 	.word	0x08008a39
 8008900:	08008ac3 	.word	0x08008ac3
 8008904:	08008b2d 	.word	0x08008b2d
 8008908:	08008b9d 	.word	0x08008b9d
 800890c:	08008be3 	.word	0x08008be3
 8008910:	08008c29 	.word	0x08008c29
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008914:	2108      	movs	r1, #8
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa50 	bl	8008dbc <USBH_Get_DevDesc>
 800891c:	4603      	mov	r3, r0
 800891e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d12e      	bne.n	8008984 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7919      	ldrb	r1, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800894a:	9202      	str	r2, [sp, #8]
 800894c:	2200      	movs	r2, #0
 800894e:	9201      	str	r2, [sp, #4]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4603      	mov	r3, r0
 8008954:	2280      	movs	r2, #128	@ 0x80
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f8e2 	bl	8009b20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7959      	ldrb	r1, [r3, #5]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008970:	9202      	str	r2, [sp, #8]
 8008972:	2200      	movs	r2, #0
 8008974:	9201      	str	r2, [sp, #4]
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	4603      	mov	r3, r0
 800897a:	2200      	movs	r2, #0
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 f8cf 	bl	8009b20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008982:	e173      	b.n	8008c6c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b03      	cmp	r3, #3
 8008988:	f040 8170 	bne.w	8008c6c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008992:	3301      	adds	r3, #1
 8008994:	b2da      	uxtb	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d903      	bls.n	80089ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	220d      	movs	r2, #13
 80089aa:	701a      	strb	r2, [r3, #0]
      break;
 80089ac:	e15e      	b.n	8008c6c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	795b      	ldrb	r3, [r3, #5]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f903 	bl	8009bc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	791b      	ldrb	r3, [r3, #4]
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 f8fd 	bl	8009bc0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
      break;
 80089cc:	e14e      	b.n	8008c6c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80089ce:	2112      	movs	r1, #18
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f9f3 	bl	8008dbc <USBH_Get_DevDesc>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d103      	bne.n	80089e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089e6:	e143      	b.n	8008c70 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	f040 8140 	bne.w	8008c70 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089f6:	3301      	adds	r3, #1
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d903      	bls.n	8008a12 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	220d      	movs	r2, #13
 8008a0e:	701a      	strb	r2, [r3, #0]
      break;
 8008a10:	e12e      	b.n	8008c70 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	795b      	ldrb	r3, [r3, #5]
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 f8d1 	bl	8009bc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	791b      	ldrb	r3, [r3, #4]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f8cb 	bl	8009bc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]
      break;
 8008a36:	e11b      	b.n	8008c70 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008a38:	2101      	movs	r1, #1
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa7d 	bl	8008f3a <USBH_SetAddress>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d130      	bne.n	8008aac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008a4a:	2002      	movs	r0, #2
 8008a4c:	f001 fbb1 	bl	800a1b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	7919      	ldrb	r1, [r3, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a72:	9202      	str	r2, [sp, #8]
 8008a74:	2200      	movs	r2, #0
 8008a76:	9201      	str	r2, [sp, #4]
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2280      	movs	r2, #128	@ 0x80
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 f84e 	bl	8009b20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	7959      	ldrb	r1, [r3, #5]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a98:	9202      	str	r2, [sp, #8]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	9201      	str	r2, [sp, #4]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 f83b 	bl	8009b20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008aaa:	e0e3      	b.n	8008c74 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	f040 80e0 	bne.w	8008c74 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	220d      	movs	r2, #13
 8008ab8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	705a      	strb	r2, [r3, #1]
      break;
 8008ac0:	e0d8      	b.n	8008c74 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008ac2:	2109      	movs	r1, #9
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f9a5 	bl	8008e14 <USBH_Get_CfgDesc>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d103      	bne.n	8008adc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ada:	e0cd      	b.n	8008c78 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	f040 80ca 	bne.w	8008c78 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008aea:	3301      	adds	r3, #1
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d903      	bls.n	8008b06 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	220d      	movs	r2, #13
 8008b02:	701a      	strb	r2, [r3, #0]
      break;
 8008b04:	e0b8      	b.n	8008c78 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	795b      	ldrb	r3, [r3, #5]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f857 	bl	8009bc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 f851 	bl	8009bc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
      break;
 8008b2a:	e0a5      	b.n	8008c78 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f96d 	bl	8008e14 <USBH_Get_CfgDesc>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2205      	movs	r2, #5
 8008b48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b4a:	e097      	b.n	8008c7c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	f040 8094 	bne.w	8008c7c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d903      	bls.n	8008b76 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	220d      	movs	r2, #13
 8008b72:	701a      	strb	r2, [r3, #0]
      break;
 8008b74:	e082      	b.n	8008c7c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	795b      	ldrb	r3, [r3, #5]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f81f 	bl	8009bc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	791b      	ldrb	r3, [r3, #4]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 f819 	bl	8009bc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	701a      	strb	r2, [r3, #0]
      break;
 8008b9a:	e06f      	b.n	8008c7c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d019      	beq.n	8008bda <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008bb2:	23ff      	movs	r3, #255	@ 0xff
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f957 	bl	8008e68 <USBH_Get_StringDesc>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2206      	movs	r2, #6
 8008bc8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008bca:	e059      	b.n	8008c80 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d156      	bne.n	8008c80 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2206      	movs	r2, #6
 8008bd6:	705a      	strb	r2, [r3, #1]
      break;
 8008bd8:	e052      	b.n	8008c80 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2206      	movs	r2, #6
 8008bde:	705a      	strb	r2, [r3, #1]
      break;
 8008be0:	e04e      	b.n	8008c80 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d019      	beq.n	8008c20 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bf8:	23ff      	movs	r3, #255	@ 0xff
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f934 	bl	8008e68 <USBH_Get_StringDesc>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2207      	movs	r2, #7
 8008c0e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008c10:	e038      	b.n	8008c84 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d135      	bne.n	8008c84 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2207      	movs	r2, #7
 8008c1c:	705a      	strb	r2, [r3, #1]
      break;
 8008c1e:	e031      	b.n	8008c84 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2207      	movs	r2, #7
 8008c24:	705a      	strb	r2, [r3, #1]
      break;
 8008c26:	e02d      	b.n	8008c84 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d017      	beq.n	8008c62 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c3e:	23ff      	movs	r3, #255	@ 0xff
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f911 	bl	8008e68 <USBH_Get_StringDesc>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008c54:	e018      	b.n	8008c88 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d115      	bne.n	8008c88 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c60:	e012      	b.n	8008c88 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
      break;
 8008c66:	e00f      	b.n	8008c88 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008c68:	bf00      	nop
 8008c6a:	e00e      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c6c:	bf00      	nop
 8008c6e:	e00c      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c70:	bf00      	nop
 8008c72:	e00a      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c74:	bf00      	nop
 8008c76:	e008      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c78:	bf00      	nop
 8008c7a:	e006      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c7c:	bf00      	nop
 8008c7e:	e004      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c80:	bf00      	nop
 8008c82:	e002      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c84:	bf00      	nop
 8008c86:	e000      	b.n	8008c8a <USBH_HandleEnum+0x3b6>
      break;
 8008c88:	bf00      	nop
  }
  return Status;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f804 	bl	8008cd6 <USBH_HandleSof>
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b0b      	cmp	r3, #11
 8008ce6:	d10a      	bne.n	8008cfe <USBH_HandleSof+0x28>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d005      	beq.n	8008cfe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	4798      	blx	r3
  }
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008d16:	bf00      	nop
}
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8008d3a:	bf00      	nop
}
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 f8c0 	bl	8009f1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	791b      	ldrb	r3, [r3, #4]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 ff0d 	bl	8009bc0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	795b      	ldrb	r3, [r3, #5]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 ff07 	bl	8009bc0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008dc8:	887b      	ldrh	r3, [r7, #2]
 8008dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dce:	d901      	bls.n	8008dd4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e01b      	b.n	8008e0c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008dda:	887b      	ldrh	r3, [r7, #2]
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	4613      	mov	r3, r2
 8008de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f872 	bl	8008ed0 <USBH_GetDescriptor>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f929 	bl	8009058 <USBH_ParseDevDesc>
 8008e06:	4603      	mov	r3, r0
 8008e08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	331c      	adds	r3, #28
 8008e24:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008e26:	887b      	ldrh	r3, [r7, #2]
 8008e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e2c:	d901      	bls.n	8008e32 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e016      	b.n	8008e60 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008e32:	887b      	ldrh	r3, [r7, #2]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f846 	bl	8008ed0 <USBH_GetDescriptor>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d107      	bne.n	8008e5e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008e4e:	887b      	ldrh	r3, [r7, #2]
 8008e50:	461a      	mov	r2, r3
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f9af 	bl	80091b8 <USBH_ParseCfgDesc>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	461a      	mov	r2, r3
 8008e74:	460b      	mov	r3, r1
 8008e76:	72fb      	strb	r3, [r7, #11]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008e7c:	893b      	ldrh	r3, [r7, #8]
 8008e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e82:	d802      	bhi.n	8008e8a <USBH_Get_StringDesc+0x22>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e01c      	b.n	8008ec8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008e8e:	7afb      	ldrb	r3, [r7, #11]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008e96:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008e9e:	893b      	ldrh	r3, [r7, #8]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f812 	bl	8008ed0 <USBH_GetDescriptor>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d107      	bne.n	8008ec6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ebc:	893a      	ldrh	r2, [r7, #8]
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fb8c 	bl	80095de <USBH_ParseStringDesc>
  }

  return status;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	72fb      	strb	r3, [r7, #11]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	789b      	ldrb	r3, [r3, #2]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d11c      	bne.n	8008f24 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2206      	movs	r2, #6
 8008efa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	893a      	ldrh	r2, [r7, #8]
 8008f00:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f02:	893b      	ldrh	r3, [r7, #8]
 8008f04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f0c:	d104      	bne.n	8008f18 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f240 4209 	movw	r2, #1033	@ 0x409
 8008f14:	829a      	strh	r2, [r3, #20]
 8008f16:	e002      	b.n	8008f1e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8b3a      	ldrh	r2, [r7, #24]
 8008f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008f24:	8b3b      	ldrh	r3, [r7, #24]
 8008f26:	461a      	mov	r2, r3
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fba4 	bl	8009678 <USBH_CtlReq>
 8008f30:	4603      	mov	r3, r0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	789b      	ldrb	r3, [r3, #2]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d10f      	bne.n	8008f6e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2205      	movs	r2, #5
 8008f58:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fb80 	bl	8009678 <USBH_CtlReq>
 8008f78:	4603      	mov	r3, r0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	789b      	ldrb	r3, [r3, #2]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d10e      	bne.n	8008fb4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2209      	movs	r2, #9
 8008fa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	887a      	ldrh	r2, [r7, #2]
 8008fa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb5d 	bl	8009678 <USBH_CtlReq>
 8008fbe:	4603      	mov	r3, r0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	789b      	ldrb	r3, [r3, #2]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d10f      	bne.n	8008ffc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2100      	movs	r1, #0
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fb39 	bl	8009678 <USBH_CtlReq>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	789b      	ldrb	r3, [r3, #2]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10f      	bne.n	8009044 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009044:	2200      	movs	r2, #0
 8009046:	2100      	movs	r1, #0
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fb15 	bl	8009678 <USBH_CtlReq>
 800904e:	4603      	mov	r3, r0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800906c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009078:	2302      	movs	r3, #2
 800907a:	e094      	b.n	80091a6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	781a      	ldrb	r2, [r3, #0]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	785a      	ldrb	r2, [r3, #1]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3302      	adds	r3, #2
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3303      	adds	r3, #3
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	b29b      	uxth	r3, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	791a      	ldrb	r2, [r3, #4]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	795a      	ldrb	r2, [r3, #5]
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	799a      	ldrb	r2, [r3, #6]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	79da      	ldrb	r2, [r3, #7]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d004      	beq.n	80090da <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d11b      	bne.n	8009112 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	79db      	ldrb	r3, [r3, #7]
 80090de:	2b20      	cmp	r3, #32
 80090e0:	dc0f      	bgt.n	8009102 <USBH_ParseDevDesc+0xaa>
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	db0f      	blt.n	8009106 <USBH_ParseDevDesc+0xae>
 80090e6:	3b08      	subs	r3, #8
 80090e8:	4a32      	ldr	r2, [pc, #200]	@ (80091b4 <USBH_ParseDevDesc+0x15c>)
 80090ea:	fa22 f303 	lsr.w	r3, r2, r3
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bf14      	ite	ne
 80090f6:	2301      	movne	r3, #1
 80090f8:	2300      	moveq	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <USBH_ParseDevDesc+0xb6>
 8009100:	e001      	b.n	8009106 <USBH_ParseDevDesc+0xae>
 8009102:	2b40      	cmp	r3, #64	@ 0x40
 8009104:	d003      	beq.n	800910e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2208      	movs	r2, #8
 800910a:	71da      	strb	r2, [r3, #7]
        break;
 800910c:	e000      	b.n	8009110 <USBH_ParseDevDesc+0xb8>
        break;
 800910e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009110:	e00e      	b.n	8009130 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009118:	2b02      	cmp	r3, #2
 800911a:	d107      	bne.n	800912c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	79db      	ldrb	r3, [r3, #7]
 8009120:	2b08      	cmp	r3, #8
 8009122:	d005      	beq.n	8009130 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2208      	movs	r2, #8
 8009128:	71da      	strb	r2, [r3, #7]
 800912a:	e001      	b.n	8009130 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800912c:	2303      	movs	r3, #3
 800912e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	2b08      	cmp	r3, #8
 8009134:	d936      	bls.n	80091a4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	3308      	adds	r3, #8
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	3309      	adds	r3, #9
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	b29b      	uxth	r3, r3
 8009148:	4313      	orrs	r3, r2
 800914a:	b29a      	uxth	r2, r3
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	330a      	adds	r3, #10
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	330b      	adds	r3, #11
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	b29b      	uxth	r3, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	b29a      	uxth	r2, r3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	330c      	adds	r3, #12
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	330d      	adds	r3, #13
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	021b      	lsls	r3, r3, #8
 800917a:	b29b      	uxth	r3, r3
 800917c:	4313      	orrs	r3, r2
 800917e:	b29a      	uxth	r2, r3
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	7b9a      	ldrb	r2, [r3, #14]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	7bda      	ldrb	r2, [r3, #15]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	7c1a      	ldrb	r2, [r3, #16]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	7c5a      	ldrb	r2, [r3, #17]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	01000101 	.word	0x01000101

080091b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08c      	sub	sp, #48	@ 0x30
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80091cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80091e6:	2302      	movs	r3, #2
 80091e8:	e0de      	b.n	80093a8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b09      	cmp	r3, #9
 80091f4:	d002      	beq.n	80091fc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80091f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f8:	2209      	movs	r2, #9
 80091fa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	781a      	ldrb	r2, [r3, #0]
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	785a      	ldrb	r2, [r3, #1]
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	3302      	adds	r3, #2
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3303      	adds	r3, #3
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	b29b      	uxth	r3, r3
 800921e:	4313      	orrs	r3, r2
 8009220:	b29b      	uxth	r3, r3
 8009222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009226:	bf28      	it	cs
 8009228:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800922c:	b29a      	uxth	r2, r3
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	791a      	ldrb	r2, [r3, #4]
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	795a      	ldrb	r2, [r3, #5]
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	799a      	ldrb	r2, [r3, #6]
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	79da      	ldrb	r2, [r3, #7]
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	7a1a      	ldrb	r2, [r3, #8]
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	2b09      	cmp	r3, #9
 800925e:	f240 80a1 	bls.w	80093a4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8009262:	2309      	movs	r3, #9
 8009264:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800926a:	e085      	b.n	8009378 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800926c:	f107 0316 	add.w	r3, r7, #22
 8009270:	4619      	mov	r1, r3
 8009272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009274:	f000 f9e6 	bl	8009644 <USBH_GetNextDesc>
 8009278:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b04      	cmp	r3, #4
 8009280:	d17a      	bne.n	8009378 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b09      	cmp	r3, #9
 8009288:	d002      	beq.n	8009290 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	2209      	movs	r2, #9
 800928e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009294:	221a      	movs	r2, #26
 8009296:	fb02 f303 	mul.w	r3, r2, r3
 800929a:	3308      	adds	r3, #8
 800929c:	6a3a      	ldr	r2, [r7, #32]
 800929e:	4413      	add	r3, r2
 80092a0:	3302      	adds	r3, #2
 80092a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80092a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092a6:	69f8      	ldr	r0, [r7, #28]
 80092a8:	f000 f882 	bl	80093b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092b6:	e043      	b.n	8009340 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80092b8:	f107 0316 	add.w	r3, r7, #22
 80092bc:	4619      	mov	r1, r3
 80092be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092c0:	f000 f9c0 	bl	8009644 <USBH_GetNextDesc>
 80092c4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c8:	785b      	ldrb	r3, [r3, #1]
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d138      	bne.n	8009340 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	795b      	ldrb	r3, [r3, #5]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d113      	bne.n	80092fe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d003      	beq.n	80092e6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	799b      	ldrb	r3, [r3, #6]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d10b      	bne.n	80092fe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	79db      	ldrb	r3, [r3, #7]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <USBH_ParseCfgDesc+0x14e>
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	d007      	beq.n	8009306 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80092f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f8:	2209      	movs	r2, #9
 80092fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092fc:	e003      	b.n	8009306 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	2207      	movs	r2, #7
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e000      	b.n	8009308 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009306:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800930c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009310:	3201      	adds	r2, #1
 8009312:	00d2      	lsls	r2, r2, #3
 8009314:	211a      	movs	r1, #26
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	3308      	adds	r3, #8
 800931e:	6a3a      	ldr	r2, [r7, #32]
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009328:	69b9      	ldr	r1, [r7, #24]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 f86f 	bl	800940e <USBH_ParseEPDesc>
 8009330:	4603      	mov	r3, r0
 8009332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009336:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800933a:	3301      	adds	r3, #1
 800933c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009344:	2b01      	cmp	r3, #1
 8009346:	d80a      	bhi.n	800935e <USBH_ParseCfgDesc+0x1a6>
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	791b      	ldrb	r3, [r3, #4]
 800934c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009350:	429a      	cmp	r2, r3
 8009352:	d204      	bcs.n	800935e <USBH_ParseCfgDesc+0x1a6>
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	885a      	ldrh	r2, [r3, #2]
 8009358:	8afb      	ldrh	r3, [r7, #22]
 800935a:	429a      	cmp	r2, r3
 800935c:	d8ac      	bhi.n	80092b8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	791b      	ldrb	r3, [r3, #4]
 8009362:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009366:	429a      	cmp	r2, r3
 8009368:	d201      	bcs.n	800936e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800936a:	2303      	movs	r3, #3
 800936c:	e01c      	b.n	80093a8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800936e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009372:	3301      	adds	r3, #1
 8009374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800937c:	2b01      	cmp	r3, #1
 800937e:	d805      	bhi.n	800938c <USBH_ParseCfgDesc+0x1d4>
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	885a      	ldrh	r2, [r3, #2]
 8009384:	8afb      	ldrh	r3, [r7, #22]
 8009386:	429a      	cmp	r2, r3
 8009388:	f63f af70 	bhi.w	800926c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	791b      	ldrb	r3, [r3, #4]
 8009390:	2b02      	cmp	r3, #2
 8009392:	bf28      	it	cs
 8009394:	2302      	movcs	r3, #2
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800939c:	429a      	cmp	r2, r3
 800939e:	d201      	bcs.n	80093a4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e001      	b.n	80093a8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80093a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3730      	adds	r7, #48	@ 0x30
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	785a      	ldrb	r2, [r3, #1]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	789a      	ldrb	r2, [r3, #2]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	78da      	ldrb	r2, [r3, #3]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	791a      	ldrb	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	795a      	ldrb	r2, [r3, #5]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	799a      	ldrb	r2, [r3, #6]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	79da      	ldrb	r2, [r3, #7]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	7a1a      	ldrb	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	721a      	strb	r2, [r3, #8]
}
 8009402:	bf00      	nop
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800940e:	b480      	push	{r7}
 8009410:	b087      	sub	sp, #28
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	785a      	ldrb	r2, [r3, #1]
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	789a      	ldrb	r2, [r3, #2]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	78da      	ldrb	r2, [r3, #3]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3304      	adds	r3, #4
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3305      	adds	r3, #5
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	b29b      	uxth	r3, r3
 8009450:	4313      	orrs	r3, r2
 8009452:	b29a      	uxth	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	799a      	ldrb	r2, [r3, #6]
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	889b      	ldrh	r3, [r3, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d009      	beq.n	800947c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800946c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009470:	d804      	bhi.n	800947c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947a:	d901      	bls.n	8009480 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800947c:	2303      	movs	r3, #3
 800947e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009486:	2b00      	cmp	r3, #0
 8009488:	d136      	bne.n	80094f8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	78db      	ldrb	r3, [r3, #3]
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d108      	bne.n	80094a8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	889b      	ldrh	r3, [r3, #4]
 800949a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949e:	f240 8097 	bls.w	80095d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094a2:	2303      	movs	r3, #3
 80094a4:	75fb      	strb	r3, [r7, #23]
 80094a6:	e093      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	78db      	ldrb	r3, [r3, #3]
 80094ac:	f003 0303 	and.w	r3, r3, #3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d107      	bne.n	80094c4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	889b      	ldrh	r3, [r3, #4]
 80094b8:	2b40      	cmp	r3, #64	@ 0x40
 80094ba:	f240 8089 	bls.w	80095d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094be:	2303      	movs	r3, #3
 80094c0:	75fb      	strb	r3, [r7, #23]
 80094c2:	e085      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	78db      	ldrb	r3, [r3, #3]
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d005      	beq.n	80094dc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	78db      	ldrb	r3, [r3, #3]
 80094d4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d10a      	bne.n	80094f2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	799b      	ldrb	r3, [r3, #6]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <USBH_ParseEPDesc+0xde>
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	799b      	ldrb	r3, [r3, #6]
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d970      	bls.n	80095ce <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80094ec:	2303      	movs	r3, #3
 80094ee:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094f0:	e06d      	b.n	80095ce <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094f2:	2303      	movs	r3, #3
 80094f4:	75fb      	strb	r3, [r7, #23]
 80094f6:	e06b      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d13c      	bne.n	800957c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	78db      	ldrb	r3, [r3, #3]
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d005      	beq.n	800951a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	78db      	ldrb	r3, [r3, #3]
 8009512:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	889b      	ldrh	r3, [r3, #4]
 800951e:	2b40      	cmp	r3, #64	@ 0x40
 8009520:	d956      	bls.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009522:	2303      	movs	r3, #3
 8009524:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009526:	e053      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	78db      	ldrb	r3, [r3, #3]
 800952c:	f003 0303 	and.w	r3, r3, #3
 8009530:	2b01      	cmp	r3, #1
 8009532:	d10e      	bne.n	8009552 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	799b      	ldrb	r3, [r3, #6]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d007      	beq.n	800954c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009540:	2b10      	cmp	r3, #16
 8009542:	d803      	bhi.n	800954c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009548:	2b40      	cmp	r3, #64	@ 0x40
 800954a:	d941      	bls.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800954c:	2303      	movs	r3, #3
 800954e:	75fb      	strb	r3, [r7, #23]
 8009550:	e03e      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	78db      	ldrb	r3, [r3, #3]
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	2b03      	cmp	r3, #3
 800955c:	d10b      	bne.n	8009576 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	799b      	ldrb	r3, [r3, #6]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <USBH_ParseEPDesc+0x162>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	889b      	ldrh	r3, [r3, #4]
 800956a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800956e:	d32f      	bcc.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009570:	2303      	movs	r3, #3
 8009572:	75fb      	strb	r3, [r7, #23]
 8009574:	e02c      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009576:	2303      	movs	r3, #3
 8009578:	75fb      	strb	r3, [r7, #23]
 800957a:	e029      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009582:	2b02      	cmp	r3, #2
 8009584:	d120      	bne.n	80095c8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	78db      	ldrb	r3, [r3, #3]
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	889b      	ldrh	r3, [r3, #4]
 8009596:	2b08      	cmp	r3, #8
 8009598:	d01a      	beq.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800959a:	2303      	movs	r3, #3
 800959c:	75fb      	strb	r3, [r7, #23]
 800959e:	e017      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	78db      	ldrb	r3, [r3, #3]
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d10a      	bne.n	80095c2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	799b      	ldrb	r3, [r3, #6]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <USBH_ParseEPDesc+0x1ae>
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	889b      	ldrh	r3, [r3, #4]
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d909      	bls.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80095bc:	2303      	movs	r3, #3
 80095be:	75fb      	strb	r3, [r7, #23]
 80095c0:	e006      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80095c2:	2303      	movs	r3, #3
 80095c4:	75fb      	strb	r3, [r7, #23]
 80095c6:	e003      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80095c8:	2303      	movs	r3, #3
 80095ca:	75fb      	strb	r3, [r7, #23]
 80095cc:	e000      	b.n	80095d0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80095ce:	bf00      	nop
  }

  return status;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80095de:	b480      	push	{r7}
 80095e0:	b087      	sub	sp, #28
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	4613      	mov	r3, r2
 80095ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	3301      	adds	r3, #1
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d120      	bne.n	8009638 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	1e9a      	subs	r2, r3, #2
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	4293      	cmp	r3, r2
 8009600:	bf28      	it	cs
 8009602:	4613      	movcs	r3, r2
 8009604:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3302      	adds	r3, #2
 800960a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800960c:	2300      	movs	r3, #0
 800960e:	82fb      	strh	r3, [r7, #22]
 8009610:	e00b      	b.n	800962a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009612:	8afb      	ldrh	r3, [r7, #22]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	781a      	ldrb	r2, [r3, #0]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3301      	adds	r3, #1
 8009622:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009624:	8afb      	ldrh	r3, [r7, #22]
 8009626:	3302      	adds	r3, #2
 8009628:	82fb      	strh	r3, [r7, #22]
 800962a:	8afa      	ldrh	r2, [r7, #22]
 800962c:	8abb      	ldrh	r3, [r7, #20]
 800962e:	429a      	cmp	r2, r3
 8009630:	d3ef      	bcc.n	8009612 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]
  }
}
 8009638:	bf00      	nop
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	7812      	ldrb	r2, [r2, #0]
 8009656:	4413      	add	r3, r2
 8009658:	b29a      	uxth	r2, r3
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4413      	add	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800966a:	68fb      	ldr	r3, [r7, #12]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009686:	2301      	movs	r3, #1
 8009688:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	789b      	ldrb	r3, [r3, #2]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d002      	beq.n	8009698 <USBH_CtlReq+0x20>
 8009692:	2b02      	cmp	r3, #2
 8009694:	d00f      	beq.n	80096b6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8009696:	e027      	b.n	80096e8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	88fa      	ldrh	r2, [r7, #6]
 80096a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2202      	movs	r2, #2
 80096ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80096b0:	2301      	movs	r3, #1
 80096b2:	75fb      	strb	r3, [r7, #23]
      break;
 80096b4:	e018      	b.n	80096e8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f81c 	bl	80096f4 <USBH_HandleControl>
 80096bc:	4603      	mov	r3, r0
 80096be:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <USBH_CtlReq+0x54>
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d106      	bne.n	80096da <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	761a      	strb	r2, [r3, #24]
      break;
 80096d8:	e005      	b.n	80096e6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d102      	bne.n	80096e6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	709a      	strb	r2, [r3, #2]
      break;
 80096e6:	bf00      	nop
  }
  return status;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009700:	2300      	movs	r3, #0
 8009702:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7e1b      	ldrb	r3, [r3, #24]
 8009708:	3b01      	subs	r3, #1
 800970a:	2b0a      	cmp	r3, #10
 800970c:	f200 8157 	bhi.w	80099be <USBH_HandleControl+0x2ca>
 8009710:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <USBH_HandleControl+0x24>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	08009745 	.word	0x08009745
 800971c:	0800975f 	.word	0x0800975f
 8009720:	080097c9 	.word	0x080097c9
 8009724:	080097ef 	.word	0x080097ef
 8009728:	08009829 	.word	0x08009829
 800972c:	08009853 	.word	0x08009853
 8009730:	080098a5 	.word	0x080098a5
 8009734:	080098c7 	.word	0x080098c7
 8009738:	08009903 	.word	0x08009903
 800973c:	08009929 	.word	0x08009929
 8009740:	08009967 	.word	0x08009967
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f103 0110 	add.w	r1, r3, #16
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	795b      	ldrb	r3, [r3, #5]
 800974e:	461a      	mov	r2, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f945 	bl	80099e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	761a      	strb	r2, [r3, #24]
      break;
 800975c:	e13a      	b.n	80099d4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	795b      	ldrb	r3, [r3, #5]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fcc7 	bl	800a0f8 <USBH_LL_GetURBState>
 800976a:	4603      	mov	r3, r0
 800976c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d11e      	bne.n	80097b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	7c1b      	ldrb	r3, [r3, #16]
 8009778:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800977c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	8adb      	ldrh	r3, [r3, #22]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009786:	7b7b      	ldrb	r3, [r7, #13]
 8009788:	2b80      	cmp	r3, #128	@ 0x80
 800978a:	d103      	bne.n	8009794 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2203      	movs	r2, #3
 8009790:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009792:	e116      	b.n	80099c2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2205      	movs	r2, #5
 8009798:	761a      	strb	r2, [r3, #24]
      break;
 800979a:	e112      	b.n	80099c2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800979c:	7b7b      	ldrb	r3, [r7, #13]
 800979e:	2b80      	cmp	r3, #128	@ 0x80
 80097a0:	d103      	bne.n	80097aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2209      	movs	r2, #9
 80097a6:	761a      	strb	r2, [r3, #24]
      break;
 80097a8:	e10b      	b.n	80099c2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2207      	movs	r2, #7
 80097ae:	761a      	strb	r2, [r3, #24]
      break;
 80097b0:	e107      	b.n	80099c2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d003      	beq.n	80097c0 <USBH_HandleControl+0xcc>
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	f040 8101 	bne.w	80099c2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	220b      	movs	r2, #11
 80097c4:	761a      	strb	r2, [r3, #24]
      break;
 80097c6:	e0fc      	b.n	80099c2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6899      	ldr	r1, [r3, #8]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	899a      	ldrh	r2, [r3, #12]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	791b      	ldrb	r3, [r3, #4]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f93c 	bl	8009a5e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2204      	movs	r2, #4
 80097ea:	761a      	strb	r2, [r3, #24]
      break;
 80097ec:	e0f2      	b.n	80099d4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	791b      	ldrb	r3, [r3, #4]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fc7f 	bl	800a0f8 <USBH_LL_GetURBState>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d103      	bne.n	800980c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2209      	movs	r2, #9
 8009808:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800980a:	e0dc      	b.n	80099c6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	2b05      	cmp	r3, #5
 8009810:	d102      	bne.n	8009818 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8009812:	2303      	movs	r3, #3
 8009814:	73fb      	strb	r3, [r7, #15]
      break;
 8009816:	e0d6      	b.n	80099c6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b04      	cmp	r3, #4
 800981c:	f040 80d3 	bne.w	80099c6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	220b      	movs	r2, #11
 8009824:	761a      	strb	r2, [r3, #24]
      break;
 8009826:	e0ce      	b.n	80099c6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6899      	ldr	r1, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	899a      	ldrh	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	795b      	ldrb	r3, [r3, #5]
 8009834:	2001      	movs	r0, #1
 8009836:	9000      	str	r0, [sp, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f8eb 	bl	8009a14 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009844:	b29a      	uxth	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2206      	movs	r2, #6
 800984e:	761a      	strb	r2, [r3, #24]
      break;
 8009850:	e0c0      	b.n	80099d4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	795b      	ldrb	r3, [r3, #5]
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fc4d 	bl	800a0f8 <USBH_LL_GetURBState>
 800985e:	4603      	mov	r3, r0
 8009860:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d103      	bne.n	8009870 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2207      	movs	r2, #7
 800986c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800986e:	e0ac      	b.n	80099ca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b05      	cmp	r3, #5
 8009874:	d105      	bne.n	8009882 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	220c      	movs	r2, #12
 800987a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800987c:	2303      	movs	r3, #3
 800987e:	73fb      	strb	r3, [r7, #15]
      break;
 8009880:	e0a3      	b.n	80099ca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	2b02      	cmp	r3, #2
 8009886:	d103      	bne.n	8009890 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2205      	movs	r2, #5
 800988c:	761a      	strb	r2, [r3, #24]
      break;
 800988e:	e09c      	b.n	80099ca <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	2b04      	cmp	r3, #4
 8009894:	f040 8099 	bne.w	80099ca <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	220b      	movs	r2, #11
 800989c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800989e:	2302      	movs	r3, #2
 80098a0:	73fb      	strb	r3, [r7, #15]
      break;
 80098a2:	e092      	b.n	80099ca <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	791b      	ldrb	r3, [r3, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	2100      	movs	r1, #0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f8d6 	bl	8009a5e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2208      	movs	r2, #8
 80098c2:	761a      	strb	r2, [r3, #24]

      break;
 80098c4:	e086      	b.n	80099d4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	791b      	ldrb	r3, [r3, #4]
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fc13 	bl	800a0f8 <USBH_LL_GetURBState>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d105      	bne.n	80098e8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	220d      	movs	r2, #13
 80098e0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80098e6:	e072      	b.n	80099ce <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d103      	bne.n	80098f6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	220b      	movs	r2, #11
 80098f2:	761a      	strb	r2, [r3, #24]
      break;
 80098f4:	e06b      	b.n	80099ce <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	2b05      	cmp	r3, #5
 80098fa:	d168      	bne.n	80099ce <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 80098fc:	2303      	movs	r3, #3
 80098fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009900:	e065      	b.n	80099ce <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	795b      	ldrb	r3, [r3, #5]
 8009906:	2201      	movs	r2, #1
 8009908:	9200      	str	r2, [sp, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	2100      	movs	r1, #0
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f880 	bl	8009a14 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800991a:	b29a      	uxth	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	220a      	movs	r2, #10
 8009924:	761a      	strb	r2, [r3, #24]
      break;
 8009926:	e055      	b.n	80099d4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	795b      	ldrb	r3, [r3, #5]
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fbe2 	bl	800a0f8 <USBH_LL_GetURBState>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d105      	bne.n	800994a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	220d      	movs	r2, #13
 8009946:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009948:	e043      	b.n	80099d2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d103      	bne.n	8009958 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2209      	movs	r2, #9
 8009954:	761a      	strb	r2, [r3, #24]
      break;
 8009956:	e03c      	b.n	80099d2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b04      	cmp	r3, #4
 800995c:	d139      	bne.n	80099d2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	220b      	movs	r2, #11
 8009962:	761a      	strb	r2, [r3, #24]
      break;
 8009964:	e035      	b.n	80099d2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7e5b      	ldrb	r3, [r3, #25]
 800996a:	3301      	adds	r3, #1
 800996c:	b2da      	uxtb	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	765a      	strb	r2, [r3, #25]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	7e5b      	ldrb	r3, [r3, #25]
 8009976:	2b02      	cmp	r3, #2
 8009978:	d806      	bhi.n	8009988 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009986:	e025      	b.n	80099d4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800998e:	2106      	movs	r1, #6
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	795b      	ldrb	r3, [r3, #5]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f90d 	bl	8009bc0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	791b      	ldrb	r3, [r3, #4]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f907 	bl	8009bc0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80099b8:	2302      	movs	r3, #2
 80099ba:	73fb      	strb	r3, [r7, #15]
      break;
 80099bc:	e00a      	b.n	80099d4 <USBH_HandleControl+0x2e0>

    default:
      break;
 80099be:	bf00      	nop
 80099c0:	e008      	b.n	80099d4 <USBH_HandleControl+0x2e0>
      break;
 80099c2:	bf00      	nop
 80099c4:	e006      	b.n	80099d4 <USBH_HandleControl+0x2e0>
      break;
 80099c6:	bf00      	nop
 80099c8:	e004      	b.n	80099d4 <USBH_HandleControl+0x2e0>
      break;
 80099ca:	bf00      	nop
 80099cc:	e002      	b.n	80099d4 <USBH_HandleControl+0x2e0>
      break;
 80099ce:	bf00      	nop
 80099d0:	e000      	b.n	80099d4 <USBH_HandleControl+0x2e0>
      break;
 80099d2:	bf00      	nop
  }

  return status;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop

080099e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	4613      	mov	r3, r2
 80099ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099ee:	79f9      	ldrb	r1, [r7, #7]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	2308      	movs	r3, #8
 80099f6:	9302      	str	r3, [sp, #8]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	2300      	movs	r3, #0
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	2300      	movs	r3, #0
 8009a02:	2200      	movs	r2, #0
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 fb46 	bl	800a096 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af04      	add	r7, sp, #16
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	460b      	mov	r3, r1
 8009a24:	80fb      	strh	r3, [r7, #6]
 8009a26:	4613      	mov	r3, r2
 8009a28:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a38:	7979      	ldrb	r1, [r7, #5]
 8009a3a:	7e3b      	ldrb	r3, [r7, #24]
 8009a3c:	9303      	str	r3, [sp, #12]
 8009a3e:	88fb      	ldrh	r3, [r7, #6]
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	2301      	movs	r3, #1
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 fb21 	bl	800a096 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b088      	sub	sp, #32
 8009a62:	af04      	add	r7, sp, #16
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	60b9      	str	r1, [r7, #8]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	80fb      	strh	r3, [r7, #6]
 8009a70:	4613      	mov	r3, r2
 8009a72:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a74:	7979      	ldrb	r1, [r7, #5]
 8009a76:	2300      	movs	r3, #0
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	2301      	movs	r3, #1
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	2300      	movs	r3, #0
 8009a88:	2201      	movs	r2, #1
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 fb03 	bl	800a096 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a90:	2300      	movs	r3, #0

}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b088      	sub	sp, #32
 8009a9e:	af04      	add	r7, sp, #16
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	80fb      	strh	r3, [r7, #6]
 8009aac:	4613      	mov	r3, r2
 8009aae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009abe:	7979      	ldrb	r1, [r7, #5]
 8009ac0:	7e3b      	ldrb	r3, [r7, #24]
 8009ac2:	9303      	str	r3, [sp, #12]
 8009ac4:	88fb      	ldrh	r3, [r7, #6]
 8009ac6:	9302      	str	r3, [sp, #8]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	2301      	movs	r3, #1
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 fade 	bl	800a096 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af04      	add	r7, sp, #16
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4611      	mov	r1, r2
 8009af0:	461a      	mov	r2, r3
 8009af2:	460b      	mov	r3, r1
 8009af4:	80fb      	strh	r3, [r7, #6]
 8009af6:	4613      	mov	r3, r2
 8009af8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009afa:	7979      	ldrb	r1, [r7, #5]
 8009afc:	2300      	movs	r3, #0
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	2301      	movs	r3, #1
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	2201      	movs	r2, #1
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 fac0 	bl	800a096 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af04      	add	r7, sp, #16
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	70fb      	strb	r3, [r7, #3]
 8009b32:	460b      	mov	r3, r1
 8009b34:	70bb      	strb	r3, [r7, #2]
 8009b36:	4613      	mov	r3, r2
 8009b38:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009b3a:	7878      	ldrb	r0, [r7, #1]
 8009b3c:	78ba      	ldrb	r2, [r7, #2]
 8009b3e:	78f9      	ldrb	r1, [r7, #3]
 8009b40:	8b3b      	ldrh	r3, [r7, #24]
 8009b42:	9302      	str	r3, [sp, #8]
 8009b44:	7d3b      	ldrb	r3, [r7, #20]
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	7c3b      	ldrb	r3, [r7, #16]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa53 	bl	8009ffa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	460b      	mov	r3, r1
 8009b68:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fa72 	bl	800a058 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	460b      	mov	r3, r1
 8009b88:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f836 	bl	8009bfc <USBH_GetFreePipe>
 8009b90:	4603      	mov	r3, r0
 8009b92:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009b94:	89fb      	ldrh	r3, [r7, #14]
 8009b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d00a      	beq.n	8009bb4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009b9e:	78fa      	ldrb	r2, [r7, #3]
 8009ba0:	89fb      	ldrh	r3, [r7, #14]
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	33e0      	adds	r3, #224	@ 0xe0
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	440b      	add	r3, r1
 8009bb2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009bb4:	89fb      	ldrh	r3, [r7, #14]
 8009bb6:	b2db      	uxtb	r3, r3
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	2b0f      	cmp	r3, #15
 8009bd0:	d80d      	bhi.n	8009bee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	33e0      	adds	r3, #224	@ 0xe0
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	78fb      	ldrb	r3, [r7, #3]
 8009be0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	33e0      	adds	r3, #224	@ 0xe0
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	440b      	add	r3, r1
 8009bec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
 8009c0c:	e00f      	b.n	8009c2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	33e0      	adds	r3, #224	@ 0xe0
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d102      	bne.n	8009c28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	e007      	b.n	8009c38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	73fb      	strb	r3, [r7, #15]
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	2b0f      	cmp	r3, #15
 8009c32:	d9ec      	bls.n	8009c0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009c34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	490e      	ldr	r1, [pc, #56]	@ (8009c84 <MX_USB_HOST_Init+0x40>)
 8009c4c:	480e      	ldr	r0, [pc, #56]	@ (8009c88 <MX_USB_HOST_Init+0x44>)
 8009c4e:	f7fe fb0f 	bl	8008270 <USBH_Init>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009c58:	f7f6 ff82 	bl	8000b60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009c5c:	490b      	ldr	r1, [pc, #44]	@ (8009c8c <MX_USB_HOST_Init+0x48>)
 8009c5e:	480a      	ldr	r0, [pc, #40]	@ (8009c88 <MX_USB_HOST_Init+0x44>)
 8009c60:	f7fe fbb1 	bl	80083c6 <USBH_RegisterClass>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009c6a:	f7f6 ff79 	bl	8000b60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009c6e:	4806      	ldr	r0, [pc, #24]	@ (8009c88 <MX_USB_HOST_Init+0x44>)
 8009c70:	f7fe fc35 	bl	80084de <USBH_Start>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009c7a:	f7f6 ff71 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009c7e:	bf00      	nop
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	08009ca5 	.word	0x08009ca5
 8009c88:	20000284 	.word	0x20000284
 8009c8c:	2000000c 	.word	0x2000000c

08009c90 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009c94:	4802      	ldr	r0, [pc, #8]	@ (8009ca0 <MX_USB_HOST_Process+0x10>)
 8009c96:	f7fe fc33 	bl	8008500 <USBH_Process>
}
 8009c9a:	bf00      	nop
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20000284 	.word	0x20000284

08009ca4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d819      	bhi.n	8009cec <USBH_UserProcess+0x48>
 8009cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc0 <USBH_UserProcess+0x1c>)
 8009cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbe:	bf00      	nop
 8009cc0:	08009ced 	.word	0x08009ced
 8009cc4:	08009cdd 	.word	0x08009cdd
 8009cc8:	08009ced 	.word	0x08009ced
 8009ccc:	08009ce5 	.word	0x08009ce5
 8009cd0:	08009cd5 	.word	0x08009cd5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009cd4:	4b09      	ldr	r3, [pc, #36]	@ (8009cfc <USBH_UserProcess+0x58>)
 8009cd6:	2203      	movs	r2, #3
 8009cd8:	701a      	strb	r2, [r3, #0]
  break;
 8009cda:	e008      	b.n	8009cee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009cdc:	4b07      	ldr	r3, [pc, #28]	@ (8009cfc <USBH_UserProcess+0x58>)
 8009cde:	2202      	movs	r2, #2
 8009ce0:	701a      	strb	r2, [r3, #0]
  break;
 8009ce2:	e004      	b.n	8009cee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ce4:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <USBH_UserProcess+0x58>)
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	701a      	strb	r2, [r3, #0]
  break;
 8009cea:	e000      	b.n	8009cee <USBH_UserProcess+0x4a>

  default:
  break;
 8009cec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	2000065c 	.word	0x2000065c

08009d00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08a      	sub	sp, #40	@ 0x28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d08:	f107 0314 	add.w	r3, r7, #20
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	605a      	str	r2, [r3, #4]
 8009d12:	609a      	str	r2, [r3, #8]
 8009d14:	60da      	str	r2, [r3, #12]
 8009d16:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d20:	d147      	bne.n	8009db2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d22:	2300      	movs	r3, #0
 8009d24:	613b      	str	r3, [r7, #16]
 8009d26:	4b25      	ldr	r3, [pc, #148]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2a:	4a24      	ldr	r2, [pc, #144]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d2c:	f043 0301 	orr.w	r3, r3, #1
 8009d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d32:	4b22      	ldr	r3, [pc, #136]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	613b      	str	r3, [r7, #16]
 8009d3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d44:	2300      	movs	r3, #0
 8009d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009d4c:	f107 0314 	add.w	r3, r7, #20
 8009d50:	4619      	mov	r1, r3
 8009d52:	481b      	ldr	r0, [pc, #108]	@ (8009dc0 <HAL_HCD_MspInit+0xc0>)
 8009d54:	f7f8 f8c0 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009d58:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d5e:	2302      	movs	r3, #2
 8009d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d66:	2300      	movs	r3, #0
 8009d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d6a:	230a      	movs	r3, #10
 8009d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d6e:	f107 0314 	add.w	r3, r7, #20
 8009d72:	4619      	mov	r1, r3
 8009d74:	4812      	ldr	r0, [pc, #72]	@ (8009dc0 <HAL_HCD_MspInit+0xc0>)
 8009d76:	f7f8 f8af 	bl	8001ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d7a:	4b10      	ldr	r3, [pc, #64]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d84:	6353      	str	r3, [r2, #52]	@ 0x34
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d96:	4b09      	ldr	r3, [pc, #36]	@ (8009dbc <HAL_HCD_MspInit+0xbc>)
 8009d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009da2:	2200      	movs	r2, #0
 8009da4:	2100      	movs	r1, #0
 8009da6:	2043      	movs	r0, #67	@ 0x43
 8009da8:	f7f7 fd75 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009dac:	2043      	movs	r0, #67	@ 0x43
 8009dae:	f7f7 fd8e 	bl	80018ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009db2:	bf00      	nop
 8009db4:	3728      	adds	r7, #40	@ 0x28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	40023800 	.word	0x40023800
 8009dc0:	40020000 	.word	0x40020000

08009dc4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe ff6d 	bl	8008cb2 <USBH_LL_IncTimer>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe ffa9 	bl	8008d46 <USBH_LL_Connect>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe ffb2 	bl	8008d74 <USBH_LL_Disconnect>
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
 8009e24:	4613      	mov	r3, r2
 8009e26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe ff5f 	bl	8008d06 <USBH_LL_PortEnabled>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe ff5f 	bl	8008d22 <USBH_LL_PortDisabled>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d12a      	bne.n	8009ed4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009e7e:	4a18      	ldr	r2, [pc, #96]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a15      	ldr	r2, [pc, #84]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009e8a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e8e:	4b14      	ldr	r3, [pc, #80]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009e90:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009e94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009e96:	4b12      	ldr	r3, [pc, #72]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009e98:	2208      	movs	r2, #8
 8009e9a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009e9c:	4b10      	ldr	r3, [pc, #64]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009eaa:	2202      	movs	r2, #2
 8009eac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009eae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009eb4:	480a      	ldr	r0, [pc, #40]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009eb6:	f7f8 f9c4 	bl	8002242 <HAL_HCD_Init>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009ec0:	f7f6 fe4e 	bl	8000b60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009ec4:	4806      	ldr	r0, [pc, #24]	@ (8009ee0 <USBH_LL_Init+0x74>)
 8009ec6:	f7f8 fe25 	bl	8002b14 <HAL_HCD_GetCurrentFrame>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7fe fee0 	bl	8008c94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000660 	.word	0x20000660

08009ee4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7f8 fd92 	bl	8002a24 <HAL_HCD_Start>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 f95e 	bl	800a1c8 <USBH_Get_USB_Status>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7f8 fd9a 	bl	8002a6a <HAL_HCD_Stop>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 f943 	bl	800a1c8 <USBH_Get_USB_Status>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7f8 fde4 	bl	8002b30 <HAL_HCD_GetCurrentSpeed>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d00c      	beq.n	8009f88 <USBH_LL_GetSpeed+0x38>
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d80d      	bhi.n	8009f8e <USBH_LL_GetSpeed+0x3e>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d002      	beq.n	8009f7c <USBH_LL_GetSpeed+0x2c>
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d003      	beq.n	8009f82 <USBH_LL_GetSpeed+0x32>
 8009f7a:	e008      	b.n	8009f8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f80:	e008      	b.n	8009f94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009f82:	2301      	movs	r3, #1
 8009f84:	73fb      	strb	r3, [r7, #15]
    break;
 8009f86:	e005      	b.n	8009f94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8c:	e002      	b.n	8009f94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	73fb      	strb	r3, [r7, #15]
    break;
 8009f92:	bf00      	nop
  }
  return  speed;
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7f8 fd75 	bl	8002aa4 <HAL_HCD_ResetPort>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 f901 	bl	800a1c8 <USBH_Get_USB_Status>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fe6:	78fa      	ldrb	r2, [r7, #3]
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f8 fd7d 	bl	8002aea <HAL_HCD_HC_GetXferCount>
 8009ff0:	4603      	mov	r3, r0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ffa:	b590      	push	{r4, r7, lr}
 8009ffc:	b089      	sub	sp, #36	@ 0x24
 8009ffe:	af04      	add	r7, sp, #16
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	4608      	mov	r0, r1
 800a004:	4611      	mov	r1, r2
 800a006:	461a      	mov	r2, r3
 800a008:	4603      	mov	r3, r0
 800a00a:	70fb      	strb	r3, [r7, #3]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70bb      	strb	r3, [r7, #2]
 800a010:	4613      	mov	r3, r2
 800a012:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a022:	787c      	ldrb	r4, [r7, #1]
 800a024:	78ba      	ldrb	r2, [r7, #2]
 800a026:	78f9      	ldrb	r1, [r7, #3]
 800a028:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a02a:	9302      	str	r3, [sp, #8]
 800a02c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	4623      	mov	r3, r4
 800a03a:	f7f8 f969 	bl	8002310 <HAL_HCD_HC_Init>
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a042:	7bfb      	ldrb	r3, [r7, #15]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f8bf 	bl	800a1c8 <USBH_Get_USB_Status>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	bd90      	pop	{r4, r7, pc}

0800a058 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a072:	78fa      	ldrb	r2, [r7, #3]
 800a074:	4611      	mov	r1, r2
 800a076:	4618      	mov	r0, r3
 800a078:	f7f8 fa02 	bl	8002480 <HAL_HCD_HC_Halt>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 f8a0 	bl	800a1c8 <USBH_Get_USB_Status>
 800a088:	4603      	mov	r3, r0
 800a08a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a08c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a096:	b590      	push	{r4, r7, lr}
 800a098:	b089      	sub	sp, #36	@ 0x24
 800a09a:	af04      	add	r7, sp, #16
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	70fb      	strb	r3, [r7, #3]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70bb      	strb	r3, [r7, #2]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a0be:	787c      	ldrb	r4, [r7, #1]
 800a0c0:	78ba      	ldrb	r2, [r7, #2]
 800a0c2:	78f9      	ldrb	r1, [r7, #3]
 800a0c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a0c8:	9303      	str	r3, [sp, #12]
 800a0ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a0cc:	9302      	str	r3, [sp, #8]
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	4623      	mov	r3, r4
 800a0da:	f7f8 f9f5 	bl	80024c8 <HAL_HCD_HC_SubmitRequest>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 f86f 	bl	800a1c8 <USBH_Get_USB_Status>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd90      	pop	{r4, r7, pc}

0800a0f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f8 fcd6 	bl	8002ac0 <HAL_HCD_HC_GetURBState>
 800a114:	4603      	mov	r3, r0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a130:	2b01      	cmp	r3, #1
 800a132:	d103      	bne.n	800a13c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f872 	bl	800a220 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a13c:	20c8      	movs	r0, #200	@ 0xc8
 800a13e:	f7f7 f849 	bl	80011d4 <HAL_Delay>
  return USBH_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
 800a158:	4613      	mov	r3, r2
 800a15a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a162:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a164:	78fa      	ldrb	r2, [r7, #3]
 800a166:	68f9      	ldr	r1, [r7, #12]
 800a168:	4613      	mov	r3, r2
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	1a9b      	subs	r3, r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	440b      	add	r3, r1
 800a172:	3317      	adds	r3, #23
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	68f9      	ldr	r1, [r7, #12]
 800a17e:	4613      	mov	r3, r2
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	333c      	adds	r3, #60	@ 0x3c
 800a18a:	78ba      	ldrb	r2, [r7, #2]
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	e009      	b.n	800a1a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	4613      	mov	r3, r2
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	1a9b      	subs	r3, r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	440b      	add	r3, r1
 800a19e:	333d      	adds	r3, #61	@ 0x3d
 800a1a0:	78ba      	ldrb	r2, [r7, #2]
 800a1a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7f7 f80a 	bl	80011d4 <HAL_Delay>
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d817      	bhi.n	800a20c <USBH_Get_USB_Status+0x44>
 800a1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e4 <USBH_Get_USB_Status+0x1c>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800a1f5 	.word	0x0800a1f5
 800a1e8:	0800a1fb 	.word	0x0800a1fb
 800a1ec:	0800a201 	.word	0x0800a201
 800a1f0:	0800a207 	.word	0x0800a207
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f8:	e00b      	b.n	800a212 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a1fe:	e008      	b.n	800a212 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a200:	2301      	movs	r3, #1
 800a202:	73fb      	strb	r3, [r7, #15]
    break;
 800a204:	e005      	b.n	800a212 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a206:	2302      	movs	r3, #2
 800a208:	73fb      	strb	r3, [r7, #15]
    break;
 800a20a:	e002      	b.n	800a212 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a20c:	2302      	movs	r3, #2
 800a20e:	73fb      	strb	r3, [r7, #15]
    break;
 800a210:	bf00      	nop
  }
  return usb_status;
 800a212:	7bfb      	ldrb	r3, [r7, #15]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d102      	bne.n	800a23a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
 800a238:	e001      	b.n	800a23e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a23a:	2301      	movs	r3, #1
 800a23c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	461a      	mov	r2, r3
 800a242:	2101      	movs	r1, #1
 800a244:	4803      	ldr	r0, [pc, #12]	@ (800a254 <MX_DriverVbusFS+0x34>)
 800a246:	f7f7 ffe3 	bl	8002210 <HAL_GPIO_WritePin>
}
 800a24a:	bf00      	nop
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	40020800 	.word	0x40020800

0800a258 <malloc>:
 800a258:	4b02      	ldr	r3, [pc, #8]	@ (800a264 <malloc+0xc>)
 800a25a:	4601      	mov	r1, r0
 800a25c:	6818      	ldr	r0, [r3, #0]
 800a25e:	f000 b82d 	b.w	800a2bc <_malloc_r>
 800a262:	bf00      	nop
 800a264:	2000002c 	.word	0x2000002c

0800a268 <free>:
 800a268:	4b02      	ldr	r3, [pc, #8]	@ (800a274 <free+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f000 b8f5 	b.w	800a45c <_free_r>
 800a272:	bf00      	nop
 800a274:	2000002c 	.word	0x2000002c

0800a278 <sbrk_aligned>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	4e0f      	ldr	r6, [pc, #60]	@ (800a2b8 <sbrk_aligned+0x40>)
 800a27c:	460c      	mov	r4, r1
 800a27e:	6831      	ldr	r1, [r6, #0]
 800a280:	4605      	mov	r5, r0
 800a282:	b911      	cbnz	r1, 800a28a <sbrk_aligned+0x12>
 800a284:	f000 f8ae 	bl	800a3e4 <_sbrk_r>
 800a288:	6030      	str	r0, [r6, #0]
 800a28a:	4621      	mov	r1, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	f000 f8a9 	bl	800a3e4 <_sbrk_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d103      	bne.n	800a29e <sbrk_aligned+0x26>
 800a296:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a29a:	4620      	mov	r0, r4
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
 800a29e:	1cc4      	adds	r4, r0, #3
 800a2a0:	f024 0403 	bic.w	r4, r4, #3
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d0f8      	beq.n	800a29a <sbrk_aligned+0x22>
 800a2a8:	1a21      	subs	r1, r4, r0
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 f89a 	bl	800a3e4 <_sbrk_r>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d1f2      	bne.n	800a29a <sbrk_aligned+0x22>
 800a2b4:	e7ef      	b.n	800a296 <sbrk_aligned+0x1e>
 800a2b6:	bf00      	nop
 800a2b8:	20000a40 	.word	0x20000a40

0800a2bc <_malloc_r>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	1ccd      	adds	r5, r1, #3
 800a2c2:	f025 0503 	bic.w	r5, r5, #3
 800a2c6:	3508      	adds	r5, #8
 800a2c8:	2d0c      	cmp	r5, #12
 800a2ca:	bf38      	it	cc
 800a2cc:	250c      	movcc	r5, #12
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	db01      	blt.n	800a2d8 <_malloc_r+0x1c>
 800a2d4:	42a9      	cmp	r1, r5
 800a2d6:	d904      	bls.n	800a2e2 <_malloc_r+0x26>
 800a2d8:	230c      	movs	r3, #12
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3b8 <_malloc_r+0xfc>
 800a2e6:	f000 f869 	bl	800a3bc <__malloc_lock>
 800a2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ee:	461c      	mov	r4, r3
 800a2f0:	bb44      	cbnz	r4, 800a344 <_malloc_r+0x88>
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7ff ffbf 	bl	800a278 <sbrk_aligned>
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	d158      	bne.n	800a3b2 <_malloc_r+0xf6>
 800a300:	f8d8 4000 	ldr.w	r4, [r8]
 800a304:	4627      	mov	r7, r4
 800a306:	2f00      	cmp	r7, #0
 800a308:	d143      	bne.n	800a392 <_malloc_r+0xd6>
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	d04b      	beq.n	800a3a6 <_malloc_r+0xea>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	4639      	mov	r1, r7
 800a312:	4630      	mov	r0, r6
 800a314:	eb04 0903 	add.w	r9, r4, r3
 800a318:	f000 f864 	bl	800a3e4 <_sbrk_r>
 800a31c:	4581      	cmp	r9, r0
 800a31e:	d142      	bne.n	800a3a6 <_malloc_r+0xea>
 800a320:	6821      	ldr	r1, [r4, #0]
 800a322:	1a6d      	subs	r5, r5, r1
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff ffa6 	bl	800a278 <sbrk_aligned>
 800a32c:	3001      	adds	r0, #1
 800a32e:	d03a      	beq.n	800a3a6 <_malloc_r+0xea>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	442b      	add	r3, r5
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	f8d8 3000 	ldr.w	r3, [r8]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	bb62      	cbnz	r2, 800a398 <_malloc_r+0xdc>
 800a33e:	f8c8 7000 	str.w	r7, [r8]
 800a342:	e00f      	b.n	800a364 <_malloc_r+0xa8>
 800a344:	6822      	ldr	r2, [r4, #0]
 800a346:	1b52      	subs	r2, r2, r5
 800a348:	d420      	bmi.n	800a38c <_malloc_r+0xd0>
 800a34a:	2a0b      	cmp	r2, #11
 800a34c:	d917      	bls.n	800a37e <_malloc_r+0xc2>
 800a34e:	1961      	adds	r1, r4, r5
 800a350:	42a3      	cmp	r3, r4
 800a352:	6025      	str	r5, [r4, #0]
 800a354:	bf18      	it	ne
 800a356:	6059      	strne	r1, [r3, #4]
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	bf08      	it	eq
 800a35c:	f8c8 1000 	streq.w	r1, [r8]
 800a360:	5162      	str	r2, [r4, r5]
 800a362:	604b      	str	r3, [r1, #4]
 800a364:	4630      	mov	r0, r6
 800a366:	f000 f82f 	bl	800a3c8 <__malloc_unlock>
 800a36a:	f104 000b 	add.w	r0, r4, #11
 800a36e:	1d23      	adds	r3, r4, #4
 800a370:	f020 0007 	bic.w	r0, r0, #7
 800a374:	1ac2      	subs	r2, r0, r3
 800a376:	bf1c      	itt	ne
 800a378:	1a1b      	subne	r3, r3, r0
 800a37a:	50a3      	strne	r3, [r4, r2]
 800a37c:	e7af      	b.n	800a2de <_malloc_r+0x22>
 800a37e:	6862      	ldr	r2, [r4, #4]
 800a380:	42a3      	cmp	r3, r4
 800a382:	bf0c      	ite	eq
 800a384:	f8c8 2000 	streq.w	r2, [r8]
 800a388:	605a      	strne	r2, [r3, #4]
 800a38a:	e7eb      	b.n	800a364 <_malloc_r+0xa8>
 800a38c:	4623      	mov	r3, r4
 800a38e:	6864      	ldr	r4, [r4, #4]
 800a390:	e7ae      	b.n	800a2f0 <_malloc_r+0x34>
 800a392:	463c      	mov	r4, r7
 800a394:	687f      	ldr	r7, [r7, #4]
 800a396:	e7b6      	b.n	800a306 <_malloc_r+0x4a>
 800a398:	461a      	mov	r2, r3
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	42a3      	cmp	r3, r4
 800a39e:	d1fb      	bne.n	800a398 <_malloc_r+0xdc>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	6053      	str	r3, [r2, #4]
 800a3a4:	e7de      	b.n	800a364 <_malloc_r+0xa8>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	6033      	str	r3, [r6, #0]
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f000 f80c 	bl	800a3c8 <__malloc_unlock>
 800a3b0:	e794      	b.n	800a2dc <_malloc_r+0x20>
 800a3b2:	6005      	str	r5, [r0, #0]
 800a3b4:	e7d6      	b.n	800a364 <_malloc_r+0xa8>
 800a3b6:	bf00      	nop
 800a3b8:	20000a44 	.word	0x20000a44

0800a3bc <__malloc_lock>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	@ (800a3c4 <__malloc_lock+0x8>)
 800a3be:	f000 b84b 	b.w	800a458 <__retarget_lock_acquire_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20000b80 	.word	0x20000b80

0800a3c8 <__malloc_unlock>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	@ (800a3d0 <__malloc_unlock+0x8>)
 800a3ca:	f000 b846 	b.w	800a45a <__retarget_lock_release_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	20000b80 	.word	0x20000b80

0800a3d4 <memset>:
 800a3d4:	4402      	add	r2, r0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d100      	bne.n	800a3de <memset+0xa>
 800a3dc:	4770      	bx	lr
 800a3de:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e2:	e7f9      	b.n	800a3d8 <memset+0x4>

0800a3e4 <_sbrk_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d06      	ldr	r5, [pc, #24]	@ (800a400 <_sbrk_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f6 fe0c 	bl	800100c <_sbrk>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_sbrk_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_sbrk_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20000b84 	.word	0x20000b84

0800a404 <__errno>:
 800a404:	4b01      	ldr	r3, [pc, #4]	@ (800a40c <__errno+0x8>)
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	2000002c 	.word	0x2000002c

0800a410 <__libc_init_array>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	4d0d      	ldr	r5, [pc, #52]	@ (800a448 <__libc_init_array+0x38>)
 800a414:	4c0d      	ldr	r4, [pc, #52]	@ (800a44c <__libc_init_array+0x3c>)
 800a416:	1b64      	subs	r4, r4, r5
 800a418:	10a4      	asrs	r4, r4, #2
 800a41a:	2600      	movs	r6, #0
 800a41c:	42a6      	cmp	r6, r4
 800a41e:	d109      	bne.n	800a434 <__libc_init_array+0x24>
 800a420:	4d0b      	ldr	r5, [pc, #44]	@ (800a450 <__libc_init_array+0x40>)
 800a422:	4c0c      	ldr	r4, [pc, #48]	@ (800a454 <__libc_init_array+0x44>)
 800a424:	f000 f864 	bl	800a4f0 <_init>
 800a428:	1b64      	subs	r4, r4, r5
 800a42a:	10a4      	asrs	r4, r4, #2
 800a42c:	2600      	movs	r6, #0
 800a42e:	42a6      	cmp	r6, r4
 800a430:	d105      	bne.n	800a43e <__libc_init_array+0x2e>
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	f855 3b04 	ldr.w	r3, [r5], #4
 800a438:	4798      	blx	r3
 800a43a:	3601      	adds	r6, #1
 800a43c:	e7ee      	b.n	800a41c <__libc_init_array+0xc>
 800a43e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a442:	4798      	blx	r3
 800a444:	3601      	adds	r6, #1
 800a446:	e7f2      	b.n	800a42e <__libc_init_array+0x1e>
 800a448:	0800a534 	.word	0x0800a534
 800a44c:	0800a534 	.word	0x0800a534
 800a450:	0800a534 	.word	0x0800a534
 800a454:	0800a538 	.word	0x0800a538

0800a458 <__retarget_lock_acquire_recursive>:
 800a458:	4770      	bx	lr

0800a45a <__retarget_lock_release_recursive>:
 800a45a:	4770      	bx	lr

0800a45c <_free_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4605      	mov	r5, r0
 800a460:	2900      	cmp	r1, #0
 800a462:	d041      	beq.n	800a4e8 <_free_r+0x8c>
 800a464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a468:	1f0c      	subs	r4, r1, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	bfb8      	it	lt
 800a46e:	18e4      	addlt	r4, r4, r3
 800a470:	f7ff ffa4 	bl	800a3bc <__malloc_lock>
 800a474:	4a1d      	ldr	r2, [pc, #116]	@ (800a4ec <_free_r+0x90>)
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	b933      	cbnz	r3, 800a488 <_free_r+0x2c>
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	6014      	str	r4, [r2, #0]
 800a47e:	4628      	mov	r0, r5
 800a480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a484:	f7ff bfa0 	b.w	800a3c8 <__malloc_unlock>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d908      	bls.n	800a49e <_free_r+0x42>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	1821      	adds	r1, r4, r0
 800a490:	428b      	cmp	r3, r1
 800a492:	bf01      	itttt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	1809      	addeq	r1, r1, r0
 800a49a:	6021      	streq	r1, [r4, #0]
 800a49c:	e7ed      	b.n	800a47a <_free_r+0x1e>
 800a49e:	461a      	mov	r2, r3
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b10b      	cbz	r3, 800a4a8 <_free_r+0x4c>
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	d9fa      	bls.n	800a49e <_free_r+0x42>
 800a4a8:	6811      	ldr	r1, [r2, #0]
 800a4aa:	1850      	adds	r0, r2, r1
 800a4ac:	42a0      	cmp	r0, r4
 800a4ae:	d10b      	bne.n	800a4c8 <_free_r+0x6c>
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	4401      	add	r1, r0
 800a4b4:	1850      	adds	r0, r2, r1
 800a4b6:	4283      	cmp	r3, r0
 800a4b8:	6011      	str	r1, [r2, #0]
 800a4ba:	d1e0      	bne.n	800a47e <_free_r+0x22>
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	6053      	str	r3, [r2, #4]
 800a4c2:	4408      	add	r0, r1
 800a4c4:	6010      	str	r0, [r2, #0]
 800a4c6:	e7da      	b.n	800a47e <_free_r+0x22>
 800a4c8:	d902      	bls.n	800a4d0 <_free_r+0x74>
 800a4ca:	230c      	movs	r3, #12
 800a4cc:	602b      	str	r3, [r5, #0]
 800a4ce:	e7d6      	b.n	800a47e <_free_r+0x22>
 800a4d0:	6820      	ldr	r0, [r4, #0]
 800a4d2:	1821      	adds	r1, r4, r0
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf04      	itt	eq
 800a4d8:	6819      	ldreq	r1, [r3, #0]
 800a4da:	685b      	ldreq	r3, [r3, #4]
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	bf04      	itt	eq
 800a4e0:	1809      	addeq	r1, r1, r0
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	6054      	str	r4, [r2, #4]
 800a4e6:	e7ca      	b.n	800a47e <_free_r+0x22>
 800a4e8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000a44 	.word	0x20000a44

0800a4f0 <_init>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	bf00      	nop
 800a4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f6:	bc08      	pop	{r3}
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	4770      	bx	lr

0800a4fc <_fini>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr
