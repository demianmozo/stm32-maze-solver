
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800ca78  0800ca78  0000da78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cafc  0800cafc  0000e098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cafc  0800cafc  0000dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb04  0800cb04  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb04  0800cb04  0000db04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb08  0800cb08  0000db08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800cb0c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e098  2**0
                  CONTENTS
 10 .bss          00000d5c  20000098  20000098  0000e098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  20000df4  0000e098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef42  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b5  00000000  00000000  0002d00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  000319c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001439  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273af  00000000  00000000  00034809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022505  00000000  00000000  0005bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2001  00000000  00000000  0007e0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001600be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007348  00000000  00000000  00160104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0016744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca60 	.word	0x0800ca60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800ca60 	.word	0x0800ca60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 80005c0:	e005      	b.n	80005ce <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 80005c2:	89bb      	ldrh	r3, [r7, #12]
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	3301      	adds	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 80005ce:	89bb      	ldrh	r3, [r7, #12]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d8f6      	bhi.n	80005c2 <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 80005d8:	887b      	ldrh	r3, [r7, #2]
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 f9a5 	bl	800392c <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <antirebote+0x9c>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	4916      	ldr	r1, [pc, #88]	@ (800064c <antirebote+0xa0>)
 80005f4:	7aba      	ldrb	r2, [r7, #10]
 80005f6:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <antirebote+0x9c>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	54d1      	strb	r1, [r2, r3]
        return false;
 8000600:	2300      	movs	r3, #0
 8000602:	e01d      	b.n	8000640 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <antirebote+0xa0>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	7aba      	ldrb	r2, [r7, #10]
 800060c:	429a      	cmp	r2, r3
 800060e:	d016      	beq.n	800063e <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000610:	2032      	movs	r0, #50	@ 0x32
 8000612:	f001 fe83 	bl	800231c <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f003 f986 	bl	800392c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 8000624:	7aba      	ldrb	r2, [r7, #10]
 8000626:	7a7b      	ldrb	r3, [r7, #9]
 8000628:	429a      	cmp	r2, r3
 800062a:	d108      	bne.n	800063e <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4907      	ldr	r1, [pc, #28]	@ (800064c <antirebote+0xa0>)
 8000630:	7a7a      	ldrb	r2, [r7, #9]
 8000632:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <antirebote+0x92>
            {
                pulsado = true;
 800063a:	2301      	movs	r3, #1
 800063c:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000b4 	.word	0x200000b4
 800064c:	200000c4 	.word	0x200000c4

08000650 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 8000658:	4803      	ldr	r0, [pc, #12]	@ (8000668 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800065a:	f000 f815 	bl	8000688 <promediar_sensores>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000334 	.word	0x20000334

0800066c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x18>)
 8000676:	f000 f807 	bl	8000688 <promediar_sensores>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003fc 	.word	0x200003fc

08000688 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e012      	b.n	80006c4 <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	4413      	add	r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3302      	adds	r3, #2
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3304      	adds	r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b13      	cmp	r3, #19
 80006c8:	dde9      	ble.n	800069e <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <promediar_sensores+0x70>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <promediar_sensores+0x74>)
 80006d8:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <promediar_sensores+0x70>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <promediar_sensores+0x78>)
 80006e8:	801a      	strh	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	cccccccd 	.word	0xcccccccd
 80006fc:	200000d6 	.word	0x200000d6
 8000700:	200000d4 	.word	0x200000d4

08000704 <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f001 fe06 	bl	800231c <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000716:	4835      	ldr	r0, [pc, #212]	@ (80007ec <auto_calibracion+0xe8>)
 8000718:	f003 f920 	bl	800395c <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 800071c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000720:	f001 fdfc 	bl	800231c <HAL_Delay>

    der_cerca = sensor_der_avg;
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <auto_calibracion+0xec>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <auto_calibracion+0xf0>)
 800072a:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000732:	482e      	ldr	r0, [pc, #184]	@ (80007ec <auto_calibracion+0xe8>)
 8000734:	f003 f912 	bl	800395c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	482b      	ldr	r0, [pc, #172]	@ (80007ec <auto_calibracion+0xe8>)
 8000740:	f003 f90c 	bl	800395c <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 8000744:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000748:	f001 fde8 	bl	800231c <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 800074c:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <auto_calibracion+0xf4>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <auto_calibracion+0xf8>)
 8000752:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	4824      	ldr	r0, [pc, #144]	@ (80007ec <auto_calibracion+0xe8>)
 800075c:	f003 f8fe 	bl	800395c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000766:	4821      	ldr	r0, [pc, #132]	@ (80007ec <auto_calibracion+0xe8>)
 8000768:	f003 f8f8 	bl	800395c <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 800076c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000770:	f001 fdd4 	bl	800231c <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <auto_calibracion+0xf4>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <auto_calibracion+0xfc>)
 800077a:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <auto_calibracion+0xec>)
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <auto_calibracion+0x100>)
 8000782:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <auto_calibracion+0xf8>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <auto_calibracion+0xfc>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	0fda      	lsrs	r2, r3, #31
 8000792:	4413      	add	r3, r2
 8000794:	105b      	asrs	r3, r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <auto_calibracion+0x104>)
 800079a:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <auto_calibracion+0xf0>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <auto_calibracion+0x100>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	0fda      	lsrs	r2, r3, #31
 80007aa:	4413      	add	r3, r2
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <auto_calibracion+0x108>)
 80007b2:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <auto_calibracion+0xe8>)
 80007bc:	f003 f8ce 	bl	800395c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <auto_calibracion+0xe8>)
 80007c8:	f003 f8c8 	bl	800395c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d0:	f001 fda4 	bl	800231c <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <auto_calibracion+0xe8>)
 80007dc:	f003 f8be 	bl	800395c <HAL_GPIO_WritePin>

    calibrado = true;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <auto_calibracion+0x10c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	200000d6 	.word	0x200000d6
 80007f4:	20000006 	.word	0x20000006
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000002 	.word	0x20000002
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004
 800080c:	2000000a 	.word	0x2000000a
 8000810:	200000d8 	.word	0x200000d8

08000814 <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    if (!calibrado)
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <controlar_linea_recta+0x70>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d128      	bne.n	800087a <controlar_linea_recta+0x66>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca + 200);
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <controlar_linea_recta+0x74>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	33c7      	adds	r3, #199	@ 0xc7
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <controlar_linea_recta+0x78>)
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	4293      	cmp	r3, r2
 8000834:	bfac      	ite	ge
 8000836:	2301      	movge	r3, #1
 8000838:	2300      	movlt	r3, #0
 800083a:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca + 200);
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <controlar_linea_recta+0x7c>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	33c7      	adds	r3, #199	@ 0xc7
 8000842:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <controlar_linea_recta+0x80>)
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	4293      	cmp	r3, r2
 8000848:	bfac      	ite	ge
 800084a:	2301      	movge	r3, #1
 800084c:	2300      	movlt	r3, #0
 800084e:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <controlar_linea_recta+0x48>
    {
        correccion_derecha(); // Alejarse de pared izquierda
 8000856:	f000 f9c7 	bl	8000be8 <correccion_derecha>
 800085a:	e00f      	b.n	800087c <controlar_linea_recta+0x68>
    }
    else if (muy_cerca_der)
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <controlar_linea_recta+0x54>
    {
        correccion_izquierda(); // Alejarse de pared derecha
 8000862:	f000 f993 	bl	8000b8c <correccion_izquierda>
 8000866:	e009      	b.n	800087c <controlar_linea_recta+0x68>
    }
    else if (muy_cerca_izq)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <controlar_linea_recta+0x60>
    {
        correccion_derecha(); // Alejarse de pared izquierda
 800086e:	f000 f9bb 	bl	8000be8 <correccion_derecha>
 8000872:	e003      	b.n	800087c <controlar_linea_recta+0x68>
    }
    else
    {
        avanza(); // Ir recto si está centrado
 8000874:	f000 f8bc 	bl	80009f0 <avanza>
 8000878:	e000      	b.n	800087c <controlar_linea_recta+0x68>
        return;
 800087a:	bf00      	nop
    }
}
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000d8 	.word	0x200000d8
 8000888:	20000000 	.word	0x20000000
 800088c:	200000d4 	.word	0x200000d4
 8000890:	20000006 	.word	0x20000006
 8000894:	200000d6 	.word	0x200000d6

08000898 <activar_modo_sprint>:
uint16_t velocidad_actual_der = VELOCIDAD_AVANCE_DER;
uint16_t velocidad_giro_actual_izq = VELOCIDAD_GIRO_IZQ;
uint16_t velocidad_giro_actual_der = VELOCIDAD_GIRO_DER;

void activar_modo_sprint(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
    velocidad_actual_izq = VELOCIDAD_SPRINT_IZQ;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <activar_modo_sprint+0x20>)
 800089e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008a2:	801a      	strh	r2, [r3, #0]
    velocidad_actual_der = VELOCIDAD_SPRINT_DER;
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <activar_modo_sprint+0x24>)
 80008a6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008aa:	801a      	strh	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	2000000e 	.word	0x2000000e

080008c0 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80008c4:	2108      	movs	r1, #8
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <control_motor_init+0x1c>)
 80008c8:	f006 f8bc 	bl	8006a44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 80008cc:	210c      	movs	r1, #12
 80008ce:	4803      	ldr	r0, [pc, #12]	@ (80008dc <control_motor_init+0x1c>)
 80008d0:	f006 f8b8 	bl	8006a44 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 80008d4:	f000 f88c 	bl	80009f0 <avanza>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200002a0 	.word	0x200002a0

080008e0 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <set_motor_izq+0x1c>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00d      	beq.n	8000916 <set_motor_izq+0x36>
 80008fa:	e019      	b.n	8000930 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000902:	4817      	ldr	r0, [pc, #92]	@ (8000960 <set_motor_izq+0x80>)
 8000904:	f003 f82a 	bl	800395c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800090e:	4814      	ldr	r0, [pc, #80]	@ (8000960 <set_motor_izq+0x80>)
 8000910:	f003 f824 	bl	800395c <HAL_GPIO_WritePin>
        break;
 8000914:	e01b      	b.n	800094e <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800091c:	4810      	ldr	r0, [pc, #64]	@ (8000960 <set_motor_izq+0x80>)
 800091e:	f003 f81d 	bl	800395c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <set_motor_izq+0x80>)
 800092a:	f003 f817 	bl	800395c <HAL_GPIO_WritePin>
        break;
 800092e:	e00e      	b.n	800094e <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000936:	480a      	ldr	r0, [pc, #40]	@ (8000960 <set_motor_izq+0x80>)
 8000938:	f003 f810 	bl	800395c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000942:	4807      	ldr	r0, [pc, #28]	@ (8000960 <set_motor_izq+0x80>)
 8000944:	f003 f80a 	bl	800395c <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000948:	2300      	movs	r3, #0
 800094a:	80bb      	strh	r3, [r7, #4]
        break;
 800094c:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <set_motor_izq+0x84>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	88ba      	ldrh	r2, [r7, #4]
 8000954:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020400 	.word	0x40020400
 8000964:	200002a0 	.word	0x200002a0

08000968 <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <set_motor_der+0x1c>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d00d      	beq.n	800099e <set_motor_der+0x36>
 8000982:	e019      	b.n	80009b8 <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800098a:	4817      	ldr	r0, [pc, #92]	@ (80009e8 <set_motor_der+0x80>)
 800098c:	f002 ffe6 	bl	800395c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000996:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <set_motor_der+0x80>)
 8000998:	f002 ffe0 	bl	800395c <HAL_GPIO_WritePin>
        break;
 800099c:	e01b      	b.n	80009d6 <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a4:	4810      	ldr	r0, [pc, #64]	@ (80009e8 <set_motor_der+0x80>)
 80009a6:	f002 ffd9 	bl	800395c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <set_motor_der+0x80>)
 80009b2:	f002 ffd3 	bl	800395c <HAL_GPIO_WritePin>
        break;
 80009b6:	e00e      	b.n	80009d6 <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009be:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <set_motor_der+0x80>)
 80009c0:	f002 ffcc 	bl	800395c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ca:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <set_motor_der+0x80>)
 80009cc:	f002 ffc6 	bl	800395c <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80009d0:	2300      	movs	r3, #0
 80009d2:	80bb      	strh	r3, [r7, #4]
        break;
 80009d4:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <set_motor_der+0x84>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	88ba      	ldrh	r2, [r7, #4]
 80009dc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40020400 	.word	0x40020400
 80009ec:	200002a0 	.word	0x200002a0

080009f0 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, velocidad_actual_izq);
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <avanza+0x20>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff ff70 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_actual_der);
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <avanza+0x24>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ffae 	bl	8000968 <set_motor_der>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	2000000e 	.word	0x2000000e

08000a18 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, velocidad_giro_actual_izq);
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <gira90izq+0x6c>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff ff59 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_giro_actual_der);
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <gira90izq+0x70>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff ff97 	bl	8000968 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_IZQ);
 8000a3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a3e:	f001 fc6d 	bl	800231c <HAL_Delay>
    switch (sentido)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d817      	bhi.n	8000a78 <gira90izq+0x60>
 8000a48:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <gira90izq+0x38>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a67 	.word	0x08000a67
 8000a58:	08000a6d 	.word	0x08000a6d
 8000a5c:	08000a73 	.word	0x08000a73
    {
    case norte:
        sentido = oeste;
 8000a60:	2303      	movs	r3, #3
 8000a62:	71fb      	strb	r3, [r7, #7]
        break;
 8000a64:	e008      	b.n	8000a78 <gira90izq+0x60>

    case este:
        sentido = norte;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
        break;
 8000a6a:	e005      	b.n	8000a78 <gira90izq+0x60>

    case sur:
        sentido = este;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
        break;
 8000a70:	e002      	b.n	8000a78 <gira90izq+0x60>

    case oeste:
        sentido = sur;
 8000a72:	2302      	movs	r3, #2
 8000a74:	71fb      	strb	r3, [r7, #7]
        break;
 8000a76:	bf00      	nop
    // Después del giro, continuar avanzando
    //avanza();

    // termina de girar y verifica que no halla un muro adelante

    return sentido;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000010 	.word	0x20000010
 8000a88:	20000012 	.word	0x20000012

08000a8c <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <gira90der+0x6c>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ff1f 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <gira90der+0x70>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ff5d 	bl	8000968 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_DER);
 8000aae:	f240 2026 	movw	r0, #550	@ 0x226
 8000ab2:	f001 fc33 	bl	800231c <HAL_Delay>
    switch (sentido)
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d817      	bhi.n	8000aec <gira90der+0x60>
 8000abc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac4 <gira90der+0x38>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000ad5 	.word	0x08000ad5
 8000ac8:	08000adb 	.word	0x08000adb
 8000acc:	08000ae1 	.word	0x08000ae1
 8000ad0:	08000ae7 	.word	0x08000ae7
    {
    case norte:
        sentido = este;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
        break;
 8000ad8:	e008      	b.n	8000aec <gira90der+0x60>

    case este:
        sentido = sur;
 8000ada:	2302      	movs	r3, #2
 8000adc:	71fb      	strb	r3, [r7, #7]
        break;
 8000ade:	e005      	b.n	8000aec <gira90der+0x60>

    case sur:
        sentido = oeste;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	71fb      	strb	r3, [r7, #7]
        break;
 8000ae4:	e002      	b.n	8000aec <gira90der+0x60>

    case oeste:
        sentido = norte;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
        break;
 8000aea:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    
    return sentido;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010
 8000afc:	20000012 	.word	0x20000012

08000b00 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <gira180+0x6c>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fee5 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <gira180+0x70>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff ff23 	bl	8000968 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000b22:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000b26:	f001 fbf9 	bl	800231c <HAL_Delay>
    switch (sentido)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d817      	bhi.n	8000b60 <gira180+0x60>
 8000b30:	a201      	add	r2, pc, #4	@ (adr r2, 8000b38 <gira180+0x38>)
 8000b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b36:	bf00      	nop
 8000b38:	08000b49 	.word	0x08000b49
 8000b3c:	08000b4f 	.word	0x08000b4f
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b5b 	.word	0x08000b5b
    {
    case norte:
        sentido = sur;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b4c:	e008      	b.n	8000b60 <gira180+0x60>

    case este:
        sentido = oeste;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	71fb      	strb	r3, [r7, #7]
        break;
 8000b52:	e005      	b.n	8000b60 <gira180+0x60>

    case sur:
        sentido = norte;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
        break;
 8000b58:	e002      	b.n	8000b60 <gira180+0x60>

    case oeste:
        sentido = este;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
        break;
 8000b5e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	20000012 	.word	0x20000012

08000b74 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff feb0 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fef0 	bl	8000968 <set_motor_der>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // Motor izq más lento
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <correccion_izquierda+0x50>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2264      	movs	r2, #100	@ 0x64
 8000b98:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 700); // Motor der normal
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <correccion_izquierda+0x50>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000ba2:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	e00f      	b.n	8000bca <correccion_izquierda+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <correccion_izquierda+0x54>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10e      	bne.n	8000bd2 <correccion_izquierda+0x46>
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <correccion_izquierda+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d109      	bne.n	8000bd2 <correccion_izquierda+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f001 fbac 	bl	800231c <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	ddec      	ble.n	8000baa <correccion_izquierda+0x1e>
 8000bd0:	e000      	b.n	8000bd4 <correccion_izquierda+0x48>
            return; // Salir si hay algo urgente
 8000bd2:	bf00      	nop
    } 
}
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002a0 	.word	0x200002a0
 8000be0:	200004c4 	.word	0x200004c4
 8000be4:	200004c5 	.word	0x200004c5

08000be8 <correccion_derecha>:

void correccion_derecha(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 700); // Motor izq normal
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <correccion_derecha+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100); // Motor der más lento
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <correccion_derecha+0x50>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2264      	movs	r2, #100	@ 0x64
 8000bfe:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	e00f      	b.n	8000c26 <correccion_derecha+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <correccion_derecha+0x54>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10e      	bne.n	8000c2e <correccion_derecha+0x46>
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <correccion_derecha+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <correccion_derecha+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f001 fb7e 	bl	800231c <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3301      	adds	r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	ddec      	ble.n	8000c06 <correccion_derecha+0x1e>
 8000c2c:	e000      	b.n	8000c30 <correccion_derecha+0x48>
            return; // Salir si hay algo urgente
 8000c2e:	bf00      	nop
    } 
}
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200002a0 	.word	0x200002a0
 8000c3c:	200004c4 	.word	0x200004c4
 8000c40:	200004c5 	.word	0x200004c5

08000c44 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000c54:	79ba      	ldrb	r2, [r7, #6]
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f996 	bl	8000f8c <laberinto_posicion_valida>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f083 0301 	eor.w	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000c6c:	23ff      	movs	r3, #255	@ 0xff
 8000c6e:	e00f      	b.n	8000c90 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	1e59      	subs	r1, r3, #1
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <laberinto_get_peso+0x54>)
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	00d2      	lsls	r2, r2, #3
 8000c7e:	1ad2      	subs	r2, r2, r3
 8000c80:	460b      	mov	r3, r1
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	1a5b      	subs	r3, r3, r1
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	4403      	add	r3, r0
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000dc 	.word	0x200000dc

08000c9c <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	71bb      	strb	r3, [r7, #6]
 8000caa:	4613      	mov	r3, r2
 8000cac:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000cae:	79ba      	ldrb	r2, [r7, #6]
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f969 	bl	8000f8c <laberinto_posicion_valida>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d146      	bne.n	8000d54 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	1e59      	subs	r1, r3, #1
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	7978      	ldrb	r0, [r7, #5]
 8000cd0:	4c22      	ldr	r4, [pc, #136]	@ (8000d5c <laberinto_set_muro+0xc0>)
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	1ad2      	subs	r2, r2, r3
 8000cd8:	460b      	mov	r3, r1
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4423      	add	r3, r4
 8000ce4:	4403      	add	r3, r0
 8000ce6:	3303      	adds	r3, #3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	723b      	strb	r3, [r7, #8]
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f000 f90d 	bl	8000f18 <laberinto_get_posicion_adyacente>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000d02:	7b3b      	ldrb	r3, [r7, #12]
 8000d04:	7b7a      	ldrb	r2, [r7, #13]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 f93f 	bl	8000f8c <laberinto_posicion_valida>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01c      	beq.n	8000d4e <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	3302      	adds	r3, #2
 8000d18:	425a      	negs	r2, r3
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	bf58      	it	pl
 8000d24:	4253      	negpl	r3, r2
 8000d26:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000d28:	7b3b      	ldrb	r3, [r7, #12]
 8000d2a:	1e59      	subs	r1, r3, #1
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	7bf8      	ldrb	r0, [r7, #15]
 8000d32:	4c0a      	ldr	r4, [pc, #40]	@ (8000d5c <laberinto_set_muro+0xc0>)
 8000d34:	461a      	mov	r2, r3
 8000d36:	00d2      	lsls	r2, r2, #3
 8000d38:	1ad2      	subs	r2, r2, r3
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	1a5b      	subs	r3, r3, r1
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	4423      	add	r3, r4
 8000d46:	4403      	add	r3, r0
 8000d48:	3303      	adds	r3, #3
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000d4e:	f000 f807 	bl	8000d60 <laberinto_recalcular_pesos>
 8000d52:	e000      	b.n	8000d56 <laberinto_set_muro+0xba>
        return;
 8000d54:	bf00      	nop
}
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	200000dc 	.word	0x200000dc

08000d60 <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000d6e:	2314      	movs	r3, #20
 8000d70:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000d72:	e092      	b.n	8000e9a <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000d7e:	2301      	movs	r3, #1
 8000d80:	737b      	strb	r3, [r7, #13]
 8000d82:	e086      	b.n	8000e92 <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000d84:	2301      	movs	r3, #1
 8000d86:	733b      	strb	r3, [r7, #12]
 8000d88:	e07c      	b.n	8000e84 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d102      	bne.n	8000d96 <laberinto_recalcular_pesos+0x36>
 8000d90:	7b3b      	ldrb	r3, [r7, #12]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d072      	beq.n	8000e7c <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000d96:	23ff      	movs	r3, #255	@ 0xff
 8000d98:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	72bb      	strb	r3, [r7, #10]
 8000d9e:	e03a      	b.n	8000e16 <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	1e59      	subs	r1, r3, #1
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	7ab8      	ldrb	r0, [r7, #10]
 8000daa:	4c42      	ldr	r4, [pc, #264]	@ (8000eb4 <laberinto_recalcular_pesos+0x154>)
 8000dac:	461a      	mov	r2, r3
 8000dae:	00d2      	lsls	r2, r2, #3
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	460b      	mov	r3, r1
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	1a5b      	subs	r3, r3, r1
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	4423      	add	r3, r4
 8000dbe:	4403      	add	r3, r0
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d122      	bne.n	8000e0e <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	703b      	strb	r3, [r7, #0]
 8000dcc:	7b3b      	ldrb	r3, [r7, #12]
 8000dce:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000dd0:	7abb      	ldrb	r3, [r7, #10]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6838      	ldr	r0, [r7, #0]
 8000dd6:	f000 f89f 	bl	8000f18 <laberinto_get_posicion_adyacente>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000dde:	793b      	ldrb	r3, [r7, #4]
 8000de0:	797a      	ldrb	r2, [r7, #5]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f8d1 	bl	8000f8c <laberinto_posicion_valida>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00f      	beq.n	8000e10 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000df0:	793b      	ldrb	r3, [r7, #4]
 8000df2:	797a      	ldrb	r2, [r7, #5]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff24 	bl	8000c44 <laberinto_get_peso>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d203      	bcs.n	8000e10 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	72fb      	strb	r3, [r7, #11]
 8000e0c:	e000      	b.n	8000e10 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000e0e:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000e10:	7abb      	ldrb	r3, [r7, #10]
 8000e12:	3301      	adds	r3, #1
 8000e14:	72bb      	strb	r3, [r7, #10]
 8000e16:	7abb      	ldrb	r3, [r7, #10]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d9c1      	bls.n	8000da0 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
 8000e1e:	2bff      	cmp	r3, #255	@ 0xff
 8000e20:	d003      	beq.n	8000e2a <laberinto_recalcular_pesos+0xca>
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	e000      	b.n	8000e2c <laberinto_recalcular_pesos+0xcc>
 8000e2a:	23ff      	movs	r3, #255	@ 0xff
 8000e2c:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	1e59      	subs	r1, r3, #1
 8000e32:	7b3b      	ldrb	r3, [r7, #12]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	481f      	ldr	r0, [pc, #124]	@ (8000eb4 <laberinto_recalcular_pesos+0x154>)
 8000e38:	461a      	mov	r2, r3
 8000e3a:	00d2      	lsls	r2, r2, #3
 8000e3c:	1ad2      	subs	r2, r2, r3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	1a5b      	subs	r3, r3, r1
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	4403      	add	r3, r0
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	7a3a      	ldrb	r2, [r7, #8]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d014      	beq.n	8000e7e <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000e54:	7b7b      	ldrb	r3, [r7, #13]
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4815      	ldr	r0, [pc, #84]	@ (8000eb4 <laberinto_recalcular_pesos+0x154>)
 8000e5e:	461a      	mov	r2, r3
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	1ad2      	subs	r2, r2, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4403      	add	r3, r0
 8000e70:	3302      	adds	r3, #2
 8000e72:	7a3a      	ldrb	r2, [r7, #8]
 8000e74:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e000      	b.n	8000e7e <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000e7c:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000e7e:	7b3b      	ldrb	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	733b      	strb	r3, [r7, #12]
 8000e84:	7b3b      	ldrb	r3, [r7, #12]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	f67f af7f 	bls.w	8000d8a <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	737b      	strb	r3, [r7, #13]
 8000e92:	7b7b      	ldrb	r3, [r7, #13]
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	f67f af75 	bls.w	8000d84 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d004      	beq.n	8000eaa <laberinto_recalcular_pesos+0x14a>
 8000ea0:	7bba      	ldrb	r2, [r7, #14]
 8000ea2:	7a7b      	ldrb	r3, [r7, #9]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f4ff af65 	bcc.w	8000d74 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000dc 	.word	0x200000dc

08000eb8 <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000eca:	79ba      	ldrb	r2, [r7, #6]
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f85b 	bl	8000f8c <laberinto_posicion_valida>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f083 0301 	eor.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e011      	b.n	8000f0a <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	1e59      	subs	r1, r3, #1
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	7978      	ldrb	r0, [r7, #5]
 8000ef0:	4c08      	ldr	r4, [pc, #32]	@ (8000f14 <laberinto_hay_muro+0x5c>)
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	1ad2      	subs	r2, r2, r3
 8000ef8:	460b      	mov	r3, r1
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	1a5b      	subs	r3, r3, r1
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	4423      	add	r3, r4
 8000f04:	4403      	add	r3, r0
 8000f06:	3303      	adds	r3, #3
 8000f08:	781b      	ldrb	r3, [r3, #0]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000dc 	.word	0x200000dc

08000f18 <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	80b8      	strh	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d81e      	bhi.n	8000f6c <laberinto_get_posicion_adyacente+0x54>
 8000f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <laberinto_get_posicion_adyacente+0x1c>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f4f 	.word	0x08000f4f
 8000f3c:	08000f59 	.word	0x08000f59
 8000f40:	08000f63 	.word	0x08000f63
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000f44:	793b      	ldrb	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	723b      	strb	r3, [r7, #8]
        break;
 8000f4c:	e00e      	b.n	8000f6c <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000f4e:	797b      	ldrb	r3, [r7, #5]
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	727b      	strb	r3, [r7, #9]
        break;
 8000f56:	e009      	b.n	8000f6c <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000f58:	793b      	ldrb	r3, [r7, #4]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	723b      	strb	r3, [r7, #8]
        break;
 8000f60:	e004      	b.n	8000f6c <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000f62:	797b      	ldrb	r3, [r7, #5]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	727b      	strb	r3, [r7, #9]
        break;
 8000f6a:	bf00      	nop
    }

    return nueva_pos;
 8000f6c:	893b      	ldrh	r3, [r7, #8]
 8000f6e:	81bb      	strh	r3, [r7, #12]
 8000f70:	2300      	movs	r3, #0
 8000f72:	7b3a      	ldrb	r2, [r7, #12]
 8000f74:	f362 0307 	bfi	r3, r2, #0, #8
 8000f78:	7b7a      	ldrb	r2, [r7, #13]
 8000f7a:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00a      	beq.n	8000fb8 <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d807      	bhi.n	8000fb8 <laberinto_posicion_valida+0x2c>
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d801      	bhi.n	8000fb8 <laberinto_posicion_valida+0x2c>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <laberinto_posicion_valida+0x2e>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f001 f932 	bl	8002238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f862 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 fa5a 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fdc:	f000 fa38 	bl	8001450 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f926 	bl	8001230 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fe4:	f000 f952 	bl	800128c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000fe8:	f00a fd80 	bl	800baec <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000fec:	f000 f8c0 	bl	8001170 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ff0:	f000 f982 	bl	80012f8 <MX_TIM3_Init>
  MX_UART5_Init();
 8000ff4:	f000 fa02 	bl	80013fc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 8000ff8:	22c8      	movs	r2, #200	@ 0xc8
 8000ffa:	4922      	ldr	r1, [pc, #136]	@ (8001084 <main+0xb8>)
 8000ffc:	4822      	ldr	r0, [pc, #136]	@ (8001088 <main+0xbc>)
 8000ffe:	f001 f9f5 	bl	80023ec <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8001002:	f7ff fb7f 	bl	8000704 <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 8001006:	f7ff fc5b 	bl	80008c0 <control_motor_init>
  Inicializar_UART();
 800100a:	f001 f8c1 	bl	8002190 <Inicializar_UART>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800100e:	f00a fd93 	bl	800bb38 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <main+0xc0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d02b      	beq.n	8001078 <main+0xac>
    {
      controlar_linea_recta();
 8001020:	f7ff fbf8 	bl	8000814 <controlar_linea_recta>
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO
      if (flag_linea_detectada)
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <main+0xc4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00a      	beq.n	8001044 <main+0x78>
      {
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <main+0xc8>)
 8001036:	f002 fc91 	bl	800395c <HAL_GPIO_WritePin>
        flag_linea_detectada = false;                            // Clear flag PRIMERO
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <main+0xc4>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
        chequeolinea();
 8001040:	f000 fbba 	bl	80017b8 <chequeolinea>
      }
      if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin))
 8001044:	2140      	movs	r1, #64	@ 0x40
 8001046:	4814      	ldr	r0, [pc, #80]	@ (8001098 <main+0xcc>)
 8001048:	f002 fc70 	bl	800392c <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d114      	bne.n	800107c <main+0xb0>
      {
        HAL_Delay(20);
 8001052:	2014      	movs	r0, #20
 8001054:	f001 f962 	bl	800231c <HAL_Delay>
        if (HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin) == GPIO_PIN_RESET)
 8001058:	2140      	movs	r1, #64	@ 0x40
 800105a:	480f      	ldr	r0, [pc, #60]	@ (8001098 <main+0xcc>)
 800105c:	f002 fc66 	bl	800392c <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <main+0xb0>
        {
          HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Prende LED al detectar muro
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <main+0xc8>)
 800106e:	f002 fc75 	bl	800395c <HAL_GPIO_WritePin>
          chequeomuro();
 8001072:	f000 fc0d 	bl	8001890 <chequeomuro>
 8001076:	e001      	b.n	800107c <main+0xb0>
        }
      }
    }
    else
    {
      termino();
 8001078:	f7ff fd7c 	bl	8000b74 <termino>
    }
    reset_posicion_pushbutton(); // ⚡ I AM SPEED button */
 800107c:	f000 fc46 	bl	800190c <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 8001080:	e7c5      	b.n	800100e <main+0x42>
 8001082:	bf00      	nop
 8001084:	20000334 	.word	0x20000334
 8001088:	2000014c 	.word	0x2000014c
 800108c:	20000331 	.word	0x20000331
 8001090:	200004c4 	.word	0x200004c4
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40020800 	.word	0x40020800

0800109c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	@ 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	@ 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00b f908 	bl	800c2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a27      	ldr	r2, [pc, #156]	@ (8001168 <SystemClock_Config+0xcc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a21      	ldr	r2, [pc, #132]	@ (800116c <SystemClock_Config+0xd0>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001110:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800111a:	2307      	movs	r3, #7
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fec4 	bl	8005eb0 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800112e:	f000 fc71 	bl	8001a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001132:	230f      	movs	r3, #15
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2302      	movs	r3, #2
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001142:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001148:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2105      	movs	r1, #5
 8001150:	4618      	mov	r0, r3
 8001152:	f005 f925 	bl	80063a0 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800115c:	f000 fc5a 	bl	8001a14 <Error_Handler>
  }
}
 8001160:	bf00      	nop
 8001162:	3750      	adds	r7, #80	@ 0x50
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8001182:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <MX_ADC1_Init+0xb4>)
 8001184:	4a28      	ldr	r2, [pc, #160]	@ (8001228 <MX_ADC1_Init+0xb8>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001188:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <MX_ADC1_Init+0xb4>)
 800118a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800118e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_ADC1_Init+0xb4>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <MX_ADC1_Init+0xb4>)
 8001198:	2201      	movs	r2, #1
 800119a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_ADC1_Init+0xb4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011b2:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <MX_ADC1_Init+0xbc>)
 80011b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011be:	2202      	movs	r2, #2
 80011c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	4814      	ldr	r0, [pc, #80]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011d2:	f001 f8c7 	bl	8002364 <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 fc1a 	bl	8001a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 80011e0:	2308      	movs	r3, #8
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80011e8:	2305      	movs	r3, #5
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <MX_ADC1_Init+0xb4>)
 80011f2:	f001 fa19 	bl	8002628 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011fc:	f000 fc0a 	bl	8001a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001200:	2309      	movs	r3, #9
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_ADC1_Init+0xb4>)
 800120e:	f001 fa0b 	bl	8002628 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001218:	f000 fbfc 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000014c 	.word	0x2000014c
 8001228:	40012000 	.word	0x40012000
 800122c:	0f000001 	.word	0x0f000001

08001230 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f004 fcdb 	bl	8005c28 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fbcc 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001f4 	.word	0x200001f4
 8001284:	40005400 	.word	0x40005400
 8001288:	000186a0 	.word	0x000186a0

0800128c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_SPI1_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	@ (80012f4 <MX_SPI1_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_SPI1_Init+0x64>)
 8001298:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800129c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012d8:	220a      	movs	r2, #10
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_SPI1_Init+0x64>)
 80012de:	f005 fa7f 	bl	80067e0 <HAL_SPI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e8:	f000 fb94 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000248 	.word	0x20000248
 80012f4:	40013000 	.word	0x40013000

080012f8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	@ 0x38
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001328:	4b32      	ldr	r3, [pc, #200]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 800132a:	4a33      	ldr	r2, [pc, #204]	@ (80013f8 <MX_TIM3_Init+0x100>)
 800132c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800132e:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 8001330:	2253      	movs	r2, #83	@ 0x53
 8001332:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 800133c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134e:	4829      	ldr	r0, [pc, #164]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 8001350:	f005 facf 	bl	80068f2 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800135a:	f000 fb5b 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	4822      	ldr	r0, [pc, #136]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 800136c:	f005 fcf4 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001376:	f000 fb4d 	bl	8001a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800137a:	481e      	ldr	r0, [pc, #120]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 800137c:	f005 fb08 	bl	8006990 <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001386:	f000 fb45 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	4619      	mov	r1, r3
 8001398:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 800139a:	f006 f8bb 	bl	8007514 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013a4:	f000 fb36 	bl	8001a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a8:	2360      	movs	r3, #96	@ 0x60
 80013aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2208      	movs	r2, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 80013c0:	f005 fc08 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013ca:	f000 fb23 	bl	8001a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	220c      	movs	r2, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 80013d6:	f005 fbfd 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013e0:	f000 fb18 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <MX_TIM3_Init+0xfc>)
 80013e6:	f000 fd6d 	bl	8001ec4 <HAL_TIM_MspPostInit>
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	@ 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002a0 	.word	0x200002a0
 80013f8:	40000400 	.word	0x40000400

080013fc <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_UART5_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <MX_UART5_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <MX_UART5_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_UART5_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_UART5_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MX_UART5_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_UART5_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <MX_UART5_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_UART5_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_UART5_Init+0x4c>)
 8001434:	f006 f8ea 	bl	800760c <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 fae9 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002e8 	.word	0x200002e8
 800144c:	40005000 	.word	0x40005000

08001450 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <MX_DMA_Init+0x3c>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2038      	movs	r0, #56	@ 0x38
 8001478:	f001 fc75 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800147c:	2038      	movs	r0, #56	@ 0x38
 800147e:	f001 fc8e 	bl	8002d9e <HAL_NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	@ 0x30
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	4ba1      	ldr	r3, [pc, #644]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4aa0      	ldr	r2, [pc, #640]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b9e      	ldr	r3, [pc, #632]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b9a      	ldr	r3, [pc, #616]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a99      	ldr	r2, [pc, #612]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b97      	ldr	r3, [pc, #604]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b93      	ldr	r3, [pc, #588]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a92      	ldr	r2, [pc, #584]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b90      	ldr	r3, [pc, #576]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a8b      	ldr	r2, [pc, #556]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b85      	ldr	r3, [pc, #532]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a84      	ldr	r2, [pc, #528]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b82      	ldr	r3, [pc, #520]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b7e      	ldr	r3, [pc, #504]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a7d      	ldr	r2, [pc, #500]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b7b      	ldr	r3, [pc, #492]	@ (8001730 <MX_GPIO_Init+0x2a0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2108      	movs	r1, #8
 8001552:	4878      	ldr	r0, [pc, #480]	@ (8001734 <MX_GPIO_Init+0x2a4>)
 8001554:	f002 fa02 	bl	800395c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2101      	movs	r1, #1
 800155c:	4876      	ldr	r0, [pc, #472]	@ (8001738 <MX_GPIO_Init+0x2a8>)
 800155e:	f002 f9fd 	bl	800395c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001568:	4874      	ldr	r0, [pc, #464]	@ (800173c <MX_GPIO_Init+0x2ac>)
 800156a:	f002 f9f7 	bl	800395c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001574:	4872      	ldr	r0, [pc, #456]	@ (8001740 <MX_GPIO_Init+0x2b0>)
 8001576:	f002 f9f1 	bl	800395c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800157a:	2308      	movs	r3, #8
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4868      	ldr	r0, [pc, #416]	@ (8001734 <MX_GPIO_Init+0x2a4>)
 8001592:	f002 f82f 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4862      	ldr	r0, [pc, #392]	@ (8001738 <MX_GPIO_Init+0x2a8>)
 80015ae:	f002 f821 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015b2:	2308      	movs	r3, #8
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c2:	2305      	movs	r3, #5
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	485a      	ldr	r0, [pc, #360]	@ (8001738 <MX_GPIO_Init+0x2a8>)
 80015ce:	f002 f811 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4857      	ldr	r0, [pc, #348]	@ (8001744 <MX_GPIO_Init+0x2b4>)
 80015e6:	f002 f805 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015ea:	2310      	movs	r3, #16
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015fa:	2306      	movs	r3, #6
 80015fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	484f      	ldr	r0, [pc, #316]	@ (8001744 <MX_GPIO_Init+0x2b4>)
 8001606:	f001 fff5 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800160a:	2304      	movs	r3, #4
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4847      	ldr	r0, [pc, #284]	@ (800173c <MX_GPIO_Init+0x2ac>)
 800161e:	f001 ffe9 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001634:	2305      	movs	r3, #5
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	483f      	ldr	r0, [pc, #252]	@ (800173c <MX_GPIO_Init+0x2ac>)
 8001640:	f001 ffd8 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8001644:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4837      	ldr	r0, [pc, #220]	@ (800173c <MX_GPIO_Init+0x2ac>)
 800165e:	f001 ffc9 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001662:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4831      	ldr	r0, [pc, #196]	@ (8001740 <MX_GPIO_Init+0x2b0>)
 800167c:	f001 ffba 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WallSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin;
 8001680:	2340      	movs	r3, #64	@ 0x40
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(WallSensor_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4829      	ldr	r0, [pc, #164]	@ (8001738 <MX_GPIO_Init+0x2a8>)
 8001694:	f001 ffae 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LineSensor_Pin */
  GPIO_InitStruct.Pin = LineSensor_Pin;
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LineSensor_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4822      	ldr	r0, [pc, #136]	@ (8001738 <MX_GPIO_Init+0x2a8>)
 80016ae:	f001 ffa1 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80016b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016c4:	2306      	movs	r3, #6
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	481a      	ldr	r0, [pc, #104]	@ (8001738 <MX_GPIO_Init+0x2a8>)
 80016d0:	f001 ff90 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016d4:	2320      	movs	r3, #32
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	4816      	ldr	r0, [pc, #88]	@ (8001740 <MX_GPIO_Init+0x2b0>)
 80016e8:	f001 ff84 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <MX_GPIO_Init+0x2a4>)
 8001702:	f001 ff77 	bl	80035f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2017      	movs	r0, #23
 800170c:	f001 fb2b 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001710:	2017      	movs	r0, #23
 8001712:	f001 fb44 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001716:	2200      	movs	r2, #0
 8001718:	2101      	movs	r1, #1
 800171a:	2017      	movs	r0, #23
 800171c:	f001 fb23 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001720:	2017      	movs	r0, #23
 8001722:	f001 fb3c 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	@ 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40021000 	.word	0x40021000
 8001738:	40020800 	.word	0x40020800
 800173c:	40020400 	.word	0x40020400
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40020000 	.word	0x40020000

08001748 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	4613      	mov	r3, r2
 8001754:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d827      	bhi.n	80017ac <actualizar_posicion+0x64>
 800175c:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <actualizar_posicion+0x1c>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001775 	.word	0x08001775
 8001768:	08001783 	.word	0x08001783
 800176c:	08001791 	.word	0x08001791
 8001770:	0800179f 	.word	0x0800179f
  {
  case norte:
    (*fila)--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3b01      	subs	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	701a      	strb	r2, [r3, #0]
    break;
 8001780:	e014      	b.n	80017ac <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	701a      	strb	r2, [r3, #0]
    break;
 800178e:	e00d      	b.n	80017ac <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	701a      	strb	r2, [r3, #0]
    break;
 800179c:	e006      	b.n	80017ac <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	701a      	strb	r2, [r3, #0]
    break;
 80017aa:	bf00      	nop
  }
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80017be:	2017      	movs	r0, #23
 80017c0:	f001 fafb 	bl	8002dba <HAL_NVIC_DisableIRQ>
  HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 80017c4:	4b29      	ldr	r3, [pc, #164]	@ (800186c <chequeolinea+0xb4>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fda7 	bl	800231c <HAL_Delay>

  // Actualizar posición
  actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <chequeolinea+0xb8>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4927      	ldr	r1, [pc, #156]	@ (8001874 <chequeolinea+0xbc>)
 80017d6:	4828      	ldr	r0, [pc, #160]	@ (8001878 <chequeolinea+0xc0>)
 80017d8:	f7ff ffb6 	bl	8001748 <actualizar_posicion>

  sprintf(mensaje, "%d,%d", fila_actual, columna_actual);
 80017dc:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <chequeolinea+0xc0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <chequeolinea+0xbc>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4925      	ldr	r1, [pc, #148]	@ (800187c <chequeolinea+0xc4>)
 80017e8:	4825      	ldr	r0, [pc, #148]	@ (8001880 <chequeolinea+0xc8>)
 80017ea:	f00a fd47 	bl	800c27c <siprintf>
  Transmision();
 80017ee:	f000 fcaf 	bl	8002150 <Transmision>

  // terminó?
  if (fila_actual == 1 && columna_actual == 1)
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <chequeolinea+0xc0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d114      	bne.n	8001824 <chequeolinea+0x6c>
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <chequeolinea+0xbc>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d110      	bne.n	8001824 <chequeolinea+0x6c>
  {
    termino();
 8001802:	f7ff f9b7 	bl	8000b74 <termino>
    terminado = true;
 8001806:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <chequeolinea+0xcc>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
    strcpy(mensaje, "Finalizado");
 800180c:	4a1c      	ldr	r2, [pc, #112]	@ (8001880 <chequeolinea+0xc8>)
 800180e:	4b1e      	ldr	r3, [pc, #120]	@ (8001888 <chequeolinea+0xd0>)
 8001810:	cb03      	ldmia	r3!, {r0, r1}
 8001812:	6010      	str	r0, [r2, #0]
 8001814:	6051      	str	r1, [r2, #4]
 8001816:	8819      	ldrh	r1, [r3, #0]
 8001818:	789b      	ldrb	r3, [r3, #2]
 800181a:	8111      	strh	r1, [r2, #8]
 800181c:	7293      	strb	r3, [r2, #10]
    Transmision();
 800181e:	f000 fc97 	bl	8002150 <Transmision>
    return;
 8001822:	e01f      	b.n	8001864 <chequeolinea+0xac>
  }

  // Calcular y ejecutar
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <chequeolinea+0xc0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <chequeolinea+0xbc>)
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f8f6 	bl	8001a20 <calcular_mejor_direccion>
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 8001838:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <chequeolinea+0xb8>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	79fa      	ldrb	r2, [r7, #7]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f9af 	bl	8001ba4 <ejecutar_movimiento>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <chequeolinea+0xb8>)
 800184c:	701a      	strb	r2, [r3, #0]
  avanza();
 800184e:	f7ff f8cf 	bl	80009f0 <avanza>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001852:	2017      	movs	r0, #23
 8001854:	f001 faa3 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800185e:	480b      	ldr	r0, [pc, #44]	@ (800188c <chequeolinea+0xd4>)
 8001860:	f002 f87c 	bl	800395c <HAL_GPIO_WritePin>
}
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000016 	.word	0x20000016
 8001870:	20000330 	.word	0x20000330
 8001874:	20000015 	.word	0x20000015
 8001878:	20000014 	.word	0x20000014
 800187c:	0800ca78 	.word	0x0800ca78
 8001880:	200004cc 	.word	0x200004cc
 8001884:	20000331 	.word	0x20000331
 8001888:	0800ca80 	.word	0x0800ca80
 800188c:	40020c00 	.word	0x40020c00

08001890 <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001896:	2017      	movs	r0, #23
 8001898:	f001 fa8f 	bl	8002dba <HAL_NVIC_DisableIRQ>

  // 1. Registrar el muro detectado
  laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <chequeomuro+0x6c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <chequeomuro+0x70>)
 80018a2:	7811      	ldrb	r1, [r2, #0]
 80018a4:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <chequeomuro+0x74>)
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f9f7 	bl	8000c9c <laberinto_set_muro>

  // 2. Recalcular todos los pesos con el nuevo muro
  laberinto_recalcular_pesos();
 80018ae:	f7ff fa57 	bl	8000d60 <laberinto_recalcular_pesos>

  // 3. Calcular nueva mejor dirección
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <chequeomuro+0x6c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <chequeomuro+0x70>)
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f8af 	bl	8001a20 <calcular_mejor_direccion>
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]

  // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <chequeomuro+0x74>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f968 	bl	8001ba4 <ejecutar_movimiento>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <chequeomuro+0x74>)
 80018da:	701a      	strb	r2, [r3, #0]
  avanza();
 80018dc:	f7ff f888 	bl	80009f0 <avanza>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018e0:	2017      	movs	r0, #23
 80018e2:	f001 fa5c 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ec:	4806      	ldr	r0, [pc, #24]	@ (8001908 <chequeomuro+0x78>)
 80018ee:	f002 f835 	bl	800395c <HAL_GPIO_WritePin>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000014 	.word	0x20000014
 8001900:	20000015 	.word	0x20000015
 8001904:	20000330 	.word	0x20000330
 8001908:	40020c00 	.word	0x40020c00

0800190c <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001910:	2101      	movs	r1, #1
 8001912:	4817      	ldr	r0, [pc, #92]	@ (8001970 <reset_posicion_pushbutton+0x64>)
 8001914:	f7fe fe4a 	bl	80005ac <antirebote>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d025      	beq.n	800196a <reset_posicion_pushbutton+0x5e>
  {
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800191e:	2017      	movs	r0, #23
 8001920:	f001 fa4b 	bl	8002dba <HAL_NVIC_DisableIRQ>

    // Resetear posición
    fila_actual = 4;
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <reset_posicion_pushbutton+0x68>)
 8001926:	2204      	movs	r2, #4
 8001928:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <reset_posicion_pushbutton+0x6c>)
 800192c:	2204      	movs	r2, #4
 800192e:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <reset_posicion_pushbutton+0x70>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
    terminado = false;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <reset_posicion_pushbutton+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 800193c:	f7fe ffac 	bl	8000898 <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <reset_posicion_pushbutton+0x78>)
 8001942:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001946:	801a      	strh	r2, [r3, #0]

    flag_linea_detectada = false;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <reset_posicion_pushbutton+0x7c>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
    flag_muro_detectado = false;
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <reset_posicion_pushbutton+0x80>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]

    // Resetear estados de sensores
    ultimo_estado_linea = true;
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <reset_posicion_pushbutton+0x84>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = true;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <reset_posicion_pushbutton+0x88>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]

    avanza();
 8001960:	f7ff f846 	bl	80009f0 <avanza>
    // Reactivar interrupciones
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001964:	2017      	movs	r0, #23
 8001966:	f001 fa1a 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  }
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020000 	.word	0x40020000
 8001974:	20000014 	.word	0x20000014
 8001978:	20000015 	.word	0x20000015
 800197c:	20000330 	.word	0x20000330
 8001980:	20000331 	.word	0x20000331
 8001984:	20000016 	.word	0x20000016
 8001988:	200004c4 	.word	0x200004c4
 800198c:	200004c5 	.word	0x200004c5
 8001990:	20000018 	.word	0x20000018
 8001994:	20000019 	.word	0x20000019

08001998 <HAL_GPIO_EXTI_Callback>:

// ATENCION A LA INTERRUPCION
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LineSensor_Pin)
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	2b80      	cmp	r3, #128	@ 0x80
 80019a6:	d128      	bne.n	80019fa <HAL_GPIO_EXTI_Callback+0x62>
  {
    static GPIO_PinState ultima_lectura_valida_linea = GPIO_PIN_SET;
    GPIO_PinState lectura1, lectura2;

    lectura1 = HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin);
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019ac:	f001 ffbe 	bl	800392c <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
    if (lectura1 != ultima_lectura_valida_linea)
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x70>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d01d      	beq.n	80019fa <HAL_GPIO_EXTI_Callback+0x62>
    {
      // Micro-delay en lugar de HAL_Delay (no bloquea tanto)
      for (volatile int i = 0; i < 1000000; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_EXTI_Callback+0x32>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x74>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	ddf8      	ble.n	80019c4 <HAL_GPIO_EXTI_Callback+0x2c>
        ; // ~20ms aprox (equivale a tiempo_rebotes)

      lectura2 = HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin);
 80019d2:	2180      	movs	r1, #128	@ 0x80
 80019d4:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019d6:	f001 ffa9 	bl	800392c <HAL_GPIO_ReadPin>
 80019da:	4603      	mov	r3, r0
 80019dc:	73bb      	strb	r3, [r7, #14]
      if (lectura2 == lectura1)
 80019de:	7bba      	ldrb	r2, [r7, #14]
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d109      	bne.n	80019fa <HAL_GPIO_EXTI_Callback+0x62>
      {
        ultima_lectura_valida_linea = lectura2;
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x70>)
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	7013      	strb	r3, [r2, #0]
        if (ultima_lectura_valida_linea == GPIO_PIN_RESET)
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x70>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <HAL_GPIO_EXTI_Callback+0x62>
        {
          flag_linea_detectada = true;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_GPIO_EXTI_Callback+0x78>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40020800 	.word	0x40020800
 8001a08:	2000001a 	.word	0x2000001a
 8001a0c:	000f423f 	.word	0x000f423f
 8001a10:	200004c4 	.word	0x200004c4

08001a14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
}
 8001a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <Error_Handler+0x8>

08001a20 <calcular_mejor_direccion>:
 */

#include "navegacion.h"

brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) // nos devuelve direccion en TIPO BRUJULA gracias colo
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	460a      	mov	r2, r1
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	71bb      	strb	r3, [r7, #6]
    uint8_t peso_minimo = PESO_MAXIMO;
 8001a30:	23ff      	movs	r3, #255	@ 0xff
 8001a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    brujula mejor_direccion = norte; // Dirección por defecto
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool direccion_valida_encontrada = false;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // Para dar preferencia a oeste y norte que llevan hacia la meta (1,1)
    // Primero oeste, luego norte, luego sur, luego este
    static const brujula orden_eval[] = {oeste, norte, sur, este};

    for (int i = 0; i < 4; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a46:	e04f      	b.n	8001ae8 <calcular_mejor_direccion+0xc8>
    {
        brujula direccion = orden_eval[i];
 8001a48:	4a55      	ldr	r2, [pc, #340]	@ (8001ba0 <calcular_mejor_direccion+0x180>)
 8001a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // 1. ¿Hay muro en esta dirección?
        if (laberinto_hay_muro(fila_actual, columna_actual, direccion))
 8001a54:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001a58:	79b9      	ldrb	r1, [r7, #6]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fa2b 	bl	8000eb8 <laberinto_hay_muro>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d139      	bne.n	8001adc <calcular_mejor_direccion+0xbc>
            continue; // Saltar si hay muro
        }

        // 2. Obtener posición adyacente
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, direccion);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	763b      	strb	r3, [r7, #24]
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	767b      	strb	r3, [r7, #25]
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8001a70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a74:	4619      	mov	r1, r3
 8001a76:	69b8      	ldr	r0, [r7, #24]
 8001a78:	f7ff fa4e 	bl	8000f18 <laberinto_get_posicion_adyacente>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	83bb      	strh	r3, [r7, #28]

        // 3. ¿Es válida? (no salirse del laberinto)
        if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8001a80:	7f3b      	ldrb	r3, [r7, #28]
 8001a82:	7f7a      	ldrb	r2, [r7, #29]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fa80 	bl	8000f8c <laberinto_posicion_valida>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d123      	bne.n	8001ae0 <calcular_mejor_direccion+0xc0>
        {
            continue; // Saltar si está fuera del laberinto
        }

        // 4. Obtener peso de la casilla adyacente
        uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 8001a98:	7f3b      	ldrb	r3, [r7, #28]
 8001a9a:	7f7a      	ldrb	r2, [r7, #29]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f8d0 	bl	8000c44 <laberinto_get_peso>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // 5. ¿Es el mejor peso hasta ahora? O primera dirección válida encontrada
        if (!direccion_valida_encontrada || peso_adyacente < peso_minimo)
 8001aaa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <calcular_mejor_direccion+0xa4>
 8001ab8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001abc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d20e      	bcs.n	8001ae2 <calcular_mejor_direccion+0xc2>
        {
            peso_minimo = peso_adyacente;
 8001ac4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001ac8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mejor_direccion = direccion;
 8001acc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ad0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            direccion_valida_encontrada = true;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001ada:	e002      	b.n	8001ae2 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si hay muro
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si está fuera del laberinto
 8001ae0:	bf00      	nop
    for (int i = 0; i < 4; i++)
 8001ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	ddac      	ble.n	8001a48 <calcular_mejor_direccion+0x28>
        }
    }

    // Verificación final de seguridad: asegurarnos que la dirección elegida es válida
    if (direccion_valida_encontrada)
 8001aee:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d04d      	beq.n	8001b92 <calcular_mejor_direccion+0x172>
    {
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, mejor_direccion);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	743b      	strb	r3, [r7, #16]
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	747b      	strb	r3, [r7, #17]
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
 8001afe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b02:	4619      	mov	r1, r3
 8001b04:	6938      	ldr	r0, [r7, #16]
 8001b06:	f7ff fa07 	bl	8000f18 <laberinto_get_posicion_adyacente>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	82bb      	strh	r3, [r7, #20]

        // Doble verificación para asegurarnos que no nos salimos del laberinto
        if (!laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna))
 8001b0e:	7d3b      	ldrb	r3, [r7, #20]
 8001b10:	7d7a      	ldrb	r2, [r7, #21]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fa39 	bl	8000f8c <laberinto_posicion_valida>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d035      	beq.n	8001b92 <calcular_mejor_direccion+0x172>
        {
            // Algo salió mal, buscar cualquier dirección válida
            for (int i = 0; i < 4; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2a:	e02f      	b.n	8001b8c <calcular_mejor_direccion+0x16c>
            {
                brujula dir_alternativa = orden_eval[i];
 8001b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <calcular_mejor_direccion+0x180>)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pos_siguiente = laberinto_get_posicion_adyacente(
                    (posicion_t){fila_actual, columna_actual}, dir_alternativa);
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	733b      	strb	r3, [r7, #12]
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	737b      	strb	r3, [r7, #13]
                pos_siguiente = laberinto_get_posicion_adyacente(
 8001b40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b44:	4619      	mov	r1, r3
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff f9e6 	bl	8000f18 <laberinto_get_posicion_adyacente>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	82bb      	strh	r3, [r7, #20]

                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001b50:	7d3b      	ldrb	r3, [r7, #20]
 8001b52:	7d7a      	ldrb	r2, [r7, #21]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa18 	bl	8000f8c <laberinto_posicion_valida>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d011      	beq.n	8001b86 <calcular_mejor_direccion+0x166>
                    !laberinto_hay_muro(fila_actual, columna_actual, dir_alternativa))
 8001b62:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b66:	79b9      	ldrb	r1, [r7, #6]
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f9a4 	bl	8000eb8 <laberinto_hay_muro>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f083 0301 	eor.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <calcular_mejor_direccion+0x166>
                {
                    mejor_direccion = dir_alternativa;
 8001b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b80:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001b84:	e005      	b.n	8001b92 <calcular_mejor_direccion+0x172>
            for (int i = 0; i < 4; i++)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	ddcc      	ble.n	8001b2c <calcular_mejor_direccion+0x10c>
                }
            }
        }
    }

    return mejor_direccion;
 8001b92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3730      	adds	r7, #48	@ 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	0800caa4 	.word	0x0800caa4

08001ba4 <ejecutar_movimiento>:

brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	460a      	mov	r2, r1
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	71bb      	strb	r3, [r7, #6]
    // ¿Ya está orientado correctamente?
    if (sentido_actual == sentido_deseado)
 8001bb4:	79fa      	ldrb	r2, [r7, #7]
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d101      	bne.n	8001bc0 <ejecutar_movimiento+0x1c>
    {
        // avanza(); // Solo avanzar
        return sentido_actual;
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	e02b      	b.n	8001c18 <ejecutar_movimiento+0x74>
    }

    // Calcular diferencia usando aritmética xq es un tipo brujula
    // norte=0, este=1, sur=2, oeste=3
    int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 8001bc0:	79ba      	ldrb	r2, [r7, #6]
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	425a      	negs	r2, r3
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	bf58      	it	pl
 8001bd4:	4253      	negpl	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    switch (diferencia)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d015      	beq.n	8001c0a <ejecutar_movimiento+0x66>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	dc18      	bgt.n	8001c16 <ejecutar_movimiento+0x72>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d003      	beq.n	8001bf2 <ejecutar_movimiento+0x4e>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d006      	beq.n	8001bfe <ejecutar_movimiento+0x5a>
 8001bf0:	e011      	b.n	8001c16 <ejecutar_movimiento+0x72>
    {
    case 1: // Girar 90° a la derecha
        return gira90der(sentido_actual);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe ff49 	bl	8000a8c <gira90der>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	e00c      	b.n	8001c18 <ejecutar_movimiento+0x74>

    case 2: // Girar 180° (media vuelta)
        return gira180(sentido_actual);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe ff7d 	bl	8000b00 <gira180>
 8001c06:	4603      	mov	r3, r0
 8001c08:	e006      	b.n	8001c18 <ejecutar_movimiento+0x74>

    case 3: // Girar 90° a la izquierda
        return gira90izq(sentido_actual);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe ff03 	bl	8000a18 <gira90izq>
 8001c12:	4603      	mov	r3, r0
 8001c14:	e000      	b.n	8001c18 <ejecutar_movimiento+0x74>

    default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
        // avanza();
        return sentido_actual;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
    }
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c5e:	2007      	movs	r0, #7
 8001c60:	f001 f876 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d4c <HAL_ADC_MspInit+0xdc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d157      	bne.n	8001d42 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b2e      	ldr	r3, [pc, #184]	@ (8001d50 <HAL_ADC_MspInit+0xe0>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d50 <HAL_ADC_MspInit+0xe0>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_ADC_MspInit+0xe0>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_ADC_MspInit+0xe0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a26      	ldr	r2, [pc, #152]	@ (8001d50 <HAL_ADC_MspInit+0xe0>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <HAL_ADC_MspInit+0xe0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481d      	ldr	r0, [pc, #116]	@ (8001d54 <HAL_ADC_MspInit+0xe4>)
 8001cde:	f001 fc89 	bl	80035f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d5c <HAL_ADC_MspInit+0xec>)
 8001ce6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001cfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d12:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d26:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d28:	f001 f862 	bl	8002df0 <HAL_DMA_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d32:	f7ff fe6f 	bl	8001a14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a07      	ldr	r2, [pc, #28]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d3c:	4a06      	ldr	r2, [pc, #24]	@ (8001d58 <HAL_ADC_MspInit+0xe8>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40012000 	.word	0x40012000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020400 	.word	0x40020400
 8001d58:	20000194 	.word	0x20000194
 8001d5c:	40026410 	.word	0x40026410

08001d60 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_I2C_MspInit+0x84>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d12c      	bne.n	8001ddc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d9e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db0:	2304      	movs	r3, #4
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	480c      	ldr	r0, [pc, #48]	@ (8001dec <HAL_I2C_MspInit+0x8c>)
 8001dbc:	f001 fc1a 	bl	80035f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	@ 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40005400 	.word	0x40005400
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400

08001df0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	@ (8001e74 <HAL_SPI_MspInit+0x84>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d12b      	bne.n	8001e6a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e4a:	23e0      	movs	r3, #224	@ 0xe0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <HAL_SPI_MspInit+0x8c>)
 8001e66:	f001 fbc5 	bl	80035f4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	@ 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40013000 	.word	0x40013000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_TIM_Base_MspInit+0x3c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10d      	bne.n	8001eae <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x40>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x40>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x40>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_TIM_MspPostInit+0x68>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d11e      	bne.n	8001f24 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_TIM_MspPostInit+0x6c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a10      	ldr	r2, [pc, #64]	@ (8001f30 <HAL_TIM_MspPostInit+0x6c>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <HAL_TIM_MspPostInit+0x6c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001f02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <HAL_TIM_MspPostInit+0x70>)
 8001f20:	f001 fb68 	bl	80035f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020800 	.word	0x40020800

08001f38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2c      	ldr	r2, [pc, #176]	@ (8002008 <HAL_UART_MspInit+0xd0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d152      	bne.n	8002000 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a2a      	ldr	r2, [pc, #168]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b28      	ldr	r3, [pc, #160]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a23      	ldr	r2, [pc, #140]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <HAL_UART_MspInit+0xd4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4811      	ldr	r0, [pc, #68]	@ (8002010 <HAL_UART_MspInit+0xd8>)
 8001fcc:	f001 fb12 	bl	80035f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480a      	ldr	r0, [pc, #40]	@ (8002014 <HAL_UART_MspInit+0xdc>)
 8001fec:	f001 fb02 	bl	80035f4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2035      	movs	r0, #53	@ 0x35
 8001ff6:	f000 feb6 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ffa:	2035      	movs	r0, #53	@ 0x35
 8001ffc:	f000 fecf 	bl	8002d9e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	@ 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40005000 	.word	0x40005000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020800 	.word	0x40020800
 8002014:	40020c00 	.word	0x40020c00

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206e:	f000 f935 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}

08002076 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 800207a:	2080      	movs	r0, #128	@ 0x80
 800207c:	f001 fc88 	bl	8003990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <UART5_IRQHandler+0x10>)
 800208a:	f005 fbbf 	bl	800780c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200002e8 	.word	0x200002e8

08002098 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <DMA2_Stream0_IRQHandler+0x10>)
 800209e:	f001 f83f 	bl	8003120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000194 	.word	0x20000194

080020ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <OTG_FS_IRQHandler+0x10>)
 80020b2:	f001 ff65 	bl	8003f80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200008cc 	.word	0x200008cc

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f00a f8fe 	bl	800c2f0 <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20020000 	.word	0x20020000
 8002120:	00000400 	.word	0x00000400
 8002124:	200004c8 	.word	0x200004c8
 8002128:	20000df8 	.word	0x20000df8

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <Transmision>:

char mensaje[16];
const uint8_t delay = 50;
uint8_t buffer[16];

void Transmision(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
    strcat(mensaje, "\r\n");
 8002154:	480b      	ldr	r0, [pc, #44]	@ (8002184 <Transmision+0x34>)
 8002156:	f7fe f83b 	bl	80001d0 <strlen>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <Transmision+0x34>)
 8002160:	4413      	add	r3, r2
 8002162:	4a09      	ldr	r2, [pc, #36]	@ (8002188 <Transmision+0x38>)
 8002164:	8811      	ldrh	r1, [r2, #0]
 8002166:	7892      	ldrb	r2, [r2, #2]
 8002168:	8019      	strh	r1, [r3, #0]
 800216a:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, strlen(mensaje), delay);
 800216c:	4805      	ldr	r0, [pc, #20]	@ (8002184 <Transmision+0x34>)
 800216e:	f7fe f82f 	bl	80001d0 <strlen>
 8002172:	4603      	mov	r3, r0
 8002174:	b29a      	uxth	r2, r3
 8002176:	2332      	movs	r3, #50	@ 0x32
 8002178:	4902      	ldr	r1, [pc, #8]	@ (8002184 <Transmision+0x34>)
 800217a:	4804      	ldr	r0, [pc, #16]	@ (800218c <Transmision+0x3c>)
 800217c:	f005 fa96 	bl	80076ac <HAL_UART_Transmit>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200004cc 	.word	0x200004cc
 8002188:	0800ca8c 	.word	0x0800ca8c
 800218c:	200002e8 	.word	0x200002e8

08002190 <Inicializar_UART>:

void Inicializar_UART(void) {
 8002190:	b598      	push	{r3, r4, r7, lr}
 8002192:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart5, buffer, sizeof(buffer));
 8002194:	2210      	movs	r2, #16
 8002196:	490f      	ldr	r1, [pc, #60]	@ (80021d4 <Inicializar_UART+0x44>)
 8002198:	480f      	ldr	r0, [pc, #60]	@ (80021d8 <Inicializar_UART+0x48>)
 800219a:	f005 fb12 	bl	80077c2 <HAL_UART_Receive_IT>
    mensaje[0]='\r';
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <Inicializar_UART+0x4c>)
 80021a0:	220d      	movs	r2, #13
 80021a2:	701a      	strb	r2, [r3, #0]
    mensaje[1]='\n';
 80021a4:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <Inicializar_UART+0x4c>)
 80021a6:	220a      	movs	r2, #10
 80021a8:	705a      	strb	r2, [r3, #1]
    mensaje[2]='\0';
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <Inicializar_UART+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	709a      	strb	r2, [r3, #2]
    Transmision();
 80021b0:	f7ff ffce 	bl	8002150 <Transmision>
    strcpy(mensaje, "UART conectada");
 80021b4:	4a09      	ldr	r2, [pc, #36]	@ (80021dc <Inicializar_UART+0x4c>)
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <Inicializar_UART+0x50>)
 80021b8:	4614      	mov	r4, r2
 80021ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021bc:	c407      	stmia	r4!, {r0, r1, r2}
 80021be:	8023      	strh	r3, [r4, #0]
 80021c0:	3402      	adds	r4, #2
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	7023      	strb	r3, [r4, #0]
    Transmision();
 80021c6:	f7ff ffc3 	bl	8002150 <Transmision>
    mensaje[0]='\0';
 80021ca:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <Inicializar_UART+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]

}
 80021d0:	bf00      	nop
 80021d2:	bd98      	pop	{r3, r4, r7, pc}
 80021d4:	200004dc 	.word	0x200004dc
 80021d8:	200002e8 	.word	0x200002e8
 80021dc:	200004cc 	.word	0x200004cc
 80021e0:	0800ca90 	.word	0x0800ca90

080021e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800221c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021e8:	f7ff ffa0 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ee:	490d      	ldr	r1, [pc, #52]	@ (8002224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002204:	4c0a      	ldr	r4, [pc, #40]	@ (8002230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002212:	f00a f873 	bl	800c2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002216:	f7fe fed9 	bl	8000fcc <main>
  bx  lr    
 800221a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800221c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002228:	0800cb0c 	.word	0x0800cb0c
  ldr r2, =_sbss
 800222c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002230:	20000df4 	.word	0x20000df4

08002234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <HAL_Init+0x40>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <HAL_Init+0x40>)
 800224e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_Init+0x40>)
 800225a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 fd75 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f808 	bl	800227c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800226c:	f7ff fcd8 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fd9b 	bl	8002dd6 <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022b8:	f000 fd55 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2000001c 	.word	0x2000001c
 80022d4:	20000024 	.word	0x20000024
 80022d8:	20000020 	.word	0x20000020

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000024 	.word	0x20000024
 8002300:	200004ec 	.word	0x200004ec

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200004ec 	.word	0x200004ec

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff ffee 	bl	8002304 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_Delay+0x44>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffde 	bl	8002304 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000024 	.word	0x20000024

08002364 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e033      	b.n	80023e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fc74 	bl	8001c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023aa:	f023 0302 	bic.w	r3, r3, #2
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa58 	bl	800286c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80023d2:	e001      	b.n	80023d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADC_Start_DMA+0x22>
 800240a:	2302      	movs	r3, #2
 800240c:	e0eb      	b.n	80025e6 <HAL_ADC_Start_DMA+0x1fa>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d018      	beq.n	8002456 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002434:	4b6e      	ldr	r3, [pc, #440]	@ (80025f0 <HAL_ADC_Start_DMA+0x204>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a6e      	ldr	r2, [pc, #440]	@ (80025f4 <HAL_ADC_Start_DMA+0x208>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9a      	lsrs	r2, r3, #18
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002448:	e002      	b.n	8002450 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3b01      	subs	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f9      	bne.n	800244a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002464:	d107      	bne.n	8002476 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002474:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	f040 80a3 	bne.w	80025cc <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c4:	d106      	bne.n	80024d4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f023 0206 	bic.w	r2, r3, #6
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80024d2:	e002      	b.n	80024da <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e2:	4b45      	ldr	r3, [pc, #276]	@ (80025f8 <HAL_ADC_Start_DMA+0x20c>)
 80024e4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ea:	4a44      	ldr	r2, [pc, #272]	@ (80025fc <HAL_ADC_Start_DMA+0x210>)
 80024ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f2:	4a43      	ldr	r2, [pc, #268]	@ (8002600 <HAL_ADC_Start_DMA+0x214>)
 80024f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fa:	4a42      	ldr	r2, [pc, #264]	@ (8002604 <HAL_ADC_Start_DMA+0x218>)
 80024fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002506:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002516:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002526:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	334c      	adds	r3, #76	@ 0x4c
 8002532:	4619      	mov	r1, r3
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f000 fd08 	bl	8002f4c <HAL_DMA_Start_IT>
 800253c:	4603      	mov	r3, r0
 800253e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2b00      	cmp	r3, #0
 800254a:	d12a      	bne.n	80025a2 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2d      	ldr	r2, [pc, #180]	@ (8002608 <HAL_ADC_Start_DMA+0x21c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d015      	beq.n	8002582 <HAL_ADC_Start_DMA+0x196>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2c      	ldr	r2, [pc, #176]	@ (800260c <HAL_ADC_Start_DMA+0x220>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d105      	bne.n	800256c <HAL_ADC_Start_DMA+0x180>
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_ADC_Start_DMA+0x20c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a27      	ldr	r2, [pc, #156]	@ (8002610 <HAL_ADC_Start_DMA+0x224>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d136      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x1f8>
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_ADC_Start_DMA+0x20c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d130      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d129      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	e020      	b.n	80025e4 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a18      	ldr	r2, [pc, #96]	@ (8002608 <HAL_ADC_Start_DMA+0x21c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11b      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x1f8>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d114      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e00b      	b.n	80025e4 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	f043 0210 	orr.w	r2, r3, #16
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80025e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000001c 	.word	0x2000001c
 80025f4:	431bde83 	.word	0x431bde83
 80025f8:	40012300 	.word	0x40012300
 80025fc:	08002a65 	.word	0x08002a65
 8002600:	08002b1f 	.word	0x08002b1f
 8002604:	08002b3b 	.word	0x08002b3b
 8002608:	40012000 	.word	0x40012000
 800260c:	40012100 	.word	0x40012100
 8002610:	40012200 	.word	0x40012200

08002614 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1c>
 8002640:	2302      	movs	r3, #2
 8002642:	e105      	b.n	8002850 <HAL_ADC_ConfigChannel+0x228>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b09      	cmp	r3, #9
 8002652:	d925      	bls.n	80026a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68d9      	ldr	r1, [r3, #12]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	3b1e      	subs	r3, #30
 800266a:	2207      	movs	r2, #7
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43da      	mvns	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	400a      	ands	r2, r1
 8002678:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68d9      	ldr	r1, [r3, #12]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	4603      	mov	r3, r0
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4403      	add	r3, r0
 8002692:	3b1e      	subs	r3, #30
 8002694:	409a      	lsls	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	e022      	b.n	80026e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	2207      	movs	r2, #7
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4403      	add	r3, r0
 80026dc:	409a      	lsls	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d824      	bhi.n	8002738 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b05      	subs	r3, #5
 8002700:	221f      	movs	r2, #31
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	400a      	ands	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b05      	subs	r3, #5
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	635a      	str	r2, [r3, #52]	@ 0x34
 8002736:	e04c      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d824      	bhi.n	800278a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3b23      	subs	r3, #35	@ 0x23
 8002752:	221f      	movs	r2, #31
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43da      	mvns	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	400a      	ands	r2, r1
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4618      	mov	r0, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	3b23      	subs	r3, #35	@ 0x23
 800277c:	fa00 f203 	lsl.w	r2, r0, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
 8002788:	e023      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b41      	subs	r3, #65	@ 0x41
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b41      	subs	r3, #65	@ 0x41
 80027c6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d2:	4b22      	ldr	r3, [pc, #136]	@ (800285c <HAL_ADC_ConfigChannel+0x234>)
 80027d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a21      	ldr	r2, [pc, #132]	@ (8002860 <HAL_ADC_ConfigChannel+0x238>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d109      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x1cc>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b12      	cmp	r3, #18
 80027e6:	d105      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_ADC_ConfigChannel+0x238>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d123      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x21e>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d003      	beq.n	800280e <HAL_ADC_ConfigChannel+0x1e6>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b11      	cmp	r3, #17
 800280c:	d11b      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b10      	cmp	r3, #16
 8002820:	d111      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_ADC_ConfigChannel+0x23c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a10      	ldr	r2, [pc, #64]	@ (8002868 <HAL_ADC_ConfigChannel+0x240>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9a      	lsrs	r2, r3, #18
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002838:	e002      	b.n	8002840 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3b01      	subs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40012300 	.word	0x40012300
 8002860:	40012000 	.word	0x40012000
 8002864:	2000001c 	.word	0x2000001c
 8002868:	431bde83 	.word	0x431bde83

0800286c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002874:	4b79      	ldr	r3, [pc, #484]	@ (8002a5c <ADC_Init+0x1f0>)
 8002876:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	021a      	lsls	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	4a58      	ldr	r2, [pc, #352]	@ (8002a60 <ADC_Init+0x1f4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	e00f      	b.n	800296a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0202 	bic.w	r2, r2, #2
 8002978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e1b      	ldrb	r3, [r3, #24]
 8002984:	005a      	lsls	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	3b01      	subs	r3, #1
 80029c4:	035a      	lsls	r2, r3, #13
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	e007      	b.n	80029e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	051a      	lsls	r2, r3, #20
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a22:	025a      	lsls	r2, r3, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	029a      	lsls	r2, r3, #10
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012300 	.word	0x40012300
 8002a60:	0f000001 	.word	0x0f000001

08002a64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d13c      	bne.n	8002af8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d12b      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d127      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d119      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0220 	bic.w	r2, r2, #32
 8002aca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7fd fdbb 	bl	800066c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002af6:	e00e      	b.n	8002b16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff fd85 	bl	8002614 <HAL_ADC_ErrorCallback>
}
 8002b0a:	e004      	b.n	8002b16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7fd fd8f 	bl	8000650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2240      	movs	r2, #64	@ 0x40
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff fd5a 	bl	8002614 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b84:	4013      	ands	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	@ (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	60d3      	str	r3, [r2, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	@ (8002bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0307 	and.w	r3, r3, #7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db0b      	blt.n	8002bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4907      	ldr	r1, [pc, #28]	@ (8002c04 <__NVIC_EnableIRQ+0x38>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2001      	movs	r0, #1
 8002bee:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db12      	blt.n	8002c40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	490a      	ldr	r1, [pc, #40]	@ (8002c4c <__NVIC_DisableIRQ+0x44>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	3320      	adds	r3, #32
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c34:	f3bf 8f4f 	dsb	sy
}
 8002c38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c3a:	f3bf 8f6f 	isb	sy
}
 8002c3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	@ (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	@ (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff05 	bl	8002b68 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff1a 	bl	8002bb0 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff0d 	bl	8002bcc <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff1d 	bl	8002c08 <__NVIC_DisableIRQ>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff94 	bl	8002d0c <SysTick_Config>
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff fa82 	bl	8002304 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e099      	b.n	8002f40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2c:	e00f      	b.n	8002e4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e2e:	f7ff fa69 	bl	8002304 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d908      	bls.n	8002e4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e078      	b.n	8002f40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e8      	bne.n	8002e2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_DMA_Init+0x158>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d107      	bne.n	8002eb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0307 	bic.w	r3, r3, #7
 8002ece:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d117      	bne.n	8002f12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fb01 	bl	80034fc <DMA_CheckFifoParam>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e016      	b.n	8002f40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fab8 	bl	8003490 <DMA_CalcBaseAndBitshift>
 8002f20:	4603      	mov	r3, r0
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	223f      	movs	r2, #63	@ 0x3f
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	f010803f 	.word	0xf010803f

08002f4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_DMA_Start_IT+0x26>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e040      	b.n	8002ff4 <HAL_DMA_Start_IT+0xa8>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d12f      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa4a 	bl	8003434 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	223f      	movs	r2, #63	@ 0x3f
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0216 	orr.w	r2, r2, #22
 8002fba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0208 	orr.w	r2, r2, #8
 8002fd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e005      	b.n	8002ff2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800300a:	f7ff f97b 	bl	8002304 <HAL_GetTick>
 800300e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d008      	beq.n	800302e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2280      	movs	r2, #128	@ 0x80
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e052      	b.n	80030d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0216 	bic.w	r2, r2, #22
 800303c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800304c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <HAL_DMA_Abort+0x62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0208 	bic.w	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307e:	e013      	b.n	80030a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003080:	f7ff f940 	bl	8002304 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b05      	cmp	r3, #5
 800308c:	d90c      	bls.n	80030a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e015      	b.n	80030d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e4      	bne.n	8003080 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	223f      	movs	r2, #63	@ 0x3f
 80030bc:	409a      	lsls	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d004      	beq.n	80030fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2280      	movs	r2, #128	@ 0x80
 80030f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00c      	b.n	8003114 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2205      	movs	r2, #5
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800312c:	4b8e      	ldr	r3, [pc, #568]	@ (8003368 <HAL_DMA_IRQHandler+0x248>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a8e      	ldr	r2, [pc, #568]	@ (800336c <HAL_DMA_IRQHandler+0x24c>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	2208      	movs	r2, #8
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01a      	beq.n	800318c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0204 	bic.w	r2, r2, #4
 8003172:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2208      	movs	r2, #8
 800317a:	409a      	lsls	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	2201      	movs	r2, #1
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	2204      	movs	r2, #4
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	2204      	movs	r2, #4
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	2210      	movs	r2, #16
 80031fe:	409a      	lsls	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d043      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d03c      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	2210      	movs	r2, #16
 800321c:	409a      	lsls	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d018      	beq.n	8003262 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d024      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
 800324e:	e01f      	b.n	8003290 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
 8003260:	e016      	b.n	8003290 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0208 	bic.w	r2, r2, #8
 800327e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003294:	2220      	movs	r2, #32
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 808f 	beq.w	80033c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8087 	beq.w	80033c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b6:	2220      	movs	r2, #32
 80032b8:	409a      	lsls	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d136      	bne.n	8003338 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0216 	bic.w	r2, r2, #22
 80032d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <HAL_DMA_IRQHandler+0x1da>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0208 	bic.w	r2, r2, #8
 8003308:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	223f      	movs	r2, #63	@ 0x3f
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	2b00      	cmp	r3, #0
 800332c:	d07e      	beq.n	800342c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
        }
        return;
 8003336:	e079      	b.n	800342c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	2b00      	cmp	r3, #0
 800335a:	d031      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
 8003364:	e02c      	b.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
 8003366:	bf00      	nop
 8003368:	2000001c 	.word	0x2000001c
 800336c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d023      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e01e      	b.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0210 	bic.w	r2, r2, #16
 800339e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d032      	beq.n	800342e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d022      	beq.n	800341a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2205      	movs	r2, #5
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d307      	bcc.n	8003408 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f2      	bne.n	80033ec <HAL_DMA_IRQHandler+0x2cc>
 8003406:	e000      	b.n	800340a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003408:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
 800342a:	e000      	b.n	800342e <HAL_DMA_IRQHandler+0x30e>
        return;
 800342c:	bf00      	nop
    }
  }
}
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003450:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d108      	bne.n	8003474 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003472:	e007      	b.n	8003484 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3b10      	subs	r3, #16
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <DMA_CalcBaseAndBitshift+0x64>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034aa:	4a13      	ldr	r2, [pc, #76]	@ (80034f8 <DMA_CalcBaseAndBitshift+0x68>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d909      	bls.n	80034d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80034d0:	e007      	b.n	80034e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	aaaaaaab 	.word	0xaaaaaaab
 80034f8:	0800cac0 	.word	0x0800cac0

080034fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11f      	bne.n	8003556 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d856      	bhi.n	80035ca <DMA_CheckFifoParam+0xce>
 800351c:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <DMA_CheckFifoParam+0x28>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003535 	.word	0x08003535
 8003528:	08003547 	.word	0x08003547
 800352c:	08003535 	.word	0x08003535
 8003530:	080035cb 	.word	0x080035cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d046      	beq.n	80035ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003544:	e043      	b.n	80035ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800354e:	d140      	bne.n	80035d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003554:	e03d      	b.n	80035d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355e:	d121      	bne.n	80035a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d837      	bhi.n	80035d6 <DMA_CheckFifoParam+0xda>
 8003566:	a201      	add	r2, pc, #4	@ (adr r2, 800356c <DMA_CheckFifoParam+0x70>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	0800357d 	.word	0x0800357d
 8003570:	08003583 	.word	0x08003583
 8003574:	0800357d 	.word	0x0800357d
 8003578:	08003595 	.word	0x08003595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e030      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d025      	beq.n	80035da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003592:	e022      	b.n	80035da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800359c:	d11f      	bne.n	80035de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035a2:	e01c      	b.n	80035de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d903      	bls.n	80035b2 <DMA_CheckFifoParam+0xb6>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d003      	beq.n	80035b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b0:	e018      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      break;
 80035b6:	e015      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e00b      	b.n	80035e2 <DMA_CheckFifoParam+0xe6>
      break;
 80035ca:	bf00      	nop
 80035cc:	e00a      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
 80035d0:	e008      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
 80035d4:	e006      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
 80035d8:	e004      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e002      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
    }
  } 
  
  return status; 
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	@ 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	e16b      	b.n	80038e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	f040 815a 	bne.w	80038e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d005      	beq.n	8003646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003642:	2b02      	cmp	r3, #2
 8003644:	d130      	bne.n	80036a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0201 	and.w	r2, r3, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d017      	beq.n	80036e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d123      	bne.n	8003738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	220f      	movs	r2, #15
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	08da      	lsrs	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3208      	adds	r2, #8
 8003732:	69b9      	ldr	r1, [r7, #24]
 8003734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0203 	and.w	r2, r3, #3
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80b4 	beq.w	80038e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b60      	ldr	r3, [pc, #384]	@ (8003900 <HAL_GPIO_Init+0x30c>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	4a5f      	ldr	r2, [pc, #380]	@ (8003900 <HAL_GPIO_Init+0x30c>)
 8003784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003788:	6453      	str	r3, [r2, #68]	@ 0x44
 800378a:	4b5d      	ldr	r3, [pc, #372]	@ (8003900 <HAL_GPIO_Init+0x30c>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003796:	4a5b      	ldr	r2, [pc, #364]	@ (8003904 <HAL_GPIO_Init+0x310>)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a52      	ldr	r2, [pc, #328]	@ (8003908 <HAL_GPIO_Init+0x314>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02b      	beq.n	800381a <HAL_GPIO_Init+0x226>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a51      	ldr	r2, [pc, #324]	@ (800390c <HAL_GPIO_Init+0x318>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x222>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a50      	ldr	r2, [pc, #320]	@ (8003910 <HAL_GPIO_Init+0x31c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x21e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003914 <HAL_GPIO_Init+0x320>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x21a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003918 <HAL_GPIO_Init+0x324>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x216>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4d      	ldr	r2, [pc, #308]	@ (800391c <HAL_GPIO_Init+0x328>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x212>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003920 <HAL_GPIO_Init+0x32c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x20e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003924 <HAL_GPIO_Init+0x330>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x20a>
 80037fa:	2307      	movs	r3, #7
 80037fc:	e00e      	b.n	800381c <HAL_GPIO_Init+0x228>
 80037fe:	2308      	movs	r3, #8
 8003800:	e00c      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003802:	2306      	movs	r3, #6
 8003804:	e00a      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003806:	2305      	movs	r3, #5
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x228>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x228>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x228>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x228>
 800381a:	2300      	movs	r3, #0
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800382c:	4935      	ldr	r1, [pc, #212]	@ (8003904 <HAL_GPIO_Init+0x310>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383a:	4b3b      	ldr	r3, [pc, #236]	@ (8003928 <HAL_GPIO_Init+0x334>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385e:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_GPIO_Init+0x334>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003864:	4b30      	ldr	r3, [pc, #192]	@ (8003928 <HAL_GPIO_Init+0x334>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003888:	4a27      	ldr	r2, [pc, #156]	@ (8003928 <HAL_GPIO_Init+0x334>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800388e:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <HAL_GPIO_Init+0x334>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <HAL_GPIO_Init+0x334>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <HAL_GPIO_Init+0x334>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038dc:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <HAL_GPIO_Init+0x334>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f ae90 	bls.w	8003610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40013800 	.word	0x40013800
 8003908:	40020000 	.word	0x40020000
 800390c:	40020400 	.word	0x40020400
 8003910:	40020800 	.word	0x40020800
 8003914:	40020c00 	.word	0x40020c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40021400 	.word	0x40021400
 8003920:	40021800 	.word	0x40021800
 8003924:	40021c00 	.word	0x40021c00
 8003928:	40013c00 	.word	0x40013c00

0800392c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
 8003948:	e001      	b.n	800394e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
 8003968:	4613      	mov	r3, r2
 800396a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800396c:	787b      	ldrb	r3, [r7, #1]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003978:	e003      	b.n	8003982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800397a:	887b      	ldrh	r3, [r7, #2]
 800397c:	041a      	lsls	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	619a      	str	r2, [r3, #24]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800399a:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039a6:	4a05      	ldr	r2, [pc, #20]	@ (80039bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd fff2 	bl	8001998 <HAL_GPIO_EXTI_Callback>
  }
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40013c00 	.word	0x40013c00

080039c0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e059      	b.n	8003a86 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f008 f8db 	bl	800bba8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2203      	movs	r2, #3
 80039f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a00:	d102      	bne.n	8003a08 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 fee8 	bl	80087e2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7c1a      	ldrb	r2, [r3, #16]
 8003a1a:	f88d 2000 	strb.w	r2, [sp]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a22:	f004 fe69 	bl	80086f8 <USB_CoreInit>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e026      	b.n	8003a86 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f004 fee0 	bl	8008804 <USB_SetCurrentMode>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e017      	b.n	8003a86 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7c1a      	ldrb	r2, [r3, #16]
 8003a5e:	f88d 2000 	strb.w	r2, [sp]
 8003a62:	3304      	adds	r3, #4
 8003a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a66:	f005 f889 	bl	8008b7c <USB_HostInit>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e004      	b.n	8003a86 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003a8e:	b590      	push	{r4, r7, lr}
 8003a90:	b08b      	sub	sp, #44	@ 0x2c
 8003a92:	af04      	add	r7, sp, #16
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	4608      	mov	r0, r1
 8003a98:	4611      	mov	r1, r2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	70fb      	strb	r3, [r7, #3]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70bb      	strb	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003aa8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003aaa:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_HCD_HC_Init+0x2c>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e09d      	b.n	8003bf6 <HAL_HCD_HC_Init+0x168>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3319      	adds	r3, #25
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	787a      	ldrb	r2, [r7, #1]
 8003ae8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3315      	adds	r3, #21
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3326      	adds	r3, #38	@ 0x26
 8003b0e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003b12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	78bb      	ldrb	r3, [r7, #2]
 8003b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b1c:	b2d8      	uxtb	r0, r3
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3316      	adds	r3, #22
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fbc7 	bl	80042c8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003b3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	da0a      	bge.n	8003b58 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3317      	adds	r3, #23
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e009      	b.n	8003b6c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3317      	adds	r3, #23
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f005 f967 	bl	8008e44 <USB_GetHostSpeed>
 8003b76:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003b78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10b      	bne.n	8003b98 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003b80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d107      	bne.n	8003b98 <HAL_HCD_HC_Init+0x10a>
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2bbc      	cmp	r3, #188	@ 0xbc
 8003b92:	d901      	bls.n	8003b98 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003b94:	23bc      	movs	r3, #188	@ 0xbc
 8003b96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003bac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	b298      	uxth	r0, r3
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3328      	adds	r3, #40	@ 0x28
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	787c      	ldrb	r4, [r7, #1]
 8003bd0:	78ba      	ldrb	r2, [r7, #2]
 8003bd2:	78f9      	ldrb	r1, [r7, #3]
 8003bd4:	9302      	str	r3, [sp, #8]
 8003bd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4623      	mov	r3, r4
 8003be4:	f005 f956 	bl	8008e94 <USB_HC_Init>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}

08003bfe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_HCD_HC_Halt+0x1e>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e00f      	b.n	8003c3c <HAL_HCD_HC_Halt+0x3e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f005 fce8 	bl	8009602 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	70fb      	strb	r3, [r7, #3]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70bb      	strb	r3, [r7, #2]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3317      	adds	r3, #23
 8003c6e:	78ba      	ldrb	r2, [r7, #2]
 8003c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3326      	adds	r3, #38	@ 0x26
 8003c82:	787a      	ldrb	r2, [r7, #1]
 8003c84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003c86:	7c3b      	ldrb	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d114      	bne.n	8003cb6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	332a      	adds	r3, #42	@ 0x2a
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3319      	adds	r3, #25
 8003cb0:	7f3a      	ldrb	r2, [r7, #28]
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	e009      	b.n	8003cca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	332a      	adds	r3, #42	@ 0x2a
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003cca:	787b      	ldrb	r3, [r7, #1]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	f200 8102 	bhi.w	8003ed6 <HAL_HCD_HC_SubmitRequest+0x292>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003ec1 	.word	0x08003ec1
 8003ce0:	08003dad 	.word	0x08003dad
 8003ce4:	08003e37 	.word	0x08003e37
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003ce8:	7c3b      	ldrb	r3, [r7, #16]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	f040 80f5 	bne.w	8003eda <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003cf0:	78bb      	ldrb	r3, [r7, #2]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d12d      	bne.n	8003d52 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003cf6:	8b3b      	ldrh	r3, [r7, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	333d      	adds	r3, #61	@ 0x3d
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	333d      	adds	r3, #61	@ 0x3d
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	332a      	adds	r3, #42	@ 0x2a
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003d3a:	e0ce      	b.n	8003eda <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	332a      	adds	r3, #42	@ 0x2a
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	701a      	strb	r2, [r3, #0]
      break;
 8003d50:	e0c3      	b.n	8003eda <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	331a      	adds	r3, #26
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 80b8 	bne.w	8003eda <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	333c      	adds	r3, #60	@ 0x3c
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	332a      	adds	r3, #42	@ 0x2a
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
      break;
 8003d94:	e0a1      	b.n	8003eda <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	332a      	adds	r3, #42	@ 0x2a
 8003da6:	2202      	movs	r2, #2
 8003da8:	701a      	strb	r2, [r3, #0]
      break;
 8003daa:	e096      	b.n	8003eda <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003dac:	78bb      	ldrb	r3, [r7, #2]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d120      	bne.n	8003df4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	333d      	adds	r3, #61	@ 0x3d
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	332a      	adds	r3, #42	@ 0x2a
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ddc:	e07e      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	332a      	adds	r3, #42	@ 0x2a
 8003dee:	2202      	movs	r2, #2
 8003df0:	701a      	strb	r2, [r3, #0]
      break;
 8003df2:	e073      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	333c      	adds	r3, #60	@ 0x3c
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	332a      	adds	r3, #42	@ 0x2a
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
      break;
 8003e1e:	e05d      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	332a      	adds	r3, #42	@ 0x2a
 8003e30:	2202      	movs	r2, #2
 8003e32:	701a      	strb	r2, [r3, #0]
      break;
 8003e34:	e052      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003e36:	78bb      	ldrb	r3, [r7, #2]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d120      	bne.n	8003e7e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	333d      	adds	r3, #61	@ 0x3d
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	332a      	adds	r3, #42	@ 0x2a
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e66:	e039      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	332a      	adds	r3, #42	@ 0x2a
 8003e78:	2202      	movs	r2, #2
 8003e7a:	701a      	strb	r2, [r3, #0]
      break;
 8003e7c:	e02e      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	333c      	adds	r3, #60	@ 0x3c
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	332a      	adds	r3, #42	@ 0x2a
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
      break;
 8003ea8:	e018      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	332a      	adds	r3, #42	@ 0x2a
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
      break;
 8003ebe:	e00d      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	332a      	adds	r3, #42	@ 0x2a
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
      break;
 8003ed4:	e002      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003eda:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	332c      	adds	r3, #44	@ 0x2c
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	8b39      	ldrh	r1, [r7, #24]
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4403      	add	r3, r0
 8003f00:	3334      	adds	r3, #52	@ 0x34
 8003f02:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	334c      	adds	r3, #76	@ 0x4c
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	3338      	adds	r3, #56	@ 0x38
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3315      	adds	r3, #21
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	334d      	adds	r3, #77	@ 0x4d
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	3310      	adds	r3, #16
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	1d19      	adds	r1, r3, #4
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	799b      	ldrb	r3, [r3, #6]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f005 f8bc 	bl	80090ec <USB_HC_StartXfer>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop

08003f80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 fdaa 	bl	8008af0 <USB_GetMode>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	f040 80fb 	bne.w	800419a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 fd6d 	bl	8008a88 <USB_ReadInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80f1 	beq.w	8004198 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 fd64 	bl	8008a88 <USB_ReadInterrupts>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fca:	d104      	bne.n	8003fd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003fd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f004 fd54 	bl	8008a88 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fea:	d104      	bne.n	8003ff6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ff4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fd44 	bl	8008a88 <USB_ReadInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004006:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800400a:	d104      	bne.n	8004016 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004014:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f004 fd34 	bl	8008a88 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d103      	bne.n	8004032 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2202      	movs	r2, #2
 8004030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f004 fd26 	bl	8008a88 <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004046:	d120      	bne.n	800408a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004050:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d113      	bne.n	800408a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004062:	2110      	movs	r1, #16
 8004064:	6938      	ldr	r0, [r7, #16]
 8004066:	f004 fc19 	bl	800889c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800406a:	6938      	ldr	r0, [r7, #16]
 800406c:	f004 fc48 	bl	8008900 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7a5b      	ldrb	r3, [r3, #9]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d105      	bne.n	8004084 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f004 fe40 	bl	8008d04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f007 fe0d 	bl	800bca4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f004 fcfa 	bl	8008a88 <USB_ReadInterrupts>
 8004094:	4603      	mov	r3, r0
 8004096:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800409e:	d102      	bne.n	80040a6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f001 fd4d 	bl	8005b40 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 fcec 	bl	8008a88 <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d106      	bne.n	80040c8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f007 fdd6 	bl	800bc6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 fcdb 	bl	8008a88 <USB_ReadInterrupts>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040dc:	d139      	bne.n	8004152 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f005 fa7c 	bl	80095e0 <USB_HC_ReadInterrupt>
 80040e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e025      	b.n	800413c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411a:	d106      	bne.n	800412a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	4619      	mov	r1, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f905 	bl	8004332 <HCD_HC_IN_IRQHandler>
 8004128:	e005      	b.n	8004136 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 ff67 	bl	8005004 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	3301      	adds	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	795b      	ldrb	r3, [r3, #5]
 8004140:	461a      	mov	r2, r3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4293      	cmp	r3, r2
 8004146:	d3d3      	bcc.n	80040f0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f004 fc96 	bl	8008a88 <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b10      	cmp	r3, #16
 8004164:	d101      	bne.n	800416a <HAL_HCD_IRQHandler+0x1ea>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_HCD_IRQHandler+0x1ec>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d014      	beq.n	800419a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0210 	bic.w	r2, r2, #16
 800417e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 fbfe 	bl	8005982 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0210 	orr.w	r2, r2, #16
 8004194:	619a      	str	r2, [r3, #24]
 8004196:	e000      	b.n	800419a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004198:	bf00      	nop
    }
  }
}
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_HCD_Start+0x16>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e013      	b.n	80041de <HAL_HCD_Start+0x3e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f004 fe04 	bl	8008dd2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f004 faf6 	bl	80087c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_HCD_Stop+0x16>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e00d      	b.n	8004218 <HAL_HCD_Stop+0x32>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f005 fb57 	bl	80098bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f004 fda6 	bl	8008d7e <USB_ResetPort>
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	334c      	adds	r3, #76	@ 0x4c
 8004258:	781b      	ldrb	r3, [r3, #0]
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3338      	adds	r3, #56	@ 0x38
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f004 fde8 	bl	8008e72 <USB_GetCurrentFrame>
 80042a2:	4603      	mov	r3, r0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fdc3 	bl	8008e44 <USB_GetHostSpeed>
 80042be:	4603      	mov	r3, r0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	331a      	adds	r3, #26
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	331b      	adds	r3, #27
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3325      	adds	r3, #37	@ 0x25
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3324      	adds	r3, #36	@ 0x24
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f004 fbac 	bl	8008aae <USB_ReadChInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11a      	bne.n	8004396 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436c:	461a      	mov	r2, r3
 800436e:	2304      	movs	r3, #4
 8004370:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	334d      	adds	r3, #77	@ 0x4d
 8004382:	2207      	movs	r2, #7
 8004384:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	4611      	mov	r1, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f005 f937 	bl	8009602 <USB_HC_Halt>
 8004394:	e09e      	b.n	80044d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f004 fb85 	bl	8008aae <USB_ReadChInterrupts>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ae:	d11b      	bne.n	80043e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043bc:	461a      	mov	r2, r3
 80043be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	334d      	adds	r3, #77	@ 0x4d
 80043d4:	2208      	movs	r2, #8
 80043d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f005 f90e 	bl	8009602 <USB_HC_Halt>
 80043e6:	e075      	b.n	80044d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 fb5c 	bl	8008aae <USB_ReadChInterrupts>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d11a      	bne.n	8004436 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440c:	461a      	mov	r2, r3
 800440e:	2308      	movs	r3, #8
 8004410:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	334d      	adds	r3, #77	@ 0x4d
 8004422:	2206      	movs	r2, #6
 8004424:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f005 f8e7 	bl	8009602 <USB_HC_Halt>
 8004434:	e04e      	b.n	80044d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f004 fb35 	bl	8008aae <USB_ReadChInterrupts>
 8004444:	4603      	mov	r3, r0
 8004446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444e:	d11b      	bne.n	8004488 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004462:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	334d      	adds	r3, #77	@ 0x4d
 8004474:	2209      	movs	r2, #9
 8004476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f005 f8be 	bl	8009602 <USB_HC_Halt>
 8004486:	e025      	b.n	80044d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f004 fb0c 	bl	8008aae <USB_ReadChInterrupts>
 8004496:	4603      	mov	r3, r0
 8004498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449c:	2b80      	cmp	r3, #128	@ 0x80
 800449e:	d119      	bne.n	80044d4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ac:	461a      	mov	r2, r3
 80044ae:	2380      	movs	r3, #128	@ 0x80
 80044b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	334d      	adds	r3, #77	@ 0x4d
 80044c2:	2207      	movs	r2, #7
 80044c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f005 f897 	bl	8009602 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f004 fae6 	bl	8008aae <USB_ReadChInterrupts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ec:	d112      	bne.n	8004514 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f005 f883 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004508:	461a      	mov	r2, r3
 800450a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800450e:	6093      	str	r3, [r2, #8]
 8004510:	f000 bd75 	b.w	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f004 fac6 	bl	8008aae <USB_ReadChInterrupts>
 8004522:	4603      	mov	r3, r0
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 8128 	bne.w	800477e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453a:	461a      	mov	r2, r3
 800453c:	2320      	movs	r3, #32
 800453e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	331b      	adds	r3, #27
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d119      	bne.n	800458a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	331b      	adds	r3, #27
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4413      	add	r3, r2
 8004572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	0151      	lsls	r1, r2, #5
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	440a      	add	r2, r1
 8004580:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004588:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	799b      	ldrb	r3, [r3, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01b      	beq.n	80045ca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	3330      	adds	r3, #48	@ 0x30
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	1ac9      	subs	r1, r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4403      	add	r3, r0
 80045c6:	3338      	adds	r3, #56	@ 0x38
 80045c8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334d      	adds	r3, #77	@ 0x4d
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3344      	adds	r3, #68	@ 0x44
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fe:	461a      	mov	r2, r3
 8004600:	2301      	movs	r3, #1
 8004602:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	3326      	adds	r3, #38	@ 0x26
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	3326      	adds	r3, #38	@ 0x26
 800462a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800462c:	2b02      	cmp	r3, #2
 800462e:	d110      	bne.n	8004652 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f004 ffe2 	bl	8009602 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4413      	add	r3, r2
 8004646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800464a:	461a      	mov	r2, r3
 800464c:	2310      	movs	r3, #16
 800464e:	6093      	str	r3, [r2, #8]
 8004650:	e03d      	b.n	80046ce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3326      	adds	r3, #38	@ 0x26
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d00a      	beq.n	800467e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3326      	adds	r3, #38	@ 0x26
 8004678:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800467a:	2b01      	cmp	r3, #1
 800467c:	d127      	bne.n	80046ce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4413      	add	r3, r2
 8004686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	440a      	add	r2, r1
 8004694:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004698:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800469c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	334c      	adds	r3, #76	@ 0x4c
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	334c      	adds	r3, #76	@ 0x4c
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f007 faf9 	bl	800bcc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	799b      	ldrb	r3, [r3, #6]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d13b      	bne.n	800474e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	3338      	adds	r3, #56	@ 0x38
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4403      	add	r3, r0
 80046f6:	3328      	adds	r3, #40	@ 0x28
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	440b      	add	r3, r1
 80046fc:	1e59      	subs	r1, r3, #1
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4403      	add	r3, r0
 800470c:	3328      	adds	r3, #40	@ 0x28
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	fbb1 f3f3 	udiv	r3, r1, r3
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8470 	beq.w	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	333c      	adds	r3, #60	@ 0x3c
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	f083 0301 	eor.w	r3, r3, #1
 8004736:	b2d8      	uxtb	r0, r3
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	333c      	adds	r3, #60	@ 0x3c
 8004746:	4602      	mov	r2, r0
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	f000 bc58 	b.w	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	333c      	adds	r3, #60	@ 0x3c
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2d8      	uxtb	r0, r3
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	333c      	adds	r3, #60	@ 0x3c
 8004776:	4602      	mov	r2, r0
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	f000 bc40 	b.w	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f004 f991 	bl	8008aae <USB_ReadChInterrupts>
 800478c:	4603      	mov	r3, r0
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b20      	cmp	r3, #32
 8004794:	d131      	bne.n	80047fa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047a2:	461a      	mov	r2, r3
 80047a4:	2320      	movs	r3, #32
 80047a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	331a      	adds	r3, #26
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 841f 	bne.w	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	331b      	adds	r3, #27
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	334d      	adds	r3, #77	@ 0x4d
 80047e4:	2203      	movs	r2, #3
 80047e6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f004 ff06 	bl	8009602 <USB_HC_Halt>
 80047f6:	f000 bc02 	b.w	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f004 f953 	bl	8008aae <USB_ReadChInterrupts>
 8004808:	4603      	mov	r3, r0
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	f040 8305 	bne.w	8004e1e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004820:	461a      	mov	r2, r3
 8004822:	2302      	movs	r3, #2
 8004824:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	334d      	adds	r3, #77	@ 0x4d
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d114      	bne.n	8004866 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	334d      	adds	r3, #77	@ 0x4d
 800484c:	2202      	movs	r2, #2
 800484e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	334c      	adds	r3, #76	@ 0x4c
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e2cc      	b.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	334d      	adds	r3, #77	@ 0x4d
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b06      	cmp	r3, #6
 800487a:	d114      	bne.n	80048a6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	334d      	adds	r3, #77	@ 0x4d
 800488c:	2202      	movs	r2, #2
 800488e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	334c      	adds	r3, #76	@ 0x4c
 80048a0:	2205      	movs	r2, #5
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e2ac      	b.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	334d      	adds	r3, #77	@ 0x4d
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b07      	cmp	r3, #7
 80048ba:	d00b      	beq.n	80048d4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	334d      	adds	r3, #77	@ 0x4d
 80048cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	f040 80a6 	bne.w	8004a20 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	334d      	adds	r3, #77	@ 0x4d
 80048e4:	2202      	movs	r2, #2
 80048e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3344      	adds	r3, #68	@ 0x44
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4403      	add	r3, r0
 8004908:	3344      	adds	r3, #68	@ 0x44
 800490a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3344      	adds	r3, #68	@ 0x44
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d943      	bls.n	80049aa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3344      	adds	r3, #68	@ 0x44
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	331a      	adds	r3, #26
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d123      	bne.n	8004994 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	331b      	adds	r3, #27
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	331c      	adds	r3, #28
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	440a      	add	r2, r1
 800498a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800498e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004992:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	334c      	adds	r3, #76	@ 0x4c
 80049a4:	2204      	movs	r2, #4
 80049a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049a8:	e229      	b.n	8004dfe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	334c      	adds	r3, #76	@ 0x4c
 80049ba:	2202      	movs	r2, #2
 80049bc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3326      	adds	r3, #38	@ 0x26
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	3326      	adds	r3, #38	@ 0x26
 80049e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	f040 8209 	bne.w	8004dfe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a02:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a0a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a1e:	e1ee      	b.n	8004dfe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	334d      	adds	r3, #77	@ 0x4d
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	f040 80c8 	bne.w	8004bc8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	334d      	adds	r3, #77	@ 0x4d
 8004a48:	2202      	movs	r2, #2
 8004a4a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	331b      	adds	r3, #27
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f040 81ce 	bne.w	8004e00 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	3326      	adds	r3, #38	@ 0x26
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d16b      	bne.n	8004b52 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3348      	adds	r3, #72	@ 0x48
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4403      	add	r3, r0
 8004a9a:	3348      	adds	r3, #72	@ 0x48
 8004a9c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3348      	adds	r3, #72	@ 0x48
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d943      	bls.n	8004b3c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3348      	adds	r3, #72	@ 0x48
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	331b      	adds	r3, #27
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3344      	adds	r3, #68	@ 0x44
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d809      	bhi.n	8004b06 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	331c      	adds	r3, #28
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b24:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	334c      	adds	r3, #76	@ 0x4c
 8004b36:	2204      	movs	r2, #4
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e014      	b.n	8004b66 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	334c      	adds	r3, #76	@ 0x4c
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e009      	b.n	8004b66 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	334c      	adds	r3, #76	@ 0x4c
 8004b62:	2202      	movs	r2, #2
 8004b64:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	3326      	adds	r3, #38	@ 0x26
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3326      	adds	r3, #38	@ 0x26
 8004b8c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	f040 8136 	bne.w	8004e00 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004baa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bb2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e11b      	b.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	334d      	adds	r3, #77	@ 0x4d
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	f040 8081 	bne.w	8004ce2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	334d      	adds	r3, #77	@ 0x4d
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	331b      	adds	r3, #27
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	f040 80fa 	bne.w	8004e00 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334c      	adds	r3, #76	@ 0x4c
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c5e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c7a:	f023 0320 	bic.w	r3, r3, #32
 8004c7e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3326      	adds	r3, #38	@ 0x26
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3326      	adds	r3, #38	@ 0x26
 8004ca6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	f040 80a9 	bne.w	8004e00 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cc4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ccc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	e08e      	b.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	334d      	adds	r3, #77	@ 0x4d
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d143      	bne.n	8004d80 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	334d      	adds	r3, #77	@ 0x4d
 8004d08:	2202      	movs	r2, #2
 8004d0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	334c      	adds	r3, #76	@ 0x4c
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3326      	adds	r3, #38	@ 0x26
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3326      	adds	r3, #38	@ 0x26
 8004d46:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d159      	bne.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d62:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d6a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e03f      	b.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	334d      	adds	r3, #77	@ 0x4d
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d126      	bne.n	8004de4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	334d      	adds	r3, #77	@ 0x4d
 8004da6:	2202      	movs	r2, #2
 8004da8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3344      	adds	r3, #68	@ 0x44
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4403      	add	r3, r0
 8004dca:	3344      	adds	r3, #68	@ 0x44
 8004dcc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	334c      	adds	r3, #76	@ 0x4c
 8004dde:	2204      	movs	r2, #4
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e00d      	b.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	334d      	adds	r3, #77	@ 0x4d
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	f000 8100 	beq.w	8004ffc <HCD_HC_IN_IRQHandler+0xcca>
 8004dfc:	e000      	b.n	8004e00 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004dfe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	334c      	adds	r3, #76	@ 0x4c
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f006 ff52 	bl	800bcc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e1c:	e0ef      	b.n	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f003 fe41 	bl	8008aae <USB_ReadChInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e32:	2b40      	cmp	r3, #64	@ 0x40
 8004e34:	d12f      	bne.n	8004e96 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e42:	461a      	mov	r2, r3
 8004e44:	2340      	movs	r3, #64	@ 0x40
 8004e46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	334d      	adds	r3, #77	@ 0x4d
 8004e58:	2205      	movs	r2, #5
 8004e5a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	331a      	adds	r3, #26
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3344      	adds	r3, #68	@ 0x44
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f004 fbb7 	bl	8009602 <USB_HC_Halt>
 8004e94:	e0b3      	b.n	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 fe05 	bl	8008aae <USB_ReadChInterrupts>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	f040 80a7 	bne.w	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3326      	adds	r3, #38	@ 0x26
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d11b      	bne.n	8004efe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3344      	adds	r3, #68	@ 0x44
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	334d      	adds	r3, #77	@ 0x4d
 8004eea:	2204      	movs	r2, #4
 8004eec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f004 fb83 	bl	8009602 <USB_HC_Halt>
 8004efc:	e03f      	b.n	8004f7e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3326      	adds	r3, #38	@ 0x26
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	3326      	adds	r3, #38	@ 0x26
 8004f24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d129      	bne.n	8004f7e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3344      	adds	r3, #68	@ 0x44
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	799b      	ldrb	r3, [r3, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HCD_HC_IN_IRQHandler+0xc2a>
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	331b      	adds	r3, #27
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d110      	bne.n	8004f7e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	334d      	adds	r3, #77	@ 0x4d
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	4611      	mov	r1, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f004 fb42 	bl	8009602 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	331b      	adds	r3, #27
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d129      	bne.n	8004fe8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	331b      	adds	r3, #27
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fe2:	f043 0320 	orr.w	r3, r3, #32
 8004fe6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	6093      	str	r3, [r2, #8]
 8004ffa:	e000      	b.n	8004ffe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004ffc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f003 fd43 	bl	8008aae <USB_ReadChInterrupts>
 8005028:	4603      	mov	r3, r0
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d11b      	bne.n	800506a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800503e:	461a      	mov	r2, r3
 8005040:	2304      	movs	r3, #4
 8005042:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	334d      	adds	r3, #77	@ 0x4d
 8005054:	2207      	movs	r2, #7
 8005056:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f004 face 	bl	8009602 <USB_HC_Halt>
 8005066:	f000 bc89 	b.w	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f003 fd1b 	bl	8008aae <USB_ReadChInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	f040 8082 	bne.w	8005188 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005090:	461a      	mov	r2, r3
 8005092:	2320      	movs	r3, #32
 8005094:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3319      	adds	r3, #25
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d124      	bne.n	80050f6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	3319      	adds	r3, #25
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	334c      	adds	r3, #76	@ 0x4c
 80050d0:	2202      	movs	r2, #2
 80050d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	334d      	adds	r3, #77	@ 0x4d
 80050e4:	2203      	movs	r2, #3
 80050e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	4611      	mov	r1, r2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f004 fa86 	bl	8009602 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	331a      	adds	r3, #26
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	f040 8437 	bne.w	800597c <HCD_HC_OUT_IRQHandler+0x978>
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	331b      	adds	r3, #27
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 842b 	bne.w	800597c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3326      	adds	r3, #38	@ 0x26
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d009      	beq.n	8005150 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	331b      	adds	r3, #27
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	334d      	adds	r3, #77	@ 0x4d
 8005160:	2203      	movs	r2, #3
 8005162:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fa48 	bl	8009602 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	3344      	adds	r3, #68	@ 0x44
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e3f9      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f003 fc8c 	bl	8008aae <USB_ReadChInterrupts>
 8005196:	4603      	mov	r3, r0
 8005198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a0:	d111      	bne.n	80051c6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ae:	461a      	mov	r2, r3
 80051b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fa1f 	bl	8009602 <USB_HC_Halt>
 80051c4:	e3da      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f003 fc6d 	bl	8008aae <USB_ReadChInterrupts>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d168      	bne.n	80052b0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	3344      	adds	r3, #68	@ 0x44
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f003 fc57 	bl	8008aae <USB_ReadChInterrupts>
 8005200:	4603      	mov	r3, r0
 8005202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005206:	2b40      	cmp	r3, #64	@ 0x40
 8005208:	d112      	bne.n	8005230 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3319      	adds	r3, #25
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800522a:	461a      	mov	r2, r3
 800522c:	2340      	movs	r3, #64	@ 0x40
 800522e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	331b      	adds	r3, #27
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d019      	beq.n	800527a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	331b      	adds	r3, #27
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	440a      	add	r2, r1
 8005270:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005278:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005286:	461a      	mov	r2, r3
 8005288:	2301      	movs	r3, #1
 800528a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	334d      	adds	r3, #77	@ 0x4d
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f004 f9aa 	bl	8009602 <USB_HC_Halt>
 80052ae:	e365      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f003 fbf8 	bl	8008aae <USB_ReadChInterrupts>
 80052be:	4603      	mov	r3, r0
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b40      	cmp	r3, #64	@ 0x40
 80052c6:	d139      	bne.n	800533c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	334d      	adds	r3, #77	@ 0x4d
 80052d8:	2205      	movs	r2, #5
 80052da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	331a      	adds	r3, #26
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	3319      	adds	r3, #25
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3344      	adds	r3, #68	@ 0x44
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f004 f96d 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	2340      	movs	r3, #64	@ 0x40
 8005338:	6093      	str	r3, [r2, #8]
 800533a:	e31f      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f003 fbb2 	bl	8008aae <USB_ReadChInterrupts>
 800534a:	4603      	mov	r3, r0
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b08      	cmp	r3, #8
 8005352:	d11a      	bne.n	800538a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005360:	461a      	mov	r2, r3
 8005362:	2308      	movs	r3, #8
 8005364:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	334d      	adds	r3, #77	@ 0x4d
 8005376:	2206      	movs	r2, #6
 8005378:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	4611      	mov	r1, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f004 f93d 	bl	8009602 <USB_HC_Halt>
 8005388:	e2f8      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	4611      	mov	r1, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f003 fb8b 	bl	8008aae <USB_ReadChInterrupts>
 8005398:	4603      	mov	r3, r0
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d144      	bne.n	800542c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	3344      	adds	r3, #68	@ 0x44
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	334d      	adds	r3, #77	@ 0x4d
 80053c6:	2204      	movs	r2, #4
 80053c8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3319      	adds	r3, #25
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d114      	bne.n	800540a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	3318      	adds	r3, #24
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	3319      	adds	r3, #25
 8005406:	2201      	movs	r2, #1
 8005408:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f004 f8f5 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005424:	461a      	mov	r2, r3
 8005426:	2310      	movs	r3, #16
 8005428:	6093      	str	r3, [r2, #8]
 800542a:	e2a7      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f003 fb3a 	bl	8008aae <USB_ReadChInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005440:	2b80      	cmp	r3, #128	@ 0x80
 8005442:	f040 8083 	bne.w	800554c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	799b      	ldrb	r3, [r3, #6]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d111      	bne.n	8005472 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	334d      	adds	r3, #77	@ 0x4d
 800545e:	2207      	movs	r2, #7
 8005460:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f004 f8c9 	bl	8009602 <USB_HC_Halt>
 8005470:	e062      	b.n	8005538 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	3344      	adds	r3, #68	@ 0x44
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	1c59      	adds	r1, r3, #1
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4403      	add	r3, r0
 8005492:	3344      	adds	r3, #68	@ 0x44
 8005494:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3344      	adds	r3, #68	@ 0x44
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d922      	bls.n	80054f2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3344      	adds	r3, #68	@ 0x44
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	334c      	adds	r3, #76	@ 0x4c
 80054d0:	2204      	movs	r2, #4
 80054d2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	334c      	adds	r3, #76	@ 0x4c
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f006 fbe8 	bl	800bcc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054f0:	e022      	b.n	8005538 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	334c      	adds	r3, #76	@ 0x4c
 8005502:	2202      	movs	r2, #2
 8005504:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800551c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005524:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4413      	add	r3, r2
 800552e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005532:	461a      	mov	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005544:	461a      	mov	r2, r3
 8005546:	2380      	movs	r3, #128	@ 0x80
 8005548:	6093      	str	r3, [r2, #8]
 800554a:	e217      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f003 faaa 	bl	8008aae <USB_ReadChInterrupts>
 800555a:	4603      	mov	r3, r0
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005564:	d11b      	bne.n	800559e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	334d      	adds	r3, #77	@ 0x4d
 8005576:	2209      	movs	r2, #9
 8005578:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f004 f83d 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005594:	461a      	mov	r2, r3
 8005596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800559a:	6093      	str	r3, [r2, #8]
 800559c:	e1ee      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f003 fa81 	bl	8008aae <USB_ReadChInterrupts>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	f040 81df 	bne.w	8005976 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c4:	461a      	mov	r2, r3
 80055c6:	2302      	movs	r3, #2
 80055c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	334d      	adds	r3, #77	@ 0x4d
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f040 8093 	bne.w	8005708 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	334d      	adds	r3, #77	@ 0x4d
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80055f6:	78fa      	ldrb	r2, [r7, #3]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	334c      	adds	r3, #76	@ 0x4c
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3326      	adds	r3, #38	@ 0x26
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d00b      	beq.n	8005638 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3326      	adds	r3, #38	@ 0x26
 8005630:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005632:	2b03      	cmp	r3, #3
 8005634:	f040 8190 	bne.w	8005958 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	799b      	ldrb	r3, [r3, #6]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d115      	bne.n	800566c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005640:	78fa      	ldrb	r2, [r7, #3]
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	333d      	adds	r3, #61	@ 0x3d
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	f083 0301 	eor.w	r3, r3, #1
 8005658:	b2d8      	uxtb	r0, r3
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	333d      	adds	r3, #61	@ 0x3d
 8005668:	4602      	mov	r2, r0
 800566a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	799b      	ldrb	r3, [r3, #6]
 8005670:	2b01      	cmp	r3, #1
 8005672:	f040 8171 	bne.w	8005958 <HCD_HC_OUT_IRQHandler+0x954>
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	3334      	adds	r3, #52	@ 0x34
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8165 	beq.w	8005958 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	3334      	adds	r3, #52	@ 0x34
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4403      	add	r3, r0
 80056ae:	3328      	adds	r3, #40	@ 0x28
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	440b      	add	r3, r1
 80056b4:	1e59      	subs	r1, r3, #1
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4403      	add	r3, r0
 80056c4:	3328      	adds	r3, #40	@ 0x28
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80056cc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 813f 	beq.w	8005958 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	333d      	adds	r3, #61	@ 0x3d
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	f083 0301 	eor.w	r3, r3, #1
 80056f2:	b2d8      	uxtb	r0, r3
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	333d      	adds	r3, #61	@ 0x3d
 8005702:	4602      	mov	r2, r0
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e127      	b.n	8005958 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	334d      	adds	r3, #77	@ 0x4d
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d120      	bne.n	8005760 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	334d      	adds	r3, #77	@ 0x4d
 800572e:	2202      	movs	r2, #2
 8005730:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	331b      	adds	r3, #27
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b01      	cmp	r3, #1
 8005746:	f040 8107 	bne.w	8005958 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	334c      	adds	r3, #76	@ 0x4c
 800575a:	2202      	movs	r2, #2
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e0fb      	b.n	8005958 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005760:	78fa      	ldrb	r2, [r7, #3]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	334d      	adds	r3, #77	@ 0x4d
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b04      	cmp	r3, #4
 8005774:	d13a      	bne.n	80057ec <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	334d      	adds	r3, #77	@ 0x4d
 8005786:	2202      	movs	r2, #2
 8005788:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	334c      	adds	r3, #76	@ 0x4c
 800579a:	2202      	movs	r2, #2
 800579c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800579e:	78fa      	ldrb	r2, [r7, #3]
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	331b      	adds	r3, #27
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	f040 80d1 	bne.w	8005958 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	331b      	adds	r3, #27
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	e0b5      	b.n	8005958 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80057ec:	78fa      	ldrb	r2, [r7, #3]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	334d      	adds	r3, #77	@ 0x4d
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d114      	bne.n	800582c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	334d      	adds	r3, #77	@ 0x4d
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	334c      	adds	r3, #76	@ 0x4c
 8005826:	2202      	movs	r2, #2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	e095      	b.n	8005958 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	334d      	adds	r3, #77	@ 0x4d
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b06      	cmp	r3, #6
 8005840:	d114      	bne.n	800586c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	334d      	adds	r3, #77	@ 0x4d
 8005852:	2202      	movs	r2, #2
 8005854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	334c      	adds	r3, #76	@ 0x4c
 8005866:	2205      	movs	r2, #5
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	e075      	b.n	8005958 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	334d      	adds	r3, #77	@ 0x4d
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b07      	cmp	r3, #7
 8005880:	d00a      	beq.n	8005898 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005882:	78fa      	ldrb	r2, [r7, #3]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	334d      	adds	r3, #77	@ 0x4d
 8005892:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005894:	2b09      	cmp	r3, #9
 8005896:	d170      	bne.n	800597a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	334d      	adds	r3, #77	@ 0x4d
 80058a8:	2202      	movs	r2, #2
 80058aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80058ac:	78fa      	ldrb	r2, [r7, #3]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	3344      	adds	r3, #68	@ 0x44
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4403      	add	r3, r0
 80058cc:	3344      	adds	r3, #68	@ 0x44
 80058ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	3344      	adds	r3, #68	@ 0x44
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d914      	bls.n	8005910 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80058e6:	78fa      	ldrb	r2, [r7, #3]
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	3344      	adds	r3, #68	@ 0x44
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80058fa:	78fa      	ldrb	r2, [r7, #3]
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	334c      	adds	r3, #76	@ 0x4c
 800590a:	2204      	movs	r2, #4
 800590c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800590e:	e022      	b.n	8005956 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	334c      	adds	r3, #76	@ 0x4c
 8005920:	2202      	movs	r2, #2
 8005922:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800593a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005942:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005950:	461a      	mov	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005956:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005958:	78fa      	ldrb	r2, [r7, #3]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	334c      	adds	r3, #76	@ 0x4c
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f006 f9a6 	bl	800bcc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005974:	e002      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800597a:	bf00      	nop
  }
}
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b08a      	sub	sp, #40	@ 0x28
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	0c5b      	lsrs	r3, r3, #17
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d004      	beq.n	80059c8 <HCD_RXQLVL_IRQHandler+0x46>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b05      	cmp	r3, #5
 80059c2:	f000 80b6 	beq.w	8005b32 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80059c6:	e0b7      	b.n	8005b38 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80b3 	beq.w	8005b36 <HCD_RXQLVL_IRQHandler+0x1b4>
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4613      	mov	r3, r2
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	332c      	adds	r3, #44	@ 0x2c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80a7 	beq.w	8005b36 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4613      	mov	r3, r2
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3338      	adds	r3, #56	@ 0x38
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	18d1      	adds	r1, r2, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4613      	mov	r3, r2
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4403      	add	r3, r0
 8005a0c:	3334      	adds	r3, #52	@ 0x34
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4299      	cmp	r1, r3
 8005a12:	f200 8083 	bhi.w	8005b1c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	332c      	adds	r3, #44	@ 0x2c
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f002 ffd1 	bl	80089d8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	332c      	adds	r3, #44	@ 0x2c
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	18d1      	adds	r1, r2, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4613      	mov	r3, r2
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4403      	add	r3, r0
 8005a5a:	332c      	adds	r3, #44	@ 0x2c
 8005a5c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4613      	mov	r3, r2
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3338      	adds	r3, #56	@ 0x38
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	18d1      	adds	r1, r2, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4403      	add	r3, r0
 8005a82:	3338      	adds	r3, #56	@ 0x38
 8005a84:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	0cdb      	lsrs	r3, r3, #19
 8005a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3328      	adds	r3, #40	@ 0x28
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d13f      	bne.n	8005b36 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d03c      	beq.n	8005b36 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ad2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ada:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4613      	mov	r3, r2
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	333c      	adds	r3, #60	@ 0x3c
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f083 0301 	eor.w	r3, r3, #1
 8005b04:	b2d8      	uxtb	r0, r3
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	333c      	adds	r3, #60	@ 0x3c
 8005b16:	4602      	mov	r2, r0
 8005b18:	701a      	strb	r2, [r3, #0]
      break;
 8005b1a:	e00c      	b.n	8005b36 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4613      	mov	r3, r2
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	334c      	adds	r3, #76	@ 0x4c
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	701a      	strb	r2, [r3, #0]
      break;
 8005b30:	e001      	b.n	8005b36 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005b36:	bf00      	nop
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3728      	adds	r7, #40	@ 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b6c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d10b      	bne.n	8005b90 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f006 f880 	bl	800bc88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d132      	bne.n	8005c00 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f043 0308 	orr.w	r3, r3, #8
 8005ba0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d126      	bne.n	8005bfa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7a5b      	ldrb	r3, [r3, #9]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d113      	bne.n	8005bdc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005bba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bbe:	d106      	bne.n	8005bce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f003 f89c 	bl	8008d04 <USB_InitFSLSPClkSel>
 8005bcc:	e011      	b.n	8005bf2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f003 f895 	bl	8008d04 <USB_InitFSLSPClkSel>
 8005bda:	e00a      	b.n	8005bf2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	79db      	ldrb	r3, [r3, #7]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bea:	461a      	mov	r2, r3
 8005bec:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005bf0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f006 f872 	bl	800bcdc <HAL_HCD_PortEnabled_Callback>
 8005bf8:	e002      	b.n	8005c00 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f006 f87c 	bl	800bcf8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d103      	bne.n	8005c12 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f043 0320 	orr.w	r3, r3, #32
 8005c10:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6013      	str	r3, [r2, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e12b      	b.n	8005e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc f886 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	@ 0x24
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f000 fd80 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 8005c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4a81      	ldr	r2, [pc, #516]	@ (8005e9c <HAL_I2C_Init+0x274>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d807      	bhi.n	8005cac <HAL_I2C_Init+0x84>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a80      	ldr	r2, [pc, #512]	@ (8005ea0 <HAL_I2C_Init+0x278>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bf94      	ite	ls
 8005ca4:	2301      	movls	r3, #1
 8005ca6:	2300      	movhi	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e006      	b.n	8005cba <HAL_I2C_Init+0x92>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a7d      	ldr	r2, [pc, #500]	@ (8005ea4 <HAL_I2C_Init+0x27c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	bf94      	ite	ls
 8005cb4:	2301      	movls	r3, #1
 8005cb6:	2300      	movhi	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e0e7      	b.n	8005e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a78      	ldr	r2, [pc, #480]	@ (8005ea8 <HAL_I2C_Init+0x280>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	0c9b      	lsrs	r3, r3, #18
 8005ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8005e9c <HAL_I2C_Init+0x274>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d802      	bhi.n	8005cfc <HAL_I2C_Init+0xd4>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	e009      	b.n	8005d10 <HAL_I2C_Init+0xe8>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	4a69      	ldr	r2, [pc, #420]	@ (8005eac <HAL_I2C_Init+0x284>)
 8005d08:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0c:	099b      	lsrs	r3, r3, #6
 8005d0e:	3301      	adds	r3, #1
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005d22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	495c      	ldr	r1, [pc, #368]	@ (8005e9c <HAL_I2C_Init+0x274>)
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	d819      	bhi.n	8005d64 <HAL_I2C_Init+0x13c>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	1e59      	subs	r1, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d44:	400b      	ands	r3, r1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_I2C_Init+0x138>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1e59      	subs	r1, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5e:	e051      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005d60:	2304      	movs	r3, #4
 8005d62:	e04f      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d111      	bne.n	8005d90 <HAL_I2C_Init+0x168>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	1e58      	subs	r0, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6859      	ldr	r1, [r3, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	440b      	add	r3, r1
 8005d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e012      	b.n	8005db6 <HAL_I2C_Init+0x18e>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1e58      	subs	r0, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	0099      	lsls	r1, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005da6:	3301      	adds	r3, #1
 8005da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Init+0x196>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e022      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10e      	bne.n	8005de4 <HAL_I2C_Init+0x1bc>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1e58      	subs	r0, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	440b      	add	r3, r1
 8005dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de2:	e00f      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1e58      	subs	r0, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6859      	ldr	r1, [r3, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	0099      	lsls	r1, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	6809      	ldr	r1, [r1, #0]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6911      	ldr	r1, [r2, #16]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68d2      	ldr	r2, [r2, #12]
 8005e3e:	4311      	orrs	r1, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	000186a0 	.word	0x000186a0
 8005ea0:	001e847f 	.word	0x001e847f
 8005ea4:	003d08ff 	.word	0x003d08ff
 8005ea8:	431bde83 	.word	0x431bde83
 8005eac:	10624dd3 	.word	0x10624dd3

08005eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e267      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d075      	beq.n	8005fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ece:	4b88      	ldr	r3, [pc, #544]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eda:	4b85      	ldr	r3, [pc, #532]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d112      	bne.n	8005f0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ee6:	4b82      	ldr	r3, [pc, #520]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ef2:	d10b      	bne.n	8005f0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef4:	4b7e      	ldr	r3, [pc, #504]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d05b      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x108>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d157      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e242      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f14:	d106      	bne.n	8005f24 <HAL_RCC_OscConfig+0x74>
 8005f16:	4b76      	ldr	r3, [pc, #472]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a75      	ldr	r2, [pc, #468]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e01d      	b.n	8005f60 <HAL_RCC_OscConfig+0xb0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f2c:	d10c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x98>
 8005f2e:	4b70      	ldr	r3, [pc, #448]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a6f      	ldr	r2, [pc, #444]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a6c      	ldr	r2, [pc, #432]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e00b      	b.n	8005f60 <HAL_RCC_OscConfig+0xb0>
 8005f48:	4b69      	ldr	r3, [pc, #420]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a68      	ldr	r2, [pc, #416]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	4b66      	ldr	r3, [pc, #408]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a65      	ldr	r2, [pc, #404]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d013      	beq.n	8005f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f68:	f7fc f9cc 	bl	8002304 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f70:	f7fc f9c8 	bl	8002304 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b64      	cmp	r3, #100	@ 0x64
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e207      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	4b5b      	ldr	r3, [pc, #364]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0xc0>
 8005f8e:	e014      	b.n	8005fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7fc f9b8 	bl	8002304 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f98:	f7fc f9b4 	bl	8002304 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b64      	cmp	r3, #100	@ 0x64
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e1f3      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005faa:	4b51      	ldr	r3, [pc, #324]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0xe8>
 8005fb6:	e000      	b.n	8005fba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d063      	beq.n	800608e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fd2:	4b47      	ldr	r3, [pc, #284]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d11c      	bne.n	8006018 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fde:	4b44      	ldr	r3, [pc, #272]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d116      	bne.n	8006018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fea:	4b41      	ldr	r3, [pc, #260]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <HAL_RCC_OscConfig+0x152>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d001      	beq.n	8006002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e1c7      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006002:	4b3b      	ldr	r3, [pc, #236]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4937      	ldr	r1, [pc, #220]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006016:	e03a      	b.n	800608e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d020      	beq.n	8006062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006020:	4b34      	ldr	r3, [pc, #208]	@ (80060f4 <HAL_RCC_OscConfig+0x244>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fc f96d 	bl	8002304 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602e:	f7fc f969 	bl	8002304 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e1a8      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006040:	4b2b      	ldr	r3, [pc, #172]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604c:	4b28      	ldr	r3, [pc, #160]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4925      	ldr	r1, [pc, #148]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]
 8006060:	e015      	b.n	800608e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006062:	4b24      	ldr	r3, [pc, #144]	@ (80060f4 <HAL_RCC_OscConfig+0x244>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fc f94c 	bl	8002304 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006070:	f7fc f948 	bl	8002304 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e187      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006082:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d036      	beq.n	8006108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d016      	beq.n	80060d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a2:	4b15      	ldr	r3, [pc, #84]	@ (80060f8 <HAL_RCC_OscConfig+0x248>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a8:	f7fc f92c 	bl	8002304 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060b0:	f7fc f928 	bl	8002304 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e167      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c2:	4b0b      	ldr	r3, [pc, #44]	@ (80060f0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0x200>
 80060ce:	e01b      	b.n	8006108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060d0:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <HAL_RCC_OscConfig+0x248>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d6:	f7fc f915 	bl	8002304 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060dc:	e00e      	b.n	80060fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060de:	f7fc f911 	bl	8002304 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d907      	bls.n	80060fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e150      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
 80060f0:	40023800 	.word	0x40023800
 80060f4:	42470000 	.word	0x42470000
 80060f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060fc:	4b88      	ldr	r3, [pc, #544]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80060fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ea      	bne.n	80060de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8097 	beq.w	8006244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006116:	2300      	movs	r3, #0
 8006118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800611a:	4b81      	ldr	r3, [pc, #516]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	4b7d      	ldr	r3, [pc, #500]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612e:	4a7c      	ldr	r2, [pc, #496]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 8006130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006134:	6413      	str	r3, [r2, #64]	@ 0x40
 8006136:	4b7a      	ldr	r3, [pc, #488]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006142:	2301      	movs	r3, #1
 8006144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006146:	4b77      	ldr	r3, [pc, #476]	@ (8006324 <HAL_RCC_OscConfig+0x474>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d118      	bne.n	8006184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006152:	4b74      	ldr	r3, [pc, #464]	@ (8006324 <HAL_RCC_OscConfig+0x474>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a73      	ldr	r2, [pc, #460]	@ (8006324 <HAL_RCC_OscConfig+0x474>)
 8006158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800615c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800615e:	f7fc f8d1 	bl	8002304 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006166:	f7fc f8cd 	bl	8002304 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e10c      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	4b6a      	ldr	r3, [pc, #424]	@ (8006324 <HAL_RCC_OscConfig+0x474>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d106      	bne.n	800619a <HAL_RCC_OscConfig+0x2ea>
 800618c:	4b64      	ldr	r3, [pc, #400]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 800618e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006190:	4a63      	ldr	r2, [pc, #396]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	6713      	str	r3, [r2, #112]	@ 0x70
 8006198:	e01c      	b.n	80061d4 <HAL_RCC_OscConfig+0x324>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b05      	cmp	r3, #5
 80061a0:	d10c      	bne.n	80061bc <HAL_RCC_OscConfig+0x30c>
 80061a2:	4b5f      	ldr	r3, [pc, #380]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	4a5e      	ldr	r2, [pc, #376]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061a8:	f043 0304 	orr.w	r3, r3, #4
 80061ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b2:	4a5b      	ldr	r2, [pc, #364]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ba:	e00b      	b.n	80061d4 <HAL_RCC_OscConfig+0x324>
 80061bc:	4b58      	ldr	r3, [pc, #352]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c0:	4a57      	ldr	r2, [pc, #348]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061c8:	4b55      	ldr	r3, [pc, #340]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061cc:	4a54      	ldr	r2, [pc, #336]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061ce:	f023 0304 	bic.w	r3, r3, #4
 80061d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d015      	beq.n	8006208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061dc:	f7fc f892 	bl	8002304 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e2:	e00a      	b.n	80061fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e4:	f7fc f88e 	bl	8002304 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e0cb      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fa:	4b49      	ldr	r3, [pc, #292]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0ee      	beq.n	80061e4 <HAL_RCC_OscConfig+0x334>
 8006206:	e014      	b.n	8006232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006208:	f7fc f87c 	bl	8002304 <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800620e:	e00a      	b.n	8006226 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006210:	f7fc f878 	bl	8002304 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800621e:	4293      	cmp	r3, r2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e0b5      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006226:	4b3e      	ldr	r3, [pc, #248]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1ee      	bne.n	8006210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b39      	ldr	r3, [pc, #228]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	4a38      	ldr	r2, [pc, #224]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 800623e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006242:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80a1 	beq.w	8006390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800624e:	4b34      	ldr	r3, [pc, #208]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 030c 	and.w	r3, r3, #12
 8006256:	2b08      	cmp	r3, #8
 8006258:	d05c      	beq.n	8006314 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d141      	bne.n	80062e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006262:	4b31      	ldr	r3, [pc, #196]	@ (8006328 <HAL_RCC_OscConfig+0x478>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006268:	f7fc f84c 	bl	8002304 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fc f848 	bl	8002304 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e087      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006282:	4b27      	ldr	r3, [pc, #156]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69da      	ldr	r2, [r3, #28]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	019b      	lsls	r3, r3, #6
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	3b01      	subs	r3, #1
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	491b      	ldr	r1, [pc, #108]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006328 <HAL_RCC_OscConfig+0x478>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062be:	f7fc f821 	bl	8002304 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c6:	f7fc f81d 	bl	8002304 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e05c      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d8:	4b11      	ldr	r3, [pc, #68]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x416>
 80062e4:	e054      	b.n	8006390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e6:	4b10      	ldr	r3, [pc, #64]	@ (8006328 <HAL_RCC_OscConfig+0x478>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fc f80a 	bl	8002304 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f4:	f7fc f806 	bl	8002304 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e045      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006306:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <HAL_RCC_OscConfig+0x470>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x444>
 8006312:	e03d      	b.n	8006390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e038      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
 8006320:	40023800 	.word	0x40023800
 8006324:	40007000 	.word	0x40007000
 8006328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800632c:	4b1b      	ldr	r3, [pc, #108]	@ (800639c <HAL_RCC_OscConfig+0x4ec>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d028      	beq.n	800638c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d121      	bne.n	800638c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d11a      	bne.n	800638c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800635c:	4013      	ands	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006364:	4293      	cmp	r3, r2
 8006366:	d111      	bne.n	800638c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	3b01      	subs	r3, #1
 8006376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006378:	429a      	cmp	r2, r3
 800637a:	d107      	bne.n	800638c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006388:	429a      	cmp	r2, r3
 800638a:	d001      	beq.n	8006390 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40023800 	.word	0x40023800

080063a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0cc      	b.n	800654e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063b4:	4b68      	ldr	r3, [pc, #416]	@ (8006558 <HAL_RCC_ClockConfig+0x1b8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d90c      	bls.n	80063dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063c2:	4b65      	ldr	r3, [pc, #404]	@ (8006558 <HAL_RCC_ClockConfig+0x1b8>)
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ca:	4b63      	ldr	r3, [pc, #396]	@ (8006558 <HAL_RCC_ClockConfig+0x1b8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d001      	beq.n	80063dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0b8      	b.n	800654e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d020      	beq.n	800642a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063f4:	4b59      	ldr	r3, [pc, #356]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	4a58      	ldr	r2, [pc, #352]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800640c:	4b53      	ldr	r3, [pc, #332]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	4a52      	ldr	r2, [pc, #328]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006418:	4b50      	ldr	r3, [pc, #320]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	494d      	ldr	r1, [pc, #308]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d044      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643e:	4b47      	ldr	r3, [pc, #284]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d119      	bne.n	800647e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e07f      	b.n	800654e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d003      	beq.n	800645e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800645a:	2b03      	cmp	r3, #3
 800645c:	d107      	bne.n	800646e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800645e:	4b3f      	ldr	r3, [pc, #252]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e06f      	b.n	800654e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646e:	4b3b      	ldr	r3, [pc, #236]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e067      	b.n	800654e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800647e:	4b37      	ldr	r3, [pc, #220]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f023 0203 	bic.w	r2, r3, #3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4934      	ldr	r1, [pc, #208]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	4313      	orrs	r3, r2
 800648e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006490:	f7fb ff38 	bl	8002304 <HAL_GetTick>
 8006494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006496:	e00a      	b.n	80064ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006498:	f7fb ff34 	bl	8002304 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e04f      	b.n	800654e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ae:	4b2b      	ldr	r3, [pc, #172]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 020c 	and.w	r2, r3, #12
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	429a      	cmp	r2, r3
 80064be:	d1eb      	bne.n	8006498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c0:	4b25      	ldr	r3, [pc, #148]	@ (8006558 <HAL_RCC_ClockConfig+0x1b8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d20c      	bcs.n	80064e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ce:	4b22      	ldr	r3, [pc, #136]	@ (8006558 <HAL_RCC_ClockConfig+0x1b8>)
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d6:	4b20      	ldr	r3, [pc, #128]	@ (8006558 <HAL_RCC_ClockConfig+0x1b8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d001      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e032      	b.n	800654e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064f4:	4b19      	ldr	r3, [pc, #100]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4916      	ldr	r1, [pc, #88]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006512:	4b12      	ldr	r3, [pc, #72]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	490e      	ldr	r1, [pc, #56]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	4313      	orrs	r3, r2
 8006524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006526:	f000 f821 	bl	800656c <HAL_RCC_GetSysClockFreq>
 800652a:	4602      	mov	r2, r0
 800652c:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	490a      	ldr	r1, [pc, #40]	@ (8006560 <HAL_RCC_ClockConfig+0x1c0>)
 8006538:	5ccb      	ldrb	r3, [r1, r3]
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	4a09      	ldr	r2, [pc, #36]	@ (8006564 <HAL_RCC_ClockConfig+0x1c4>)
 8006540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006542:	4b09      	ldr	r3, [pc, #36]	@ (8006568 <HAL_RCC_ClockConfig+0x1c8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fb fe98 	bl	800227c <HAL_InitTick>

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	40023c00 	.word	0x40023c00
 800655c:	40023800 	.word	0x40023800
 8006560:	0800caa8 	.word	0x0800caa8
 8006564:	2000001c 	.word	0x2000001c
 8006568:	20000020 	.word	0x20000020

0800656c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800656c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006570:	b094      	sub	sp, #80	@ 0x50
 8006572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006584:	4b79      	ldr	r3, [pc, #484]	@ (800676c <HAL_RCC_GetSysClockFreq+0x200>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 030c 	and.w	r3, r3, #12
 800658c:	2b08      	cmp	r3, #8
 800658e:	d00d      	beq.n	80065ac <HAL_RCC_GetSysClockFreq+0x40>
 8006590:	2b08      	cmp	r3, #8
 8006592:	f200 80e1 	bhi.w	8006758 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_RCC_GetSysClockFreq+0x34>
 800659a:	2b04      	cmp	r3, #4
 800659c:	d003      	beq.n	80065a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800659e:	e0db      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065a0:	4b73      	ldr	r3, [pc, #460]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x204>)
 80065a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065a4:	e0db      	b.n	800675e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065a6:	4b73      	ldr	r3, [pc, #460]	@ (8006774 <HAL_RCC_GetSysClockFreq+0x208>)
 80065a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065aa:	e0d8      	b.n	800675e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065ac:	4b6f      	ldr	r3, [pc, #444]	@ (800676c <HAL_RCC_GetSysClockFreq+0x200>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065b6:	4b6d      	ldr	r3, [pc, #436]	@ (800676c <HAL_RCC_GetSysClockFreq+0x200>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d063      	beq.n	800668a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c2:	4b6a      	ldr	r3, [pc, #424]	@ (800676c <HAL_RCC_GetSysClockFreq+0x200>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	2200      	movs	r2, #0
 80065ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d6:	2300      	movs	r3, #0
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80065de:	4622      	mov	r2, r4
 80065e0:	462b      	mov	r3, r5
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f04f 0100 	mov.w	r1, #0
 80065ea:	0159      	lsls	r1, r3, #5
 80065ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065f0:	0150      	lsls	r0, r2, #5
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4621      	mov	r1, r4
 80065f8:	1a51      	subs	r1, r2, r1
 80065fa:	6139      	str	r1, [r7, #16]
 80065fc:	4629      	mov	r1, r5
 80065fe:	eb63 0301 	sbc.w	r3, r3, r1
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006610:	4659      	mov	r1, fp
 8006612:	018b      	lsls	r3, r1, #6
 8006614:	4651      	mov	r1, sl
 8006616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800661a:	4651      	mov	r1, sl
 800661c:	018a      	lsls	r2, r1, #6
 800661e:	4651      	mov	r1, sl
 8006620:	ebb2 0801 	subs.w	r8, r2, r1
 8006624:	4659      	mov	r1, fp
 8006626:	eb63 0901 	sbc.w	r9, r3, r1
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800663a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800663e:	4690      	mov	r8, r2
 8006640:	4699      	mov	r9, r3
 8006642:	4623      	mov	r3, r4
 8006644:	eb18 0303 	adds.w	r3, r8, r3
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	462b      	mov	r3, r5
 800664c:	eb49 0303 	adc.w	r3, r9, r3
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800665e:	4629      	mov	r1, r5
 8006660:	024b      	lsls	r3, r1, #9
 8006662:	4621      	mov	r1, r4
 8006664:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006668:	4621      	mov	r1, r4
 800666a:	024a      	lsls	r2, r1, #9
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006672:	2200      	movs	r2, #0
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006678:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800667c:	f7f9 fe00 	bl	8000280 <__aeabi_uldivmod>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4613      	mov	r3, r2
 8006686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006688:	e058      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668a:	4b38      	ldr	r3, [pc, #224]	@ (800676c <HAL_RCC_GetSysClockFreq+0x200>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	099b      	lsrs	r3, r3, #6
 8006690:	2200      	movs	r2, #0
 8006692:	4618      	mov	r0, r3
 8006694:	4611      	mov	r1, r2
 8006696:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800669a:	623b      	str	r3, [r7, #32]
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066a4:	4642      	mov	r2, r8
 80066a6:	464b      	mov	r3, r9
 80066a8:	f04f 0000 	mov.w	r0, #0
 80066ac:	f04f 0100 	mov.w	r1, #0
 80066b0:	0159      	lsls	r1, r3, #5
 80066b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b6:	0150      	lsls	r0, r2, #5
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4641      	mov	r1, r8
 80066be:	ebb2 0a01 	subs.w	sl, r2, r1
 80066c2:	4649      	mov	r1, r9
 80066c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066dc:	ebb2 040a 	subs.w	r4, r2, sl
 80066e0:	eb63 050b 	sbc.w	r5, r3, fp
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	00eb      	lsls	r3, r5, #3
 80066ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066f2:	00e2      	lsls	r2, r4, #3
 80066f4:	4614      	mov	r4, r2
 80066f6:	461d      	mov	r5, r3
 80066f8:	4643      	mov	r3, r8
 80066fa:	18e3      	adds	r3, r4, r3
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	464b      	mov	r3, r9
 8006700:	eb45 0303 	adc.w	r3, r5, r3
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006712:	4629      	mov	r1, r5
 8006714:	028b      	lsls	r3, r1, #10
 8006716:	4621      	mov	r1, r4
 8006718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800671c:	4621      	mov	r1, r4
 800671e:	028a      	lsls	r2, r1, #10
 8006720:	4610      	mov	r0, r2
 8006722:	4619      	mov	r1, r3
 8006724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006726:	2200      	movs	r2, #0
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	61fa      	str	r2, [r7, #28]
 800672c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006730:	f7f9 fda6 	bl	8000280 <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4613      	mov	r3, r2
 800673a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800673c:	4b0b      	ldr	r3, [pc, #44]	@ (800676c <HAL_RCC_GetSysClockFreq+0x200>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	3301      	adds	r3, #1
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800674c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800674e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006756:	e002      	b.n	800675e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006758:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x204>)
 800675a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800675c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800675e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006760:	4618      	mov	r0, r3
 8006762:	3750      	adds	r7, #80	@ 0x50
 8006764:	46bd      	mov	sp, r7
 8006766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800676a:	bf00      	nop
 800676c:	40023800 	.word	0x40023800
 8006770:	00f42400 	.word	0x00f42400
 8006774:	007a1200 	.word	0x007a1200

08006778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800677c:	4b03      	ldr	r3, [pc, #12]	@ (800678c <HAL_RCC_GetHCLKFreq+0x14>)
 800677e:	681b      	ldr	r3, [r3, #0]
}
 8006780:	4618      	mov	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	2000001c 	.word	0x2000001c

08006790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006794:	f7ff fff0 	bl	8006778 <HAL_RCC_GetHCLKFreq>
 8006798:	4602      	mov	r2, r0
 800679a:	4b05      	ldr	r3, [pc, #20]	@ (80067b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	0a9b      	lsrs	r3, r3, #10
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	4903      	ldr	r1, [pc, #12]	@ (80067b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067a6:	5ccb      	ldrb	r3, [r1, r3]
 80067a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40023800 	.word	0x40023800
 80067b4:	0800cab8 	.word	0x0800cab8

080067b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067bc:	f7ff ffdc 	bl	8006778 <HAL_RCC_GetHCLKFreq>
 80067c0:	4602      	mov	r2, r0
 80067c2:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	0b5b      	lsrs	r3, r3, #13
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	4903      	ldr	r1, [pc, #12]	@ (80067dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ce:	5ccb      	ldrb	r3, [r1, r3]
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40023800 	.word	0x40023800
 80067dc:	0800cab8 	.word	0x0800cab8

080067e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e07b      	b.n	80068ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d108      	bne.n	800680c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006802:	d009      	beq.n	8006818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	61da      	str	r2, [r3, #28]
 800680a:	e005      	b.n	8006818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fb fadc 	bl	8001df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800684e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689c:	ea42 0103 	orr.w	r1, r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	f003 0104 	and.w	r1, r3, #4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	f003 0210 	and.w	r2, r3, #16
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e041      	b.n	8006988 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fb fab1 	bl	8001e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3304      	adds	r3, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f000 fad9 	bl	8006ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e041      	b.n	8006a26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f839 	bl	8006a2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f000 fa8a 	bl	8006ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <HAL_TIM_PWM_Start+0x24>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	bf14      	ite	ne
 8006a60:	2301      	movne	r3, #1
 8006a62:	2300      	moveq	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	e022      	b.n	8006aae <HAL_TIM_PWM_Start+0x6a>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d109      	bne.n	8006a82 <HAL_TIM_PWM_Start+0x3e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	bf14      	ite	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	2300      	moveq	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	e015      	b.n	8006aae <HAL_TIM_PWM_Start+0x6a>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d109      	bne.n	8006a9c <HAL_TIM_PWM_Start+0x58>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	bf14      	ite	ne
 8006a94:	2301      	movne	r3, #1
 8006a96:	2300      	moveq	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	e008      	b.n	8006aae <HAL_TIM_PWM_Start+0x6a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e07c      	b.n	8006bb0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0x82>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ac4:	e013      	b.n	8006aee <HAL_TIM_PWM_Start+0xaa>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0x92>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ad4:	e00b      	b.n	8006aee <HAL_TIM_PWM_Start+0xaa>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d104      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ae4:	e003      	b.n	8006aee <HAL_TIM_PWM_Start+0xaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2201      	movs	r2, #1
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fce6 	bl	80074c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a2d      	ldr	r2, [pc, #180]	@ (8006bb8 <HAL_TIM_PWM_Start+0x174>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIM_PWM_Start+0xcc>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bbc <HAL_TIM_PWM_Start+0x178>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_PWM_Start+0xd0>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <HAL_TIM_PWM_Start+0xd2>
 8006b14:	2300      	movs	r3, #0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a22      	ldr	r2, [pc, #136]	@ (8006bb8 <HAL_TIM_PWM_Start+0x174>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x136>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b3c:	d01d      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x136>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1f      	ldr	r2, [pc, #124]	@ (8006bc0 <HAL_TIM_PWM_Start+0x17c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x136>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc4 <HAL_TIM_PWM_Start+0x180>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x136>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc8 <HAL_TIM_PWM_Start+0x184>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x136>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a16      	ldr	r2, [pc, #88]	@ (8006bbc <HAL_TIM_PWM_Start+0x178>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x136>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <HAL_TIM_PWM_Start+0x188>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIM_PWM_Start+0x136>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a16      	ldr	r2, [pc, #88]	@ (8006bd0 <HAL_TIM_PWM_Start+0x18c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d111      	bne.n	8006b9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b06      	cmp	r3, #6
 8006b8a:	d010      	beq.n	8006bae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9c:	e007      	b.n	8006bae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0201 	orr.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40010400 	.word	0x40010400
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40001800 	.word	0x40001800

08006bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e0ae      	b.n	8006d50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	f200 809f 	bhi.w	8006d40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c02:	a201      	add	r2, pc, #4	@ (adr r2, 8006c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c3d 	.word	0x08006c3d
 8006c0c:	08006d41 	.word	0x08006d41
 8006c10:	08006d41 	.word	0x08006d41
 8006c14:	08006d41 	.word	0x08006d41
 8006c18:	08006c7d 	.word	0x08006c7d
 8006c1c:	08006d41 	.word	0x08006d41
 8006c20:	08006d41 	.word	0x08006d41
 8006c24:	08006d41 	.word	0x08006d41
 8006c28:	08006cbf 	.word	0x08006cbf
 8006c2c:	08006d41 	.word	0x08006d41
 8006c30:	08006d41 	.word	0x08006d41
 8006c34:	08006d41 	.word	0x08006d41
 8006c38:	08006cff 	.word	0x08006cff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f9f6 	bl	8007034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0208 	orr.w	r2, r2, #8
 8006c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0204 	bic.w	r2, r2, #4
 8006c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6999      	ldr	r1, [r3, #24]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	619a      	str	r2, [r3, #24]
      break;
 8006c7a:	e064      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa46 	bl	8007114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6999      	ldr	r1, [r3, #24]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	619a      	str	r2, [r3, #24]
      break;
 8006cbc:	e043      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fa9b 	bl	8007200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0208 	orr.w	r2, r2, #8
 8006cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0204 	bic.w	r2, r2, #4
 8006ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69d9      	ldr	r1, [r3, #28]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	61da      	str	r2, [r3, #28]
      break;
 8006cfc:	e023      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 faef 	bl	80072e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69d9      	ldr	r1, [r3, #28]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	021a      	lsls	r2, r3, #8
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	61da      	str	r2, [r3, #28]
      break;
 8006d3e:	e002      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	75fb      	strb	r3, [r7, #23]
      break;
 8006d44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_ConfigClockSource+0x1c>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e0b4      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x186>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dac:	d03e      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0xd4>
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db2:	f200 8087 	bhi.w	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dba:	f000 8086 	beq.w	8006eca <HAL_TIM_ConfigClockSource+0x172>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc2:	d87f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc4:	2b70      	cmp	r3, #112	@ 0x70
 8006dc6:	d01a      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0xa6>
 8006dc8:	2b70      	cmp	r3, #112	@ 0x70
 8006dca:	d87b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b60      	cmp	r3, #96	@ 0x60
 8006dce:	d050      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0x11a>
 8006dd0:	2b60      	cmp	r3, #96	@ 0x60
 8006dd2:	d877      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b50      	cmp	r3, #80	@ 0x50
 8006dd6:	d03c      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xfa>
 8006dd8:	2b50      	cmp	r3, #80	@ 0x50
 8006dda:	d873      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b40      	cmp	r3, #64	@ 0x40
 8006dde:	d058      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x13a>
 8006de0:	2b40      	cmp	r3, #64	@ 0x40
 8006de2:	d86f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b30      	cmp	r3, #48	@ 0x30
 8006de6:	d064      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006de8:	2b30      	cmp	r3, #48	@ 0x30
 8006dea:	d86b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d060      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d867      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d05c      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d05a      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006dfc:	e062      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e0e:	f000 fb3b 	bl	8007488 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	609a      	str	r2, [r3, #8]
      break;
 8006e2a:	e04f      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e3c:	f000 fb24 	bl	8007488 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e4e:	609a      	str	r2, [r3, #8]
      break;
 8006e50:	e03c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f000 fa98 	bl	8007394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2150      	movs	r1, #80	@ 0x50
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 faf1 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006e70:	e02c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 fab7 	bl	80073f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2160      	movs	r1, #96	@ 0x60
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fae1 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006e90:	e01c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fa78 	bl	8007394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2140      	movs	r1, #64	@ 0x40
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fad1 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e00c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f000 fac8 	bl	8007452 <TIM_ITRx_SetConfig>
      break;
 8006ec2:	e003      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec8:	e000      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a43      	ldr	r2, [pc, #268]	@ (8007008 <TIM_Base_SetConfig+0x120>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d013      	beq.n	8006f28 <TIM_Base_SetConfig+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f06:	d00f      	beq.n	8006f28 <TIM_Base_SetConfig+0x40>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a40      	ldr	r2, [pc, #256]	@ (800700c <TIM_Base_SetConfig+0x124>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00b      	beq.n	8006f28 <TIM_Base_SetConfig+0x40>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a3f      	ldr	r2, [pc, #252]	@ (8007010 <TIM_Base_SetConfig+0x128>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_Base_SetConfig+0x40>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8007014 <TIM_Base_SetConfig+0x12c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_Base_SetConfig+0x40>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a3d      	ldr	r2, [pc, #244]	@ (8007018 <TIM_Base_SetConfig+0x130>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d108      	bne.n	8006f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a32      	ldr	r2, [pc, #200]	@ (8007008 <TIM_Base_SetConfig+0x120>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d02b      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f48:	d027      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800700c <TIM_Base_SetConfig+0x124>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d023      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a2e      	ldr	r2, [pc, #184]	@ (8007010 <TIM_Base_SetConfig+0x128>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d01f      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007014 <TIM_Base_SetConfig+0x12c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01b      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a2c      	ldr	r2, [pc, #176]	@ (8007018 <TIM_Base_SetConfig+0x130>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d017      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800701c <TIM_Base_SetConfig+0x134>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a2a      	ldr	r2, [pc, #168]	@ (8007020 <TIM_Base_SetConfig+0x138>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a29      	ldr	r2, [pc, #164]	@ (8007024 <TIM_Base_SetConfig+0x13c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a28      	ldr	r2, [pc, #160]	@ (8007028 <TIM_Base_SetConfig+0x140>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a27      	ldr	r2, [pc, #156]	@ (800702c <TIM_Base_SetConfig+0x144>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a26      	ldr	r2, [pc, #152]	@ (8007030 <TIM_Base_SetConfig+0x148>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d108      	bne.n	8006fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8007008 <TIM_Base_SetConfig+0x120>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d003      	beq.n	8006fda <TIM_Base_SetConfig+0xf2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a10      	ldr	r2, [pc, #64]	@ (8007018 <TIM_Base_SetConfig+0x130>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d103      	bne.n	8006fe2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f043 0204 	orr.w	r2, r3, #4
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	601a      	str	r2, [r3, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40010000 	.word	0x40010000
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40010400 	.word	0x40010400
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800
 8007028:	40001800 	.word	0x40001800
 800702c:	40001c00 	.word	0x40001c00
 8007030:	40002000 	.word	0x40002000

08007034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f023 0201 	bic.w	r2, r3, #1
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0303 	bic.w	r3, r3, #3
 800706a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f023 0302 	bic.w	r3, r3, #2
 800707c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a20      	ldr	r2, [pc, #128]	@ (800710c <TIM_OC1_SetConfig+0xd8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_OC1_SetConfig+0x64>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1f      	ldr	r2, [pc, #124]	@ (8007110 <TIM_OC1_SetConfig+0xdc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d10c      	bne.n	80070b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0308 	bic.w	r3, r3, #8
 800709e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f023 0304 	bic.w	r3, r3, #4
 80070b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a15      	ldr	r2, [pc, #84]	@ (800710c <TIM_OC1_SetConfig+0xd8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_OC1_SetConfig+0x8e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a14      	ldr	r2, [pc, #80]	@ (8007110 <TIM_OC1_SetConfig+0xdc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d111      	bne.n	80070e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	621a      	str	r2, [r3, #32]
}
 8007100:	bf00      	nop
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	40010000 	.word	0x40010000
 8007110:	40010400 	.word	0x40010400

08007114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f023 0210 	bic.w	r2, r3, #16
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800714a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f023 0320 	bic.w	r3, r3, #32
 800715e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a22      	ldr	r2, [pc, #136]	@ (80071f8 <TIM_OC2_SetConfig+0xe4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC2_SetConfig+0x68>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a21      	ldr	r2, [pc, #132]	@ (80071fc <TIM_OC2_SetConfig+0xe8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d10d      	bne.n	8007198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007196:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a17      	ldr	r2, [pc, #92]	@ (80071f8 <TIM_OC2_SetConfig+0xe4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_OC2_SetConfig+0x94>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a16      	ldr	r2, [pc, #88]	@ (80071fc <TIM_OC2_SetConfig+0xe8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d113      	bne.n	80071d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40010400 	.word	0x40010400

08007200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a21      	ldr	r2, [pc, #132]	@ (80072e0 <TIM_OC3_SetConfig+0xe0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d003      	beq.n	8007266 <TIM_OC3_SetConfig+0x66>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a20      	ldr	r2, [pc, #128]	@ (80072e4 <TIM_OC3_SetConfig+0xe4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d10d      	bne.n	8007282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800726c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	4313      	orrs	r3, r2
 8007278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a16      	ldr	r2, [pc, #88]	@ (80072e0 <TIM_OC3_SetConfig+0xe0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d003      	beq.n	8007292 <TIM_OC3_SetConfig+0x92>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a15      	ldr	r2, [pc, #84]	@ (80072e4 <TIM_OC3_SetConfig+0xe4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d113      	bne.n	80072ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	621a      	str	r2, [r3, #32]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40010400 	.word	0x40010400

080072e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	031b      	lsls	r3, r3, #12
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a12      	ldr	r2, [pc, #72]	@ (800738c <TIM_OC4_SetConfig+0xa4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_OC4_SetConfig+0x68>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a11      	ldr	r2, [pc, #68]	@ (8007390 <TIM_OC4_SetConfig+0xa8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d109      	bne.n	8007364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	019b      	lsls	r3, r3, #6
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40010000 	.word	0x40010000
 8007390:	40010400 	.word	0x40010400

08007394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 0201 	bic.w	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f023 030a 	bic.w	r3, r3, #10
 80073d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b087      	sub	sp, #28
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f023 0210 	bic.w	r2, r3, #16
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800741c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	031b      	lsls	r3, r3, #12
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800742e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	f043 0307 	orr.w	r3, r3, #7
 8007474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	609a      	str	r2, [r3, #8]
}
 800747c:	bf00      	nop
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	021a      	lsls	r2, r3, #8
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	609a      	str	r2, [r3, #8]
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	2201      	movs	r2, #1
 80074dc:	fa02 f303 	lsl.w	r3, r2, r3
 80074e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1a      	ldr	r2, [r3, #32]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	43db      	mvns	r3, r3
 80074ea:	401a      	ands	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007500:	431a      	orrs	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007528:	2302      	movs	r3, #2
 800752a:	e05a      	b.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a21      	ldr	r2, [pc, #132]	@ (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d022      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007578:	d01d      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1d      	ldr	r2, [pc, #116]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d018      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1b      	ldr	r2, [pc, #108]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1a      	ldr	r2, [pc, #104]	@ (80075fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a18      	ldr	r2, [pc, #96]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a17      	ldr	r2, [pc, #92]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a15      	ldr	r2, [pc, #84]	@ (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10c      	bne.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40010000 	.word	0x40010000
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40000800 	.word	0x40000800
 80075fc:	40000c00 	.word	0x40000c00
 8007600:	40010400 	.word	0x40010400
 8007604:	40014000 	.word	0x40014000
 8007608:	40001800 	.word	0x40001800

0800760c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e042      	b.n	80076a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fa fc80 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2224      	movs	r2, #36	@ 0x24
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800764e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fddd 	bl	8008210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	4613      	mov	r3, r2
 80076ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d175      	bne.n	80077b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_UART_Transmit+0x2c>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e06e      	b.n	80077ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2221      	movs	r2, #33	@ 0x21
 80076e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ea:	f7fa fe0b 	bl	8002304 <HAL_GetTick>
 80076ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	88fa      	ldrh	r2, [r7, #6]
 80076f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	88fa      	ldrh	r2, [r7, #6]
 80076fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007704:	d108      	bne.n	8007718 <HAL_UART_Transmit+0x6c>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	e003      	b.n	8007720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007720:	e02e      	b.n	8007780 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2200      	movs	r2, #0
 800772a:	2180      	movs	r1, #128	@ 0x80
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fb41 	bl	8007db4 <UART_WaitOnFlagUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e03a      	b.n	80077ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3302      	adds	r3, #2
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	e007      	b.n	8007772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	3301      	adds	r3, #1
 8007770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1cb      	bne.n	8007722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2200      	movs	r2, #0
 8007792:	2140      	movs	r1, #64	@ 0x40
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 fb0d 	bl	8007db4 <UART_WaitOnFlagUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e006      	b.n	80077ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	e000      	b.n	80077ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80077b8:	2302      	movs	r3, #2
  }
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	4613      	mov	r3, r2
 80077ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d112      	bne.n	8007802 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_UART_Receive_IT+0x26>
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e00b      	b.n	8007804 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	461a      	mov	r2, r3
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fb34 	bl	8007e66 <UART_Start_Receive_IT>
 80077fe:	4603      	mov	r3, r0
 8007800:	e000      	b.n	8007804 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007802:	2302      	movs	r3, #2
  }
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b0ba      	sub	sp, #232	@ 0xe8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007832:	2300      	movs	r3, #0
 8007834:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007838:	2300      	movs	r3, #0
 800783a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800784a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10f      	bne.n	8007872 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007856:	f003 0320 	and.w	r3, r3, #32
 800785a:	2b00      	cmp	r3, #0
 800785c:	d009      	beq.n	8007872 <HAL_UART_IRQHandler+0x66>
 800785e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fc11 	bl	8008092 <UART_Receive_IT>
      return;
 8007870:	e273      	b.n	8007d5a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 80de 	beq.w	8007a38 <HAL_UART_IRQHandler+0x22c>
 800787c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d106      	bne.n	8007896 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80d1 	beq.w	8007a38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <HAL_UART_IRQHandler+0xae>
 80078a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b2:	f043 0201 	orr.w	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <HAL_UART_IRQHandler+0xd2>
 80078c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d6:	f043 0202 	orr.w	r2, r3, #2
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <HAL_UART_IRQHandler+0xf6>
 80078ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fa:	f043 0204 	orr.w	r2, r3, #4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d011      	beq.n	8007932 <HAL_UART_IRQHandler+0x126>
 800790e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d105      	bne.n	8007926 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800791a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792a:	f043 0208 	orr.w	r2, r3, #8
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 820a 	beq.w	8007d50 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <HAL_UART_IRQHandler+0x14e>
 8007948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fb9c 	bl	8008092 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	bf0c      	ite	eq
 8007968:	2301      	moveq	r3, #1
 800796a:	2300      	movne	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <HAL_UART_IRQHandler+0x17a>
 800797e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d04f      	beq.n	8007a26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 faa7 	bl	8007eda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007996:	2b40      	cmp	r3, #64	@ 0x40
 8007998:	d141      	bne.n	8007a1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3314      	adds	r3, #20
 80079a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3314      	adds	r3, #20
 80079c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1d9      	bne.n	800799a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d013      	beq.n	8007a16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f2:	4a8a      	ldr	r2, [pc, #552]	@ (8007c1c <HAL_UART_IRQHandler+0x410>)
 80079f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fb fb6e 	bl	80030dc <HAL_DMA_Abort_IT>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d016      	beq.n	8007a34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a10:	4610      	mov	r0, r2
 8007a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	e00e      	b.n	8007a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9b6 	bl	8007d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	e00a      	b.n	8007a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f9b2 	bl	8007d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a24:	e006      	b.n	8007a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9ae 	bl	8007d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a32:	e18d      	b.n	8007d50 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	bf00      	nop
    return;
 8007a36:	e18b      	b.n	8007d50 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	f040 8167 	bne.w	8007d10 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8160 	beq.w	8007d10 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 8159 	beq.w	8007d10 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7e:	2b40      	cmp	r3, #64	@ 0x40
 8007a80:	f040 80ce 	bne.w	8007c20 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80a9 	beq.w	8007bec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	f080 80a2 	bcs.w	8007bec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aba:	f000 8088 	beq.w	8007bce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007aea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1d9      	bne.n	8007abe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3314      	adds	r3, #20
 8007b10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3314      	adds	r3, #20
 8007b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e1      	bne.n	8007b0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e3      	bne.n	8007b46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	330c      	adds	r3, #12
 8007b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b9e:	f023 0310 	bic.w	r3, r3, #16
 8007ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e3      	bne.n	8007b8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fb fa17 	bl	8002ffc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f8d9 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007bea:	e0b3      	b.n	8007d54 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	f040 80ad 	bne.w	8007d54 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c04:	f040 80a6 	bne.w	8007d54 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8c1 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
      return;
 8007c1a:	e09b      	b.n	8007d54 <HAL_UART_IRQHandler+0x548>
 8007c1c:	08007fa1 	.word	0x08007fa1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 808e 	beq.w	8007d58 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8089 	beq.w	8007d58 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e3      	bne.n	8007c46 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3314      	adds	r3, #20
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3314      	adds	r3, #20
 8007c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ca2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e3      	bne.n	8007c7e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	330c      	adds	r3, #12
 8007cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	330c      	adds	r3, #12
 8007ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ce8:	61fa      	str	r2, [r7, #28]
 8007cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	69b9      	ldr	r1, [r7, #24]
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e3      	bne.n	8007cc4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f847 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d0e:	e023      	b.n	8007d58 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d009      	beq.n	8007d30 <HAL_UART_IRQHandler+0x524>
 8007d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f94a 	bl	8007fc2 <UART_Transmit_IT>
    return;
 8007d2e:	e014      	b.n	8007d5a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00e      	beq.n	8007d5a <HAL_UART_IRQHandler+0x54e>
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f98a 	bl	8008062 <UART_EndTransmit_IT>
    return;
 8007d4e:	e004      	b.n	8007d5a <HAL_UART_IRQHandler+0x54e>
    return;
 8007d50:	bf00      	nop
 8007d52:	e002      	b.n	8007d5a <HAL_UART_IRQHandler+0x54e>
      return;
 8007d54:	bf00      	nop
 8007d56:	e000      	b.n	8007d5a <HAL_UART_IRQHandler+0x54e>
      return;
 8007d58:	bf00      	nop
  }
}
 8007d5a:	37e8      	adds	r7, #232	@ 0xe8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc4:	e03b      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dcc:	d037      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dce:	f7fa fa99 	bl	8002304 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	6a3a      	ldr	r2, [r7, #32]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d302      	bcc.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e03a      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d023      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b80      	cmp	r3, #128	@ 0x80
 8007dfa:	d020      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b40      	cmp	r3, #64	@ 0x40
 8007e00:	d01d      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d116      	bne.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f857 	bl	8007eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2208      	movs	r2, #8
 8007e30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e00f      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4013      	ands	r3, r2
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	bf0c      	ite	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	2300      	movne	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	461a      	mov	r2, r3
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d0b4      	beq.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	4613      	mov	r3, r2
 8007e72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	88fa      	ldrh	r2, [r7, #6]
 8007e7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	88fa      	ldrh	r2, [r7, #6]
 8007e84:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2222      	movs	r2, #34	@ 0x22
 8007e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68da      	ldr	r2, [r3, #12]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eaa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0220 	orr.w	r2, r2, #32
 8007eca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b095      	sub	sp, #84	@ 0x54
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f02:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e5      	bne.n	8007ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3314      	adds	r3, #20
 8007f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e5      	bne.n	8007f16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d119      	bne.n	8007f86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f023 0310 	bic.w	r3, r3, #16
 8007f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f72:	61ba      	str	r2, [r7, #24]
 8007f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6979      	ldr	r1, [r7, #20]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e5      	bne.n	8007f52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f94:	bf00      	nop
 8007f96:	3754      	adds	r7, #84	@ 0x54
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff fee7 	bl	8007d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fba:	bf00      	nop
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b21      	cmp	r3, #33	@ 0x21
 8007fd4:	d13e      	bne.n	8008054 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fde:	d114      	bne.n	800800a <UART_Transmit_IT+0x48>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d110      	bne.n	800800a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ffc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	1c9a      	adds	r2, r3, #2
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	621a      	str	r2, [r3, #32]
 8008008:	e008      	b.n	800801c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	1c59      	adds	r1, r3, #1
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6211      	str	r1, [r2, #32]
 8008014:	781a      	ldrb	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29b      	uxth	r3, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4619      	mov	r1, r3
 800802a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10f      	bne.n	8008050 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800803e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800804e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008078:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff fe6c 	bl	8007d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b08c      	sub	sp, #48	@ 0x30
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b22      	cmp	r3, #34	@ 0x22
 80080ac:	f040 80aa 	bne.w	8008204 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080b8:	d115      	bne.n	80080e6 <UART_Receive_IT+0x54>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d111      	bne.n	80080e6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080de:	1c9a      	adds	r2, r3, #2
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80080e4:	e024      	b.n	8008130 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f4:	d007      	beq.n	8008106 <UART_Receive_IT+0x74>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <UART_Receive_IT+0x82>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	b2da      	uxtb	r2, r3
 800810e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	e008      	b.n	8008126 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008120:	b2da      	uxtb	r2, r3
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29b      	uxth	r3, r3
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	4619      	mov	r1, r3
 800813e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008140:	2b00      	cmp	r3, #0
 8008142:	d15d      	bne.n	8008200 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0220 	bic.w	r2, r2, #32
 8008152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695a      	ldr	r2, [r3, #20]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2220      	movs	r2, #32
 8008178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008186:	2b01      	cmp	r3, #1
 8008188:	d135      	bne.n	80081f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	613b      	str	r3, [r7, #16]
   return(result);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f023 0310 	bic.w	r3, r3, #16
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	330c      	adds	r3, #12
 80081ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b0:	623a      	str	r2, [r7, #32]
 80081b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	69f9      	ldr	r1, [r7, #28]
 80081b6:	6a3a      	ldr	r2, [r7, #32]
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e5      	bne.n	8008190 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0310 	and.w	r3, r3, #16
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d10a      	bne.n	80081e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7ff fdd4 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
 80081f4:	e002      	b.n	80081fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff fdbc 	bl	8007d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e002      	b.n	8008206 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e000      	b.n	8008206 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008204:	2302      	movs	r3, #2
  }
}
 8008206:	4618      	mov	r0, r3
 8008208:	3730      	adds	r7, #48	@ 0x30
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008214:	b0c0      	sub	sp, #256	@ 0x100
 8008216:	af00      	add	r7, sp, #0
 8008218:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	68d9      	ldr	r1, [r3, #12]
 800822e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	ea40 0301 	orr.w	r3, r0, r1
 8008238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800823a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	431a      	orrs	r2, r3
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	431a      	orrs	r2, r3
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008268:	f021 010c 	bic.w	r1, r1, #12
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008276:	430b      	orrs	r3, r1
 8008278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800827a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800828a:	6999      	ldr	r1, [r3, #24]
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	ea40 0301 	orr.w	r3, r0, r1
 8008296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b8f      	ldr	r3, [pc, #572]	@ (80084dc <UART_SetConfig+0x2cc>)
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d005      	beq.n	80082b0 <UART_SetConfig+0xa0>
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	4b8d      	ldr	r3, [pc, #564]	@ (80084e0 <UART_SetConfig+0x2d0>)
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d104      	bne.n	80082ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082b0:	f7fe fa82 	bl	80067b8 <HAL_RCC_GetPCLK2Freq>
 80082b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082b8:	e003      	b.n	80082c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ba:	f7fe fa69 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 80082be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082cc:	f040 810c 	bne.w	80084e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	1891      	adds	r1, r2, r2
 80082e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80082ea:	415b      	adcs	r3, r3
 80082ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082f2:	4621      	mov	r1, r4
 80082f4:	eb12 0801 	adds.w	r8, r2, r1
 80082f8:	4629      	mov	r1, r5
 80082fa:	eb43 0901 	adc.w	r9, r3, r1
 80082fe:	f04f 0200 	mov.w	r2, #0
 8008302:	f04f 0300 	mov.w	r3, #0
 8008306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800830a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800830e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008312:	4690      	mov	r8, r2
 8008314:	4699      	mov	r9, r3
 8008316:	4623      	mov	r3, r4
 8008318:	eb18 0303 	adds.w	r3, r8, r3
 800831c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008320:	462b      	mov	r3, r5
 8008322:	eb49 0303 	adc.w	r3, r9, r3
 8008326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008336:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800833a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800833e:	460b      	mov	r3, r1
 8008340:	18db      	adds	r3, r3, r3
 8008342:	653b      	str	r3, [r7, #80]	@ 0x50
 8008344:	4613      	mov	r3, r2
 8008346:	eb42 0303 	adc.w	r3, r2, r3
 800834a:	657b      	str	r3, [r7, #84]	@ 0x54
 800834c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008354:	f7f7 ff94 	bl	8000280 <__aeabi_uldivmod>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4b61      	ldr	r3, [pc, #388]	@ (80084e4 <UART_SetConfig+0x2d4>)
 800835e:	fba3 2302 	umull	r2, r3, r3, r2
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	011c      	lsls	r4, r3, #4
 8008366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800836a:	2200      	movs	r2, #0
 800836c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008370:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008378:	4642      	mov	r2, r8
 800837a:	464b      	mov	r3, r9
 800837c:	1891      	adds	r1, r2, r2
 800837e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008380:	415b      	adcs	r3, r3
 8008382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008388:	4641      	mov	r1, r8
 800838a:	eb12 0a01 	adds.w	sl, r2, r1
 800838e:	4649      	mov	r1, r9
 8008390:	eb43 0b01 	adc.w	fp, r3, r1
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083a8:	4692      	mov	sl, r2
 80083aa:	469b      	mov	fp, r3
 80083ac:	4643      	mov	r3, r8
 80083ae:	eb1a 0303 	adds.w	r3, sl, r3
 80083b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083b6:	464b      	mov	r3, r9
 80083b8:	eb4b 0303 	adc.w	r3, fp, r3
 80083bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80083d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083d4:	460b      	mov	r3, r1
 80083d6:	18db      	adds	r3, r3, r3
 80083d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083da:	4613      	mov	r3, r2
 80083dc:	eb42 0303 	adc.w	r3, r2, r3
 80083e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80083ea:	f7f7 ff49 	bl	8000280 <__aeabi_uldivmod>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	4b3b      	ldr	r3, [pc, #236]	@ (80084e4 <UART_SetConfig+0x2d4>)
 80083f6:	fba3 2301 	umull	r2, r3, r3, r1
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	2264      	movs	r2, #100	@ 0x64
 80083fe:	fb02 f303 	mul.w	r3, r2, r3
 8008402:	1acb      	subs	r3, r1, r3
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800840a:	4b36      	ldr	r3, [pc, #216]	@ (80084e4 <UART_SetConfig+0x2d4>)
 800840c:	fba3 2302 	umull	r2, r3, r3, r2
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008418:	441c      	add	r4, r3
 800841a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800841e:	2200      	movs	r2, #0
 8008420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008424:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	1891      	adds	r1, r2, r2
 8008432:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008434:	415b      	adcs	r3, r3
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800843c:	4641      	mov	r1, r8
 800843e:	1851      	adds	r1, r2, r1
 8008440:	6339      	str	r1, [r7, #48]	@ 0x30
 8008442:	4649      	mov	r1, r9
 8008444:	414b      	adcs	r3, r1
 8008446:	637b      	str	r3, [r7, #52]	@ 0x34
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	f04f 0300 	mov.w	r3, #0
 8008450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008454:	4659      	mov	r1, fp
 8008456:	00cb      	lsls	r3, r1, #3
 8008458:	4651      	mov	r1, sl
 800845a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800845e:	4651      	mov	r1, sl
 8008460:	00ca      	lsls	r2, r1, #3
 8008462:	4610      	mov	r0, r2
 8008464:	4619      	mov	r1, r3
 8008466:	4603      	mov	r3, r0
 8008468:	4642      	mov	r2, r8
 800846a:	189b      	adds	r3, r3, r2
 800846c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008470:	464b      	mov	r3, r9
 8008472:	460a      	mov	r2, r1
 8008474:	eb42 0303 	adc.w	r3, r2, r3
 8008478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008488:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800848c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008490:	460b      	mov	r3, r1
 8008492:	18db      	adds	r3, r3, r3
 8008494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008496:	4613      	mov	r3, r2
 8008498:	eb42 0303 	adc.w	r3, r2, r3
 800849c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800849e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80084a6:	f7f7 feeb 	bl	8000280 <__aeabi_uldivmod>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <UART_SetConfig+0x2d4>)
 80084b0:	fba3 1302 	umull	r1, r3, r3, r2
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	2164      	movs	r1, #100	@ 0x64
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	3332      	adds	r3, #50	@ 0x32
 80084c2:	4a08      	ldr	r2, [pc, #32]	@ (80084e4 <UART_SetConfig+0x2d4>)
 80084c4:	fba2 2303 	umull	r2, r3, r2, r3
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	f003 0207 	and.w	r2, r3, #7
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4422      	add	r2, r4
 80084d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084d8:	e106      	b.n	80086e8 <UART_SetConfig+0x4d8>
 80084da:	bf00      	nop
 80084dc:	40011000 	.word	0x40011000
 80084e0:	40011400 	.word	0x40011400
 80084e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084ec:	2200      	movs	r2, #0
 80084ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80084fa:	4642      	mov	r2, r8
 80084fc:	464b      	mov	r3, r9
 80084fe:	1891      	adds	r1, r2, r2
 8008500:	6239      	str	r1, [r7, #32]
 8008502:	415b      	adcs	r3, r3
 8008504:	627b      	str	r3, [r7, #36]	@ 0x24
 8008506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800850a:	4641      	mov	r1, r8
 800850c:	1854      	adds	r4, r2, r1
 800850e:	4649      	mov	r1, r9
 8008510:	eb43 0501 	adc.w	r5, r3, r1
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	00eb      	lsls	r3, r5, #3
 800851e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008522:	00e2      	lsls	r2, r4, #3
 8008524:	4614      	mov	r4, r2
 8008526:	461d      	mov	r5, r3
 8008528:	4643      	mov	r3, r8
 800852a:	18e3      	adds	r3, r4, r3
 800852c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008530:	464b      	mov	r3, r9
 8008532:	eb45 0303 	adc.w	r3, r5, r3
 8008536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008546:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800854a:	f04f 0200 	mov.w	r2, #0
 800854e:	f04f 0300 	mov.w	r3, #0
 8008552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008556:	4629      	mov	r1, r5
 8008558:	008b      	lsls	r3, r1, #2
 800855a:	4621      	mov	r1, r4
 800855c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008560:	4621      	mov	r1, r4
 8008562:	008a      	lsls	r2, r1, #2
 8008564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008568:	f7f7 fe8a 	bl	8000280 <__aeabi_uldivmod>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4b60      	ldr	r3, [pc, #384]	@ (80086f4 <UART_SetConfig+0x4e4>)
 8008572:	fba3 2302 	umull	r2, r3, r3, r2
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	011c      	lsls	r4, r3, #4
 800857a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800857e:	2200      	movs	r2, #0
 8008580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800858c:	4642      	mov	r2, r8
 800858e:	464b      	mov	r3, r9
 8008590:	1891      	adds	r1, r2, r2
 8008592:	61b9      	str	r1, [r7, #24]
 8008594:	415b      	adcs	r3, r3
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800859c:	4641      	mov	r1, r8
 800859e:	1851      	adds	r1, r2, r1
 80085a0:	6139      	str	r1, [r7, #16]
 80085a2:	4649      	mov	r1, r9
 80085a4:	414b      	adcs	r3, r1
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	f04f 0200 	mov.w	r2, #0
 80085ac:	f04f 0300 	mov.w	r3, #0
 80085b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085b4:	4659      	mov	r1, fp
 80085b6:	00cb      	lsls	r3, r1, #3
 80085b8:	4651      	mov	r1, sl
 80085ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085be:	4651      	mov	r1, sl
 80085c0:	00ca      	lsls	r2, r1, #3
 80085c2:	4610      	mov	r0, r2
 80085c4:	4619      	mov	r1, r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	4642      	mov	r2, r8
 80085ca:	189b      	adds	r3, r3, r2
 80085cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085d0:	464b      	mov	r3, r9
 80085d2:	460a      	mov	r2, r1
 80085d4:	eb42 0303 	adc.w	r3, r2, r3
 80085d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80085f4:	4649      	mov	r1, r9
 80085f6:	008b      	lsls	r3, r1, #2
 80085f8:	4641      	mov	r1, r8
 80085fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085fe:	4641      	mov	r1, r8
 8008600:	008a      	lsls	r2, r1, #2
 8008602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008606:	f7f7 fe3b 	bl	8000280 <__aeabi_uldivmod>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4611      	mov	r1, r2
 8008610:	4b38      	ldr	r3, [pc, #224]	@ (80086f4 <UART_SetConfig+0x4e4>)
 8008612:	fba3 2301 	umull	r2, r3, r3, r1
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	2264      	movs	r2, #100	@ 0x64
 800861a:	fb02 f303 	mul.w	r3, r2, r3
 800861e:	1acb      	subs	r3, r1, r3
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	3332      	adds	r3, #50	@ 0x32
 8008624:	4a33      	ldr	r2, [pc, #204]	@ (80086f4 <UART_SetConfig+0x4e4>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008630:	441c      	add	r4, r3
 8008632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008636:	2200      	movs	r2, #0
 8008638:	673b      	str	r3, [r7, #112]	@ 0x70
 800863a:	677a      	str	r2, [r7, #116]	@ 0x74
 800863c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	1891      	adds	r1, r2, r2
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	415b      	adcs	r3, r3
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008650:	4641      	mov	r1, r8
 8008652:	1851      	adds	r1, r2, r1
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	4649      	mov	r1, r9
 8008658:	414b      	adcs	r3, r1
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	f04f 0200 	mov.w	r2, #0
 8008660:	f04f 0300 	mov.w	r3, #0
 8008664:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008668:	4659      	mov	r1, fp
 800866a:	00cb      	lsls	r3, r1, #3
 800866c:	4651      	mov	r1, sl
 800866e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008672:	4651      	mov	r1, sl
 8008674:	00ca      	lsls	r2, r1, #3
 8008676:	4610      	mov	r0, r2
 8008678:	4619      	mov	r1, r3
 800867a:	4603      	mov	r3, r0
 800867c:	4642      	mov	r2, r8
 800867e:	189b      	adds	r3, r3, r2
 8008680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008682:	464b      	mov	r3, r9
 8008684:	460a      	mov	r2, r1
 8008686:	eb42 0303 	adc.w	r3, r2, r3
 800868a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	663b      	str	r3, [r7, #96]	@ 0x60
 8008696:	667a      	str	r2, [r7, #100]	@ 0x64
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80086a4:	4649      	mov	r1, r9
 80086a6:	008b      	lsls	r3, r1, #2
 80086a8:	4641      	mov	r1, r8
 80086aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ae:	4641      	mov	r1, r8
 80086b0:	008a      	lsls	r2, r1, #2
 80086b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80086b6:	f7f7 fde3 	bl	8000280 <__aeabi_uldivmod>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <UART_SetConfig+0x4e4>)
 80086c0:	fba3 1302 	umull	r1, r3, r3, r2
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	2164      	movs	r1, #100	@ 0x64
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	3332      	adds	r3, #50	@ 0x32
 80086d2:	4a08      	ldr	r2, [pc, #32]	@ (80086f4 <UART_SetConfig+0x4e4>)
 80086d4:	fba2 2303 	umull	r2, r3, r2, r3
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	f003 020f 	and.w	r2, r3, #15
 80086de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4422      	add	r2, r4
 80086e6:	609a      	str	r2, [r3, #8]
}
 80086e8:	bf00      	nop
 80086ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086ee:	46bd      	mov	sp, r7
 80086f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086f4:	51eb851f 	.word	0x51eb851f

080086f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086f8:	b084      	sub	sp, #16
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	f107 001c 	add.w	r0, r7, #28
 8008706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800870a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800870e:	2b01      	cmp	r3, #1
 8008710:	d123      	bne.n	800875a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008716:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800873a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800873e:	2b01      	cmp	r3, #1
 8008740:	d105      	bne.n	800874e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9dc 	bl	8008b0c <USB_CoreReset>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
 8008758:	e01b      	b.n	8008792 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f9d0 	bl	8008b0c <USB_CoreReset>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008770:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008774:	2b00      	cmp	r3, #0
 8008776:	d106      	bne.n	8008786 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	639a      	str	r2, [r3, #56]	@ 0x38
 8008784:	e005      	b.n	8008792 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008792:	7fbb      	ldrb	r3, [r7, #30]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d10b      	bne.n	80087b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f043 0206 	orr.w	r2, r3, #6
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f043 0220 	orr.w	r2, r3, #32
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087bc:	b004      	add	sp, #16
 80087be:	4770      	bx	lr

080087c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f043 0201 	orr.w	r2, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f023 0201 	bic.w	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d115      	bne.n	8008852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008832:	200a      	movs	r0, #10
 8008834:	f7f9 fd72 	bl	800231c <HAL_Delay>
      ms += 10U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	330a      	adds	r3, #10
 800883c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f956 	bl	8008af0 <USB_GetMode>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d01e      	beq.n	8008888 <USB_SetCurrentMode+0x84>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2bc7      	cmp	r3, #199	@ 0xc7
 800884e:	d9f0      	bls.n	8008832 <USB_SetCurrentMode+0x2e>
 8008850:	e01a      	b.n	8008888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d115      	bne.n	8008884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008864:	200a      	movs	r0, #10
 8008866:	f7f9 fd59 	bl	800231c <HAL_Delay>
      ms += 10U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	330a      	adds	r3, #10
 800886e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f93d 	bl	8008af0 <USB_GetMode>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <USB_SetCurrentMode+0x84>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008880:	d9f0      	bls.n	8008864 <USB_SetCurrentMode+0x60>
 8008882:	e001      	b.n	8008888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e005      	b.n	8008894 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2bc8      	cmp	r3, #200	@ 0xc8
 800888c:	d101      	bne.n	8008892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e000      	b.n	8008894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088b6:	d901      	bls.n	80088bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e01b      	b.n	80088f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	daf2      	bge.n	80088aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	019b      	lsls	r3, r3, #6
 80088cc:	f043 0220 	orr.w	r2, r3, #32
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088e0:	d901      	bls.n	80088e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e006      	b.n	80088f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d0f0      	beq.n	80088d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008918:	d901      	bls.n	800891e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e018      	b.n	8008950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	daf2      	bge.n	800890c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2210      	movs	r2, #16
 800892e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3301      	adds	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800893c:	d901      	bls.n	8008942 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e006      	b.n	8008950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	f003 0310 	and.w	r3, r3, #16
 800894a:	2b10      	cmp	r3, #16
 800894c:	d0f0      	beq.n	8008930 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800895c:	b480      	push	{r7}
 800895e:	b089      	sub	sp, #36	@ 0x24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	460b      	mov	r3, r1
 800896c:	71fb      	strb	r3, [r7, #7]
 800896e:	4613      	mov	r3, r2
 8008970:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800897a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800897e:	2b00      	cmp	r3, #0
 8008980:	d123      	bne.n	80089ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008982:	88bb      	ldrh	r3, [r7, #4]
 8008984:	3303      	adds	r3, #3
 8008986:	089b      	lsrs	r3, r3, #2
 8008988:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800898a:	2300      	movs	r3, #0
 800898c:	61bb      	str	r3, [r7, #24]
 800898e:	e018      	b.n	80089c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	031a      	lsls	r2, r3, #12
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	4413      	add	r3, r2
 8008998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899c:	461a      	mov	r2, r3
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	3301      	adds	r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	3301      	adds	r3, #1
 80089ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	3301      	adds	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	3301      	adds	r3, #1
 80089ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	3301      	adds	r3, #1
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d3e2      	bcc.n	8008990 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3724      	adds	r7, #36	@ 0x24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089d8:	b480      	push	{r7}
 80089da:	b08b      	sub	sp, #44	@ 0x2c
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	089b      	lsrs	r3, r3, #2
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089fe:	2300      	movs	r3, #0
 8008a00:	623b      	str	r3, [r7, #32]
 8008a02:	e014      	b.n	8008a2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	3301      	adds	r3, #1
 8008a14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	3301      	adds	r3, #1
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	3301      	adds	r3, #1
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	3301      	adds	r3, #1
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	623b      	str	r3, [r7, #32]
 8008a2e:	6a3a      	ldr	r2, [r7, #32]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d3e6      	bcc.n	8008a04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a36:	8bfb      	ldrh	r3, [r7, #30]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01e      	beq.n	8008a7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a46:	461a      	mov	r2, r3
 8008a48:	f107 0310 	add.w	r3, r7, #16
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	701a      	strb	r2, [r3, #0]
      i++;
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	3301      	adds	r3, #1
 8008a66:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008a6e:	8bfb      	ldrh	r3, [r7, #30]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a74:	8bfb      	ldrh	r3, [r7, #30]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1ea      	bne.n	8008a50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	372c      	adds	r7, #44	@ 0x2c
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008ace:	78fb      	ldrb	r3, [r7, #3]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	f003 0301 	and.w	r3, r3, #1
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b24:	d901      	bls.n	8008b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e022      	b.n	8008b70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	daf2      	bge.n	8008b18 <USB_CoreReset+0xc>

  count = 10U;
 8008b32:	230a      	movs	r3, #10
 8008b34:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008b36:	e002      	b.n	8008b3e <USB_CoreReset+0x32>
  {
    count--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1f9      	bne.n	8008b38 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	f043 0201 	orr.w	r2, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b5c:	d901      	bls.n	8008b62 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e006      	b.n	8008b70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d0f0      	beq.n	8008b50 <USB_CoreReset+0x44>

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d119      	bne.n	8008c06 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10a      	bne.n	8008bf0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008be8:	f043 0304 	orr.w	r3, r3, #4
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	e014      	b.n	8008c1a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bfe:	f023 0304 	bic.w	r3, r3, #4
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	e009      	b.n	8008c1a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008c14:	f023 0304 	bic.w	r3, r3, #4
 8008c18:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c1a:	2110      	movs	r1, #16
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff fe3d 	bl	800889c <USB_FlushTxFifo>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fe67 	bl	8008900 <USB_FlushRxFifo>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	e015      	b.n	8008c6e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c54:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c62:	461a      	mov	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008c72:	461a      	mov	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d3e3      	bcc.n	8008c42 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c86:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a18      	ldr	r2, [pc, #96]	@ (8008cec <USB_HostInit+0x170>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d10b      	bne.n	8008ca8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c96:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a15      	ldr	r2, [pc, #84]	@ (8008cf0 <USB_HostInit+0x174>)
 8008c9c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	@ (8008cf4 <USB_HostInit+0x178>)
 8008ca2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008ca6:	e009      	b.n	8008cbc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2280      	movs	r2, #128	@ 0x80
 8008cac:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a11      	ldr	r2, [pc, #68]	@ (8008cf8 <USB_HostInit+0x17c>)
 8008cb2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a11      	ldr	r2, [pc, #68]	@ (8008cfc <USB_HostInit+0x180>)
 8008cb8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d105      	bne.n	8008cd0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f043 0210 	orr.w	r2, r3, #16
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <USB_HostInit+0x184>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ce8:	b004      	add	sp, #16
 8008cea:	4770      	bx	lr
 8008cec:	40040000 	.word	0x40040000
 8008cf0:	01000200 	.word	0x01000200
 8008cf4:	00e00300 	.word	0x00e00300
 8008cf8:	00600080 	.word	0x00600080
 8008cfc:	004000e0 	.word	0x004000e0
 8008d00:	a3200008 	.word	0xa3200008

08008d04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	68f9      	ldr	r1, [r7, #12]
 8008d38:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d107      	bne.n	8008d56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008d52:	6053      	str	r3, [r2, #4]
 8008d54:	e00c      	b.n	8008d70 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d107      	bne.n	8008d6c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d62:	461a      	mov	r2, r3
 8008d64:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008d68:	6053      	str	r3, [r2, #4]
 8008d6a:	e001      	b.n	8008d70 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e000      	b.n	8008d72 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d9e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008dae:	2064      	movs	r0, #100	@ 0x64
 8008db0:	f7f9 fab4 	bl	800231c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dc0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008dc2:	200a      	movs	r0, #10
 8008dc4:	f7f9 faaa 	bl	800231c <HAL_Delay>

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008df6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <USB_DriveVbus+0x44>
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d106      	bne.n	8008e16 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e14:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e20:	d109      	bne.n	8008e36 <USB_DriveVbus+0x64>
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e34:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	0c5b      	lsrs	r3, r3, #17
 8008e62:	f003 0303 	and.w	r3, r3, #3
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	b29b      	uxth	r3, r3
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	70fb      	strb	r3, [r7, #3]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70bb      	strb	r3, [r7, #2]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ec8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008eca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d87c      	bhi.n	8008fcc <USB_HC_Init+0x138>
 8008ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <USB_HC_Init+0x44>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008f8f 	.word	0x08008f8f
 8008ee0:	08008ee9 	.word	0x08008ee9
 8008ee4:	08008f51 	.word	0x08008f51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008efa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008efc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	da10      	bge.n	8008f26 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f22:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008f24:	e055      	b.n	8008fd2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a6f      	ldr	r2, [pc, #444]	@ (80090e8 <USB_HC_Init+0x254>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d151      	bne.n	8008fd2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f4c:	60d3      	str	r3, [r2, #12]
      break;
 8008f4e:	e040      	b.n	8008fd2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008f62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da34      	bge.n	8008fd6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f8c:	e023      	b.n	8008fd6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f240 2325 	movw	r3, #549	@ 0x225
 8008fa0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008fa2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da17      	bge.n	8008fda <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fc4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008fc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008fca:	e006      	b.n	8008fda <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	77fb      	strb	r3, [r7, #31]
      break;
 8008fd0:	e004      	b.n	8008fdc <USB_HC_Init+0x148>
      break;
 8008fd2:	bf00      	nop
 8008fd4:	e002      	b.n	8008fdc <USB_HC_Init+0x148>
      break;
 8008fd6:	bf00      	nop
 8008fd8:	e000      	b.n	8008fdc <USB_HC_Init+0x148>
      break;
 8008fda:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe8:	461a      	mov	r2, r3
 8008fea:	2300      	movs	r3, #0
 8008fec:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	0151      	lsls	r1, r2, #5
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	440a      	add	r2, r1
 8009004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009008:	f043 0302 	orr.w	r3, r3, #2
 800900c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009014:	699a      	ldr	r2, [r3, #24]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	2101      	movs	r1, #1
 800901e:	fa01 f303 	lsl.w	r3, r1, r3
 8009022:	6939      	ldr	r1, [r7, #16]
 8009024:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009028:	4313      	orrs	r3, r2
 800902a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009038:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800903c:	2b00      	cmp	r3, #0
 800903e:	da03      	bge.n	8009048 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e001      	b.n	800904c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fef9 	bl	8008e44 <USB_GetHostSpeed>
 8009052:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009054:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009058:	2b02      	cmp	r3, #2
 800905a:	d106      	bne.n	800906a <USB_HC_Init+0x1d6>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d003      	beq.n	800906a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	e001      	b.n	800906e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800906e:	787b      	ldrb	r3, [r7, #1]
 8009070:	059b      	lsls	r3, r3, #22
 8009072:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009076:	78bb      	ldrb	r3, [r7, #2]
 8009078:	02db      	lsls	r3, r3, #11
 800907a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800907e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009080:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009084:	049b      	lsls	r3, r3, #18
 8009086:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800908a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800908c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800908e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009092:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	431a      	orrs	r2, r3
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80090a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090ac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80090ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d003      	beq.n	80090be <USB_HC_Init+0x22a>
 80090b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d10f      	bne.n	80090de <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	78fa      	ldrb	r2, [r7, #3]
 80090ce:	0151      	lsls	r1, r2, #5
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	440a      	add	r2, r1
 80090d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80090de:	7ffb      	ldrb	r3, [r7, #31]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	40040000 	.word	0x40040000

080090ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	@ 0x30
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009108:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4a5d      	ldr	r2, [pc, #372]	@ (8009284 <USB_HC_StartXfer+0x198>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d12f      	bne.n	8009172 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d11c      	bne.n	8009152 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	7c9b      	ldrb	r3, [r3, #18]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <USB_HC_StartXfer+0x3c>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	7c9b      	ldrb	r3, [r3, #18]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d124      	bne.n	8009172 <USB_HC_StartXfer+0x86>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	799b      	ldrb	r3, [r3, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d120      	bne.n	8009172 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	4413      	add	r3, r2
 8009138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	440a      	add	r2, r1
 8009146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800914a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800914e:	60d3      	str	r3, [r2, #12]
 8009150:	e00f      	b.n	8009172 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	791b      	ldrb	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <USB_HC_StartXfer+0x86>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	795b      	ldrb	r3, [r3, #5]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d107      	bne.n	8009172 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	4619      	mov	r1, r3
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fb6b 	bl	8009844 <USB_DoPing>
        return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e232      	b.n	80095d8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	799b      	ldrb	r3, [r3, #6]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d158      	bne.n	800922c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800917a:	2301      	movs	r3, #1
 800917c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	78db      	ldrb	r3, [r3, #3]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d007      	beq.n	8009196 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009186:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	8a92      	ldrh	r2, [r2, #20]
 800918c:	fb03 f202 	mul.w	r2, r3, r2
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	61da      	str	r2, [r3, #28]
 8009194:	e07c      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	7c9b      	ldrb	r3, [r3, #18]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d130      	bne.n	8009200 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	2bbc      	cmp	r3, #188	@ 0xbc
 80091a4:	d918      	bls.n	80091d8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	8a9b      	ldrh	r3, [r3, #20]
 80091aa:	461a      	mov	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d003      	beq.n	80091c8 <USB_HC_StartXfer+0xdc>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d103      	bne.n	80091d0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2202      	movs	r2, #2
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	e05f      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2201      	movs	r2, #1
 80091d4:	60da      	str	r2, [r3, #12]
 80091d6:	e05b      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6a1a      	ldr	r2, [r3, #32]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d007      	beq.n	80091f8 <USB_HC_StartXfer+0x10c>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d003      	beq.n	80091f8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2204      	movs	r2, #4
 80091f4:	60da      	str	r2, [r3, #12]
 80091f6:	e04b      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2203      	movs	r2, #3
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	e047      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d10d      	bne.n	8009222 <USB_HC_StartXfer+0x136>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	8a92      	ldrh	r2, [r2, #20]
 800920e:	4293      	cmp	r3, r2
 8009210:	d907      	bls.n	8009222 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	8a92      	ldrh	r2, [r2, #20]
 8009218:	fb03 f202 	mul.w	r2, r3, r2
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	61da      	str	r2, [r3, #28]
 8009220:	e036      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6a1a      	ldr	r2, [r3, #32]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	61da      	str	r2, [r3, #28]
 800922a:	e031      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d018      	beq.n	8009266 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	8a92      	ldrh	r2, [r2, #20]
 800923c:	4413      	add	r3, r2
 800923e:	3b01      	subs	r3, #1
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	8a92      	ldrh	r2, [r2, #20]
 8009244:	fbb3 f3f2 	udiv	r3, r3, r2
 8009248:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800924a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800924c:	8b7b      	ldrh	r3, [r7, #26]
 800924e:	429a      	cmp	r2, r3
 8009250:	d90b      	bls.n	800926a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009252:	8b7b      	ldrh	r3, [r7, #26]
 8009254:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009256:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	8a92      	ldrh	r2, [r2, #20]
 800925c:	fb03 f202 	mul.w	r2, r3, r2
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	61da      	str	r2, [r3, #28]
 8009264:	e001      	b.n	800926a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009266:	2301      	movs	r3, #1
 8009268:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	78db      	ldrb	r3, [r3, #3]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009272:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	8a92      	ldrh	r2, [r2, #20]
 8009278:	fb03 f202 	mul.w	r2, r3, r2
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	61da      	str	r2, [r3, #28]
 8009280:	e006      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
 8009282:	bf00      	nop
 8009284:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800929a:	04d9      	lsls	r1, r3, #19
 800929c:	4ba3      	ldr	r3, [pc, #652]	@ (800952c <USB_HC_StartXfer+0x440>)
 800929e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80092a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	7d9b      	ldrb	r3, [r3, #22]
 80092a6:	075b      	lsls	r3, r3, #29
 80092a8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80092ac:	69f9      	ldr	r1, [r7, #28]
 80092ae:	0148      	lsls	r0, r1, #5
 80092b0:	6a39      	ldr	r1, [r7, #32]
 80092b2:	4401      	add	r1, r0
 80092b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80092ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d009      	beq.n	80092d6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6999      	ldr	r1, [r3, #24]
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d2:	460a      	mov	r2, r1
 80092d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bf0c      	ite	eq
 80092e6:	2301      	moveq	r3, #1
 80092e8:	2300      	movne	r3, #0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	6a3a      	ldr	r2, [r7, #32]
 8009302:	440a      	add	r2, r1
 8009304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009308:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800930c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	4413      	add	r3, r2
 8009316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	7e7b      	ldrb	r3, [r7, #25]
 800931e:	075b      	lsls	r3, r3, #29
 8009320:	69f9      	ldr	r1, [r7, #28]
 8009322:	0148      	lsls	r0, r1, #5
 8009324:	6a39      	ldr	r1, [r7, #32]
 8009326:	4401      	add	r1, r0
 8009328:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800932c:	4313      	orrs	r3, r2
 800932e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	799b      	ldrb	r3, [r3, #6]
 8009334:	2b01      	cmp	r3, #1
 8009336:	f040 80c3 	bne.w	80094c0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	7c5b      	ldrb	r3, [r3, #17]
 800933e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009344:	4313      	orrs	r3, r2
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	0151      	lsls	r1, r2, #5
 800934a:	6a3a      	ldr	r2, [r7, #32]
 800934c:	440a      	add	r2, r1
 800934e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009352:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009356:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	4413      	add	r3, r2
 8009360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	0151      	lsls	r1, r2, #5
 800936a:	6a3a      	ldr	r2, [r7, #32]
 800936c:	440a      	add	r2, r1
 800936e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009372:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009376:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	79db      	ldrb	r3, [r3, #7]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d123      	bne.n	80093c8 <USB_HC_StartXfer+0x2dc>
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	78db      	ldrb	r3, [r3, #3]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d11f      	bne.n	80093c8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	4413      	add	r3, r2
 8009390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	6a3a      	ldr	r2, [r7, #32]
 800939c:	440a      	add	r2, r1
 800939e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	6a3a      	ldr	r2, [r7, #32]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	7c9b      	ldrb	r3, [r3, #18]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d003      	beq.n	80093d8 <USB_HC_StartXfer+0x2ec>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	7c9b      	ldrb	r3, [r3, #18]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d117      	bne.n	8009408 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d113      	bne.n	8009408 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	78db      	ldrb	r3, [r3, #3]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d10f      	bne.n	8009408 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	6a3a      	ldr	r2, [r7, #32]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009406:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	7c9b      	ldrb	r3, [r3, #18]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d162      	bne.n	80094d6 <USB_HC_StartXfer+0x3ea>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	78db      	ldrb	r3, [r3, #3]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d15e      	bne.n	80094d6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	3b01      	subs	r3, #1
 800941e:	2b03      	cmp	r3, #3
 8009420:	d858      	bhi.n	80094d4 <USB_HC_StartXfer+0x3e8>
 8009422:	a201      	add	r2, pc, #4	@ (adr r2, 8009428 <USB_HC_StartXfer+0x33c>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009439 	.word	0x08009439
 800942c:	0800945b 	.word	0x0800945b
 8009430:	0800947d 	.word	0x0800947d
 8009434:	0800949f 	.word	0x0800949f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	4413      	add	r3, r2
 8009440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	0151      	lsls	r1, r2, #5
 800944a:	6a3a      	ldr	r2, [r7, #32]
 800944c:	440a      	add	r2, r1
 800944e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009456:	6053      	str	r3, [r2, #4]
          break;
 8009458:	e03d      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	4413      	add	r3, r2
 8009462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	6a3a      	ldr	r2, [r7, #32]
 800946e:	440a      	add	r2, r1
 8009470:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009474:	f043 030e 	orr.w	r3, r3, #14
 8009478:	6053      	str	r3, [r2, #4]
          break;
 800947a:	e02c      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	4413      	add	r3, r2
 8009484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	69fa      	ldr	r2, [r7, #28]
 800948c:	0151      	lsls	r1, r2, #5
 800948e:	6a3a      	ldr	r2, [r7, #32]
 8009490:	440a      	add	r2, r1
 8009492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800949a:	6053      	str	r3, [r2, #4]
          break;
 800949c:	e01b      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	6a3a      	ldr	r2, [r7, #32]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094bc:	6053      	str	r3, [r2, #4]
          break;
 80094be:	e00a      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094cc:	461a      	mov	r2, r3
 80094ce:	2300      	movs	r3, #0
 80094d0:	6053      	str	r3, [r2, #4]
 80094d2:	e000      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>
          break;
 80094d4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80094ec:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	78db      	ldrb	r3, [r3, #3]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	e003      	b.n	8009508 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009506:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800950e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	4413      	add	r3, r2
 8009518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800951c:	461a      	mov	r2, r3
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	e055      	b.n	80095d8 <USB_HC_StartXfer+0x4ec>
 800952c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	78db      	ldrb	r3, [r3, #3]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d14e      	bne.n	80095d6 <USB_HC_StartXfer+0x4ea>
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d04a      	beq.n	80095d6 <USB_HC_StartXfer+0x4ea>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	79db      	ldrb	r3, [r3, #7]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d146      	bne.n	80095d6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	7c9b      	ldrb	r3, [r3, #18]
 800954c:	2b03      	cmp	r3, #3
 800954e:	d831      	bhi.n	80095b4 <USB_HC_StartXfer+0x4c8>
 8009550:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <USB_HC_StartXfer+0x46c>)
 8009552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009556:	bf00      	nop
 8009558:	08009569 	.word	0x08009569
 800955c:	0800958d 	.word	0x0800958d
 8009560:	08009569 	.word	0x08009569
 8009564:	0800958d 	.word	0x0800958d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	3303      	adds	r3, #3
 800956e:	089b      	lsrs	r3, r3, #2
 8009570:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009572:	8afa      	ldrh	r2, [r7, #22]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	b29b      	uxth	r3, r3
 800957a:	429a      	cmp	r2, r3
 800957c:	d91c      	bls.n	80095b8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	f043 0220 	orr.w	r2, r3, #32
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	619a      	str	r2, [r3, #24]
        }
        break;
 800958a:	e015      	b.n	80095b8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	3303      	adds	r3, #3
 8009592:	089b      	lsrs	r3, r3, #2
 8009594:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009596:	8afa      	ldrh	r2, [r7, #22]
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d90a      	bls.n	80095bc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80095b2:	e003      	b.n	80095bc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80095b4:	bf00      	nop
 80095b6:	e002      	b.n	80095be <USB_HC_StartXfer+0x4d2>
        break;
 80095b8:	bf00      	nop
 80095ba:	e000      	b.n	80095be <USB_HC_StartXfer+0x4d2>
        break;
 80095bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6999      	ldr	r1, [r3, #24]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	785a      	ldrb	r2, [r3, #1]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2000      	movs	r0, #0
 80095ce:	9000      	str	r0, [sp, #0]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff f9c3 	bl	800895c <USB_WritePacket>
  }

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3728      	adds	r7, #40	@ 0x28
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	b29b      	uxth	r3, r3
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009602:	b480      	push	{r7}
 8009604:	b089      	sub	sp, #36	@ 0x24
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4413      	add	r3, r2
 8009622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	0c9b      	lsrs	r3, r3, #18
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	4413      	add	r3, r2
 8009638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	0fdb      	lsrs	r3, r3, #31
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	0fdb      	lsrs	r3, r3, #31
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b20      	cmp	r3, #32
 8009666:	d10d      	bne.n	8009684 <USB_HC_Halt+0x82>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <USB_HC_Halt+0x82>
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d002      	beq.n	8009680 <USB_HC_Halt+0x7e>
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b03      	cmp	r3, #3
 800967e:	d101      	bne.n	8009684 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	e0d8      	b.n	8009836 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <USB_HC_Halt+0x8e>
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d173      	bne.n	8009778 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d14a      	bne.n	8009752 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d133      	bne.n	8009730 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	0151      	lsls	r1, r2, #5
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	440a      	add	r2, r1
 80096de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096e6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	0151      	lsls	r1, r2, #5
 80096fa:	69fa      	ldr	r2, [r7, #28]
 80096fc:	440a      	add	r2, r1
 80096fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009706:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3301      	adds	r3, #1
 800970c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009714:	d82e      	bhi.n	8009774 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800972c:	d0ec      	beq.n	8009708 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800972e:	e081      	b.n	8009834 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	4413      	add	r3, r2
 8009738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	440a      	add	r2, r1
 8009746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800974a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800974e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009750:	e070      	b.n	8009834 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	440a      	add	r2, r1
 8009768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800976c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009770:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009772:	e05f      	b.n	8009834 <USB_HC_Halt+0x232>
            break;
 8009774:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009776:	e05d      	b.n	8009834 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	69ba      	ldr	r2, [r7, #24]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	440a      	add	r2, r1
 800978e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009792:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009796:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d133      	bne.n	8009810 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	69fa      	ldr	r2, [r7, #28]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097e6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097f4:	d81d      	bhi.n	8009832 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800980c:	d0ec      	beq.n	80097e8 <USB_HC_Halt+0x1e6>
 800980e:	e011      	b.n	8009834 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	440a      	add	r2, r1
 8009826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800982a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	e000      	b.n	8009834 <USB_HC_Halt+0x232>
          break;
 8009832:	bf00      	nop
    }
  }

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3724      	adds	r7, #36	@ 0x24
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
	...

08009844 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009858:	2301      	movs	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	04da      	lsls	r2, r3, #19
 8009860:	4b15      	ldr	r3, [pc, #84]	@ (80098b8 <USB_DoPing+0x74>)
 8009862:	4013      	ands	r3, r2
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	0151      	lsls	r1, r2, #5
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	440a      	add	r2, r1
 800986c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009870:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009874:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800988c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009894:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	4413      	add	r3, r2
 800989e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a2:	461a      	mov	r2, r3
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	1ff80000 	.word	0x1ff80000

080098bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7fe ff86 	bl	80087e2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098d6:	2110      	movs	r1, #16
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fe ffdf 	bl	800889c <USB_FlushTxFifo>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff f809 	bl	8008900 <USB_FlushRxFifo>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80098f8:	2300      	movs	r3, #0
 80098fa:	61bb      	str	r3, [r7, #24]
 80098fc:	e01f      	b.n	800993e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009914:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800991c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009924:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	4413      	add	r3, r2
 800992e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009932:	461a      	mov	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	3301      	adds	r3, #1
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	2b0f      	cmp	r3, #15
 8009942:	d9dc      	bls.n	80098fe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009944:	2300      	movs	r3, #0
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e034      	b.n	80099b4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	4413      	add	r3, r2
 8009952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009960:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009968:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009970:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800997e:	461a      	mov	r2, r3
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3301      	adds	r3, #1
 8009988:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009990:	d80c      	bhi.n	80099ac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	4413      	add	r3, r2
 800999a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099a8:	d0ec      	beq.n	8009984 <USB_StopHost+0xc8>
 80099aa:	e000      	b.n	80099ae <USB_StopHost+0xf2>
        break;
 80099ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	3301      	adds	r3, #1
 80099b2:	61bb      	str	r3, [r7, #24]
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d9c7      	bls.n	800994a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099c0:	461a      	mov	r2, r3
 80099c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7fe fef5 	bl	80087c0 <USB_EnableGlobalInt>

  return ret;
 80099d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80099e0:	b590      	push	{r4, r7, lr}
 80099e2:	b089      	sub	sp, #36	@ 0x24
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80099e8:	2301      	movs	r3, #1
 80099ea:	2202      	movs	r2, #2
 80099ec:	2102      	movs	r1, #2
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fc83 	bl	800a2fa <USBH_FindInterface>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	2bff      	cmp	r3, #255	@ 0xff
 80099fc:	d002      	beq.n	8009a04 <USBH_CDC_InterfaceInit+0x24>
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d901      	bls.n	8009a08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a04:	2302      	movs	r3, #2
 8009a06:	e13d      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fc58 	bl	800a2c2 <USBH_SelectInterface>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e131      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009a26:	2050      	movs	r0, #80	@ 0x50
 8009a28:	f002 fb6a 	bl	800c100 <malloc>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a40:	2302      	movs	r3, #2
 8009a42:	e11f      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a44:	2250      	movs	r2, #80	@ 0x50
 8009a46:	2100      	movs	r1, #0
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f002 fc39 	bl	800c2c0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	211a      	movs	r1, #26
 8009a54:	fb01 f303 	mul.w	r3, r1, r3
 8009a58:	4413      	add	r3, r2
 8009a5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da15      	bge.n	8009a92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	211a      	movs	r1, #26
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	211a      	movs	r1, #26
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a8c:	881a      	ldrh	r2, [r3, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 ffc4 	bl	800ba26 <USBH_AllocPipe>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	7819      	ldrb	r1, [r3, #0]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	7858      	ldrb	r0, [r3, #1]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	8952      	ldrh	r2, [r2, #10]
 8009abe:	9202      	str	r2, [sp, #8]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	9201      	str	r2, [sp, #4]
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4623      	mov	r3, r4
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 ff7c 	bl	800b9c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f002 fa8b 	bl	800bff4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	210a      	movs	r1, #10
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc08 	bl	800a2fa <USBH_FindInterface>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	2bff      	cmp	r3, #255	@ 0xff
 8009af2:	d002      	beq.n	8009afa <USBH_CDC_InterfaceInit+0x11a>
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d901      	bls.n	8009afe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009afa:	2302      	movs	r3, #2
 8009afc:	e0c2      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	211a      	movs	r1, #26
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	4413      	add	r3, r2
 8009b0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b25b      	sxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da16      	bge.n	8009b44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	211a      	movs	r1, #26
 8009b1c:	fb01 f303 	mul.w	r3, r1, r3
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b26:	781a      	ldrb	r2, [r3, #0]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	211a      	movs	r1, #26
 8009b32:	fb01 f303 	mul.w	r3, r1, r3
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b3c:	881a      	ldrh	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	835a      	strh	r2, [r3, #26]
 8009b42:	e015      	b.n	8009b70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	211a      	movs	r1, #26
 8009b4a:	fb01 f303 	mul.w	r3, r1, r3
 8009b4e:	4413      	add	r3, r2
 8009b50:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	211a      	movs	r1, #26
 8009b60:	fb01 f303 	mul.w	r3, r1, r3
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b6a:	881a      	ldrh	r2, [r3, #0]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	211a      	movs	r1, #26
 8009b76:	fb01 f303 	mul.w	r3, r1, r3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	da16      	bge.n	8009bb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	211a      	movs	r1, #26
 8009b8e:	fb01 f303 	mul.w	r3, r1, r3
 8009b92:	4413      	add	r3, r2
 8009b94:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	211a      	movs	r1, #26
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009bae:	881a      	ldrh	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	835a      	strh	r2, [r3, #26]
 8009bb4:	e015      	b.n	8009be2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	211a      	movs	r1, #26
 8009bbc:	fb01 f303 	mul.w	r3, r1, r3
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009bc6:	781a      	ldrb	r2, [r3, #0]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	211a      	movs	r1, #26
 8009bd2:	fb01 f303 	mul.w	r3, r1, r3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009bdc:	881a      	ldrh	r2, [r3, #0]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	7b9b      	ldrb	r3, [r3, #14]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 ff1c 	bl	800ba26 <USBH_AllocPipe>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	7bdb      	ldrb	r3, [r3, #15]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 ff12 	bl	800ba26 <USBH_AllocPipe>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	7b59      	ldrb	r1, [r3, #13]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	7b98      	ldrb	r0, [r3, #14]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	8b12      	ldrh	r2, [r2, #24]
 8009c22:	9202      	str	r2, [sp, #8]
 8009c24:	2202      	movs	r2, #2
 8009c26:	9201      	str	r2, [sp, #4]
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 feca 	bl	800b9c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	7b19      	ldrb	r1, [r3, #12]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	7bd8      	ldrb	r0, [r3, #15]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	8b52      	ldrh	r2, [r2, #26]
 8009c4c:	9202      	str	r2, [sp, #8]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	9201      	str	r2, [sp, #4]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4623      	mov	r3, r4
 8009c56:	4602      	mov	r2, r0
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 feb5 	bl	800b9c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	7b5b      	ldrb	r3, [r3, #13]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f002 f9c0 	bl	800bff4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	7b1b      	ldrb	r3, [r3, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f002 f9b9 	bl	800bff4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd90      	pop	{r4, r7, pc}

08009c8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00e      	beq.n	8009cc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 feaa 	bl	800ba06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 fed5 	bl	800ba68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	7b1b      	ldrb	r3, [r3, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	7b1b      	ldrb	r3, [r3, #12]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fe97 	bl	800ba06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	7b1b      	ldrb	r3, [r3, #12]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 fec2 	bl	800ba68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	7b5b      	ldrb	r3, [r3, #13]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00e      	beq.n	8009d10 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	7b5b      	ldrb	r3, [r3, #13]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 fe84 	bl	800ba06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	7b5b      	ldrb	r3, [r3, #13]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 feaf 	bl	800ba68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f002 f9f3 	bl	800c110 <free>
    phost->pActiveClass->pData = 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d30:	2200      	movs	r2, #0
 8009d32:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3340      	adds	r3, #64	@ 0x40
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8b1 	bl	8009ebe <GetLineCoding>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d105      	bne.n	8009d72 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009d72:	7afb      	ldrb	r3, [r7, #11]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d84:	2301      	movs	r3, #1
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009d9c:	2b04      	cmp	r3, #4
 8009d9e:	d877      	bhi.n	8009e90 <USBH_CDC_Process+0x114>
 8009da0:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <USBH_CDC_Process+0x2c>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009dbd 	.word	0x08009dbd
 8009dac:	08009dc3 	.word	0x08009dc3
 8009db0:	08009df3 	.word	0x08009df3
 8009db4:	08009e67 	.word	0x08009e67
 8009db8:	08009e75 	.word	0x08009e75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc0:	e06d      	b.n	8009e9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f897 	bl	8009efc <SetLineCoding>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d104      	bne.n	8009de2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009de0:	e058      	b.n	8009e94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d055      	beq.n	8009e94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2204      	movs	r2, #4
 8009dec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009df0:	e050      	b.n	8009e94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	3340      	adds	r3, #64	@ 0x40
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f860 	bl	8009ebe <GetLineCoding>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d126      	bne.n	8009e56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e1a:	791b      	ldrb	r3, [r3, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d13b      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d133      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d12b      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d124      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f958 	bl	800a104 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e54:	e020      	b.n	8009e98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d01d      	beq.n	8009e98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009e64:	e018      	b.n	8009e98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f867 	bl	8009f3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8da 	bl	800a026 <CDC_ProcessReception>
      break;
 8009e72:	e014      	b.n	8009e9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009e74:	2100      	movs	r1, #0
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 f81e 	bl	800aeb8 <USBH_ClrFeature>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009e8e:	e005      	b.n	8009e9c <USBH_CDC_Process+0x120>

    default:
      break;
 8009e90:	bf00      	nop
 8009e92:	e004      	b.n	8009e9e <USBH_CDC_Process+0x122>
      break;
 8009e94:	bf00      	nop
 8009e96:	e002      	b.n	8009e9e <USBH_CDC_Process+0x122>
      break;
 8009e98:	bf00      	nop
 8009e9a:	e000      	b.n	8009e9e <USBH_CDC_Process+0x122>
      break;
 8009e9c:	bf00      	nop

  }

  return status;
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	22a1      	movs	r2, #161	@ 0xa1
 8009ecc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2221      	movs	r2, #33	@ 0x21
 8009ed2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2207      	movs	r2, #7
 8009ee4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2207      	movs	r2, #7
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fb17 	bl	800b520 <USBH_CtlReq>
 8009ef2:	4603      	mov	r3, r0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2221      	movs	r2, #33	@ 0x21
 8009f0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2207      	movs	r2, #7
 8009f22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2207      	movs	r2, #7
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 faf8 	bl	800b520 <USBH_CtlReq>
 8009f30:	4603      	mov	r3, r0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b086      	sub	sp, #24
 8009f3e:	af02      	add	r7, sp, #8
 8009f40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d002      	beq.n	8009f60 <CDC_ProcessTransmission+0x26>
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d023      	beq.n	8009fa6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009f5e:	e05e      	b.n	800a01e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	8b12      	ldrh	r2, [r2, #24]
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d90b      	bls.n	8009f84 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	69d9      	ldr	r1, [r3, #28]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8b1a      	ldrh	r2, [r3, #24]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	7b5b      	ldrb	r3, [r3, #13]
 8009f78:	2001      	movs	r0, #1
 8009f7a:	9000      	str	r0, [sp, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 fce0 	bl	800b942 <USBH_BulkSendData>
 8009f82:	e00b      	b.n	8009f9c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	7b5b      	ldrb	r3, [r3, #13]
 8009f92:	2001      	movs	r0, #1
 8009f94:	9000      	str	r0, [sp, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 fcd3 	bl	800b942 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009fa4:	e03b      	b.n	800a01e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	7b5b      	ldrb	r3, [r3, #13]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 fff7 	bl	800bfa0 <USBH_LL_GetURBState>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d128      	bne.n	800a00e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	8b12      	ldrh	r2, [r2, #24]
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d90e      	bls.n	8009fe6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	8b12      	ldrh	r2, [r2, #24]
 8009fd0:	1a9a      	subs	r2, r3, r2
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	8b12      	ldrh	r2, [r2, #24]
 8009fde:	441a      	add	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	61da      	str	r2, [r3, #28]
 8009fe4:	e002      	b.n	8009fec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d004      	beq.n	8009ffe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009ffc:	e00e      	b.n	800a01c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f868 	bl	800a0dc <USBH_CDC_TransmitCallback>
      break;
 800a00c:	e006      	b.n	800a01c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a00e:	7afb      	ldrb	r3, [r7, #11]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d103      	bne.n	800a01c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a01c:	bf00      	nop
  }
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a038:	2300      	movs	r3, #0
 800a03a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a042:	2b03      	cmp	r3, #3
 800a044:	d002      	beq.n	800a04c <CDC_ProcessReception+0x26>
 800a046:	2b04      	cmp	r3, #4
 800a048:	d00e      	beq.n	800a068 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800a04a:	e043      	b.n	800a0d4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	6a19      	ldr	r1, [r3, #32]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	8b5a      	ldrh	r2, [r3, #26]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	7b1b      	ldrb	r3, [r3, #12]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 fc97 	bl	800b98c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2204      	movs	r2, #4
 800a062:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a066:	e035      	b.n	800a0d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	7b1b      	ldrb	r3, [r3, #12]
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 ff96 	bl	800bfa0 <USBH_LL_GetURBState>
 800a074:	4603      	mov	r3, r0
 800a076:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a078:	7cfb      	ldrb	r3, [r7, #19]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d129      	bne.n	800a0d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	7b1b      	ldrb	r3, [r3, #12]
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fef9 	bl	800be7c <USBH_LL_GetLastXferSize>
 800a08a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	429a      	cmp	r2, r3
 800a094:	d016      	beq.n	800a0c4 <CDC_ProcessReception+0x9e>
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	8b5b      	ldrh	r3, [r3, #26]
 800a09a:	461a      	mov	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d110      	bne.n	800a0c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1ad2      	subs	r2, r2, r3
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	6a1a      	ldr	r2, [r3, #32]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2203      	movs	r2, #3
 800a0be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a0c2:	e006      	b.n	800a0d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f80f 	bl	800a0f0 <USBH_CDC_ReceiveCallback>
      break;
 800a0d2:	bf00      	nop
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a12c:	2302      	movs	r3, #2
 800a12e:	e029      	b.n	800a184 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	79fa      	ldrb	r2, [r7, #7]
 800a134:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 f81f 	bl	800a18c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f001 fdc9 	bl	800bd14 <USBH_LL_Init>

  return USBH_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e009      	b.n	800a1ae <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	33e0      	adds	r3, #224	@ 0xe0
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b0f      	cmp	r3, #15
 800a1b2:	d9f2      	bls.n	800a19a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e009      	b.n	800a1ce <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d4:	d3f1      	bcc.n	800a1ba <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2240      	movs	r2, #64	@ 0x40
 800a1fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	331c      	adds	r3, #28
 800a226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a22a:	2100      	movs	r1, #0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f002 f847 	bl	800c2c0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a23c:	2100      	movs	r1, #0
 800a23e:	4618      	mov	r0, r3
 800a240:	f002 f83e 	bl	800c2c0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a24a:	2212      	movs	r2, #18
 800a24c:	2100      	movs	r1, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f002 f836 	bl	800c2c0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a25a:	223e      	movs	r2, #62	@ 0x3e
 800a25c:	2100      	movs	r1, #0
 800a25e:	4618      	mov	r0, r3
 800a260:	f002 f82e 	bl	800c2c0 <memset>

  return USBH_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a26e:	b480      	push	{r7}
 800a270:	b085      	sub	sp, #20
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d016      	beq.n	800a2b0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10e      	bne.n	800a2aa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a292:	1c59      	adds	r1, r3, #1
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	33de      	adds	r3, #222	@ 0xde
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]
 800a2a8:	e004      	b.n	800a2b4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	73fb      	strb	r3, [r7, #15]
 800a2ae:	e001      	b.n	800a2b4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b085      	sub	sp, #20
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d204      	bcs.n	800a2e8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	78fa      	ldrb	r2, [r7, #3]
 800a2e2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a2e6:	e001      	b.n	800a2ec <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b087      	sub	sp, #28
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	4608      	mov	r0, r1
 800a304:	4611      	mov	r1, r2
 800a306:	461a      	mov	r2, r3
 800a308:	4603      	mov	r3, r0
 800a30a:	70fb      	strb	r3, [r7, #3]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70bb      	strb	r3, [r7, #2]
 800a310:	4613      	mov	r3, r2
 800a312:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a322:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a324:	e025      	b.n	800a372 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	221a      	movs	r2, #26
 800a32a:	fb02 f303 	mul.w	r3, r2, r3
 800a32e:	3308      	adds	r3, #8
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4413      	add	r3, r2
 800a334:	3302      	adds	r3, #2
 800a336:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	795b      	ldrb	r3, [r3, #5]
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d002      	beq.n	800a348 <USBH_FindInterface+0x4e>
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	2bff      	cmp	r3, #255	@ 0xff
 800a346:	d111      	bne.n	800a36c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a34c:	78ba      	ldrb	r2, [r7, #2]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d002      	beq.n	800a358 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a352:	78bb      	ldrb	r3, [r7, #2]
 800a354:	2bff      	cmp	r3, #255	@ 0xff
 800a356:	d109      	bne.n	800a36c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a35c:	787a      	ldrb	r2, [r7, #1]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d002      	beq.n	800a368 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a362:	787b      	ldrb	r3, [r7, #1]
 800a364:	2bff      	cmp	r3, #255	@ 0xff
 800a366:	d101      	bne.n	800a36c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	e006      	b.n	800a37a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	3301      	adds	r3, #1
 800a370:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d9d6      	bls.n	800a326 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a378:	23ff      	movs	r3, #255	@ 0xff
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	371c      	adds	r7, #28
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 fcfc 	bl	800bd8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a394:	2101      	movs	r1, #1
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 fe15 	bl	800bfc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af04      	add	r7, sp, #16
 800a3ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d102      	bne.n	800a3ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b0b      	cmp	r3, #11
 800a3d2:	f200 81bc 	bhi.w	800a74e <USBH_Process+0x3a6>
 800a3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3dc <USBH_Process+0x34>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a40d 	.word	0x0800a40d
 800a3e0:	0800a43f 	.word	0x0800a43f
 800a3e4:	0800a4a9 	.word	0x0800a4a9
 800a3e8:	0800a6e9 	.word	0x0800a6e9
 800a3ec:	0800a74f 	.word	0x0800a74f
 800a3f0:	0800a549 	.word	0x0800a549
 800a3f4:	0800a68f 	.word	0x0800a68f
 800a3f8:	0800a57f 	.word	0x0800a57f
 800a3fc:	0800a59f 	.word	0x0800a59f
 800a400:	0800a5bd 	.word	0x0800a5bd
 800a404:	0800a601 	.word	0x0800a601
 800a408:	0800a6d1 	.word	0x0800a6d1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 819c 	beq.w	800a752 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a420:	20c8      	movs	r0, #200	@ 0xc8
 800a422:	f001 fe1a 	bl	800c05a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 fd0d 	bl	800be46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a43c:	e189      	b.n	800a752 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b01      	cmp	r3, #1
 800a448:	d107      	bne.n	800a45a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2202      	movs	r2, #2
 800a456:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a458:	e18a      	b.n	800a770 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a464:	d914      	bls.n	800a490 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a46c:	3301      	adds	r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d903      	bls.n	800a488 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	220d      	movs	r2, #13
 800a484:	701a      	strb	r2, [r3, #0]
      break;
 800a486:	e173      	b.n	800a770 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]
      break;
 800a48e:	e16f      	b.n	800a770 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a496:	f103 020a 	add.w	r2, r3, #10
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a4a0:	200a      	movs	r0, #10
 800a4a2:	f001 fdda 	bl	800c05a <USBH_Delay>
      break;
 800a4a6:	e163      	b.n	800a770 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d005      	beq.n	800a4be <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4b8:	2104      	movs	r1, #4
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a4be:	2064      	movs	r0, #100	@ 0x64
 800a4c0:	f001 fdcb 	bl	800c05a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 fc97 	bl	800bdf8 <USBH_LL_GetSpeed>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2205      	movs	r2, #5
 800a4d8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4da:	2100      	movs	r1, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 faa2 	bl	800ba26 <USBH_AllocPipe>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4ea:	2180      	movs	r1, #128	@ 0x80
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f001 fa9a 	bl	800ba26 <USBH_AllocPipe>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7919      	ldrb	r1, [r3, #4]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a50e:	9202      	str	r2, [sp, #8]
 800a510:	2200      	movs	r2, #0
 800a512:	9201      	str	r2, [sp, #4]
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	4603      	mov	r3, r0
 800a518:	2280      	movs	r2, #128	@ 0x80
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f001 fa54 	bl	800b9c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	7959      	ldrb	r1, [r3, #5]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a534:	9202      	str	r2, [sp, #8]
 800a536:	2200      	movs	r2, #0
 800a538:	9201      	str	r2, [sp, #4]
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	4603      	mov	r3, r0
 800a53e:	2200      	movs	r2, #0
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 fa41 	bl	800b9c8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a546:	e113      	b.n	800a770 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f917 	bl	800a77c <USBH_HandleEnum>
 800a54e:	4603      	mov	r3, r0
 800a550:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 80fd 	bne.w	800a756 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d103      	bne.n	800a576 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2208      	movs	r2, #8
 800a572:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a574:	e0ef      	b.n	800a756 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2207      	movs	r2, #7
 800a57a:	701a      	strb	r2, [r3, #0]
      break;
 800a57c:	e0eb      	b.n	800a756 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 80e8 	beq.w	800a75a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a590:	2101      	movs	r1, #1
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2208      	movs	r2, #8
 800a59a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a59c:	e0dd      	b.n	800a75a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fc3f 	bl	800ae2a <USBH_SetCfg>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f040 80d5 	bne.w	800a75e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2209      	movs	r2, #9
 800a5b8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5ba:	e0d0      	b.n	800a75e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d016      	beq.n	800a5f8 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fc4f 	bl	800ae70 <USBH_SetFeature>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d103      	bne.n	800a5e6 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	220a      	movs	r2, #10
 800a5e2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5e4:	e0bd      	b.n	800a762 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	f040 80b9 	bne.w	800a762 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	220a      	movs	r2, #10
 800a5f4:	701a      	strb	r2, [r3, #0]
      break;
 800a5f6:	e0b4      	b.n	800a762 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	220a      	movs	r2, #10
 800a5fc:	701a      	strb	r2, [r3, #0]
      break;
 800a5fe:	e0b0      	b.n	800a762 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 80ad 	beq.w	800a766 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
 800a618:	e016      	b.n	800a648 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a61a:	7bfa      	ldrb	r2, [r7, #15]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	32de      	adds	r2, #222	@ 0xde
 800a620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a624:	791a      	ldrb	r2, [r3, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d108      	bne.n	800a642 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a630:	7bfa      	ldrb	r2, [r7, #15]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32de      	adds	r2, #222	@ 0xde
 800a636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a640:	e005      	b.n	800a64e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	3301      	adds	r3, #1
 800a646:	73fb      	strb	r3, [r7, #15]
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0e5      	beq.n	800a61a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d016      	beq.n	800a686 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	4798      	blx	r3
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d109      	bne.n	800a67e <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2206      	movs	r2, #6
 800a66e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a676:	2103      	movs	r1, #3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a67c:	e073      	b.n	800a766 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	220d      	movs	r2, #13
 800a682:	701a      	strb	r2, [r3, #0]
      break;
 800a684:	e06f      	b.n	800a766 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	220d      	movs	r2, #13
 800a68a:	701a      	strb	r2, [r3, #0]
      break;
 800a68c:	e06b      	b.n	800a766 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d017      	beq.n	800a6c8 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	4798      	blx	r3
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	220b      	movs	r2, #11
 800a6b4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6b6:	e058      	b.n	800a76a <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d154      	bne.n	800a76a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	220d      	movs	r2, #13
 800a6c4:	701a      	strb	r2, [r3, #0]
      break;
 800a6c6:	e050      	b.n	800a76a <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	220d      	movs	r2, #13
 800a6cc:	701a      	strb	r2, [r3, #0]
      break;
 800a6ce:	e04c      	b.n	800a76a <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d049      	beq.n	800a76e <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
      }
      break;
 800a6e6:	e042      	b.n	800a76e <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff fd4b 	bl	800a18c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d009      	beq.n	800a714 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d005      	beq.n	800a72a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a724:	2105      	movs	r1, #5
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b01      	cmp	r3, #1
 800a734:	d107      	bne.n	800a746 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fe21 	bl	800a386 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a744:	e014      	b.n	800a770 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 fb20 	bl	800bd8c <USBH_LL_Start>
      break;
 800a74c:	e010      	b.n	800a770 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a74e:	bf00      	nop
 800a750:	e00e      	b.n	800a770 <USBH_Process+0x3c8>
      break;
 800a752:	bf00      	nop
 800a754:	e00c      	b.n	800a770 <USBH_Process+0x3c8>
      break;
 800a756:	bf00      	nop
 800a758:	e00a      	b.n	800a770 <USBH_Process+0x3c8>
    break;
 800a75a:	bf00      	nop
 800a75c:	e008      	b.n	800a770 <USBH_Process+0x3c8>
      break;
 800a75e:	bf00      	nop
 800a760:	e006      	b.n	800a770 <USBH_Process+0x3c8>
      break;
 800a762:	bf00      	nop
 800a764:	e004      	b.n	800a770 <USBH_Process+0x3c8>
      break;
 800a766:	bf00      	nop
 800a768:	e002      	b.n	800a770 <USBH_Process+0x3c8>
      break;
 800a76a:	bf00      	nop
 800a76c:	e000      	b.n	800a770 <USBH_Process+0x3c8>
      break;
 800a76e:	bf00      	nop
  }
  return USBH_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop

0800a77c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b088      	sub	sp, #32
 800a780:	af04      	add	r7, sp, #16
 800a782:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a784:	2301      	movs	r3, #1
 800a786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a788:	2301      	movs	r3, #1
 800a78a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b07      	cmp	r3, #7
 800a792:	f200 81bd 	bhi.w	800ab10 <USBH_HandleEnum+0x394>
 800a796:	a201      	add	r2, pc, #4	@ (adr r2, 800a79c <USBH_HandleEnum+0x20>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7bd 	.word	0x0800a7bd
 800a7a0:	0800a877 	.word	0x0800a877
 800a7a4:	0800a8e1 	.word	0x0800a8e1
 800a7a8:	0800a96b 	.word	0x0800a96b
 800a7ac:	0800a9d5 	.word	0x0800a9d5
 800a7b0:	0800aa45 	.word	0x0800aa45
 800a7b4:	0800aa8b 	.word	0x0800aa8b
 800a7b8:	0800aad1 	.word	0x0800aad1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a7bc:	2108      	movs	r1, #8
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fa50 	bl	800ac64 <USBH_Get_DevDesc>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d12e      	bne.n	800a82c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	7919      	ldrb	r1, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	9201      	str	r2, [sp, #4]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2280      	movs	r2, #128	@ 0x80
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 f8e2 	bl	800b9c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7959      	ldrb	r1, [r3, #5]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a818:	9202      	str	r2, [sp, #8]
 800a81a:	2200      	movs	r2, #0
 800a81c:	9201      	str	r2, [sp, #4]
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	4603      	mov	r3, r0
 800a822:	2200      	movs	r2, #0
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f8cf 	bl	800b9c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a82a:	e173      	b.n	800ab14 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	f040 8170 	bne.w	800ab14 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a83a:	3301      	adds	r3, #1
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d903      	bls.n	800a856 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	220d      	movs	r2, #13
 800a852:	701a      	strb	r2, [r3, #0]
      break;
 800a854:	e15e      	b.n	800ab14 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	795b      	ldrb	r3, [r3, #5]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 f903 	bl	800ba68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	791b      	ldrb	r3, [r3, #4]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 f8fd 	bl	800ba68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	701a      	strb	r2, [r3, #0]
      break;
 800a874:	e14e      	b.n	800ab14 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a876:	2112      	movs	r1, #18
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f9f3 	bl	800ac64 <USBH_Get_DevDesc>
 800a87e:	4603      	mov	r3, r0
 800a880:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a882:	7bbb      	ldrb	r3, [r7, #14]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d103      	bne.n	800a890 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2202      	movs	r2, #2
 800a88c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a88e:	e143      	b.n	800ab18 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	2b03      	cmp	r3, #3
 800a894:	f040 8140 	bne.w	800ab18 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a89e:	3301      	adds	r3, #1
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d903      	bls.n	800a8ba <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	220d      	movs	r2, #13
 800a8b6:	701a      	strb	r2, [r3, #0]
      break;
 800a8b8:	e12e      	b.n	800ab18 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	795b      	ldrb	r3, [r3, #5]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 f8d1 	bl	800ba68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	791b      	ldrb	r3, [r3, #4]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 f8cb 	bl	800ba68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
      break;
 800a8de:	e11b      	b.n	800ab18 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fa7d 	bl	800ade2 <USBH_SetAddress>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d130      	bne.n	800a954 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a8f2:	2002      	movs	r0, #2
 800a8f4:	f001 fbb1 	bl	800c05a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2203      	movs	r2, #3
 800a904:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	7919      	ldrb	r1, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a91a:	9202      	str	r2, [sp, #8]
 800a91c:	2200      	movs	r2, #0
 800a91e:	9201      	str	r2, [sp, #4]
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	4603      	mov	r3, r0
 800a924:	2280      	movs	r2, #128	@ 0x80
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f001 f84e 	bl	800b9c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7959      	ldrb	r1, [r3, #5]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a940:	9202      	str	r2, [sp, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	9201      	str	r2, [sp, #4]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	4603      	mov	r3, r0
 800a94a:	2200      	movs	r2, #0
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 f83b 	bl	800b9c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a952:	e0e3      	b.n	800ab1c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b03      	cmp	r3, #3
 800a958:	f040 80e0 	bne.w	800ab1c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	220d      	movs	r2, #13
 800a960:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	705a      	strb	r2, [r3, #1]
      break;
 800a968:	e0d8      	b.n	800ab1c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a96a:	2109      	movs	r1, #9
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f9a5 	bl	800acbc <USBH_Get_CfgDesc>
 800a972:	4603      	mov	r3, r0
 800a974:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2204      	movs	r2, #4
 800a980:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a982:	e0cd      	b.n	800ab20 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	2b03      	cmp	r3, #3
 800a988:	f040 80ca 	bne.w	800ab20 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a992:	3301      	adds	r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d903      	bls.n	800a9ae <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	220d      	movs	r2, #13
 800a9aa:	701a      	strb	r2, [r3, #0]
      break;
 800a9ac:	e0b8      	b.n	800ab20 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	795b      	ldrb	r3, [r3, #5]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 f857 	bl	800ba68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	791b      	ldrb	r3, [r3, #4]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 f851 	bl	800ba68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	701a      	strb	r2, [r3, #0]
      break;
 800a9d2:	e0a5      	b.n	800ab20 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f96d 	bl	800acbc <USBH_Get_CfgDesc>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d103      	bne.n	800a9f4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2205      	movs	r2, #5
 800a9f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9f2:	e097      	b.n	800ab24 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	f040 8094 	bne.w	800ab24 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa02:	3301      	adds	r3, #1
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d903      	bls.n	800aa1e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	220d      	movs	r2, #13
 800aa1a:	701a      	strb	r2, [r3, #0]
      break;
 800aa1c:	e082      	b.n	800ab24 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	795b      	ldrb	r3, [r3, #5]
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f81f 	bl	800ba68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	791b      	ldrb	r3, [r3, #4]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f001 f819 	bl	800ba68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	701a      	strb	r2, [r3, #0]
      break;
 800aa42:	e06f      	b.n	800ab24 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d019      	beq.n	800aa82 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa5a:	23ff      	movs	r3, #255	@ 0xff
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f957 	bl	800ad10 <USBH_Get_StringDesc>
 800aa62:	4603      	mov	r3, r0
 800aa64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d103      	bne.n	800aa74 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2206      	movs	r2, #6
 800aa70:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aa72:	e059      	b.n	800ab28 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d156      	bne.n	800ab28 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2206      	movs	r2, #6
 800aa7e:	705a      	strb	r2, [r3, #1]
      break;
 800aa80:	e052      	b.n	800ab28 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2206      	movs	r2, #6
 800aa86:	705a      	strb	r2, [r3, #1]
      break;
 800aa88:	e04e      	b.n	800ab28 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d019      	beq.n	800aac8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aaa0:	23ff      	movs	r3, #255	@ 0xff
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f934 	bl	800ad10 <USBH_Get_StringDesc>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d103      	bne.n	800aaba <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2207      	movs	r2, #7
 800aab6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aab8:	e038      	b.n	800ab2c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d135      	bne.n	800ab2c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2207      	movs	r2, #7
 800aac4:	705a      	strb	r2, [r3, #1]
      break;
 800aac6:	e031      	b.n	800ab2c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2207      	movs	r2, #7
 800aacc:	705a      	strb	r2, [r3, #1]
      break;
 800aace:	e02d      	b.n	800ab2c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d017      	beq.n	800ab0a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aae6:	23ff      	movs	r3, #255	@ 0xff
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f911 	bl	800ad10 <USBH_Get_StringDesc>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aafc:	e018      	b.n	800ab30 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d115      	bne.n	800ab30 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]
      break;
 800ab08:	e012      	b.n	800ab30 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab0e:	e00f      	b.n	800ab30 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ab10:	bf00      	nop
 800ab12:	e00e      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab14:	bf00      	nop
 800ab16:	e00c      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab18:	bf00      	nop
 800ab1a:	e00a      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab1c:	bf00      	nop
 800ab1e:	e008      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab20:	bf00      	nop
 800ab22:	e006      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab24:	bf00      	nop
 800ab26:	e004      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e002      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab2c:	bf00      	nop
 800ab2e:	e000      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab30:	bf00      	nop
  }
  return Status;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f804 	bl	800ab7e <USBH_HandleSof>
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b0b      	cmp	r3, #11
 800ab8e:	d10a      	bne.n	800aba6 <USBH_HandleSof+0x28>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d005      	beq.n	800aba6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
  }
}
 800aba6:	bf00      	nop
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800abbe:	bf00      	nop
}
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800abe2:	bf00      	nop
}
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 f8c0 	bl	800bdc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	791b      	ldrb	r3, [r3, #4]
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 ff0d 	bl	800ba68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	795b      	ldrb	r3, [r3, #5]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 ff07 	bl	800ba68 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ac70:	887b      	ldrh	r3, [r7, #2]
 800ac72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac76:	d901      	bls.n	800ac7c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e01b      	b.n	800acb4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ac82:	887b      	ldrh	r3, [r7, #2]
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	4613      	mov	r3, r2
 800ac88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f872 	bl	800ad78 <USBH_GetDescriptor>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d109      	bne.n	800acb2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aca4:	887a      	ldrh	r2, [r7, #2]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f929 	bl	800af00 <USBH_ParseDevDesc>
 800acae:	4603      	mov	r3, r0
 800acb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af02      	add	r7, sp, #8
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	331c      	adds	r3, #28
 800accc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800acce:	887b      	ldrh	r3, [r7, #2]
 800acd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acd4:	d901      	bls.n	800acda <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e016      	b.n	800ad08 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800acda:	887b      	ldrh	r3, [r7, #2]
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ace4:	2100      	movs	r1, #0
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f846 	bl	800ad78 <USBH_GetDescriptor>
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d107      	bne.n	800ad06 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800acf6:	887b      	ldrh	r3, [r7, #2]
 800acf8:	461a      	mov	r2, r3
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f9af 	bl	800b060 <USBH_ParseCfgDesc>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af02      	add	r7, sp, #8
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	72fb      	strb	r3, [r7, #11]
 800ad20:	4613      	mov	r3, r2
 800ad22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ad24:	893b      	ldrh	r3, [r7, #8]
 800ad26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad2a:	d802      	bhi.n	800ad32 <USBH_Get_StringDesc+0x22>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e01c      	b.n	800ad70 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ad36:	7afb      	ldrb	r3, [r7, #11]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ad3e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad46:	893b      	ldrh	r3, [r7, #8]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 f812 	bl	800ad78 <USBH_GetDescriptor>
 800ad54:	4603      	mov	r3, r0
 800ad56:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d107      	bne.n	800ad6e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad64:	893a      	ldrh	r2, [r7, #8]
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 fb8c 	bl	800b486 <USBH_ParseStringDesc>
  }

  return status;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	607b      	str	r3, [r7, #4]
 800ad82:	460b      	mov	r3, r1
 800ad84:	72fb      	strb	r3, [r7, #11]
 800ad86:	4613      	mov	r3, r2
 800ad88:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	789b      	ldrb	r3, [r3, #2]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d11c      	bne.n	800adcc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ad92:	7afb      	ldrb	r3, [r7, #11]
 800ad94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2206      	movs	r2, #6
 800ada2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	893a      	ldrh	r2, [r7, #8]
 800ada8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800adaa:	893b      	ldrh	r3, [r7, #8]
 800adac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800adb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adb4:	d104      	bne.n	800adc0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f240 4209 	movw	r2, #1033	@ 0x409
 800adbc:	829a      	strh	r2, [r3, #20]
 800adbe:	e002      	b.n	800adc6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8b3a      	ldrh	r2, [r7, #24]
 800adca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800adcc:	8b3b      	ldrh	r3, [r7, #24]
 800adce:	461a      	mov	r2, r3
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 fba4 	bl	800b520 <USBH_CtlReq>
 800add8:	4603      	mov	r3, r0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	789b      	ldrb	r3, [r3, #2]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d10f      	bne.n	800ae16 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2205      	movs	r2, #5
 800ae00:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ae02:	78fb      	ldrb	r3, [r7, #3]
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae16:	2200      	movs	r2, #0
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fb80 	bl	800b520 <USBH_CtlReq>
 800ae20:	4603      	mov	r3, r0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	789b      	ldrb	r3, [r3, #2]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d10e      	bne.n	800ae5c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2209      	movs	r2, #9
 800ae48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	887a      	ldrh	r2, [r7, #2]
 800ae4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	2100      	movs	r1, #0
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fb5d 	bl	800b520 <USBH_CtlReq>
 800ae66:	4603      	mov	r3, r0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	789b      	ldrb	r3, [r3, #2]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d10f      	bne.n	800aea4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aea4:	2200      	movs	r2, #0
 800aea6:	2100      	movs	r1, #0
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fb39 	bl	800b520 <USBH_CtlReq>
 800aeae:	4603      	mov	r3, r0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	789b      	ldrb	r3, [r3, #2]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d10f      	bne.n	800aeec <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aeec:	2200      	movs	r2, #0
 800aeee:	2100      	movs	r1, #0
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fb15 	bl	800b520 <USBH_CtlReq>
 800aef6:	4603      	mov	r3, r0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800af14:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800af20:	2302      	movs	r3, #2
 800af22:	e094      	b.n	800b04e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	785a      	ldrb	r2, [r3, #1]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	3302      	adds	r3, #2
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	3303      	adds	r3, #3
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	021b      	lsls	r3, r3, #8
 800af44:	b29b      	uxth	r3, r3
 800af46:	4313      	orrs	r3, r2
 800af48:	b29a      	uxth	r2, r3
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	791a      	ldrb	r2, [r3, #4]
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	795a      	ldrb	r2, [r3, #5]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	799a      	ldrb	r2, [r3, #6]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	79da      	ldrb	r2, [r3, #7]
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af74:	2b00      	cmp	r3, #0
 800af76:	d004      	beq.n	800af82 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d11b      	bne.n	800afba <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	79db      	ldrb	r3, [r3, #7]
 800af86:	2b20      	cmp	r3, #32
 800af88:	dc0f      	bgt.n	800afaa <USBH_ParseDevDesc+0xaa>
 800af8a:	2b08      	cmp	r3, #8
 800af8c:	db0f      	blt.n	800afae <USBH_ParseDevDesc+0xae>
 800af8e:	3b08      	subs	r3, #8
 800af90:	4a32      	ldr	r2, [pc, #200]	@ (800b05c <USBH_ParseDevDesc+0x15c>)
 800af92:	fa22 f303 	lsr.w	r3, r2, r3
 800af96:	f003 0301 	and.w	r3, r3, #1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	bf14      	ite	ne
 800af9e:	2301      	movne	r3, #1
 800afa0:	2300      	moveq	r3, #0
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d106      	bne.n	800afb6 <USBH_ParseDevDesc+0xb6>
 800afa8:	e001      	b.n	800afae <USBH_ParseDevDesc+0xae>
 800afaa:	2b40      	cmp	r3, #64	@ 0x40
 800afac:	d003      	beq.n	800afb6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2208      	movs	r2, #8
 800afb2:	71da      	strb	r2, [r3, #7]
        break;
 800afb4:	e000      	b.n	800afb8 <USBH_ParseDevDesc+0xb8>
        break;
 800afb6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800afb8:	e00e      	b.n	800afd8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d107      	bne.n	800afd4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	79db      	ldrb	r3, [r3, #7]
 800afc8:	2b08      	cmp	r3, #8
 800afca:	d005      	beq.n	800afd8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2208      	movs	r2, #8
 800afd0:	71da      	strb	r2, [r3, #7]
 800afd2:	e001      	b.n	800afd8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800afd4:	2303      	movs	r3, #3
 800afd6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800afd8:	88fb      	ldrh	r3, [r7, #6]
 800afda:	2b08      	cmp	r3, #8
 800afdc:	d936      	bls.n	800b04c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	3308      	adds	r3, #8
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	461a      	mov	r2, r3
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	3309      	adds	r3, #9
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	021b      	lsls	r3, r3, #8
 800afee:	b29b      	uxth	r3, r3
 800aff0:	4313      	orrs	r3, r2
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	330a      	adds	r3, #10
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	330b      	adds	r3, #11
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	021b      	lsls	r3, r3, #8
 800b008:	b29b      	uxth	r3, r3
 800b00a:	4313      	orrs	r3, r2
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	330c      	adds	r3, #12
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	461a      	mov	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	330d      	adds	r3, #13
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	b29b      	uxth	r3, r3
 800b024:	4313      	orrs	r3, r2
 800b026:	b29a      	uxth	r2, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	7b9a      	ldrb	r2, [r3, #14]
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	7bda      	ldrb	r2, [r3, #15]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	7c1a      	ldrb	r2, [r3, #16]
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	7c5a      	ldrb	r2, [r3, #17]
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	371c      	adds	r7, #28
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	01000101 	.word	0x01000101

0800b060 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08c      	sub	sp, #48	@ 0x30
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b074:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b082:	2300      	movs	r3, #0
 800b084:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b08e:	2302      	movs	r3, #2
 800b090:	e0de      	b.n	800b250 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b09      	cmp	r3, #9
 800b09c:	d002      	beq.n	800b0a4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a0:	2209      	movs	r2, #9
 800b0a2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	785a      	ldrb	r2, [r3, #1]
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	3302      	adds	r3, #2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	3303      	adds	r3, #3
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0ce:	bf28      	it	cs
 800b0d0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	791a      	ldrb	r2, [r3, #4]
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	795a      	ldrb	r2, [r3, #5]
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	799a      	ldrb	r2, [r3, #6]
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	79da      	ldrb	r2, [r3, #7]
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	7a1a      	ldrb	r2, [r3, #8]
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	2b09      	cmp	r3, #9
 800b106:	f240 80a1 	bls.w	800b24c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b10a:	2309      	movs	r3, #9
 800b10c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b112:	e085      	b.n	800b220 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b114:	f107 0316 	add.w	r3, r7, #22
 800b118:	4619      	mov	r1, r3
 800b11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b11c:	f000 f9e6 	bl	800b4ec <USBH_GetNextDesc>
 800b120:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	2b04      	cmp	r3, #4
 800b128:	d17a      	bne.n	800b220 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b09      	cmp	r3, #9
 800b130:	d002      	beq.n	800b138 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b134:	2209      	movs	r2, #9
 800b136:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b13c:	221a      	movs	r2, #26
 800b13e:	fb02 f303 	mul.w	r3, r2, r3
 800b142:	3308      	adds	r3, #8
 800b144:	6a3a      	ldr	r2, [r7, #32]
 800b146:	4413      	add	r3, r2
 800b148:	3302      	adds	r3, #2
 800b14a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b14c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b14e:	69f8      	ldr	r0, [r7, #28]
 800b150:	f000 f882 	bl	800b258 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b15e:	e043      	b.n	800b1e8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b160:	f107 0316 	add.w	r3, r7, #22
 800b164:	4619      	mov	r1, r3
 800b166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b168:	f000 f9c0 	bl	800b4ec <USBH_GetNextDesc>
 800b16c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b170:	785b      	ldrb	r3, [r3, #1]
 800b172:	2b05      	cmp	r3, #5
 800b174:	d138      	bne.n	800b1e8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	795b      	ldrb	r3, [r3, #5]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d113      	bne.n	800b1a6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b182:	2b02      	cmp	r3, #2
 800b184:	d003      	beq.n	800b18e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	799b      	ldrb	r3, [r3, #6]
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d10b      	bne.n	800b1a6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	79db      	ldrb	r3, [r3, #7]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10b      	bne.n	800b1ae <USBH_ParseCfgDesc+0x14e>
 800b196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b09      	cmp	r3, #9
 800b19c:	d007      	beq.n	800b1ae <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a0:	2209      	movs	r2, #9
 800b1a2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b1a4:	e003      	b.n	800b1ae <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a8:	2207      	movs	r2, #7
 800b1aa:	701a      	strb	r2, [r3, #0]
 800b1ac:	e000      	b.n	800b1b0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b1ae:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1b8:	3201      	adds	r2, #1
 800b1ba:	00d2      	lsls	r2, r2, #3
 800b1bc:	211a      	movs	r1, #26
 800b1be:	fb01 f303 	mul.w	r3, r1, r3
 800b1c2:	4413      	add	r3, r2
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	6a3a      	ldr	r2, [r7, #32]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b1ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d0:	69b9      	ldr	r1, [r7, #24]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 f86f 	bl	800b2b6 <USBH_ParseEPDesc>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b1de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d80a      	bhi.n	800b206 <USBH_ParseCfgDesc+0x1a6>
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	791b      	ldrb	r3, [r3, #4]
 800b1f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d204      	bcs.n	800b206 <USBH_ParseCfgDesc+0x1a6>
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	885a      	ldrh	r2, [r3, #2]
 800b200:	8afb      	ldrh	r3, [r7, #22]
 800b202:	429a      	cmp	r2, r3
 800b204:	d8ac      	bhi.n	800b160 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	791b      	ldrb	r3, [r3, #4]
 800b20a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b20e:	429a      	cmp	r2, r3
 800b210:	d201      	bcs.n	800b216 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b212:	2303      	movs	r3, #3
 800b214:	e01c      	b.n	800b250 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b21a:	3301      	adds	r3, #1
 800b21c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b224:	2b01      	cmp	r3, #1
 800b226:	d805      	bhi.n	800b234 <USBH_ParseCfgDesc+0x1d4>
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	885a      	ldrh	r2, [r3, #2]
 800b22c:	8afb      	ldrh	r3, [r7, #22]
 800b22e:	429a      	cmp	r2, r3
 800b230:	f63f af70 	bhi.w	800b114 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	791b      	ldrb	r3, [r3, #4]
 800b238:	2b02      	cmp	r3, #2
 800b23a:	bf28      	it	cs
 800b23c:	2302      	movcs	r3, #2
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b244:	429a      	cmp	r2, r3
 800b246:	d201      	bcs.n	800b24c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b248:	2303      	movs	r3, #3
 800b24a:	e001      	b.n	800b250 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b24c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b250:	4618      	mov	r0, r3
 800b252:	3730      	adds	r7, #48	@ 0x30
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	781a      	ldrb	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	785a      	ldrb	r2, [r3, #1]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	789a      	ldrb	r2, [r3, #2]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	78da      	ldrb	r2, [r3, #3]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	791a      	ldrb	r2, [r3, #4]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	795a      	ldrb	r2, [r3, #5]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	799a      	ldrb	r2, [r3, #6]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	79da      	ldrb	r2, [r3, #7]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	7a1a      	ldrb	r2, [r3, #8]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	721a      	strb	r2, [r3, #8]
}
 800b2aa:	bf00      	nop
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b087      	sub	sp, #28
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	781a      	ldrb	r2, [r3, #0]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	785a      	ldrb	r2, [r3, #1]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	789a      	ldrb	r2, [r3, #2]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	78da      	ldrb	r2, [r3, #3]
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3305      	adds	r3, #5
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	799a      	ldrb	r2, [r3, #6]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	889b      	ldrh	r3, [r3, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d009      	beq.n	800b324 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b318:	d804      	bhi.n	800b324 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b31e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b322:	d901      	bls.n	800b328 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b324:	2303      	movs	r3, #3
 800b326:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d136      	bne.n	800b3a0 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	78db      	ldrb	r3, [r3, #3]
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d108      	bne.n	800b350 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	889b      	ldrh	r3, [r3, #4]
 800b342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b346:	f240 8097 	bls.w	800b478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b34a:	2303      	movs	r3, #3
 800b34c:	75fb      	strb	r3, [r7, #23]
 800b34e:	e093      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	78db      	ldrb	r3, [r3, #3]
 800b354:	f003 0303 	and.w	r3, r3, #3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d107      	bne.n	800b36c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	889b      	ldrh	r3, [r3, #4]
 800b360:	2b40      	cmp	r3, #64	@ 0x40
 800b362:	f240 8089 	bls.w	800b478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b366:	2303      	movs	r3, #3
 800b368:	75fb      	strb	r3, [r7, #23]
 800b36a:	e085      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	78db      	ldrb	r3, [r3, #3]
 800b370:	f003 0303 	and.w	r3, r3, #3
 800b374:	2b01      	cmp	r3, #1
 800b376:	d005      	beq.n	800b384 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	78db      	ldrb	r3, [r3, #3]
 800b37c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b380:	2b03      	cmp	r3, #3
 800b382:	d10a      	bne.n	800b39a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	799b      	ldrb	r3, [r3, #6]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <USBH_ParseEPDesc+0xde>
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	799b      	ldrb	r3, [r3, #6]
 800b390:	2b10      	cmp	r3, #16
 800b392:	d970      	bls.n	800b476 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b394:	2303      	movs	r3, #3
 800b396:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b398:	e06d      	b.n	800b476 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b39a:	2303      	movs	r3, #3
 800b39c:	75fb      	strb	r3, [r7, #23]
 800b39e:	e06b      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d13c      	bne.n	800b424 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	78db      	ldrb	r3, [r3, #3]
 800b3ae:	f003 0303 	and.w	r3, r3, #3
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d005      	beq.n	800b3c2 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	78db      	ldrb	r3, [r3, #3]
 800b3ba:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d106      	bne.n	800b3d0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	889b      	ldrh	r3, [r3, #4]
 800b3c6:	2b40      	cmp	r3, #64	@ 0x40
 800b3c8:	d956      	bls.n	800b478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b3ce:	e053      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	78db      	ldrb	r3, [r3, #3]
 800b3d4:	f003 0303 	and.w	r3, r3, #3
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d10e      	bne.n	800b3fa <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	799b      	ldrb	r3, [r3, #6]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d007      	beq.n	800b3f4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b3e8:	2b10      	cmp	r3, #16
 800b3ea:	d803      	bhi.n	800b3f4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b3f0:	2b40      	cmp	r3, #64	@ 0x40
 800b3f2:	d941      	bls.n	800b478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	75fb      	strb	r3, [r7, #23]
 800b3f8:	e03e      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	78db      	ldrb	r3, [r3, #3]
 800b3fe:	f003 0303 	and.w	r3, r3, #3
 800b402:	2b03      	cmp	r3, #3
 800b404:	d10b      	bne.n	800b41e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	799b      	ldrb	r3, [r3, #6]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d004      	beq.n	800b418 <USBH_ParseEPDesc+0x162>
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	889b      	ldrh	r3, [r3, #4]
 800b412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b416:	d32f      	bcc.n	800b478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b418:	2303      	movs	r3, #3
 800b41a:	75fb      	strb	r3, [r7, #23]
 800b41c:	e02c      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b41e:	2303      	movs	r3, #3
 800b420:	75fb      	strb	r3, [r7, #23]
 800b422:	e029      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d120      	bne.n	800b470 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	78db      	ldrb	r3, [r3, #3]
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	889b      	ldrh	r3, [r3, #4]
 800b43e:	2b08      	cmp	r3, #8
 800b440:	d01a      	beq.n	800b478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b442:	2303      	movs	r3, #3
 800b444:	75fb      	strb	r3, [r7, #23]
 800b446:	e017      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	78db      	ldrb	r3, [r3, #3]
 800b44c:	f003 0303 	and.w	r3, r3, #3
 800b450:	2b03      	cmp	r3, #3
 800b452:	d10a      	bne.n	800b46a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	799b      	ldrb	r3, [r3, #6]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <USBH_ParseEPDesc+0x1ae>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	889b      	ldrh	r3, [r3, #4]
 800b460:	2b08      	cmp	r3, #8
 800b462:	d909      	bls.n	800b478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b464:	2303      	movs	r3, #3
 800b466:	75fb      	strb	r3, [r7, #23]
 800b468:	e006      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b46a:	2303      	movs	r3, #3
 800b46c:	75fb      	strb	r3, [r7, #23]
 800b46e:	e003      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b470:	2303      	movs	r3, #3
 800b472:	75fb      	strb	r3, [r7, #23]
 800b474:	e000      	b.n	800b478 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b476:	bf00      	nop
  }

  return status;
 800b478:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	371c      	adds	r7, #28
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b486:	b480      	push	{r7}
 800b488:	b087      	sub	sp, #28
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	4613      	mov	r3, r2
 800b492:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3301      	adds	r3, #1
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d120      	bne.n	800b4e0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	1e9a      	subs	r2, r3, #2
 800b4a4:	88fb      	ldrh	r3, [r7, #6]
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	bf28      	it	cs
 800b4aa:	4613      	movcs	r3, r2
 800b4ac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	82fb      	strh	r3, [r7, #22]
 800b4b8:	e00b      	b.n	800b4d2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b4ba:	8afb      	ldrh	r3, [r7, #22]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4413      	add	r3, r2
 800b4c0:	781a      	ldrb	r2, [r3, #0]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b4cc:	8afb      	ldrh	r3, [r7, #22]
 800b4ce:	3302      	adds	r3, #2
 800b4d0:	82fb      	strh	r3, [r7, #22]
 800b4d2:	8afa      	ldrh	r2, [r7, #22]
 800b4d4:	8abb      	ldrh	r3, [r7, #20]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d3ef      	bcc.n	800b4ba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	701a      	strb	r2, [r3, #0]
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	371c      	adds	r7, #28
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	881b      	ldrh	r3, [r3, #0]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	7812      	ldrb	r2, [r2, #0]
 800b4fe:	4413      	add	r3, r2
 800b500:	b29a      	uxth	r2, r3
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4413      	add	r3, r2
 800b510:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b512:	68fb      	ldr	r3, [r7, #12]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b52e:	2301      	movs	r3, #1
 800b530:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	789b      	ldrb	r3, [r3, #2]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d002      	beq.n	800b540 <USBH_CtlReq+0x20>
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d00f      	beq.n	800b55e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b53e:	e027      	b.n	800b590 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	88fa      	ldrh	r2, [r7, #6]
 800b54a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2201      	movs	r2, #1
 800b550:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2202      	movs	r2, #2
 800b556:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b558:	2301      	movs	r3, #1
 800b55a:	75fb      	strb	r3, [r7, #23]
      break;
 800b55c:	e018      	b.n	800b590 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f81c 	bl	800b59c <USBH_HandleControl>
 800b564:	4603      	mov	r3, r0
 800b566:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <USBH_CtlReq+0x54>
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	2b03      	cmp	r3, #3
 800b572:	d106      	bne.n	800b582 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2201      	movs	r2, #1
 800b578:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	761a      	strb	r2, [r3, #24]
      break;
 800b580:	e005      	b.n	800b58e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	2b02      	cmp	r3, #2
 800b586:	d102      	bne.n	800b58e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2201      	movs	r2, #1
 800b58c:	709a      	strb	r2, [r3, #2]
      break;
 800b58e:	bf00      	nop
  }
  return status;
 800b590:	7dfb      	ldrb	r3, [r7, #23]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	7e1b      	ldrb	r3, [r3, #24]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	2b0a      	cmp	r3, #10
 800b5b4:	f200 8157 	bhi.w	800b866 <USBH_HandleControl+0x2ca>
 800b5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c0 <USBH_HandleControl+0x24>)
 800b5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5be:	bf00      	nop
 800b5c0:	0800b5ed 	.word	0x0800b5ed
 800b5c4:	0800b607 	.word	0x0800b607
 800b5c8:	0800b671 	.word	0x0800b671
 800b5cc:	0800b697 	.word	0x0800b697
 800b5d0:	0800b6d1 	.word	0x0800b6d1
 800b5d4:	0800b6fb 	.word	0x0800b6fb
 800b5d8:	0800b74d 	.word	0x0800b74d
 800b5dc:	0800b76f 	.word	0x0800b76f
 800b5e0:	0800b7ab 	.word	0x0800b7ab
 800b5e4:	0800b7d1 	.word	0x0800b7d1
 800b5e8:	0800b80f 	.word	0x0800b80f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f103 0110 	add.w	r1, r3, #16
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	795b      	ldrb	r3, [r3, #5]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f945 	bl	800b888 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2202      	movs	r2, #2
 800b602:	761a      	strb	r2, [r3, #24]
      break;
 800b604:	e13a      	b.n	800b87c <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	795b      	ldrb	r3, [r3, #5]
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fcc7 	bl	800bfa0 <USBH_LL_GetURBState>
 800b612:	4603      	mov	r3, r0
 800b614:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d11e      	bne.n	800b65a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	7c1b      	ldrb	r3, [r3, #16]
 800b620:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b624:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	8adb      	ldrh	r3, [r3, #22]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b62e:	7b7b      	ldrb	r3, [r7, #13]
 800b630:	2b80      	cmp	r3, #128	@ 0x80
 800b632:	d103      	bne.n	800b63c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2203      	movs	r2, #3
 800b638:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b63a:	e116      	b.n	800b86a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2205      	movs	r2, #5
 800b640:	761a      	strb	r2, [r3, #24]
      break;
 800b642:	e112      	b.n	800b86a <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b644:	7b7b      	ldrb	r3, [r7, #13]
 800b646:	2b80      	cmp	r3, #128	@ 0x80
 800b648:	d103      	bne.n	800b652 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2209      	movs	r2, #9
 800b64e:	761a      	strb	r2, [r3, #24]
      break;
 800b650:	e10b      	b.n	800b86a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2207      	movs	r2, #7
 800b656:	761a      	strb	r2, [r3, #24]
      break;
 800b658:	e107      	b.n	800b86a <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	d003      	beq.n	800b668 <USBH_HandleControl+0xcc>
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	2b02      	cmp	r3, #2
 800b664:	f040 8101 	bne.w	800b86a <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	220b      	movs	r2, #11
 800b66c:	761a      	strb	r2, [r3, #24]
      break;
 800b66e:	e0fc      	b.n	800b86a <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6899      	ldr	r1, [r3, #8]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	899a      	ldrh	r2, [r3, #12]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	791b      	ldrb	r3, [r3, #4]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f93c 	bl	800b906 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2204      	movs	r2, #4
 800b692:	761a      	strb	r2, [r3, #24]
      break;
 800b694:	e0f2      	b.n	800b87c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	791b      	ldrb	r3, [r3, #4]
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fc7f 	bl	800bfa0 <USBH_LL_GetURBState>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b6a6:	7bbb      	ldrb	r3, [r7, #14]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d103      	bne.n	800b6b4 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2209      	movs	r2, #9
 800b6b0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b6b2:	e0dc      	b.n	800b86e <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	2b05      	cmp	r3, #5
 800b6b8:	d102      	bne.n	800b6c0 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6be:	e0d6      	b.n	800b86e <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	f040 80d3 	bne.w	800b86e <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	220b      	movs	r2, #11
 800b6cc:	761a      	strb	r2, [r3, #24]
      break;
 800b6ce:	e0ce      	b.n	800b86e <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6899      	ldr	r1, [r3, #8]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	899a      	ldrh	r2, [r3, #12]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	795b      	ldrb	r3, [r3, #5]
 800b6dc:	2001      	movs	r0, #1
 800b6de:	9000      	str	r0, [sp, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f8eb 	bl	800b8bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2206      	movs	r2, #6
 800b6f6:	761a      	strb	r2, [r3, #24]
      break;
 800b6f8:	e0c0      	b.n	800b87c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	795b      	ldrb	r3, [r3, #5]
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fc4d 	bl	800bfa0 <USBH_LL_GetURBState>
 800b706:	4603      	mov	r3, r0
 800b708:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d103      	bne.n	800b718 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2207      	movs	r2, #7
 800b714:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b716:	e0ac      	b.n	800b872 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	2b05      	cmp	r3, #5
 800b71c:	d105      	bne.n	800b72a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	220c      	movs	r2, #12
 800b722:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b724:	2303      	movs	r3, #3
 800b726:	73fb      	strb	r3, [r7, #15]
      break;
 800b728:	e0a3      	b.n	800b872 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d103      	bne.n	800b738 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2205      	movs	r2, #5
 800b734:	761a      	strb	r2, [r3, #24]
      break;
 800b736:	e09c      	b.n	800b872 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2b04      	cmp	r3, #4
 800b73c:	f040 8099 	bne.w	800b872 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	220b      	movs	r2, #11
 800b744:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b746:	2302      	movs	r3, #2
 800b748:	73fb      	strb	r3, [r7, #15]
      break;
 800b74a:	e092      	b.n	800b872 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	791b      	ldrb	r3, [r3, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	2100      	movs	r1, #0
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f8d6 	bl	800b906 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b760:	b29a      	uxth	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2208      	movs	r2, #8
 800b76a:	761a      	strb	r2, [r3, #24]

      break;
 800b76c:	e086      	b.n	800b87c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	791b      	ldrb	r3, [r3, #4]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fc13 	bl	800bfa0 <USBH_LL_GetURBState>
 800b77a:	4603      	mov	r3, r0
 800b77c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b77e:	7bbb      	ldrb	r3, [r7, #14]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d105      	bne.n	800b790 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	220d      	movs	r2, #13
 800b788:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b78e:	e072      	b.n	800b876 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b04      	cmp	r3, #4
 800b794:	d103      	bne.n	800b79e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	220b      	movs	r2, #11
 800b79a:	761a      	strb	r2, [r3, #24]
      break;
 800b79c:	e06b      	b.n	800b876 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
 800b7a0:	2b05      	cmp	r3, #5
 800b7a2:	d168      	bne.n	800b876 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a8:	e065      	b.n	800b876 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	795b      	ldrb	r3, [r3, #5]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	9200      	str	r2, [sp, #0]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f880 	bl	800b8bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	220a      	movs	r2, #10
 800b7cc:	761a      	strb	r2, [r3, #24]
      break;
 800b7ce:	e055      	b.n	800b87c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	795b      	ldrb	r3, [r3, #5]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fbe2 	bl	800bfa0 <USBH_LL_GetURBState>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b7e0:	7bbb      	ldrb	r3, [r7, #14]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d105      	bne.n	800b7f2 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	220d      	movs	r2, #13
 800b7ee:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b7f0:	e043      	b.n	800b87a <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7f2:	7bbb      	ldrb	r3, [r7, #14]
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d103      	bne.n	800b800 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2209      	movs	r2, #9
 800b7fc:	761a      	strb	r2, [r3, #24]
      break;
 800b7fe:	e03c      	b.n	800b87a <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	2b04      	cmp	r3, #4
 800b804:	d139      	bne.n	800b87a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	220b      	movs	r2, #11
 800b80a:	761a      	strb	r2, [r3, #24]
      break;
 800b80c:	e035      	b.n	800b87a <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	7e5b      	ldrb	r3, [r3, #25]
 800b812:	3301      	adds	r3, #1
 800b814:	b2da      	uxtb	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	765a      	strb	r2, [r3, #25]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	7e5b      	ldrb	r3, [r3, #25]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d806      	bhi.n	800b830 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b82e:	e025      	b.n	800b87c <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b836:	2106      	movs	r1, #6
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	795b      	ldrb	r3, [r3, #5]
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f90d 	bl	800ba68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	791b      	ldrb	r3, [r3, #4]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f907 	bl	800ba68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b860:	2302      	movs	r3, #2
 800b862:	73fb      	strb	r3, [r7, #15]
      break;
 800b864:	e00a      	b.n	800b87c <USBH_HandleControl+0x2e0>

    default:
      break;
 800b866:	bf00      	nop
 800b868:	e008      	b.n	800b87c <USBH_HandleControl+0x2e0>
      break;
 800b86a:	bf00      	nop
 800b86c:	e006      	b.n	800b87c <USBH_HandleControl+0x2e0>
      break;
 800b86e:	bf00      	nop
 800b870:	e004      	b.n	800b87c <USBH_HandleControl+0x2e0>
      break;
 800b872:	bf00      	nop
 800b874:	e002      	b.n	800b87c <USBH_HandleControl+0x2e0>
      break;
 800b876:	bf00      	nop
 800b878:	e000      	b.n	800b87c <USBH_HandleControl+0x2e0>
      break;
 800b87a:	bf00      	nop
  }

  return status;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop

0800b888 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af04      	add	r7, sp, #16
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b896:	79f9      	ldrb	r1, [r7, #7]
 800b898:	2300      	movs	r3, #0
 800b89a:	9303      	str	r3, [sp, #12]
 800b89c:	2308      	movs	r3, #8
 800b89e:	9302      	str	r3, [sp, #8]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f000 fb46 	bl	800bf3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	80fb      	strh	r3, [r7, #6]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8e0:	7979      	ldrb	r1, [r7, #5]
 800b8e2:	7e3b      	ldrb	r3, [r7, #24]
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	88fb      	ldrh	r3, [r7, #6]
 800b8e8:	9302      	str	r3, [sp, #8]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 fb21 	bl	800bf3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b088      	sub	sp, #32
 800b90a:	af04      	add	r7, sp, #16
 800b90c:	60f8      	str	r0, [r7, #12]
 800b90e:	60b9      	str	r1, [r7, #8]
 800b910:	4611      	mov	r1, r2
 800b912:	461a      	mov	r2, r3
 800b914:	460b      	mov	r3, r1
 800b916:	80fb      	strh	r3, [r7, #6]
 800b918:	4613      	mov	r3, r2
 800b91a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b91c:	7979      	ldrb	r1, [r7, #5]
 800b91e:	2300      	movs	r3, #0
 800b920:	9303      	str	r3, [sp, #12]
 800b922:	88fb      	ldrh	r3, [r7, #6]
 800b924:	9302      	str	r3, [sp, #8]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	2301      	movs	r3, #1
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	2300      	movs	r3, #0
 800b930:	2201      	movs	r2, #1
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 fb03 	bl	800bf3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b938:	2300      	movs	r3, #0

}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b088      	sub	sp, #32
 800b946:	af04      	add	r7, sp, #16
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	4611      	mov	r1, r2
 800b94e:	461a      	mov	r2, r3
 800b950:	460b      	mov	r3, r1
 800b952:	80fb      	strh	r3, [r7, #6]
 800b954:	4613      	mov	r3, r2
 800b956:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b962:	2300      	movs	r3, #0
 800b964:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b966:	7979      	ldrb	r1, [r7, #5]
 800b968:	7e3b      	ldrb	r3, [r7, #24]
 800b96a:	9303      	str	r3, [sp, #12]
 800b96c:	88fb      	ldrh	r3, [r7, #6]
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	2301      	movs	r3, #1
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	2302      	movs	r3, #2
 800b97a:	2200      	movs	r2, #0
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 fade 	bl	800bf3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af04      	add	r7, sp, #16
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	4611      	mov	r1, r2
 800b998:	461a      	mov	r2, r3
 800b99a:	460b      	mov	r3, r1
 800b99c:	80fb      	strh	r3, [r7, #6]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9a2:	7979      	ldrb	r1, [r7, #5]
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9303      	str	r3, [sp, #12]
 800b9a8:	88fb      	ldrh	r3, [r7, #6]
 800b9aa:	9302      	str	r3, [sp, #8]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	9301      	str	r3, [sp, #4]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 fac0 	bl	800bf3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af04      	add	r7, sp, #16
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	70fb      	strb	r3, [r7, #3]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	70bb      	strb	r3, [r7, #2]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b9e2:	7878      	ldrb	r0, [r7, #1]
 800b9e4:	78ba      	ldrb	r2, [r7, #2]
 800b9e6:	78f9      	ldrb	r1, [r7, #3]
 800b9e8:	8b3b      	ldrh	r3, [r7, #24]
 800b9ea:	9302      	str	r3, [sp, #8]
 800b9ec:	7d3b      	ldrb	r3, [r7, #20]
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	7c3b      	ldrb	r3, [r7, #16]
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fa53 	bl	800bea2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	460b      	mov	r3, r1
 800ba10:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ba12:	78fb      	ldrb	r3, [r7, #3]
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fa72 	bl	800bf00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f836 	bl	800baa4 <USBH_GetFreePipe>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba3c:	89fb      	ldrh	r3, [r7, #14]
 800ba3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d00a      	beq.n	800ba5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ba46:	78fa      	ldrb	r2, [r7, #3]
 800ba48:	89fb      	ldrh	r3, [r7, #14]
 800ba4a:	f003 030f 	and.w	r3, r3, #15
 800ba4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	33e0      	adds	r3, #224	@ 0xe0
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	440b      	add	r3, r1
 800ba5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ba5c:	89fb      	ldrh	r3, [r7, #14]
 800ba5e:	b2db      	uxtb	r3, r3
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ba74:	78fb      	ldrb	r3, [r7, #3]
 800ba76:	2b0f      	cmp	r3, #15
 800ba78:	d80d      	bhi.n	800ba96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	33e0      	adds	r3, #224	@ 0xe0
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	78fb      	ldrb	r3, [r7, #3]
 800ba88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba8c:	6879      	ldr	r1, [r7, #4]
 800ba8e:	33e0      	adds	r3, #224	@ 0xe0
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	440b      	add	r3, r1
 800ba94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
 800bab4:	e00f      	b.n	800bad6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	33e0      	adds	r3, #224	@ 0xe0
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d102      	bne.n	800bad0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	e007      	b.n	800bae0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	3301      	adds	r3, #1
 800bad4:	73fb      	strb	r3, [r7, #15]
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	2b0f      	cmp	r3, #15
 800bada:	d9ec      	bls.n	800bab6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800badc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800baf0:	2201      	movs	r2, #1
 800baf2:	490e      	ldr	r1, [pc, #56]	@ (800bb2c <MX_USB_HOST_Init+0x40>)
 800baf4:	480e      	ldr	r0, [pc, #56]	@ (800bb30 <MX_USB_HOST_Init+0x44>)
 800baf6:	f7fe fb0f 	bl	800a118 <USBH_Init>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bb00:	f7f5 ff88 	bl	8001a14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bb04:	490b      	ldr	r1, [pc, #44]	@ (800bb34 <MX_USB_HOST_Init+0x48>)
 800bb06:	480a      	ldr	r0, [pc, #40]	@ (800bb30 <MX_USB_HOST_Init+0x44>)
 800bb08:	f7fe fbb1 	bl	800a26e <USBH_RegisterClass>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bb12:	f7f5 ff7f 	bl	8001a14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bb16:	4806      	ldr	r0, [pc, #24]	@ (800bb30 <MX_USB_HOST_Init+0x44>)
 800bb18:	f7fe fc35 	bl	800a386 <USBH_Start>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bb22:	f7f5 ff77 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bb26:	bf00      	nop
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	0800bb4d 	.word	0x0800bb4d
 800bb30:	200004f0 	.word	0x200004f0
 800bb34:	20000028 	.word	0x20000028

0800bb38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bb3c:	4802      	ldr	r0, [pc, #8]	@ (800bb48 <MX_USB_HOST_Process+0x10>)
 800bb3e:	f7fe fc33 	bl	800a3a8 <USBH_Process>
}
 800bb42:	bf00      	nop
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	200004f0 	.word	0x200004f0

0800bb4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bb58:	78fb      	ldrb	r3, [r7, #3]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	2b04      	cmp	r3, #4
 800bb5e:	d819      	bhi.n	800bb94 <USBH_UserProcess+0x48>
 800bb60:	a201      	add	r2, pc, #4	@ (adr r2, 800bb68 <USBH_UserProcess+0x1c>)
 800bb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb66:	bf00      	nop
 800bb68:	0800bb95 	.word	0x0800bb95
 800bb6c:	0800bb85 	.word	0x0800bb85
 800bb70:	0800bb95 	.word	0x0800bb95
 800bb74:	0800bb8d 	.word	0x0800bb8d
 800bb78:	0800bb7d 	.word	0x0800bb7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bb7c:	4b09      	ldr	r3, [pc, #36]	@ (800bba4 <USBH_UserProcess+0x58>)
 800bb7e:	2203      	movs	r2, #3
 800bb80:	701a      	strb	r2, [r3, #0]
  break;
 800bb82:	e008      	b.n	800bb96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bb84:	4b07      	ldr	r3, [pc, #28]	@ (800bba4 <USBH_UserProcess+0x58>)
 800bb86:	2202      	movs	r2, #2
 800bb88:	701a      	strb	r2, [r3, #0]
  break;
 800bb8a:	e004      	b.n	800bb96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bb8c:	4b05      	ldr	r3, [pc, #20]	@ (800bba4 <USBH_UserProcess+0x58>)
 800bb8e:	2201      	movs	r2, #1
 800bb90:	701a      	strb	r2, [r3, #0]
  break;
 800bb92:	e000      	b.n	800bb96 <USBH_UserProcess+0x4a>

  default:
  break;
 800bb94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bb96:	bf00      	nop
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	200008c8 	.word	0x200008c8

0800bba8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08a      	sub	sp, #40	@ 0x28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	605a      	str	r2, [r3, #4]
 800bbba:	609a      	str	r2, [r3, #8]
 800bbbc:	60da      	str	r2, [r3, #12]
 800bbbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbc8:	d147      	bne.n	800bc5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbca:	2300      	movs	r3, #0
 800bbcc:	613b      	str	r3, [r7, #16]
 800bbce:	4b25      	ldr	r3, [pc, #148]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd2:	4a24      	ldr	r2, [pc, #144]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bbd4:	f043 0301 	orr.w	r3, r3, #1
 800bbd8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbda:	4b22      	ldr	r3, [pc, #136]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bbdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	613b      	str	r3, [r7, #16]
 800bbe4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bbe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbec:	2300      	movs	r3, #0
 800bbee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bbf4:	f107 0314 	add.w	r3, r7, #20
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	481b      	ldr	r0, [pc, #108]	@ (800bc68 <HAL_HCD_MspInit+0xc0>)
 800bbfc:	f7f7 fcfa 	bl	80035f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bc00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bc04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc06:	2302      	movs	r3, #2
 800bc08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc12:	230a      	movs	r3, #10
 800bc14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc16:	f107 0314 	add.w	r3, r7, #20
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	4812      	ldr	r0, [pc, #72]	@ (800bc68 <HAL_HCD_MspInit+0xc0>)
 800bc1e:	f7f7 fce9 	bl	80035f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc22:	4b10      	ldr	r3, [pc, #64]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bc24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc26:	4a0f      	ldr	r2, [pc, #60]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bc28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc2c:	6353      	str	r3, [r2, #52]	@ 0x34
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]
 800bc32:	4b0c      	ldr	r3, [pc, #48]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc36:	4a0b      	ldr	r2, [pc, #44]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bc38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bc3c:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc3e:	4b09      	ldr	r3, [pc, #36]	@ (800bc64 <HAL_HCD_MspInit+0xbc>)
 800bc40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	2043      	movs	r0, #67	@ 0x43
 800bc50:	f7f7 f889 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc54:	2043      	movs	r0, #67	@ 0x43
 800bc56:	f7f7 f8a2 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc5a:	bf00      	nop
 800bc5c:	3728      	adds	r7, #40	@ 0x28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	40023800 	.word	0x40023800
 800bc68:	40020000 	.word	0x40020000

0800bc6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe ff6d 	bl	800ab5a <USBH_LL_IncTimer>
}
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fe ffa9 	bl	800abee <USBH_LL_Connect>
}
 800bc9c:	bf00      	nop
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fe ffb2 	bl	800ac1c <USBH_LL_Disconnect>
}
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	70fb      	strb	r3, [r7, #3]
 800bccc:	4613      	mov	r3, r2
 800bcce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe ff5f 	bl	800abae <USBH_LL_PortEnabled>
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe ff5f 	bl	800abca <USBH_LL_PortDisabled>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d12a      	bne.n	800bd7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bd26:	4a18      	ldr	r2, [pc, #96]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a15      	ldr	r2, [pc, #84]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd32:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd36:	4b14      	ldr	r3, [pc, #80]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bd3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bd3e:	4b12      	ldr	r3, [pc, #72]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd40:	2208      	movs	r2, #8
 800bd42:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bd44:	4b10      	ldr	r3, [pc, #64]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd46:	2201      	movs	r2, #1
 800bd48:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bd50:	4b0d      	ldr	r3, [pc, #52]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd52:	2202      	movs	r2, #2
 800bd54:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd56:	4b0c      	ldr	r3, [pc, #48]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bd5c:	480a      	ldr	r0, [pc, #40]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd5e:	f7f7 fe2f 	bl	80039c0 <HAL_HCD_Init>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bd68:	f7f5 fe54 	bl	8001a14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bd6c:	4806      	ldr	r0, [pc, #24]	@ (800bd88 <USBH_LL_Init+0x74>)
 800bd6e:	f7f8 fa8f 	bl	8004290 <HAL_HCD_GetCurrentFrame>
 800bd72:	4603      	mov	r3, r0
 800bd74:	4619      	mov	r1, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7fe fee0 	bl	800ab3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	200008cc 	.word	0x200008cc

0800bd8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7f8 f9fc 	bl	80041a0 <HAL_HCD_Start>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 f95e 	bl	800c070 <USBH_Get_USB_Status>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7f8 fa04 	bl	80041e6 <HAL_HCD_Stop>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f000 f943 	bl	800c070 <USBH_Get_USB_Status>
 800bdea:	4603      	mov	r3, r0
 800bdec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800be00:	2301      	movs	r3, #1
 800be02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f8 fa4e 	bl	80042ac <HAL_HCD_GetCurrentSpeed>
 800be10:	4603      	mov	r3, r0
 800be12:	2b02      	cmp	r3, #2
 800be14:	d00c      	beq.n	800be30 <USBH_LL_GetSpeed+0x38>
 800be16:	2b02      	cmp	r3, #2
 800be18:	d80d      	bhi.n	800be36 <USBH_LL_GetSpeed+0x3e>
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <USBH_LL_GetSpeed+0x2c>
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d003      	beq.n	800be2a <USBH_LL_GetSpeed+0x32>
 800be22:	e008      	b.n	800be36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800be24:	2300      	movs	r3, #0
 800be26:	73fb      	strb	r3, [r7, #15]
    break;
 800be28:	e008      	b.n	800be3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800be2a:	2301      	movs	r3, #1
 800be2c:	73fb      	strb	r3, [r7, #15]
    break;
 800be2e:	e005      	b.n	800be3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800be30:	2302      	movs	r3, #2
 800be32:	73fb      	strb	r3, [r7, #15]
    break;
 800be34:	e002      	b.n	800be3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800be36:	2301      	movs	r3, #1
 800be38:	73fb      	strb	r3, [r7, #15]
    break;
 800be3a:	bf00      	nop
  }
  return  speed;
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be4e:	2300      	movs	r3, #0
 800be50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f8 f9df 	bl	8004220 <HAL_HCD_ResetPort>
 800be62:	4603      	mov	r3, r0
 800be64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 f901 	bl	800c070 <USBH_Get_USB_Status>
 800be6e:	4603      	mov	r3, r0
 800be70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be72:	7bbb      	ldrb	r3, [r7, #14]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be8e:	78fa      	ldrb	r2, [r7, #3]
 800be90:	4611      	mov	r1, r2
 800be92:	4618      	mov	r0, r3
 800be94:	f7f8 f9e7 	bl	8004266 <HAL_HCD_HC_GetXferCount>
 800be98:	4603      	mov	r3, r0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bea2:	b590      	push	{r4, r7, lr}
 800bea4:	b089      	sub	sp, #36	@ 0x24
 800bea6:	af04      	add	r7, sp, #16
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	4608      	mov	r0, r1
 800beac:	4611      	mov	r1, r2
 800beae:	461a      	mov	r2, r3
 800beb0:	4603      	mov	r3, r0
 800beb2:	70fb      	strb	r3, [r7, #3]
 800beb4:	460b      	mov	r3, r1
 800beb6:	70bb      	strb	r3, [r7, #2]
 800beb8:	4613      	mov	r3, r2
 800beba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800beca:	787c      	ldrb	r4, [r7, #1]
 800becc:	78ba      	ldrb	r2, [r7, #2]
 800bece:	78f9      	ldrb	r1, [r7, #3]
 800bed0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bed2:	9302      	str	r3, [sp, #8]
 800bed4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	4623      	mov	r3, r4
 800bee2:	f7f7 fdd4 	bl	8003a8e <HAL_HCD_HC_Init>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	4618      	mov	r0, r3
 800beee:	f000 f8bf 	bl	800c070 <USBH_Get_USB_Status>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	bd90      	pop	{r4, r7, pc}

0800bf00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf1a:	78fa      	ldrb	r2, [r7, #3]
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f7 fe6d 	bl	8003bfe <HAL_HCD_HC_Halt>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf28:	7bfb      	ldrb	r3, [r7, #15]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 f8a0 	bl	800c070 <USBH_Get_USB_Status>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bf3e:	b590      	push	{r4, r7, lr}
 800bf40:	b089      	sub	sp, #36	@ 0x24
 800bf42:	af04      	add	r7, sp, #16
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	4608      	mov	r0, r1
 800bf48:	4611      	mov	r1, r2
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	70fb      	strb	r3, [r7, #3]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70bb      	strb	r3, [r7, #2]
 800bf54:	4613      	mov	r3, r2
 800bf56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bf66:	787c      	ldrb	r4, [r7, #1]
 800bf68:	78ba      	ldrb	r2, [r7, #2]
 800bf6a:	78f9      	ldrb	r1, [r7, #3]
 800bf6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	4623      	mov	r3, r4
 800bf82:	f7f7 fe5f 	bl	8003c44 <HAL_HCD_HC_SubmitRequest>
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f86f 	bl	800c070 <USBH_Get_USB_Status>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd90      	pop	{r4, r7, pc}

0800bfa0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bfb2:	78fa      	ldrb	r2, [r7, #3]
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7f8 f940 	bl	800423c <HAL_HCD_HC_GetURBState>
 800bfbc:	4603      	mov	r3, r0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d103      	bne.n	800bfe4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bfdc:	78fb      	ldrb	r3, [r7, #3]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 f872 	bl	800c0c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bfe4:	20c8      	movs	r0, #200	@ 0xc8
 800bfe6:	f7f6 f999 	bl	800231c <HAL_Delay>
  return USBH_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
 800c000:	4613      	mov	r3, r2
 800c002:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c00a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c00c:	78fa      	ldrb	r2, [r7, #3]
 800c00e:	68f9      	ldr	r1, [r7, #12]
 800c010:	4613      	mov	r3, r2
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	1a9b      	subs	r3, r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	440b      	add	r3, r1
 800c01a:	3317      	adds	r3, #23
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00a      	beq.n	800c038 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c022:	78fa      	ldrb	r2, [r7, #3]
 800c024:	68f9      	ldr	r1, [r7, #12]
 800c026:	4613      	mov	r3, r2
 800c028:	011b      	lsls	r3, r3, #4
 800c02a:	1a9b      	subs	r3, r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	440b      	add	r3, r1
 800c030:	333c      	adds	r3, #60	@ 0x3c
 800c032:	78ba      	ldrb	r2, [r7, #2]
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	e009      	b.n	800c04c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c038:	78fa      	ldrb	r2, [r7, #3]
 800c03a:	68f9      	ldr	r1, [r7, #12]
 800c03c:	4613      	mov	r3, r2
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	1a9b      	subs	r3, r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	333d      	adds	r3, #61	@ 0x3d
 800c048:	78ba      	ldrb	r2, [r7, #2]
 800c04a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7f6 f95a 	bl	800231c <HAL_Delay>
}
 800c068:	bf00      	nop
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	2b03      	cmp	r3, #3
 800c082:	d817      	bhi.n	800c0b4 <USBH_Get_USB_Status+0x44>
 800c084:	a201      	add	r2, pc, #4	@ (adr r2, 800c08c <USBH_Get_USB_Status+0x1c>)
 800c086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08a:	bf00      	nop
 800c08c:	0800c09d 	.word	0x0800c09d
 800c090:	0800c0a3 	.word	0x0800c0a3
 800c094:	0800c0a9 	.word	0x0800c0a9
 800c098:	0800c0af 	.word	0x0800c0af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a0:	e00b      	b.n	800c0ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a6:	e008      	b.n	800c0ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ac:	e005      	b.n	800c0ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0b2:	e002      	b.n	800c0ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0b8:	bf00      	nop
  }
  return usb_status;
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c0d6:	79fb      	ldrb	r3, [r7, #7]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	73fb      	strb	r3, [r7, #15]
 800c0e0:	e001      	b.n	800c0e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	4803      	ldr	r0, [pc, #12]	@ (800c0fc <MX_DriverVbusFS+0x34>)
 800c0ee:	f7f7 fc35 	bl	800395c <HAL_GPIO_WritePin>
}
 800c0f2:	bf00      	nop
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	40020800 	.word	0x40020800

0800c100 <malloc>:
 800c100:	4b02      	ldr	r3, [pc, #8]	@ (800c10c <malloc+0xc>)
 800c102:	4601      	mov	r1, r0
 800c104:	6818      	ldr	r0, [r3, #0]
 800c106:	f000 b82d 	b.w	800c164 <_malloc_r>
 800c10a:	bf00      	nop
 800c10c:	20000048 	.word	0x20000048

0800c110 <free>:
 800c110:	4b02      	ldr	r3, [pc, #8]	@ (800c11c <free+0xc>)
 800c112:	4601      	mov	r1, r0
 800c114:	6818      	ldr	r0, [r3, #0]
 800c116:	f000 b917 	b.w	800c348 <_free_r>
 800c11a:	bf00      	nop
 800c11c:	20000048 	.word	0x20000048

0800c120 <sbrk_aligned>:
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	4e0f      	ldr	r6, [pc, #60]	@ (800c160 <sbrk_aligned+0x40>)
 800c124:	460c      	mov	r4, r1
 800c126:	6831      	ldr	r1, [r6, #0]
 800c128:	4605      	mov	r5, r0
 800c12a:	b911      	cbnz	r1, 800c132 <sbrk_aligned+0x12>
 800c12c:	f000 f8d0 	bl	800c2d0 <_sbrk_r>
 800c130:	6030      	str	r0, [r6, #0]
 800c132:	4621      	mov	r1, r4
 800c134:	4628      	mov	r0, r5
 800c136:	f000 f8cb 	bl	800c2d0 <_sbrk_r>
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	d103      	bne.n	800c146 <sbrk_aligned+0x26>
 800c13e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c142:	4620      	mov	r0, r4
 800c144:	bd70      	pop	{r4, r5, r6, pc}
 800c146:	1cc4      	adds	r4, r0, #3
 800c148:	f024 0403 	bic.w	r4, r4, #3
 800c14c:	42a0      	cmp	r0, r4
 800c14e:	d0f8      	beq.n	800c142 <sbrk_aligned+0x22>
 800c150:	1a21      	subs	r1, r4, r0
 800c152:	4628      	mov	r0, r5
 800c154:	f000 f8bc 	bl	800c2d0 <_sbrk_r>
 800c158:	3001      	adds	r0, #1
 800c15a:	d1f2      	bne.n	800c142 <sbrk_aligned+0x22>
 800c15c:	e7ef      	b.n	800c13e <sbrk_aligned+0x1e>
 800c15e:	bf00      	nop
 800c160:	20000cac 	.word	0x20000cac

0800c164 <_malloc_r>:
 800c164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c168:	1ccd      	adds	r5, r1, #3
 800c16a:	f025 0503 	bic.w	r5, r5, #3
 800c16e:	3508      	adds	r5, #8
 800c170:	2d0c      	cmp	r5, #12
 800c172:	bf38      	it	cc
 800c174:	250c      	movcc	r5, #12
 800c176:	2d00      	cmp	r5, #0
 800c178:	4606      	mov	r6, r0
 800c17a:	db01      	blt.n	800c180 <_malloc_r+0x1c>
 800c17c:	42a9      	cmp	r1, r5
 800c17e:	d904      	bls.n	800c18a <_malloc_r+0x26>
 800c180:	230c      	movs	r3, #12
 800c182:	6033      	str	r3, [r6, #0]
 800c184:	2000      	movs	r0, #0
 800c186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c260 <_malloc_r+0xfc>
 800c18e:	f000 f869 	bl	800c264 <__malloc_lock>
 800c192:	f8d8 3000 	ldr.w	r3, [r8]
 800c196:	461c      	mov	r4, r3
 800c198:	bb44      	cbnz	r4, 800c1ec <_malloc_r+0x88>
 800c19a:	4629      	mov	r1, r5
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff ffbf 	bl	800c120 <sbrk_aligned>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	d158      	bne.n	800c25a <_malloc_r+0xf6>
 800c1a8:	f8d8 4000 	ldr.w	r4, [r8]
 800c1ac:	4627      	mov	r7, r4
 800c1ae:	2f00      	cmp	r7, #0
 800c1b0:	d143      	bne.n	800c23a <_malloc_r+0xd6>
 800c1b2:	2c00      	cmp	r4, #0
 800c1b4:	d04b      	beq.n	800c24e <_malloc_r+0xea>
 800c1b6:	6823      	ldr	r3, [r4, #0]
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	eb04 0903 	add.w	r9, r4, r3
 800c1c0:	f000 f886 	bl	800c2d0 <_sbrk_r>
 800c1c4:	4581      	cmp	r9, r0
 800c1c6:	d142      	bne.n	800c24e <_malloc_r+0xea>
 800c1c8:	6821      	ldr	r1, [r4, #0]
 800c1ca:	1a6d      	subs	r5, r5, r1
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f7ff ffa6 	bl	800c120 <sbrk_aligned>
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	d03a      	beq.n	800c24e <_malloc_r+0xea>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	442b      	add	r3, r5
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	f8d8 3000 	ldr.w	r3, [r8]
 800c1e2:	685a      	ldr	r2, [r3, #4]
 800c1e4:	bb62      	cbnz	r2, 800c240 <_malloc_r+0xdc>
 800c1e6:	f8c8 7000 	str.w	r7, [r8]
 800c1ea:	e00f      	b.n	800c20c <_malloc_r+0xa8>
 800c1ec:	6822      	ldr	r2, [r4, #0]
 800c1ee:	1b52      	subs	r2, r2, r5
 800c1f0:	d420      	bmi.n	800c234 <_malloc_r+0xd0>
 800c1f2:	2a0b      	cmp	r2, #11
 800c1f4:	d917      	bls.n	800c226 <_malloc_r+0xc2>
 800c1f6:	1961      	adds	r1, r4, r5
 800c1f8:	42a3      	cmp	r3, r4
 800c1fa:	6025      	str	r5, [r4, #0]
 800c1fc:	bf18      	it	ne
 800c1fe:	6059      	strne	r1, [r3, #4]
 800c200:	6863      	ldr	r3, [r4, #4]
 800c202:	bf08      	it	eq
 800c204:	f8c8 1000 	streq.w	r1, [r8]
 800c208:	5162      	str	r2, [r4, r5]
 800c20a:	604b      	str	r3, [r1, #4]
 800c20c:	4630      	mov	r0, r6
 800c20e:	f000 f82f 	bl	800c270 <__malloc_unlock>
 800c212:	f104 000b 	add.w	r0, r4, #11
 800c216:	1d23      	adds	r3, r4, #4
 800c218:	f020 0007 	bic.w	r0, r0, #7
 800c21c:	1ac2      	subs	r2, r0, r3
 800c21e:	bf1c      	itt	ne
 800c220:	1a1b      	subne	r3, r3, r0
 800c222:	50a3      	strne	r3, [r4, r2]
 800c224:	e7af      	b.n	800c186 <_malloc_r+0x22>
 800c226:	6862      	ldr	r2, [r4, #4]
 800c228:	42a3      	cmp	r3, r4
 800c22a:	bf0c      	ite	eq
 800c22c:	f8c8 2000 	streq.w	r2, [r8]
 800c230:	605a      	strne	r2, [r3, #4]
 800c232:	e7eb      	b.n	800c20c <_malloc_r+0xa8>
 800c234:	4623      	mov	r3, r4
 800c236:	6864      	ldr	r4, [r4, #4]
 800c238:	e7ae      	b.n	800c198 <_malloc_r+0x34>
 800c23a:	463c      	mov	r4, r7
 800c23c:	687f      	ldr	r7, [r7, #4]
 800c23e:	e7b6      	b.n	800c1ae <_malloc_r+0x4a>
 800c240:	461a      	mov	r2, r3
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	42a3      	cmp	r3, r4
 800c246:	d1fb      	bne.n	800c240 <_malloc_r+0xdc>
 800c248:	2300      	movs	r3, #0
 800c24a:	6053      	str	r3, [r2, #4]
 800c24c:	e7de      	b.n	800c20c <_malloc_r+0xa8>
 800c24e:	230c      	movs	r3, #12
 800c250:	6033      	str	r3, [r6, #0]
 800c252:	4630      	mov	r0, r6
 800c254:	f000 f80c 	bl	800c270 <__malloc_unlock>
 800c258:	e794      	b.n	800c184 <_malloc_r+0x20>
 800c25a:	6005      	str	r5, [r0, #0]
 800c25c:	e7d6      	b.n	800c20c <_malloc_r+0xa8>
 800c25e:	bf00      	nop
 800c260:	20000cb0 	.word	0x20000cb0

0800c264 <__malloc_lock>:
 800c264:	4801      	ldr	r0, [pc, #4]	@ (800c26c <__malloc_lock+0x8>)
 800c266:	f000 b86d 	b.w	800c344 <__retarget_lock_acquire_recursive>
 800c26a:	bf00      	nop
 800c26c:	20000dec 	.word	0x20000dec

0800c270 <__malloc_unlock>:
 800c270:	4801      	ldr	r0, [pc, #4]	@ (800c278 <__malloc_unlock+0x8>)
 800c272:	f000 b868 	b.w	800c346 <__retarget_lock_release_recursive>
 800c276:	bf00      	nop
 800c278:	20000dec 	.word	0x20000dec

0800c27c <siprintf>:
 800c27c:	b40e      	push	{r1, r2, r3}
 800c27e:	b510      	push	{r4, lr}
 800c280:	b09d      	sub	sp, #116	@ 0x74
 800c282:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c284:	9002      	str	r0, [sp, #8]
 800c286:	9006      	str	r0, [sp, #24]
 800c288:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c28c:	480a      	ldr	r0, [pc, #40]	@ (800c2b8 <siprintf+0x3c>)
 800c28e:	9107      	str	r1, [sp, #28]
 800c290:	9104      	str	r1, [sp, #16]
 800c292:	490a      	ldr	r1, [pc, #40]	@ (800c2bc <siprintf+0x40>)
 800c294:	f853 2b04 	ldr.w	r2, [r3], #4
 800c298:	9105      	str	r1, [sp, #20]
 800c29a:	2400      	movs	r4, #0
 800c29c:	a902      	add	r1, sp, #8
 800c29e:	6800      	ldr	r0, [r0, #0]
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c2a4:	f000 f8f6 	bl	800c494 <_svfiprintf_r>
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	701c      	strb	r4, [r3, #0]
 800c2ac:	b01d      	add	sp, #116	@ 0x74
 800c2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b2:	b003      	add	sp, #12
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	20000048 	.word	0x20000048
 800c2bc:	ffff0208 	.word	0xffff0208

0800c2c0 <memset>:
 800c2c0:	4402      	add	r2, r0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d100      	bne.n	800c2ca <memset+0xa>
 800c2c8:	4770      	bx	lr
 800c2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ce:	e7f9      	b.n	800c2c4 <memset+0x4>

0800c2d0 <_sbrk_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4d06      	ldr	r5, [pc, #24]	@ (800c2ec <_sbrk_r+0x1c>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	f7f5 fef0 	bl	80020c0 <_sbrk>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_sbrk_r+0x1a>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_sbrk_r+0x1a>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	20000df0 	.word	0x20000df0

0800c2f0 <__errno>:
 800c2f0:	4b01      	ldr	r3, [pc, #4]	@ (800c2f8 <__errno+0x8>)
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	20000048 	.word	0x20000048

0800c2fc <__libc_init_array>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	4d0d      	ldr	r5, [pc, #52]	@ (800c334 <__libc_init_array+0x38>)
 800c300:	4c0d      	ldr	r4, [pc, #52]	@ (800c338 <__libc_init_array+0x3c>)
 800c302:	1b64      	subs	r4, r4, r5
 800c304:	10a4      	asrs	r4, r4, #2
 800c306:	2600      	movs	r6, #0
 800c308:	42a6      	cmp	r6, r4
 800c30a:	d109      	bne.n	800c320 <__libc_init_array+0x24>
 800c30c:	4d0b      	ldr	r5, [pc, #44]	@ (800c33c <__libc_init_array+0x40>)
 800c30e:	4c0c      	ldr	r4, [pc, #48]	@ (800c340 <__libc_init_array+0x44>)
 800c310:	f000 fba6 	bl	800ca60 <_init>
 800c314:	1b64      	subs	r4, r4, r5
 800c316:	10a4      	asrs	r4, r4, #2
 800c318:	2600      	movs	r6, #0
 800c31a:	42a6      	cmp	r6, r4
 800c31c:	d105      	bne.n	800c32a <__libc_init_array+0x2e>
 800c31e:	bd70      	pop	{r4, r5, r6, pc}
 800c320:	f855 3b04 	ldr.w	r3, [r5], #4
 800c324:	4798      	blx	r3
 800c326:	3601      	adds	r6, #1
 800c328:	e7ee      	b.n	800c308 <__libc_init_array+0xc>
 800c32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c32e:	4798      	blx	r3
 800c330:	3601      	adds	r6, #1
 800c332:	e7f2      	b.n	800c31a <__libc_init_array+0x1e>
 800c334:	0800cb04 	.word	0x0800cb04
 800c338:	0800cb04 	.word	0x0800cb04
 800c33c:	0800cb04 	.word	0x0800cb04
 800c340:	0800cb08 	.word	0x0800cb08

0800c344 <__retarget_lock_acquire_recursive>:
 800c344:	4770      	bx	lr

0800c346 <__retarget_lock_release_recursive>:
 800c346:	4770      	bx	lr

0800c348 <_free_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4605      	mov	r5, r0
 800c34c:	2900      	cmp	r1, #0
 800c34e:	d041      	beq.n	800c3d4 <_free_r+0x8c>
 800c350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c354:	1f0c      	subs	r4, r1, #4
 800c356:	2b00      	cmp	r3, #0
 800c358:	bfb8      	it	lt
 800c35a:	18e4      	addlt	r4, r4, r3
 800c35c:	f7ff ff82 	bl	800c264 <__malloc_lock>
 800c360:	4a1d      	ldr	r2, [pc, #116]	@ (800c3d8 <_free_r+0x90>)
 800c362:	6813      	ldr	r3, [r2, #0]
 800c364:	b933      	cbnz	r3, 800c374 <_free_r+0x2c>
 800c366:	6063      	str	r3, [r4, #4]
 800c368:	6014      	str	r4, [r2, #0]
 800c36a:	4628      	mov	r0, r5
 800c36c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c370:	f7ff bf7e 	b.w	800c270 <__malloc_unlock>
 800c374:	42a3      	cmp	r3, r4
 800c376:	d908      	bls.n	800c38a <_free_r+0x42>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	1821      	adds	r1, r4, r0
 800c37c:	428b      	cmp	r3, r1
 800c37e:	bf01      	itttt	eq
 800c380:	6819      	ldreq	r1, [r3, #0]
 800c382:	685b      	ldreq	r3, [r3, #4]
 800c384:	1809      	addeq	r1, r1, r0
 800c386:	6021      	streq	r1, [r4, #0]
 800c388:	e7ed      	b.n	800c366 <_free_r+0x1e>
 800c38a:	461a      	mov	r2, r3
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	b10b      	cbz	r3, 800c394 <_free_r+0x4c>
 800c390:	42a3      	cmp	r3, r4
 800c392:	d9fa      	bls.n	800c38a <_free_r+0x42>
 800c394:	6811      	ldr	r1, [r2, #0]
 800c396:	1850      	adds	r0, r2, r1
 800c398:	42a0      	cmp	r0, r4
 800c39a:	d10b      	bne.n	800c3b4 <_free_r+0x6c>
 800c39c:	6820      	ldr	r0, [r4, #0]
 800c39e:	4401      	add	r1, r0
 800c3a0:	1850      	adds	r0, r2, r1
 800c3a2:	4283      	cmp	r3, r0
 800c3a4:	6011      	str	r1, [r2, #0]
 800c3a6:	d1e0      	bne.n	800c36a <_free_r+0x22>
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	6053      	str	r3, [r2, #4]
 800c3ae:	4408      	add	r0, r1
 800c3b0:	6010      	str	r0, [r2, #0]
 800c3b2:	e7da      	b.n	800c36a <_free_r+0x22>
 800c3b4:	d902      	bls.n	800c3bc <_free_r+0x74>
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	602b      	str	r3, [r5, #0]
 800c3ba:	e7d6      	b.n	800c36a <_free_r+0x22>
 800c3bc:	6820      	ldr	r0, [r4, #0]
 800c3be:	1821      	adds	r1, r4, r0
 800c3c0:	428b      	cmp	r3, r1
 800c3c2:	bf04      	itt	eq
 800c3c4:	6819      	ldreq	r1, [r3, #0]
 800c3c6:	685b      	ldreq	r3, [r3, #4]
 800c3c8:	6063      	str	r3, [r4, #4]
 800c3ca:	bf04      	itt	eq
 800c3cc:	1809      	addeq	r1, r1, r0
 800c3ce:	6021      	streq	r1, [r4, #0]
 800c3d0:	6054      	str	r4, [r2, #4]
 800c3d2:	e7ca      	b.n	800c36a <_free_r+0x22>
 800c3d4:	bd38      	pop	{r3, r4, r5, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20000cb0 	.word	0x20000cb0

0800c3dc <__ssputs_r>:
 800c3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e0:	688e      	ldr	r6, [r1, #8]
 800c3e2:	461f      	mov	r7, r3
 800c3e4:	42be      	cmp	r6, r7
 800c3e6:	680b      	ldr	r3, [r1, #0]
 800c3e8:	4682      	mov	sl, r0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	4690      	mov	r8, r2
 800c3ee:	d82d      	bhi.n	800c44c <__ssputs_r+0x70>
 800c3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c3f8:	d026      	beq.n	800c448 <__ssputs_r+0x6c>
 800c3fa:	6965      	ldr	r5, [r4, #20]
 800c3fc:	6909      	ldr	r1, [r1, #16]
 800c3fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c402:	eba3 0901 	sub.w	r9, r3, r1
 800c406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c40a:	1c7b      	adds	r3, r7, #1
 800c40c:	444b      	add	r3, r9
 800c40e:	106d      	asrs	r5, r5, #1
 800c410:	429d      	cmp	r5, r3
 800c412:	bf38      	it	cc
 800c414:	461d      	movcc	r5, r3
 800c416:	0553      	lsls	r3, r2, #21
 800c418:	d527      	bpl.n	800c46a <__ssputs_r+0x8e>
 800c41a:	4629      	mov	r1, r5
 800c41c:	f7ff fea2 	bl	800c164 <_malloc_r>
 800c420:	4606      	mov	r6, r0
 800c422:	b360      	cbz	r0, 800c47e <__ssputs_r+0xa2>
 800c424:	6921      	ldr	r1, [r4, #16]
 800c426:	464a      	mov	r2, r9
 800c428:	f000 fb04 	bl	800ca34 <memcpy>
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c436:	81a3      	strh	r3, [r4, #12]
 800c438:	6126      	str	r6, [r4, #16]
 800c43a:	6165      	str	r5, [r4, #20]
 800c43c:	444e      	add	r6, r9
 800c43e:	eba5 0509 	sub.w	r5, r5, r9
 800c442:	6026      	str	r6, [r4, #0]
 800c444:	60a5      	str	r5, [r4, #8]
 800c446:	463e      	mov	r6, r7
 800c448:	42be      	cmp	r6, r7
 800c44a:	d900      	bls.n	800c44e <__ssputs_r+0x72>
 800c44c:	463e      	mov	r6, r7
 800c44e:	6820      	ldr	r0, [r4, #0]
 800c450:	4632      	mov	r2, r6
 800c452:	4641      	mov	r1, r8
 800c454:	f000 fad4 	bl	800ca00 <memmove>
 800c458:	68a3      	ldr	r3, [r4, #8]
 800c45a:	1b9b      	subs	r3, r3, r6
 800c45c:	60a3      	str	r3, [r4, #8]
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	4433      	add	r3, r6
 800c462:	6023      	str	r3, [r4, #0]
 800c464:	2000      	movs	r0, #0
 800c466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46a:	462a      	mov	r2, r5
 800c46c:	f000 fa9a 	bl	800c9a4 <_realloc_r>
 800c470:	4606      	mov	r6, r0
 800c472:	2800      	cmp	r0, #0
 800c474:	d1e0      	bne.n	800c438 <__ssputs_r+0x5c>
 800c476:	6921      	ldr	r1, [r4, #16]
 800c478:	4650      	mov	r0, sl
 800c47a:	f7ff ff65 	bl	800c348 <_free_r>
 800c47e:	230c      	movs	r3, #12
 800c480:	f8ca 3000 	str.w	r3, [sl]
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c48a:	81a3      	strh	r3, [r4, #12]
 800c48c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c490:	e7e9      	b.n	800c466 <__ssputs_r+0x8a>
	...

0800c494 <_svfiprintf_r>:
 800c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	4698      	mov	r8, r3
 800c49a:	898b      	ldrh	r3, [r1, #12]
 800c49c:	061b      	lsls	r3, r3, #24
 800c49e:	b09d      	sub	sp, #116	@ 0x74
 800c4a0:	4607      	mov	r7, r0
 800c4a2:	460d      	mov	r5, r1
 800c4a4:	4614      	mov	r4, r2
 800c4a6:	d510      	bpl.n	800c4ca <_svfiprintf_r+0x36>
 800c4a8:	690b      	ldr	r3, [r1, #16]
 800c4aa:	b973      	cbnz	r3, 800c4ca <_svfiprintf_r+0x36>
 800c4ac:	2140      	movs	r1, #64	@ 0x40
 800c4ae:	f7ff fe59 	bl	800c164 <_malloc_r>
 800c4b2:	6028      	str	r0, [r5, #0]
 800c4b4:	6128      	str	r0, [r5, #16]
 800c4b6:	b930      	cbnz	r0, 800c4c6 <_svfiprintf_r+0x32>
 800c4b8:	230c      	movs	r3, #12
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4c0:	b01d      	add	sp, #116	@ 0x74
 800c4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c6:	2340      	movs	r3, #64	@ 0x40
 800c4c8:	616b      	str	r3, [r5, #20]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ce:	2320      	movs	r3, #32
 800c4d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4d8:	2330      	movs	r3, #48	@ 0x30
 800c4da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c678 <_svfiprintf_r+0x1e4>
 800c4de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4e2:	f04f 0901 	mov.w	r9, #1
 800c4e6:	4623      	mov	r3, r4
 800c4e8:	469a      	mov	sl, r3
 800c4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ee:	b10a      	cbz	r2, 800c4f4 <_svfiprintf_r+0x60>
 800c4f0:	2a25      	cmp	r2, #37	@ 0x25
 800c4f2:	d1f9      	bne.n	800c4e8 <_svfiprintf_r+0x54>
 800c4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4f8:	d00b      	beq.n	800c512 <_svfiprintf_r+0x7e>
 800c4fa:	465b      	mov	r3, fp
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff ff6b 	bl	800c3dc <__ssputs_r>
 800c506:	3001      	adds	r0, #1
 800c508:	f000 80a7 	beq.w	800c65a <_svfiprintf_r+0x1c6>
 800c50c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c50e:	445a      	add	r2, fp
 800c510:	9209      	str	r2, [sp, #36]	@ 0x24
 800c512:	f89a 3000 	ldrb.w	r3, [sl]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 809f 	beq.w	800c65a <_svfiprintf_r+0x1c6>
 800c51c:	2300      	movs	r3, #0
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c526:	f10a 0a01 	add.w	sl, sl, #1
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	9307      	str	r3, [sp, #28]
 800c52e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c532:	931a      	str	r3, [sp, #104]	@ 0x68
 800c534:	4654      	mov	r4, sl
 800c536:	2205      	movs	r2, #5
 800c538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53c:	484e      	ldr	r0, [pc, #312]	@ (800c678 <_svfiprintf_r+0x1e4>)
 800c53e:	f7f3 fe4f 	bl	80001e0 <memchr>
 800c542:	9a04      	ldr	r2, [sp, #16]
 800c544:	b9d8      	cbnz	r0, 800c57e <_svfiprintf_r+0xea>
 800c546:	06d0      	lsls	r0, r2, #27
 800c548:	bf44      	itt	mi
 800c54a:	2320      	movmi	r3, #32
 800c54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c550:	0711      	lsls	r1, r2, #28
 800c552:	bf44      	itt	mi
 800c554:	232b      	movmi	r3, #43	@ 0x2b
 800c556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c55a:	f89a 3000 	ldrb.w	r3, [sl]
 800c55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c560:	d015      	beq.n	800c58e <_svfiprintf_r+0xfa>
 800c562:	9a07      	ldr	r2, [sp, #28]
 800c564:	4654      	mov	r4, sl
 800c566:	2000      	movs	r0, #0
 800c568:	f04f 0c0a 	mov.w	ip, #10
 800c56c:	4621      	mov	r1, r4
 800c56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c572:	3b30      	subs	r3, #48	@ 0x30
 800c574:	2b09      	cmp	r3, #9
 800c576:	d94b      	bls.n	800c610 <_svfiprintf_r+0x17c>
 800c578:	b1b0      	cbz	r0, 800c5a8 <_svfiprintf_r+0x114>
 800c57a:	9207      	str	r2, [sp, #28]
 800c57c:	e014      	b.n	800c5a8 <_svfiprintf_r+0x114>
 800c57e:	eba0 0308 	sub.w	r3, r0, r8
 800c582:	fa09 f303 	lsl.w	r3, r9, r3
 800c586:	4313      	orrs	r3, r2
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	46a2      	mov	sl, r4
 800c58c:	e7d2      	b.n	800c534 <_svfiprintf_r+0xa0>
 800c58e:	9b03      	ldr	r3, [sp, #12]
 800c590:	1d19      	adds	r1, r3, #4
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	9103      	str	r1, [sp, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bfbb      	ittet	lt
 800c59a:	425b      	neglt	r3, r3
 800c59c:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a0:	9307      	strge	r3, [sp, #28]
 800c5a2:	9307      	strlt	r3, [sp, #28]
 800c5a4:	bfb8      	it	lt
 800c5a6:	9204      	strlt	r2, [sp, #16]
 800c5a8:	7823      	ldrb	r3, [r4, #0]
 800c5aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5ac:	d10a      	bne.n	800c5c4 <_svfiprintf_r+0x130>
 800c5ae:	7863      	ldrb	r3, [r4, #1]
 800c5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5b2:	d132      	bne.n	800c61a <_svfiprintf_r+0x186>
 800c5b4:	9b03      	ldr	r3, [sp, #12]
 800c5b6:	1d1a      	adds	r2, r3, #4
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	9203      	str	r2, [sp, #12]
 800c5bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5c0:	3402      	adds	r4, #2
 800c5c2:	9305      	str	r3, [sp, #20]
 800c5c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c688 <_svfiprintf_r+0x1f4>
 800c5c8:	7821      	ldrb	r1, [r4, #0]
 800c5ca:	2203      	movs	r2, #3
 800c5cc:	4650      	mov	r0, sl
 800c5ce:	f7f3 fe07 	bl	80001e0 <memchr>
 800c5d2:	b138      	cbz	r0, 800c5e4 <_svfiprintf_r+0x150>
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	eba0 000a 	sub.w	r0, r0, sl
 800c5da:	2240      	movs	r2, #64	@ 0x40
 800c5dc:	4082      	lsls	r2, r0
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	3401      	adds	r4, #1
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e8:	4824      	ldr	r0, [pc, #144]	@ (800c67c <_svfiprintf_r+0x1e8>)
 800c5ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5ee:	2206      	movs	r2, #6
 800c5f0:	f7f3 fdf6 	bl	80001e0 <memchr>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d036      	beq.n	800c666 <_svfiprintf_r+0x1d2>
 800c5f8:	4b21      	ldr	r3, [pc, #132]	@ (800c680 <_svfiprintf_r+0x1ec>)
 800c5fa:	bb1b      	cbnz	r3, 800c644 <_svfiprintf_r+0x1b0>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	3307      	adds	r3, #7
 800c600:	f023 0307 	bic.w	r3, r3, #7
 800c604:	3308      	adds	r3, #8
 800c606:	9303      	str	r3, [sp, #12]
 800c608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60a:	4433      	add	r3, r6
 800c60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c60e:	e76a      	b.n	800c4e6 <_svfiprintf_r+0x52>
 800c610:	fb0c 3202 	mla	r2, ip, r2, r3
 800c614:	460c      	mov	r4, r1
 800c616:	2001      	movs	r0, #1
 800c618:	e7a8      	b.n	800c56c <_svfiprintf_r+0xd8>
 800c61a:	2300      	movs	r3, #0
 800c61c:	3401      	adds	r4, #1
 800c61e:	9305      	str	r3, [sp, #20]
 800c620:	4619      	mov	r1, r3
 800c622:	f04f 0c0a 	mov.w	ip, #10
 800c626:	4620      	mov	r0, r4
 800c628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c62c:	3a30      	subs	r2, #48	@ 0x30
 800c62e:	2a09      	cmp	r2, #9
 800c630:	d903      	bls.n	800c63a <_svfiprintf_r+0x1a6>
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0c6      	beq.n	800c5c4 <_svfiprintf_r+0x130>
 800c636:	9105      	str	r1, [sp, #20]
 800c638:	e7c4      	b.n	800c5c4 <_svfiprintf_r+0x130>
 800c63a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c63e:	4604      	mov	r4, r0
 800c640:	2301      	movs	r3, #1
 800c642:	e7f0      	b.n	800c626 <_svfiprintf_r+0x192>
 800c644:	ab03      	add	r3, sp, #12
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	462a      	mov	r2, r5
 800c64a:	4b0e      	ldr	r3, [pc, #56]	@ (800c684 <_svfiprintf_r+0x1f0>)
 800c64c:	a904      	add	r1, sp, #16
 800c64e:	4638      	mov	r0, r7
 800c650:	f3af 8000 	nop.w
 800c654:	1c42      	adds	r2, r0, #1
 800c656:	4606      	mov	r6, r0
 800c658:	d1d6      	bne.n	800c608 <_svfiprintf_r+0x174>
 800c65a:	89ab      	ldrh	r3, [r5, #12]
 800c65c:	065b      	lsls	r3, r3, #25
 800c65e:	f53f af2d 	bmi.w	800c4bc <_svfiprintf_r+0x28>
 800c662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c664:	e72c      	b.n	800c4c0 <_svfiprintf_r+0x2c>
 800c666:	ab03      	add	r3, sp, #12
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	462a      	mov	r2, r5
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <_svfiprintf_r+0x1f0>)
 800c66e:	a904      	add	r1, sp, #16
 800c670:	4638      	mov	r0, r7
 800c672:	f000 f879 	bl	800c768 <_printf_i>
 800c676:	e7ed      	b.n	800c654 <_svfiprintf_r+0x1c0>
 800c678:	0800cac8 	.word	0x0800cac8
 800c67c:	0800cad2 	.word	0x0800cad2
 800c680:	00000000 	.word	0x00000000
 800c684:	0800c3dd 	.word	0x0800c3dd
 800c688:	0800cace 	.word	0x0800cace

0800c68c <_printf_common>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	4616      	mov	r6, r2
 800c692:	4698      	mov	r8, r3
 800c694:	688a      	ldr	r2, [r1, #8]
 800c696:	690b      	ldr	r3, [r1, #16]
 800c698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c69c:	4293      	cmp	r3, r2
 800c69e:	bfb8      	it	lt
 800c6a0:	4613      	movlt	r3, r2
 800c6a2:	6033      	str	r3, [r6, #0]
 800c6a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	b10a      	cbz	r2, 800c6b2 <_printf_common+0x26>
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	6033      	str	r3, [r6, #0]
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	0699      	lsls	r1, r3, #26
 800c6b6:	bf42      	ittt	mi
 800c6b8:	6833      	ldrmi	r3, [r6, #0]
 800c6ba:	3302      	addmi	r3, #2
 800c6bc:	6033      	strmi	r3, [r6, #0]
 800c6be:	6825      	ldr	r5, [r4, #0]
 800c6c0:	f015 0506 	ands.w	r5, r5, #6
 800c6c4:	d106      	bne.n	800c6d4 <_printf_common+0x48>
 800c6c6:	f104 0a19 	add.w	sl, r4, #25
 800c6ca:	68e3      	ldr	r3, [r4, #12]
 800c6cc:	6832      	ldr	r2, [r6, #0]
 800c6ce:	1a9b      	subs	r3, r3, r2
 800c6d0:	42ab      	cmp	r3, r5
 800c6d2:	dc26      	bgt.n	800c722 <_printf_common+0x96>
 800c6d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6d8:	6822      	ldr	r2, [r4, #0]
 800c6da:	3b00      	subs	r3, #0
 800c6dc:	bf18      	it	ne
 800c6de:	2301      	movne	r3, #1
 800c6e0:	0692      	lsls	r2, r2, #26
 800c6e2:	d42b      	bmi.n	800c73c <_printf_common+0xb0>
 800c6e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6e8:	4641      	mov	r1, r8
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	47c8      	blx	r9
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	d01e      	beq.n	800c730 <_printf_common+0xa4>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	6922      	ldr	r2, [r4, #16]
 800c6f6:	f003 0306 	and.w	r3, r3, #6
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	bf02      	ittt	eq
 800c6fe:	68e5      	ldreq	r5, [r4, #12]
 800c700:	6833      	ldreq	r3, [r6, #0]
 800c702:	1aed      	subeq	r5, r5, r3
 800c704:	68a3      	ldr	r3, [r4, #8]
 800c706:	bf0c      	ite	eq
 800c708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c70c:	2500      	movne	r5, #0
 800c70e:	4293      	cmp	r3, r2
 800c710:	bfc4      	itt	gt
 800c712:	1a9b      	subgt	r3, r3, r2
 800c714:	18ed      	addgt	r5, r5, r3
 800c716:	2600      	movs	r6, #0
 800c718:	341a      	adds	r4, #26
 800c71a:	42b5      	cmp	r5, r6
 800c71c:	d11a      	bne.n	800c754 <_printf_common+0xc8>
 800c71e:	2000      	movs	r0, #0
 800c720:	e008      	b.n	800c734 <_printf_common+0xa8>
 800c722:	2301      	movs	r3, #1
 800c724:	4652      	mov	r2, sl
 800c726:	4641      	mov	r1, r8
 800c728:	4638      	mov	r0, r7
 800c72a:	47c8      	blx	r9
 800c72c:	3001      	adds	r0, #1
 800c72e:	d103      	bne.n	800c738 <_printf_common+0xac>
 800c730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c738:	3501      	adds	r5, #1
 800c73a:	e7c6      	b.n	800c6ca <_printf_common+0x3e>
 800c73c:	18e1      	adds	r1, r4, r3
 800c73e:	1c5a      	adds	r2, r3, #1
 800c740:	2030      	movs	r0, #48	@ 0x30
 800c742:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c746:	4422      	add	r2, r4
 800c748:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c74c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c750:	3302      	adds	r3, #2
 800c752:	e7c7      	b.n	800c6e4 <_printf_common+0x58>
 800c754:	2301      	movs	r3, #1
 800c756:	4622      	mov	r2, r4
 800c758:	4641      	mov	r1, r8
 800c75a:	4638      	mov	r0, r7
 800c75c:	47c8      	blx	r9
 800c75e:	3001      	adds	r0, #1
 800c760:	d0e6      	beq.n	800c730 <_printf_common+0xa4>
 800c762:	3601      	adds	r6, #1
 800c764:	e7d9      	b.n	800c71a <_printf_common+0x8e>
	...

0800c768 <_printf_i>:
 800c768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c76c:	7e0f      	ldrb	r7, [r1, #24]
 800c76e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c770:	2f78      	cmp	r7, #120	@ 0x78
 800c772:	4691      	mov	r9, r2
 800c774:	4680      	mov	r8, r0
 800c776:	460c      	mov	r4, r1
 800c778:	469a      	mov	sl, r3
 800c77a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c77e:	d807      	bhi.n	800c790 <_printf_i+0x28>
 800c780:	2f62      	cmp	r7, #98	@ 0x62
 800c782:	d80a      	bhi.n	800c79a <_printf_i+0x32>
 800c784:	2f00      	cmp	r7, #0
 800c786:	f000 80d1 	beq.w	800c92c <_printf_i+0x1c4>
 800c78a:	2f58      	cmp	r7, #88	@ 0x58
 800c78c:	f000 80b8 	beq.w	800c900 <_printf_i+0x198>
 800c790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c794:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c798:	e03a      	b.n	800c810 <_printf_i+0xa8>
 800c79a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c79e:	2b15      	cmp	r3, #21
 800c7a0:	d8f6      	bhi.n	800c790 <_printf_i+0x28>
 800c7a2:	a101      	add	r1, pc, #4	@ (adr r1, 800c7a8 <_printf_i+0x40>)
 800c7a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7a8:	0800c801 	.word	0x0800c801
 800c7ac:	0800c815 	.word	0x0800c815
 800c7b0:	0800c791 	.word	0x0800c791
 800c7b4:	0800c791 	.word	0x0800c791
 800c7b8:	0800c791 	.word	0x0800c791
 800c7bc:	0800c791 	.word	0x0800c791
 800c7c0:	0800c815 	.word	0x0800c815
 800c7c4:	0800c791 	.word	0x0800c791
 800c7c8:	0800c791 	.word	0x0800c791
 800c7cc:	0800c791 	.word	0x0800c791
 800c7d0:	0800c791 	.word	0x0800c791
 800c7d4:	0800c913 	.word	0x0800c913
 800c7d8:	0800c83f 	.word	0x0800c83f
 800c7dc:	0800c8cd 	.word	0x0800c8cd
 800c7e0:	0800c791 	.word	0x0800c791
 800c7e4:	0800c791 	.word	0x0800c791
 800c7e8:	0800c935 	.word	0x0800c935
 800c7ec:	0800c791 	.word	0x0800c791
 800c7f0:	0800c83f 	.word	0x0800c83f
 800c7f4:	0800c791 	.word	0x0800c791
 800c7f8:	0800c791 	.word	0x0800c791
 800c7fc:	0800c8d5 	.word	0x0800c8d5
 800c800:	6833      	ldr	r3, [r6, #0]
 800c802:	1d1a      	adds	r2, r3, #4
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6032      	str	r2, [r6, #0]
 800c808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c80c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c810:	2301      	movs	r3, #1
 800c812:	e09c      	b.n	800c94e <_printf_i+0x1e6>
 800c814:	6833      	ldr	r3, [r6, #0]
 800c816:	6820      	ldr	r0, [r4, #0]
 800c818:	1d19      	adds	r1, r3, #4
 800c81a:	6031      	str	r1, [r6, #0]
 800c81c:	0606      	lsls	r6, r0, #24
 800c81e:	d501      	bpl.n	800c824 <_printf_i+0xbc>
 800c820:	681d      	ldr	r5, [r3, #0]
 800c822:	e003      	b.n	800c82c <_printf_i+0xc4>
 800c824:	0645      	lsls	r5, r0, #25
 800c826:	d5fb      	bpl.n	800c820 <_printf_i+0xb8>
 800c828:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	da03      	bge.n	800c838 <_printf_i+0xd0>
 800c830:	232d      	movs	r3, #45	@ 0x2d
 800c832:	426d      	negs	r5, r5
 800c834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c838:	4858      	ldr	r0, [pc, #352]	@ (800c99c <_printf_i+0x234>)
 800c83a:	230a      	movs	r3, #10
 800c83c:	e011      	b.n	800c862 <_printf_i+0xfa>
 800c83e:	6821      	ldr	r1, [r4, #0]
 800c840:	6833      	ldr	r3, [r6, #0]
 800c842:	0608      	lsls	r0, r1, #24
 800c844:	f853 5b04 	ldr.w	r5, [r3], #4
 800c848:	d402      	bmi.n	800c850 <_printf_i+0xe8>
 800c84a:	0649      	lsls	r1, r1, #25
 800c84c:	bf48      	it	mi
 800c84e:	b2ad      	uxthmi	r5, r5
 800c850:	2f6f      	cmp	r7, #111	@ 0x6f
 800c852:	4852      	ldr	r0, [pc, #328]	@ (800c99c <_printf_i+0x234>)
 800c854:	6033      	str	r3, [r6, #0]
 800c856:	bf14      	ite	ne
 800c858:	230a      	movne	r3, #10
 800c85a:	2308      	moveq	r3, #8
 800c85c:	2100      	movs	r1, #0
 800c85e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c862:	6866      	ldr	r6, [r4, #4]
 800c864:	60a6      	str	r6, [r4, #8]
 800c866:	2e00      	cmp	r6, #0
 800c868:	db05      	blt.n	800c876 <_printf_i+0x10e>
 800c86a:	6821      	ldr	r1, [r4, #0]
 800c86c:	432e      	orrs	r6, r5
 800c86e:	f021 0104 	bic.w	r1, r1, #4
 800c872:	6021      	str	r1, [r4, #0]
 800c874:	d04b      	beq.n	800c90e <_printf_i+0x1a6>
 800c876:	4616      	mov	r6, r2
 800c878:	fbb5 f1f3 	udiv	r1, r5, r3
 800c87c:	fb03 5711 	mls	r7, r3, r1, r5
 800c880:	5dc7      	ldrb	r7, [r0, r7]
 800c882:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c886:	462f      	mov	r7, r5
 800c888:	42bb      	cmp	r3, r7
 800c88a:	460d      	mov	r5, r1
 800c88c:	d9f4      	bls.n	800c878 <_printf_i+0x110>
 800c88e:	2b08      	cmp	r3, #8
 800c890:	d10b      	bne.n	800c8aa <_printf_i+0x142>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	07df      	lsls	r7, r3, #31
 800c896:	d508      	bpl.n	800c8aa <_printf_i+0x142>
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	6861      	ldr	r1, [r4, #4]
 800c89c:	4299      	cmp	r1, r3
 800c89e:	bfde      	ittt	le
 800c8a0:	2330      	movle	r3, #48	@ 0x30
 800c8a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c8aa:	1b92      	subs	r2, r2, r6
 800c8ac:	6122      	str	r2, [r4, #16]
 800c8ae:	f8cd a000 	str.w	sl, [sp]
 800c8b2:	464b      	mov	r3, r9
 800c8b4:	aa03      	add	r2, sp, #12
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	4640      	mov	r0, r8
 800c8ba:	f7ff fee7 	bl	800c68c <_printf_common>
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d14a      	bne.n	800c958 <_printf_i+0x1f0>
 800c8c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8c6:	b004      	add	sp, #16
 800c8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	f043 0320 	orr.w	r3, r3, #32
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	4832      	ldr	r0, [pc, #200]	@ (800c9a0 <_printf_i+0x238>)
 800c8d6:	2778      	movs	r7, #120	@ 0x78
 800c8d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	6831      	ldr	r1, [r6, #0]
 800c8e0:	061f      	lsls	r7, r3, #24
 800c8e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8e6:	d402      	bmi.n	800c8ee <_printf_i+0x186>
 800c8e8:	065f      	lsls	r7, r3, #25
 800c8ea:	bf48      	it	mi
 800c8ec:	b2ad      	uxthmi	r5, r5
 800c8ee:	6031      	str	r1, [r6, #0]
 800c8f0:	07d9      	lsls	r1, r3, #31
 800c8f2:	bf44      	itt	mi
 800c8f4:	f043 0320 	orrmi.w	r3, r3, #32
 800c8f8:	6023      	strmi	r3, [r4, #0]
 800c8fa:	b11d      	cbz	r5, 800c904 <_printf_i+0x19c>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	e7ad      	b.n	800c85c <_printf_i+0xf4>
 800c900:	4826      	ldr	r0, [pc, #152]	@ (800c99c <_printf_i+0x234>)
 800c902:	e7e9      	b.n	800c8d8 <_printf_i+0x170>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	f023 0320 	bic.w	r3, r3, #32
 800c90a:	6023      	str	r3, [r4, #0]
 800c90c:	e7f6      	b.n	800c8fc <_printf_i+0x194>
 800c90e:	4616      	mov	r6, r2
 800c910:	e7bd      	b.n	800c88e <_printf_i+0x126>
 800c912:	6833      	ldr	r3, [r6, #0]
 800c914:	6825      	ldr	r5, [r4, #0]
 800c916:	6961      	ldr	r1, [r4, #20]
 800c918:	1d18      	adds	r0, r3, #4
 800c91a:	6030      	str	r0, [r6, #0]
 800c91c:	062e      	lsls	r6, r5, #24
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	d501      	bpl.n	800c926 <_printf_i+0x1be>
 800c922:	6019      	str	r1, [r3, #0]
 800c924:	e002      	b.n	800c92c <_printf_i+0x1c4>
 800c926:	0668      	lsls	r0, r5, #25
 800c928:	d5fb      	bpl.n	800c922 <_printf_i+0x1ba>
 800c92a:	8019      	strh	r1, [r3, #0]
 800c92c:	2300      	movs	r3, #0
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	4616      	mov	r6, r2
 800c932:	e7bc      	b.n	800c8ae <_printf_i+0x146>
 800c934:	6833      	ldr	r3, [r6, #0]
 800c936:	1d1a      	adds	r2, r3, #4
 800c938:	6032      	str	r2, [r6, #0]
 800c93a:	681e      	ldr	r6, [r3, #0]
 800c93c:	6862      	ldr	r2, [r4, #4]
 800c93e:	2100      	movs	r1, #0
 800c940:	4630      	mov	r0, r6
 800c942:	f7f3 fc4d 	bl	80001e0 <memchr>
 800c946:	b108      	cbz	r0, 800c94c <_printf_i+0x1e4>
 800c948:	1b80      	subs	r0, r0, r6
 800c94a:	6060      	str	r0, [r4, #4]
 800c94c:	6863      	ldr	r3, [r4, #4]
 800c94e:	6123      	str	r3, [r4, #16]
 800c950:	2300      	movs	r3, #0
 800c952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c956:	e7aa      	b.n	800c8ae <_printf_i+0x146>
 800c958:	6923      	ldr	r3, [r4, #16]
 800c95a:	4632      	mov	r2, r6
 800c95c:	4649      	mov	r1, r9
 800c95e:	4640      	mov	r0, r8
 800c960:	47d0      	blx	sl
 800c962:	3001      	adds	r0, #1
 800c964:	d0ad      	beq.n	800c8c2 <_printf_i+0x15a>
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	079b      	lsls	r3, r3, #30
 800c96a:	d413      	bmi.n	800c994 <_printf_i+0x22c>
 800c96c:	68e0      	ldr	r0, [r4, #12]
 800c96e:	9b03      	ldr	r3, [sp, #12]
 800c970:	4298      	cmp	r0, r3
 800c972:	bfb8      	it	lt
 800c974:	4618      	movlt	r0, r3
 800c976:	e7a6      	b.n	800c8c6 <_printf_i+0x15e>
 800c978:	2301      	movs	r3, #1
 800c97a:	4632      	mov	r2, r6
 800c97c:	4649      	mov	r1, r9
 800c97e:	4640      	mov	r0, r8
 800c980:	47d0      	blx	sl
 800c982:	3001      	adds	r0, #1
 800c984:	d09d      	beq.n	800c8c2 <_printf_i+0x15a>
 800c986:	3501      	adds	r5, #1
 800c988:	68e3      	ldr	r3, [r4, #12]
 800c98a:	9903      	ldr	r1, [sp, #12]
 800c98c:	1a5b      	subs	r3, r3, r1
 800c98e:	42ab      	cmp	r3, r5
 800c990:	dcf2      	bgt.n	800c978 <_printf_i+0x210>
 800c992:	e7eb      	b.n	800c96c <_printf_i+0x204>
 800c994:	2500      	movs	r5, #0
 800c996:	f104 0619 	add.w	r6, r4, #25
 800c99a:	e7f5      	b.n	800c988 <_printf_i+0x220>
 800c99c:	0800cad9 	.word	0x0800cad9
 800c9a0:	0800caea 	.word	0x0800caea

0800c9a4 <_realloc_r>:
 800c9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	4614      	mov	r4, r2
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	b921      	cbnz	r1, 800c9ba <_realloc_r+0x16>
 800c9b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	f7ff bbd5 	b.w	800c164 <_malloc_r>
 800c9ba:	b92a      	cbnz	r2, 800c9c8 <_realloc_r+0x24>
 800c9bc:	f7ff fcc4 	bl	800c348 <_free_r>
 800c9c0:	4625      	mov	r5, r4
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c8:	f000 f842 	bl	800ca50 <_malloc_usable_size_r>
 800c9cc:	4284      	cmp	r4, r0
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	d802      	bhi.n	800c9d8 <_realloc_r+0x34>
 800c9d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9d6:	d8f4      	bhi.n	800c9c2 <_realloc_r+0x1e>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4638      	mov	r0, r7
 800c9dc:	f7ff fbc2 	bl	800c164 <_malloc_r>
 800c9e0:	4680      	mov	r8, r0
 800c9e2:	b908      	cbnz	r0, 800c9e8 <_realloc_r+0x44>
 800c9e4:	4645      	mov	r5, r8
 800c9e6:	e7ec      	b.n	800c9c2 <_realloc_r+0x1e>
 800c9e8:	42b4      	cmp	r4, r6
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	bf28      	it	cs
 800c9f0:	4632      	movcs	r2, r6
 800c9f2:	f000 f81f 	bl	800ca34 <memcpy>
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	4638      	mov	r0, r7
 800c9fa:	f7ff fca5 	bl	800c348 <_free_r>
 800c9fe:	e7f1      	b.n	800c9e4 <_realloc_r+0x40>

0800ca00 <memmove>:
 800ca00:	4288      	cmp	r0, r1
 800ca02:	b510      	push	{r4, lr}
 800ca04:	eb01 0402 	add.w	r4, r1, r2
 800ca08:	d902      	bls.n	800ca10 <memmove+0x10>
 800ca0a:	4284      	cmp	r4, r0
 800ca0c:	4623      	mov	r3, r4
 800ca0e:	d807      	bhi.n	800ca20 <memmove+0x20>
 800ca10:	1e43      	subs	r3, r0, #1
 800ca12:	42a1      	cmp	r1, r4
 800ca14:	d008      	beq.n	800ca28 <memmove+0x28>
 800ca16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca1e:	e7f8      	b.n	800ca12 <memmove+0x12>
 800ca20:	4402      	add	r2, r0
 800ca22:	4601      	mov	r1, r0
 800ca24:	428a      	cmp	r2, r1
 800ca26:	d100      	bne.n	800ca2a <memmove+0x2a>
 800ca28:	bd10      	pop	{r4, pc}
 800ca2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca32:	e7f7      	b.n	800ca24 <memmove+0x24>

0800ca34 <memcpy>:
 800ca34:	440a      	add	r2, r1
 800ca36:	4291      	cmp	r1, r2
 800ca38:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ca3c:	d100      	bne.n	800ca40 <memcpy+0xc>
 800ca3e:	4770      	bx	lr
 800ca40:	b510      	push	{r4, lr}
 800ca42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca4a:	4291      	cmp	r1, r2
 800ca4c:	d1f9      	bne.n	800ca42 <memcpy+0xe>
 800ca4e:	bd10      	pop	{r4, pc}

0800ca50 <_malloc_usable_size_r>:
 800ca50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca54:	1f18      	subs	r0, r3, #4
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	bfbc      	itt	lt
 800ca5a:	580b      	ldrlt	r3, [r1, r0]
 800ca5c:	18c0      	addlt	r0, r0, r3
 800ca5e:	4770      	bx	lr

0800ca60 <_init>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	bf00      	nop
 800ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca66:	bc08      	pop	{r3}
 800ca68:	469e      	mov	lr, r3
 800ca6a:	4770      	bx	lr

0800ca6c <_fini>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	bf00      	nop
 800ca70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca72:	bc08      	pop	{r3}
 800ca74:	469e      	mov	lr, r3
 800ca76:	4770      	bx	lr
