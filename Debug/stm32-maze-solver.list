
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba78  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800bc00  0800bc00  0000cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc28  0800bc28  0000d098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bc28  0800bc28  0000cc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc30  0800bc30  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc30  0800bc30  0000cc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc34  0800bc34  0000cc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800bc38  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d098  2**0
                  CONTENTS
 10 .bss          00000d44  20000098  20000098  0000d098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ddc  20000ddc  0000d098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d192  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b5f  00000000  00000000  0002a25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  0002edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ca  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c17  00000000  00000000  00031b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002373f  00000000  00000000  00058751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e17e8  00000000  00000000  0007be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d678  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f10  00000000  00000000  0015d6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001645cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bbe8 	.word	0x0800bbe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800bbe8 	.word	0x0800bbe8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 8000508:	e005      	b.n	8000516 <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 800050a:	89bb      	ldrh	r3, [r7, #12]
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 8000516:	89bb      	ldrh	r3, [r7, #12]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d8f6      	bhi.n	800050a <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f003 f8d1 	bl	80036cc <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <antirebote+0x9c>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d109      	bne.n	800054c <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	4916      	ldr	r1, [pc, #88]	@ (8000594 <antirebote+0xa0>)
 800053c:	7aba      	ldrb	r2, [r7, #10]
 800053e:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <antirebote+0x9c>)
 8000544:	2101      	movs	r1, #1
 8000546:	54d1      	strb	r1, [r2, r3]
        return false;
 8000548:	2300      	movs	r3, #0
 800054a:	e01d      	b.n	8000588 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <antirebote+0xa0>)
 8000550:	5cd3      	ldrb	r3, [r2, r3]
 8000552:	7aba      	ldrb	r2, [r7, #10]
 8000554:	429a      	cmp	r2, r3
 8000556:	d016      	beq.n	8000586 <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000558:	2032      	movs	r0, #50	@ 0x32
 800055a:	f001 fe41 	bl	80021e0 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f003 f8b2 	bl	80036cc <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 800056c:	7aba      	ldrb	r2, [r7, #10]
 800056e:	7a7b      	ldrb	r3, [r7, #9]
 8000570:	429a      	cmp	r2, r3
 8000572:	d108      	bne.n	8000586 <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4907      	ldr	r1, [pc, #28]	@ (8000594 <antirebote+0xa0>)
 8000578:	7a7a      	ldrb	r2, [r7, #9]
 800057a:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 800057c:	7a7b      	ldrb	r3, [r7, #9]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <antirebote+0x92>
            {
                pulsado = true;
 8000582:	2301      	movs	r3, #1
 8000584:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000b4 	.word	0x200000b4
 8000594:	200000c4 	.word	0x200000c4

08000598 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80005a2:	f000 f815 	bl	80005d0 <promediar_sensores>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000334 	.word	0x20000334

080005b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <HAL_ADC_ConvCpltCallback+0x18>)
 80005be:	f000 f807 	bl	80005d0 <promediar_sensores>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200003fc 	.word	0x200003fc

080005d0 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e012      	b.n	800060c <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4413      	add	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3302      	adds	r3, #2
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3304      	adds	r3, #4
 8000604:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b13      	cmp	r3, #19
 8000610:	dde9      	ble.n	80005e6 <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <promediar_sensores+0x70>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	091b      	lsrs	r3, r3, #4
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <promediar_sensores+0x74>)
 8000620:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <promediar_sensores+0x70>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <promediar_sensores+0x78>)
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	cccccccd 	.word	0xcccccccd
 8000644:	200000d6 	.word	0x200000d6
 8000648:	200000d4 	.word	0x200000d4

0800064c <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000654:	f001 fdc4 	bl	80021e0 <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065e:	4835      	ldr	r0, [pc, #212]	@ (8000734 <auto_calibracion+0xe8>)
 8000660:	f003 f84c 	bl	80036fc <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 8000664:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000668:	f001 fdba 	bl	80021e0 <HAL_Delay>

    der_cerca = sensor_der_avg;
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <auto_calibracion+0xec>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b32      	ldr	r3, [pc, #200]	@ (800073c <auto_calibracion+0xf0>)
 8000672:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067a:	482e      	ldr	r0, [pc, #184]	@ (8000734 <auto_calibracion+0xe8>)
 800067c:	f003 f83e 	bl	80036fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000686:	482b      	ldr	r0, [pc, #172]	@ (8000734 <auto_calibracion+0xe8>)
 8000688:	f003 f838 	bl	80036fc <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 800068c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000690:	f001 fda6 	bl	80021e0 <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <auto_calibracion+0xf4>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <auto_calibracion+0xf8>)
 800069a:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a2:	4824      	ldr	r0, [pc, #144]	@ (8000734 <auto_calibracion+0xe8>)
 80006a4:	f003 f82a 	bl	80036fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ae:	4821      	ldr	r0, [pc, #132]	@ (8000734 <auto_calibracion+0xe8>)
 80006b0:	f003 f824 	bl	80036fc <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 80006b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006b8:	f001 fd92 	bl	80021e0 <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <auto_calibracion+0xf4>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <auto_calibracion+0xfc>)
 80006c2:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <auto_calibracion+0xec>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <auto_calibracion+0x100>)
 80006ca:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <auto_calibracion+0xf8>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <auto_calibracion+0xfc>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <auto_calibracion+0x104>)
 80006e2:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <auto_calibracion+0xf0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <auto_calibracion+0x100>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	0fda      	lsrs	r2, r3, #31
 80006f2:	4413      	add	r3, r2
 80006f4:	105b      	asrs	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <auto_calibracion+0x108>)
 80006fa:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <auto_calibracion+0xe8>)
 8000704:	f002 fffa 	bl	80036fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <auto_calibracion+0xe8>)
 8000710:	f002 fff4 	bl	80036fc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000718:	f001 fd62 	bl	80021e0 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <auto_calibracion+0xe8>)
 8000724:	f002 ffea 	bl	80036fc <HAL_GPIO_WritePin>

    calibrado = true;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <auto_calibracion+0x10c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020c00 	.word	0x40020c00
 8000738:	200000d6 	.word	0x200000d6
 800073c:	20000006 	.word	0x20000006
 8000740:	200000d4 	.word	0x200000d4
 8000744:	20000000 	.word	0x20000000
 8000748:	20000002 	.word	0x20000002
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004
 8000754:	2000000a 	.word	0x2000000a
 8000758:	200000d8 	.word	0x200000d8

0800075c <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
    if (!calibrado)
 8000762:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <controlar_linea_recta+0xac>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d140      	bne.n	80007f2 <controlar_linea_recta+0x96>
        return;

    // Verificar flags AL INICIO
    if (flag_linea_detectada || flag_muro_detectado)
 8000770:	4b26      	ldr	r3, [pc, #152]	@ (800080c <controlar_linea_recta+0xb0>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d13d      	bne.n	80007f6 <controlar_linea_recta+0x9a>
 800077a:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <controlar_linea_recta+0xb4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d138      	bne.n	80007f6 <controlar_linea_recta+0x9a>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca + 200);
 8000784:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <controlar_linea_recta+0xb8>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	33c7      	adds	r3, #199	@ 0xc7
 800078a:	4a23      	ldr	r2, [pc, #140]	@ (8000818 <controlar_linea_recta+0xbc>)
 800078c:	8812      	ldrh	r2, [r2, #0]
 800078e:	4293      	cmp	r3, r2
 8000790:	bfac      	ite	ge
 8000792:	2301      	movge	r3, #1
 8000794:	2300      	movlt	r3, #0
 8000796:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca + 200);
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <controlar_linea_recta+0xc0>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	33c7      	adds	r3, #199	@ 0xc7
 800079e:	4a20      	ldr	r2, [pc, #128]	@ (8000820 <controlar_linea_recta+0xc4>)
 80007a0:	8812      	ldrh	r2, [r2, #0]
 80007a2:	4293      	cmp	r3, r2
 80007a4:	bfac      	ite	ge
 80007a6:	2301      	movge	r3, #1
 80007a8:	2300      	movlt	r3, #0
 80007aa:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00c      	beq.n	80007cc <controlar_linea_recta+0x70>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <controlar_linea_recta+0xb0>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d11e      	bne.n	80007fa <controlar_linea_recta+0x9e>
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <controlar_linea_recta+0xb4>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d119      	bne.n	80007fa <controlar_linea_recta+0x9e>
        {
            return;
        }
        correccion_derecha(); // Alejarse de pared izquierda
 80007c6:	f000 f9d5 	bl	8000b74 <correccion_derecha>
 80007ca:	e019      	b.n	8000800 <controlar_linea_recta+0xa4>
    }
    else if (muy_cerca_der)
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00c      	beq.n	80007ec <controlar_linea_recta+0x90>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <controlar_linea_recta+0xb0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d110      	bne.n	80007fe <controlar_linea_recta+0xa2>
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <controlar_linea_recta+0xb4>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10b      	bne.n	80007fe <controlar_linea_recta+0xa2>
        {
            return;
        }
        correccion_izquierda(); // Alejarse de pared derecha
 80007e6:	f000 f997 	bl	8000b18 <correccion_izquierda>
 80007ea:	e009      	b.n	8000800 <controlar_linea_recta+0xa4>
    }
    else
    {
        avanza(); // Ir recto si está centrado
 80007ec:	f000 f8c6 	bl	800097c <avanza>
 80007f0:	e006      	b.n	8000800 <controlar_linea_recta+0xa4>
        return;
 80007f2:	bf00      	nop
 80007f4:	e004      	b.n	8000800 <controlar_linea_recta+0xa4>
        return;
 80007f6:	bf00      	nop
 80007f8:	e002      	b.n	8000800 <controlar_linea_recta+0xa4>
            return;
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <controlar_linea_recta+0xa4>
            return;
 80007fe:	bf00      	nop
    }
}
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000d8 	.word	0x200000d8
 800080c:	200004cc 	.word	0x200004cc
 8000810:	200004cd 	.word	0x200004cd
 8000814:	20000000 	.word	0x20000000
 8000818:	200000d4 	.word	0x200000d4
 800081c:	20000006 	.word	0x20000006
 8000820:	200000d6 	.word	0x200000d6

08000824 <activar_modo_sprint>:
uint16_t velocidad_actual_der = VELOCIDAD_AVANCE_DER;
uint16_t velocidad_giro_actual_izq = VELOCIDAD_GIRO_IZQ;
uint16_t velocidad_giro_actual_der = VELOCIDAD_GIRO_DER;

void activar_modo_sprint(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
    velocidad_actual_izq = VELOCIDAD_SPRINT_IZQ;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <activar_modo_sprint+0x20>)
 800082a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800082e:	801a      	strh	r2, [r3, #0]
    velocidad_actual_der = VELOCIDAD_SPRINT_DER;
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <activar_modo_sprint+0x24>)
 8000832:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000836:	801a      	strh	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000000c 	.word	0x2000000c
 8000848:	2000000e 	.word	0x2000000e

0800084c <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 8000850:	2108      	movs	r1, #8
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <control_motor_init+0x1c>)
 8000854:	f006 fd94 	bl	8007380 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000858:	210c      	movs	r1, #12
 800085a:	4803      	ldr	r0, [pc, #12]	@ (8000868 <control_motor_init+0x1c>)
 800085c:	f006 fd90 	bl	8007380 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000860:	f000 f88c 	bl	800097c <avanza>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200002e8 	.word	0x200002e8

0800086c <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <set_motor_izq+0x1c>
 8000882:	2b01      	cmp	r3, #1
 8000884:	d00d      	beq.n	80008a2 <set_motor_izq+0x36>
 8000886:	e019      	b.n	80008bc <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800088e:	4817      	ldr	r0, [pc, #92]	@ (80008ec <set_motor_izq+0x80>)
 8000890:	f002 ff34 	bl	80036fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089a:	4814      	ldr	r0, [pc, #80]	@ (80008ec <set_motor_izq+0x80>)
 800089c:	f002 ff2e 	bl	80036fc <HAL_GPIO_WritePin>
        break;
 80008a0:	e01b      	b.n	80008da <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008a8:	4810      	ldr	r0, [pc, #64]	@ (80008ec <set_motor_izq+0x80>)
 80008aa:	f002 ff27 	bl	80036fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <set_motor_izq+0x80>)
 80008b6:	f002 ff21 	bl	80036fc <HAL_GPIO_WritePin>
        break;
 80008ba:	e00e      	b.n	80008da <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c2:	480a      	ldr	r0, [pc, #40]	@ (80008ec <set_motor_izq+0x80>)
 80008c4:	f002 ff1a 	bl	80036fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ce:	4807      	ldr	r0, [pc, #28]	@ (80008ec <set_motor_izq+0x80>)
 80008d0:	f002 ff14 	bl	80036fc <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80008d4:	2300      	movs	r3, #0
 80008d6:	80bb      	strh	r3, [r7, #4]
        break;
 80008d8:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 80008da:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <set_motor_izq+0x84>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	88ba      	ldrh	r2, [r7, #4]
 80008e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40020400 	.word	0x40020400
 80008f0:	200002e8 	.word	0x200002e8

080008f4 <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <set_motor_der+0x1c>
 800090a:	2b01      	cmp	r3, #1
 800090c:	d00d      	beq.n	800092a <set_motor_der+0x36>
 800090e:	e019      	b.n	8000944 <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000916:	4817      	ldr	r0, [pc, #92]	@ (8000974 <set_motor_der+0x80>)
 8000918:	f002 fef0 	bl	80036fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000922:	4814      	ldr	r0, [pc, #80]	@ (8000974 <set_motor_der+0x80>)
 8000924:	f002 feea 	bl	80036fc <HAL_GPIO_WritePin>
        break;
 8000928:	e01b      	b.n	8000962 <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000930:	4810      	ldr	r0, [pc, #64]	@ (8000974 <set_motor_der+0x80>)
 8000932:	f002 fee3 	bl	80036fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <set_motor_der+0x80>)
 800093e:	f002 fedd 	bl	80036fc <HAL_GPIO_WritePin>
        break;
 8000942:	e00e      	b.n	8000962 <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800094a:	480a      	ldr	r0, [pc, #40]	@ (8000974 <set_motor_der+0x80>)
 800094c:	f002 fed6 	bl	80036fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000956:	4807      	ldr	r0, [pc, #28]	@ (8000974 <set_motor_der+0x80>)
 8000958:	f002 fed0 	bl	80036fc <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800095c:	2300      	movs	r3, #0
 800095e:	80bb      	strh	r3, [r7, #4]
        break;
 8000960:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000962:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <set_motor_der+0x84>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020400 	.word	0x40020400
 8000978:	200002e8 	.word	0x200002e8

0800097c <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, velocidad_actual_izq);
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <avanza+0x20>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff70 	bl	800086c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_actual_der);
 800098c:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <avanza+0x24>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff ffae 	bl	80008f4 <set_motor_der>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	2000000e 	.word	0x2000000e

080009a4 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, velocidad_giro_actual_izq);
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <gira90izq+0x6c>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff ff59 	bl	800086c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_giro_actual_der);
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <gira90izq+0x70>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff ff97 	bl	80008f4 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80009c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ca:	f001 fc09 	bl	80021e0 <HAL_Delay>
    switch (sentido)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d817      	bhi.n	8000a04 <gira90izq+0x60>
 80009d4:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <gira90izq+0x38>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	080009f3 	.word	0x080009f3
 80009e4:	080009f9 	.word	0x080009f9
 80009e8:	080009ff 	.word	0x080009ff
    {
    case norte:
        sentido = oeste;
 80009ec:	2303      	movs	r3, #3
 80009ee:	71fb      	strb	r3, [r7, #7]
        break;
 80009f0:	e008      	b.n	8000a04 <gira90izq+0x60>

    case este:
        sentido = norte;
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
        break;
 80009f6:	e005      	b.n	8000a04 <gira90izq+0x60>

    case sur:
        sentido = este;
 80009f8:	2301      	movs	r3, #1
 80009fa:	71fb      	strb	r3, [r7, #7]
        break;
 80009fc:	e002      	b.n	8000a04 <gira90izq+0x60>

    case oeste:
        sentido = sur;
 80009fe:	2302      	movs	r3, #2
 8000a00:	71fb      	strb	r3, [r7, #7]
        break;
 8000a02:	bf00      	nop
    // Después del giro, continuar avanzando
    //avanza();

    // termina de girar y verifica que no halla un muro adelante

    return sentido;
 8000a04:	79fb      	ldrb	r3, [r7, #7]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000010 	.word	0x20000010
 8000a14:	20000012 	.word	0x20000012

08000a18 <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <gira90der+0x6c>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff ff1f 	bl	800086c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <gira90der+0x70>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff ff5d 	bl	80008f4 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 8000a3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a3e:	f001 fbcf 	bl	80021e0 <HAL_Delay>
    switch (sentido)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d817      	bhi.n	8000a78 <gira90der+0x60>
 8000a48:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <gira90der+0x38>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a67 	.word	0x08000a67
 8000a58:	08000a6d 	.word	0x08000a6d
 8000a5c:	08000a73 	.word	0x08000a73
    {
    case norte:
        sentido = este;
 8000a60:	2301      	movs	r3, #1
 8000a62:	71fb      	strb	r3, [r7, #7]
        break;
 8000a64:	e008      	b.n	8000a78 <gira90der+0x60>

    case este:
        sentido = sur;
 8000a66:	2302      	movs	r3, #2
 8000a68:	71fb      	strb	r3, [r7, #7]
        break;
 8000a6a:	e005      	b.n	8000a78 <gira90der+0x60>

    case sur:
        sentido = oeste;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	71fb      	strb	r3, [r7, #7]
        break;
 8000a70:	e002      	b.n	8000a78 <gira90der+0x60>

    case oeste:
        sentido = norte;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]
        break;
 8000a76:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    
    return sentido;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000010 	.word	0x20000010
 8000a88:	20000012 	.word	0x20000012

08000a8c <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <gira180+0x6c>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fee5 	bl	800086c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <gira180+0x70>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ff23 	bl	80008f4 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000aae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab2:	f001 fb95 	bl	80021e0 <HAL_Delay>
    switch (sentido)
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d817      	bhi.n	8000aec <gira180+0x60>
 8000abc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac4 <gira180+0x38>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000ad5 	.word	0x08000ad5
 8000ac8:	08000adb 	.word	0x08000adb
 8000acc:	08000ae1 	.word	0x08000ae1
 8000ad0:	08000ae7 	.word	0x08000ae7
    {
    case norte:
        sentido = sur;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	71fb      	strb	r3, [r7, #7]
        break;
 8000ad8:	e008      	b.n	8000aec <gira180+0x60>

    case este:
        sentido = oeste;
 8000ada:	2303      	movs	r3, #3
 8000adc:	71fb      	strb	r3, [r7, #7]
        break;
 8000ade:	e005      	b.n	8000aec <gira180+0x60>

    case sur:
        sentido = norte;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
        break;
 8000ae4:	e002      	b.n	8000aec <gira180+0x60>

    case oeste:
        sentido = este;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	71fb      	strb	r3, [r7, #7]
        break;
 8000aea:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010
 8000afc:	20000012 	.word	0x20000012

08000b00 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff feb0 	bl	800086c <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fef0 	bl	80008f4 <set_motor_der>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // Motor izq más lento
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <correccion_izquierda+0x50>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2264      	movs	r2, #100	@ 0x64
 8000b24:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 700); // Motor der normal
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <correccion_izquierda+0x50>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000b2e:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	e00f      	b.n	8000b56 <correccion_izquierda+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <correccion_izquierda+0x54>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10e      	bne.n	8000b5e <correccion_izquierda+0x46>
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <correccion_izquierda+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d109      	bne.n	8000b5e <correccion_izquierda+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000b4a:	200a      	movs	r0, #10
 8000b4c:	f001 fb48 	bl	80021e0 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3301      	adds	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b06      	cmp	r3, #6
 8000b5a:	ddec      	ble.n	8000b36 <correccion_izquierda+0x1e>
 8000b5c:	e000      	b.n	8000b60 <correccion_izquierda+0x48>
            return; // Salir si hay algo urgente
 8000b5e:	bf00      	nop
    } 
}
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200002e8 	.word	0x200002e8
 8000b6c:	200004cc 	.word	0x200004cc
 8000b70:	200004cd 	.word	0x200004cd

08000b74 <correccion_derecha>:

void correccion_derecha(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 700); // Motor izq normal
 8000b7a:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <correccion_derecha+0x50>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000b82:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100); // Motor der más lento
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <correccion_derecha+0x50>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2264      	movs	r2, #100	@ 0x64
 8000b8a:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	e00f      	b.n	8000bb2 <correccion_derecha+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <correccion_derecha+0x54>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10e      	bne.n	8000bba <correccion_derecha+0x46>
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <correccion_derecha+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d109      	bne.n	8000bba <correccion_derecha+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f001 fb1a 	bl	80021e0 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	ddec      	ble.n	8000b92 <correccion_derecha+0x1e>
 8000bb8:	e000      	b.n	8000bbc <correccion_derecha+0x48>
            return; // Salir si hay algo urgente
 8000bba:	bf00      	nop
    } 
}
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200002e8 	.word	0x200002e8
 8000bc8:	200004cc 	.word	0x200004cc
 8000bcc:	200004cd 	.word	0x200004cd

08000bd0 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	460a      	mov	r2, r1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000be0:	79ba      	ldrb	r2, [r7, #6]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f996 	bl	8000f18 <laberinto_posicion_valida>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f083 0301 	eor.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000bf8:	23ff      	movs	r3, #255	@ 0xff
 8000bfa:	e00f      	b.n	8000c1c <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	1e59      	subs	r1, r3, #1
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <laberinto_get_peso+0x54>)
 8000c06:	461a      	mov	r2, r3
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	1ad2      	subs	r2, r2, r3
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	4403      	add	r3, r0
 8000c18:	3302      	adds	r3, #2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000dc 	.word	0x200000dc

08000c28 <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	460b      	mov	r3, r1
 8000c34:	71bb      	strb	r3, [r7, #6]
 8000c36:	4613      	mov	r3, r2
 8000c38:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000c3a:	79ba      	ldrb	r2, [r7, #6]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f969 	bl	8000f18 <laberinto_posicion_valida>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f083 0301 	eor.w	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d146      	bne.n	8000ce0 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	1e59      	subs	r1, r3, #1
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	7978      	ldrb	r0, [r7, #5]
 8000c5c:	4c22      	ldr	r4, [pc, #136]	@ (8000ce8 <laberinto_set_muro+0xc0>)
 8000c5e:	461a      	mov	r2, r3
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	1ad2      	subs	r2, r2, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4423      	add	r3, r4
 8000c70:	4403      	add	r3, r0
 8000c72:	3303      	adds	r3, #3
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	723b      	strb	r3, [r7, #8]
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	4619      	mov	r1, r3
 8000c84:	68b8      	ldr	r0, [r7, #8]
 8000c86:	f000 f90d 	bl	8000ea4 <laberinto_get_posicion_adyacente>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000c8e:	7b3b      	ldrb	r3, [r7, #12]
 8000c90:	7b7a      	ldrb	r2, [r7, #13]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f93f 	bl	8000f18 <laberinto_posicion_valida>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d01c      	beq.n	8000cda <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000ca0:	797b      	ldrb	r3, [r7, #5]
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	425a      	negs	r2, r3
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	f002 0203 	and.w	r2, r2, #3
 8000cae:	bf58      	it	pl
 8000cb0:	4253      	negpl	r3, r2
 8000cb2:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000cb4:	7b3b      	ldrb	r3, [r7, #12]
 8000cb6:	1e59      	subs	r1, r3, #1
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	7bf8      	ldrb	r0, [r7, #15]
 8000cbe:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <laberinto_set_muro+0xc0>)
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	00d2      	lsls	r2, r2, #3
 8000cc4:	1ad2      	subs	r2, r2, r3
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	1a5b      	subs	r3, r3, r1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	4423      	add	r3, r4
 8000cd2:	4403      	add	r3, r0
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000cda:	f000 f807 	bl	8000cec <laberinto_recalcular_pesos>
 8000cde:	e000      	b.n	8000ce2 <laberinto_set_muro+0xba>
        return;
 8000ce0:	bf00      	nop
}
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	200000dc 	.word	0x200000dc

08000cec <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000cfa:	2314      	movs	r3, #20
 8000cfc:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000cfe:	e092      	b.n	8000e26 <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	3301      	adds	r3, #1
 8000d08:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	737b      	strb	r3, [r7, #13]
 8000d0e:	e086      	b.n	8000e1e <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000d10:	2301      	movs	r3, #1
 8000d12:	733b      	strb	r3, [r7, #12]
 8000d14:	e07c      	b.n	8000e10 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000d16:	7b7b      	ldrb	r3, [r7, #13]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d102      	bne.n	8000d22 <laberinto_recalcular_pesos+0x36>
 8000d1c:	7b3b      	ldrb	r3, [r7, #12]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d072      	beq.n	8000e08 <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000d22:	23ff      	movs	r3, #255	@ 0xff
 8000d24:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	72bb      	strb	r3, [r7, #10]
 8000d2a:	e03a      	b.n	8000da2 <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	1e59      	subs	r1, r3, #1
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	7ab8      	ldrb	r0, [r7, #10]
 8000d36:	4c42      	ldr	r4, [pc, #264]	@ (8000e40 <laberinto_recalcular_pesos+0x154>)
 8000d38:	461a      	mov	r2, r3
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	460b      	mov	r3, r1
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	1a5b      	subs	r3, r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	4423      	add	r3, r4
 8000d4a:	4403      	add	r3, r0
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d122      	bne.n	8000d9a <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000d54:	7b7b      	ldrb	r3, [r7, #13]
 8000d56:	703b      	strb	r3, [r7, #0]
 8000d58:	7b3b      	ldrb	r3, [r7, #12]
 8000d5a:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000d5c:	7abb      	ldrb	r3, [r7, #10]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	6838      	ldr	r0, [r7, #0]
 8000d62:	f000 f89f 	bl	8000ea4 <laberinto_get_posicion_adyacente>
 8000d66:	4603      	mov	r3, r0
 8000d68:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000d6a:	793b      	ldrb	r3, [r7, #4]
 8000d6c:	797a      	ldrb	r2, [r7, #5]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f8d1 	bl	8000f18 <laberinto_posicion_valida>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00f      	beq.n	8000d9c <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000d7c:	793b      	ldrb	r3, [r7, #4]
 8000d7e:	797a      	ldrb	r2, [r7, #5]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff24 	bl	8000bd0 <laberinto_get_peso>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d203      	bcs.n	8000d9c <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	72fb      	strb	r3, [r7, #11]
 8000d98:	e000      	b.n	8000d9c <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000d9a:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000d9c:	7abb      	ldrb	r3, [r7, #10]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	72bb      	strb	r3, [r7, #10]
 8000da2:	7abb      	ldrb	r3, [r7, #10]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d9c1      	bls.n	8000d2c <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	2bff      	cmp	r3, #255	@ 0xff
 8000dac:	d003      	beq.n	8000db6 <laberinto_recalcular_pesos+0xca>
 8000dae:	7afb      	ldrb	r3, [r7, #11]
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	e000      	b.n	8000db8 <laberinto_recalcular_pesos+0xcc>
 8000db6:	23ff      	movs	r3, #255	@ 0xff
 8000db8:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000dba:	7b7b      	ldrb	r3, [r7, #13]
 8000dbc:	1e59      	subs	r1, r3, #1
 8000dbe:	7b3b      	ldrb	r3, [r7, #12]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	481f      	ldr	r0, [pc, #124]	@ (8000e40 <laberinto_recalcular_pesos+0x154>)
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	00d2      	lsls	r2, r2, #3
 8000dc8:	1ad2      	subs	r2, r2, r3
 8000dca:	460b      	mov	r3, r1
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	1a5b      	subs	r3, r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4403      	add	r3, r0
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	7a3a      	ldrb	r2, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d014      	beq.n	8000e0a <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	1e59      	subs	r1, r3, #1
 8000de4:	7b3b      	ldrb	r3, [r7, #12]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4815      	ldr	r0, [pc, #84]	@ (8000e40 <laberinto_recalcular_pesos+0x154>)
 8000dea:	461a      	mov	r2, r3
 8000dec:	00d2      	lsls	r2, r2, #3
 8000dee:	1ad2      	subs	r2, r2, r3
 8000df0:	460b      	mov	r3, r1
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	4403      	add	r3, r0
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	7a3a      	ldrb	r2, [r7, #8]
 8000e00:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e000      	b.n	8000e0a <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000e08:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000e0a:	7b3b      	ldrb	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	733b      	strb	r3, [r7, #12]
 8000e10:	7b3b      	ldrb	r3, [r7, #12]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	f67f af7f 	bls.w	8000d16 <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000e18:	7b7b      	ldrb	r3, [r7, #13]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	737b      	strb	r3, [r7, #13]
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	f67f af75 	bls.w	8000d10 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <laberinto_recalcular_pesos+0x14a>
 8000e2c:	7bba      	ldrb	r2, [r7, #14]
 8000e2e:	7a7b      	ldrb	r3, [r7, #9]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f4ff af65 	bcc.w	8000d00 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000dc 	.word	0x200000dc

08000e44 <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	4613      	mov	r3, r2
 8000e54:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f85b 	bl	8000f18 <laberinto_posicion_valida>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e011      	b.n	8000e96 <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	1e59      	subs	r1, r3, #1
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	7978      	ldrb	r0, [r7, #5]
 8000e7c:	4c08      	ldr	r4, [pc, #32]	@ (8000ea0 <laberinto_hay_muro+0x5c>)
 8000e7e:	461a      	mov	r2, r3
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	1ad2      	subs	r2, r2, r3
 8000e84:	460b      	mov	r3, r1
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4423      	add	r3, r4
 8000e90:	4403      	add	r3, r0
 8000e92:	3303      	adds	r3, #3
 8000e94:	781b      	ldrb	r3, [r3, #0]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000dc 	.word	0x200000dc

08000ea4 <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	80b8      	strh	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d81e      	bhi.n	8000ef8 <laberinto_get_posicion_adyacente+0x54>
 8000eba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec0 <laberinto_get_posicion_adyacente+0x1c>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000edb 	.word	0x08000edb
 8000ec8:	08000ee5 	.word	0x08000ee5
 8000ecc:	08000eef 	.word	0x08000eef
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000ed0:	793b      	ldrb	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	723b      	strb	r3, [r7, #8]
        break;
 8000ed8:	e00e      	b.n	8000ef8 <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	727b      	strb	r3, [r7, #9]
        break;
 8000ee2:	e009      	b.n	8000ef8 <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000ee4:	793b      	ldrb	r3, [r7, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	723b      	strb	r3, [r7, #8]
        break;
 8000eec:	e004      	b.n	8000ef8 <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	727b      	strb	r3, [r7, #9]
        break;
 8000ef6:	bf00      	nop
    }

    return nueva_pos;
 8000ef8:	893b      	ldrh	r3, [r7, #8]
 8000efa:	81bb      	strh	r3, [r7, #12]
 8000efc:	2300      	movs	r3, #0
 8000efe:	7b3a      	ldrb	r2, [r7, #12]
 8000f00:	f362 0307 	bfi	r3, r2, #0, #8
 8000f04:	7b7a      	ldrb	r2, [r7, #13]
 8000f06:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00a      	beq.n	8000f44 <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d807      	bhi.n	8000f44 <laberinto_posicion_valida+0x2c>
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d801      	bhi.n	8000f44 <laberinto_posicion_valida+0x2c>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <laberinto_posicion_valida+0x2e>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f001 f8ce 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f88a 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 fa86 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f68:	f000 fa64 	bl	8001434 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f6c:	f000 f94e 	bl	800120c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f70:	f000 f97a 	bl	8001268 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f74:	f000 f9a6 	bl	80012c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f78:	f00a f9e0 	bl	800b33c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000f7c:	f000 f8e6 	bl	800114c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f80:	f000 f9d6 	bl	8001330 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 8000f84:	22c8      	movs	r2, #200	@ 0xc8
 8000f86:	4934      	ldr	r1, [pc, #208]	@ (8001058 <main+0x100>)
 8000f88:	4834      	ldr	r0, [pc, #208]	@ (800105c <main+0x104>)
 8000f8a:	f001 f991 	bl	80022b0 <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8000f8e:	f7ff fb5d 	bl	800064c <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 8000f92:	f7ff fc5b 	bl	800084c <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f96:	f00a f9f7 	bl	800b388 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8000f9a:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <main+0x108>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d052      	beq.n	800104e <main+0xf6>
    {
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

      if (flag_linea_detectada)
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <main+0x10c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d022      	beq.n	8000ff8 <main+0xa0>
      {
        flag_linea_detectada = false; // Clear flag PRIMERO
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <main+0x10c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
        chequeolinea();               // Ejecutar función completa
 8000fb8:	f000 fbba 	bl	8001730 <chequeolinea>

        // espera 20ms antes de volver a mirar muro despues de haber girado
        tiempo_actual = HAL_GetTick();
 8000fbc:	f001 f904 	bl	80021c8 <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a29      	ldr	r2, [pc, #164]	@ (8001068 <main+0x110>)
 8000fc4:	6013      	str	r3, [r2, #0]

        if ((!HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin))&&20 <= (tiempo_actual - tiempo_inicio))         //chequea muro
 8000fc6:	2140      	movs	r1, #64	@ 0x40
 8000fc8:	4828      	ldr	r0, [pc, #160]	@ (800106c <main+0x114>)
 8000fca:	f002 fb7f 	bl	80036cc <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d13e      	bne.n	8001052 <main+0xfa>
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <main+0x110>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <main+0x118>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b13      	cmp	r3, #19
 8000fe0:	d937      	bls.n	8001052 <main+0xfa>
        {
            flag_muro_detectado = false; 				// Clear flag PRIMERO
 8000fe2:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <main+0x11c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
            tiempo_inicio = HAL_GetTick();
 8000fe8:	f001 f8ee 	bl	80021c8 <HAL_GetTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a20      	ldr	r2, [pc, #128]	@ (8001070 <main+0x118>)
 8000ff0:	6013      	str	r3, [r2, #0]
            chequeomuro();               				// Ejecutar función completa
 8000ff2:	f000 fbe5 	bl	80017c0 <chequeomuro>
 8000ff6:	e02c      	b.n	8001052 <main+0xfa>
        }
      }
      else if (flag_muro_detectado)
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <main+0x11c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d022      	beq.n	8001048 <main+0xf0>
      {                              // else if = prioridad a línea
        flag_muro_detectado = false; // Clear flag PRIMERO
 8001002:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <main+0x11c>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
        chequeomuro();               // Ejecutar función completa
 8001008:	f000 fbda 	bl	80017c0 <chequeomuro>

        // espera 20ms antes de volver a mirar linea despues de haber girado
        tiempo_actual = HAL_GetTick();
 800100c:	f001 f8dc 	bl	80021c8 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <main+0x110>)
 8001014:	6013      	str	r3, [r2, #0]

        if ((!HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin))&&20 <= (tiempo_actual - tiempo_inicio))         //chequea muro
 8001016:	2140      	movs	r1, #64	@ 0x40
 8001018:	4814      	ldr	r0, [pc, #80]	@ (800106c <main+0x114>)
 800101a:	f002 fb57 	bl	80036cc <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d116      	bne.n	8001052 <main+0xfa>
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <main+0x110>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <main+0x118>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b13      	cmp	r3, #19
 8001030:	d90f      	bls.n	8001052 <main+0xfa>
        {
            flag_muro_detectado = false; 				// Clear flag PRIMERO
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <main+0x11c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
            tiempo_inicio = HAL_GetTick();
 8001038:	f001 f8c6 	bl	80021c8 <HAL_GetTick>
 800103c:	4603      	mov	r3, r0
 800103e:	4a0c      	ldr	r2, [pc, #48]	@ (8001070 <main+0x118>)
 8001040:	6013      	str	r3, [r2, #0]
            chequeomuro();              		 		// Ejecutar función completa
 8001042:	f000 fbbd 	bl	80017c0 <chequeomuro>
 8001046:	e004      	b.n	8001052 <main+0xfa>
        }
      }
      else
      {
        // Solo ejecutar control de línea recta si NO hay interrupciones pendientes
        controlar_linea_recta();
 8001048:	f7ff fb88 	bl	800075c <controlar_linea_recta>
 800104c:	e001      	b.n	8001052 <main+0xfa>
      }
    }
    else
    {
      termino();
 800104e:	f7ff fd57 	bl	8000b00 <termino>
    }
    reset_posicion_pushbutton(); // ⚡ I AM SPEED button */
 8001052:	f000 fbeb 	bl	800182c <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 8001056:	e79e      	b.n	8000f96 <main+0x3e>
 8001058:	20000334 	.word	0x20000334
 800105c:	2000014c 	.word	0x2000014c
 8001060:	20000331 	.word	0x20000331
 8001064:	200004cc 	.word	0x200004cc
 8001068:	200004c8 	.word	0x200004c8
 800106c:	40020800 	.word	0x40020800
 8001070:	200004c4 	.word	0x200004c4
 8001074:	200004cd 	.word	0x200004cd

08001078 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	@ 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	@ 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f00a fd20 	bl	800bacc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	4a27      	ldr	r2, [pc, #156]	@ (8001144 <SystemClock_Config+0xcc>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <SystemClock_Config+0xcc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a21      	ldr	r2, [pc, #132]	@ (8001148 <SystemClock_Config+0xd0>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <SystemClock_Config+0xd0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e8:	2308      	movs	r3, #8
 80010ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 fa46 	bl	8006590 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800110a:	f000 fc25 	bl	8001958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800110e:	230f      	movs	r3, #15
 8001110:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2302      	movs	r3, #2
 8001114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800111e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001124:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2105      	movs	r1, #5
 800112c:	4618      	mov	r0, r3
 800112e:	f005 fca7 	bl	8006a80 <HAL_RCC_ClockConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001138:	f000 fc0e 	bl	8001958 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3750      	adds	r7, #80	@ 0x50
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_ADC1_Init+0xb4>)
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <MX_ADC1_Init+0xb8>)
 8001162:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_ADC1_Init+0xb4>)
 8001166:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800116a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_ADC1_Init+0xb4>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_ADC1_Init+0xb4>)
 8001174:	2201      	movs	r2, #1
 8001176:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_ADC1_Init+0xb4>)
 800117a:	2201      	movs	r2, #1
 800117c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_ADC1_Init+0xb4>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_ADC1_Init+0xb4>)
 8001188:	2200      	movs	r2, #0
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_ADC1_Init+0xb4>)
 800118e:	4a1e      	ldr	r2, [pc, #120]	@ (8001208 <MX_ADC1_Init+0xbc>)
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_ADC1_Init+0xb4>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_ADC1_Init+0xb4>)
 800119a:	2202      	movs	r2, #2
 800119c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_ADC1_Init+0xb4>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_ADC1_Init+0xb4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ac:	4814      	ldr	r0, [pc, #80]	@ (8001200 <MX_ADC1_Init+0xb4>)
 80011ae:	f001 f83b 	bl	8002228 <HAL_ADC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011b8:	f000 fbce 	bl	8001958 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 80011bc:	2308      	movs	r3, #8
 80011be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80011c4:	2305      	movs	r3, #5
 80011c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_ADC1_Init+0xb4>)
 80011ce:	f001 f98d 	bl	80024ec <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011d8:	f000 fbbe 	bl	8001958 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80011dc:	2309      	movs	r3, #9
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_ADC1_Init+0xb4>)
 80011ea:	f001 f97f 	bl	80024ec <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011f4:	f000 fbb0 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000014c 	.word	0x2000014c
 8001204:	40012000 	.word	0x40012000
 8001208:	0f000001 	.word	0x0f000001

0800120c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_I2C1_Init+0x50>)
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <MX_I2C1_Init+0x54>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_I2C1_Init+0x50>)
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <MX_I2C1_Init+0x58>)
 800121a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_I2C1_Init+0x50>)
 800122a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800122e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_I2C1_Init+0x50>)
 800124a:	f004 fbbd 	bl	80059c8 <HAL_I2C_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001254:	f000 fb80 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001f4 	.word	0x200001f4
 8001260:	40005400 	.word	0x40005400
 8001264:	000186a0 	.word	0x000186a0

08001268 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <MX_I2S3_Init+0x54>)
 800126e:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <MX_I2S3_Init+0x58>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_I2S3_Init+0x54>)
 8001274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001278:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_I2S3_Init+0x54>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_I2S3_Init+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <MX_I2S3_Init+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <MX_I2S3_Init+0x54>)
 800128e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001292:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_I2S3_Init+0x54>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <MX_I2S3_Init+0x54>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_I2S3_Init+0x54>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_I2S3_Init+0x54>)
 80012a8:	f004 fcd2 	bl	8005c50 <HAL_I2S_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80012b2:	f000 fb51 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000248 	.word	0x20000248
 80012c0:	40003c00 	.word	0x40003c00

080012c4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012ca:	4a18      	ldr	r2, [pc, #96]	@ (800132c <MX_SPI1_Init+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_SPI1_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <MX_SPI1_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_SPI1_Init+0x64>)
 8001310:	220a      	movs	r2, #10
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	@ (8001328 <MX_SPI1_Init+0x64>)
 8001316:	f005 ff01 	bl	800711c <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001320:	f000 fb1a 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000290 	.word	0x20000290
 800132c:	40013000 	.word	0x40013000

08001330 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	@ 0x38
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001360:	4b32      	ldr	r3, [pc, #200]	@ (800142c <MX_TIM3_Init+0xfc>)
 8001362:	4a33      	ldr	r2, [pc, #204]	@ (8001430 <MX_TIM3_Init+0x100>)
 8001364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001366:	4b31      	ldr	r3, [pc, #196]	@ (800142c <MX_TIM3_Init+0xfc>)
 8001368:	2253      	movs	r2, #83	@ 0x53
 800136a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <MX_TIM3_Init+0xfc>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001372:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <MX_TIM3_Init+0xfc>)
 8001374:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <MX_TIM3_Init+0xfc>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <MX_TIM3_Init+0xfc>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001386:	4829      	ldr	r0, [pc, #164]	@ (800142c <MX_TIM3_Init+0xfc>)
 8001388:	f005 ff51 	bl	800722e <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001392:	f000 fae1 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4822      	ldr	r0, [pc, #136]	@ (800142c <MX_TIM3_Init+0xfc>)
 80013a4:	f006 f976 	bl	8007694 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013ae:	f000 fad3 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b2:	481e      	ldr	r0, [pc, #120]	@ (800142c <MX_TIM3_Init+0xfc>)
 80013b4:	f005 ff8a 	bl	80072cc <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013be:	f000 facb 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	4619      	mov	r1, r3
 80013d0:	4816      	ldr	r0, [pc, #88]	@ (800142c <MX_TIM3_Init+0xfc>)
 80013d2:	f006 fd3d 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013dc:	f000 fabc 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	@ 0x60
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2208      	movs	r2, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_TIM3_Init+0xfc>)
 80013f8:	f006 f88a 	bl	8007510 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001402:	f000 faa9 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	220c      	movs	r2, #12
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	@ (800142c <MX_TIM3_Init+0xfc>)
 800140e:	f006 f87f 	bl	8007510 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001418:	f000 fa9e 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <MX_TIM3_Init+0xfc>)
 800141e:	f000 fd73 	bl	8001f08 <HAL_TIM_MspPostInit>
}
 8001422:	bf00      	nop
 8001424:	3738      	adds	r7, #56	@ 0x38
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200002e8 	.word	0x200002e8
 8001430:	40000400 	.word	0x40000400

08001434 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_DMA_Init+0x3c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <MX_DMA_Init+0x3c>)
 8001444:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2038      	movs	r0, #56	@ 0x38
 800145c:	f001 fbe5 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001460:	2038      	movs	r0, #56	@ 0x38
 8001462:	f001 fbfe 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	@ 0x30
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	4b86      	ldr	r3, [pc, #536]	@ (80016a8 <MX_GPIO_Init+0x234>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a85      	ldr	r2, [pc, #532]	@ (80016a8 <MX_GPIO_Init+0x234>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b83      	ldr	r3, [pc, #524]	@ (80016a8 <MX_GPIO_Init+0x234>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	4b7f      	ldr	r3, [pc, #508]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a7e      	ldr	r2, [pc, #504]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b7c      	ldr	r3, [pc, #496]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b78      	ldr	r3, [pc, #480]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a77      	ldr	r2, [pc, #476]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b75      	ldr	r3, [pc, #468]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b71      	ldr	r3, [pc, #452]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a70      	ldr	r2, [pc, #448]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b6e      	ldr	r3, [pc, #440]	@ (80016a8 <MX_GPIO_Init+0x234>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b6a      	ldr	r3, [pc, #424]	@ (80016a8 <MX_GPIO_Init+0x234>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a69      	ldr	r2, [pc, #420]	@ (80016a8 <MX_GPIO_Init+0x234>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b67      	ldr	r3, [pc, #412]	@ (80016a8 <MX_GPIO_Init+0x234>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b63      	ldr	r3, [pc, #396]	@ (80016a8 <MX_GPIO_Init+0x234>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a62      	ldr	r2, [pc, #392]	@ (80016a8 <MX_GPIO_Init+0x234>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b60      	ldr	r3, [pc, #384]	@ (80016a8 <MX_GPIO_Init+0x234>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2108      	movs	r1, #8
 8001536:	485d      	ldr	r0, [pc, #372]	@ (80016ac <MX_GPIO_Init+0x238>)
 8001538:	f002 f8e0 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	485b      	ldr	r0, [pc, #364]	@ (80016b0 <MX_GPIO_Init+0x23c>)
 8001542:	f002 f8db 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 800154c:	4859      	ldr	r0, [pc, #356]	@ (80016b4 <MX_GPIO_Init+0x240>)
 800154e:	f002 f8d5 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001558:	4857      	ldr	r0, [pc, #348]	@ (80016b8 <MX_GPIO_Init+0x244>)
 800155a:	f002 f8cf 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800155e:	2308      	movs	r3, #8
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	484d      	ldr	r0, [pc, #308]	@ (80016ac <MX_GPIO_Init+0x238>)
 8001576:	f001 ff0d 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4847      	ldr	r0, [pc, #284]	@ (80016b0 <MX_GPIO_Init+0x23c>)
 8001592:	f001 feff 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001596:	2308      	movs	r3, #8
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a6:	2305      	movs	r3, #5
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	483f      	ldr	r0, [pc, #252]	@ (80016b0 <MX_GPIO_Init+0x23c>)
 80015b2:	f001 feef 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	483c      	ldr	r0, [pc, #240]	@ (80016bc <MX_GPIO_Init+0x248>)
 80015ca:	f001 fee3 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015ce:	2304      	movs	r3, #4
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4834      	ldr	r0, [pc, #208]	@ (80016b4 <MX_GPIO_Init+0x240>)
 80015e2:	f001 fed7 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f8:	2305      	movs	r3, #5
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	482c      	ldr	r0, [pc, #176]	@ (80016b4 <MX_GPIO_Init+0x240>)
 8001604:	f001 fec6 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8001608:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4824      	ldr	r0, [pc, #144]	@ (80016b4 <MX_GPIO_Init+0x240>)
 8001622:	f001 feb7 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001626:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	481e      	ldr	r0, [pc, #120]	@ (80016b8 <MX_GPIO_Init+0x244>)
 8001640:	f001 fea8 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 8001644:	23c0      	movs	r3, #192	@ 0xc0
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001648:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4815      	ldr	r0, [pc, #84]	@ (80016b0 <MX_GPIO_Init+0x23c>)
 800165a:	f001 fe9b 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800165e:	2320      	movs	r3, #32
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4811      	ldr	r0, [pc, #68]	@ (80016b8 <MX_GPIO_Init+0x244>)
 8001672:	f001 fe8f 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001676:	2302      	movs	r3, #2
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800167a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <MX_GPIO_Init+0x238>)
 800168c:	f001 fe82 	bl	8003394 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001690:	2200      	movs	r2, #0
 8001692:	2101      	movs	r1, #1
 8001694:	2017      	movs	r0, #23
 8001696:	f001 fac8 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800169a:	2017      	movs	r0, #23
 800169c:	f001 fae1 	bl	8002c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	@ 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40020000 	.word	0x40020000

080016c0 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	4613      	mov	r3, r2
 80016cc:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d827      	bhi.n	8001724 <actualizar_posicion+0x64>
 80016d4:	a201      	add	r2, pc, #4	@ (adr r2, 80016dc <actualizar_posicion+0x1c>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	080016fb 	.word	0x080016fb
 80016e4:	08001709 	.word	0x08001709
 80016e8:	08001717 	.word	0x08001717
  {
  case norte:
    (*fila)--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	701a      	strb	r2, [r3, #0]
    break;
 80016f8:	e014      	b.n	8001724 <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	701a      	strb	r2, [r3, #0]
    break;
 8001706:	e00d      	b.n	8001724 <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	b2da      	uxtb	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	701a      	strb	r2, [r3, #0]
    break;
 8001714:	e006      	b.n	8001724 <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3b01      	subs	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	701a      	strb	r2, [r3, #0]
    break;
 8001722:	bf00      	nop
  }
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  // if (antirebote(LineSensor_GPIO_Port, LineSensor_Pin))
  // {
  // RETARDO DE UNOS MS
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001736:	2017      	movs	r0, #23
 8001738:	f001 faa1 	bl	8002c7e <HAL_NVIC_DisableIRQ>
  HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <chequeolinea+0x7c>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fd4d 	bl	80021e0 <HAL_Delay>

  // Actualizar posición
  actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <chequeolinea+0x80>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4919      	ldr	r1, [pc, #100]	@ (80017b4 <chequeolinea+0x84>)
 800174e:	481a      	ldr	r0, [pc, #104]	@ (80017b8 <chequeolinea+0x88>)
 8001750:	f7ff ffb6 	bl	80016c0 <actualizar_posicion>

  // terminó?
  if (fila_actual == 1 && columna_actual == 1)
 8001754:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <chequeolinea+0x88>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d109      	bne.n	8001770 <chequeolinea+0x40>
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <chequeolinea+0x84>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <chequeolinea+0x40>
  {
    termino();
 8001764:	f7ff f9cc 	bl	8000b00 <termino>
    terminado = true;
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <chequeolinea+0x8c>)
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
    return;
 800176e:	e019      	b.n	80017a4 <chequeolinea+0x74>
  }

  // Calcular y ejecutar
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <chequeolinea+0x88>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4a0f      	ldr	r2, [pc, #60]	@ (80017b4 <chequeolinea+0x84>)
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f8f2 	bl	8001964 <calcular_mejor_direccion>
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <chequeolinea+0x80>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f9ab 	bl	8001ae8 <ejecutar_movimiento>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <chequeolinea+0x80>)
 8001798:	701a      	strb	r2, [r3, #0]
  avanza();
 800179a:	f7ff f8ef 	bl	800097c <avanza>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800179e:	2017      	movs	r0, #23
 80017a0:	f001 fa5f 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  //}
}
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000016 	.word	0x20000016
 80017b0:	20000330 	.word	0x20000330
 80017b4:	20000015 	.word	0x20000015
 80017b8:	20000014 	.word	0x20000014
 80017bc:	20000331 	.word	0x20000331

080017c0 <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80017c6:	2017      	movs	r0, #23
 80017c8:	f001 fa59 	bl	8002c7e <HAL_NVIC_DisableIRQ>
  // if (antirebote(WallSensor_GPIO_Port, WallSensor_Pin))

  // 1. Registrar el muro detectado
  laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <chequeomuro+0x60>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <chequeomuro+0x64>)
 80017d2:	7811      	ldrb	r1, [r2, #0]
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <chequeomuro+0x68>)
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fa25 	bl	8000c28 <laberinto_set_muro>

  // 2. Recalcular todos los pesos con el nuevo muro
  laberinto_recalcular_pesos();
 80017de:	f7ff fa85 	bl	8000cec <laberinto_recalcular_pesos>

  // 3. Calcular nueva mejor dirección
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <chequeomuro+0x60>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <chequeomuro+0x64>)
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f8b9 	bl	8001964 <calcular_mejor_direccion>
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]

  // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <chequeomuro+0x68>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	79fa      	ldrb	r2, [r7, #7]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f972 	bl	8001ae8 <ejecutar_movimiento>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <chequeomuro+0x68>)
 800180a:	701a      	strb	r2, [r3, #0]
  avanza();
 800180c:	f7ff f8b6 	bl	800097c <avanza>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001810:	2017      	movs	r0, #23
 8001812:	f001 fa26 	bl	8002c62 <HAL_NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000014 	.word	0x20000014
 8001824:	20000015 	.word	0x20000015
 8001828:	20000330 	.word	0x20000330

0800182c <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001830:	2101      	movs	r1, #1
 8001832:	4817      	ldr	r0, [pc, #92]	@ (8001890 <reset_posicion_pushbutton+0x64>)
 8001834:	f7fe fe5e 	bl	80004f4 <antirebote>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d025      	beq.n	800188a <reset_posicion_pushbutton+0x5e>
  {
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800183e:	2017      	movs	r0, #23
 8001840:	f001 fa1d 	bl	8002c7e <HAL_NVIC_DisableIRQ>

    // Resetear posición
    fila_actual = 4;
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <reset_posicion_pushbutton+0x68>)
 8001846:	2204      	movs	r2, #4
 8001848:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <reset_posicion_pushbutton+0x6c>)
 800184c:	2204      	movs	r2, #4
 800184e:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <reset_posicion_pushbutton+0x70>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
    terminado = false;
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <reset_posicion_pushbutton+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 800185c:	f7fe ffe2 	bl	8000824 <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <reset_posicion_pushbutton+0x78>)
 8001862:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001866:	801a      	strh	r2, [r3, #0]

    flag_linea_detectada = false;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <reset_posicion_pushbutton+0x7c>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
    flag_muro_detectado = false;
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <reset_posicion_pushbutton+0x80>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]

    // Resetear estados de sensores
    ultimo_estado_linea = true;
 8001874:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <reset_posicion_pushbutton+0x84>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = true;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <reset_posicion_pushbutton+0x88>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]

    avanza();
 8001880:	f7ff f87c 	bl	800097c <avanza>
    // Reactivar interrupciones
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001884:	2017      	movs	r0, #23
 8001886:	f001 f9ec 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  }
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020000 	.word	0x40020000
 8001894:	20000014 	.word	0x20000014
 8001898:	20000015 	.word	0x20000015
 800189c:	20000330 	.word	0x20000330
 80018a0:	20000331 	.word	0x20000331
 80018a4:	20000016 	.word	0x20000016
 80018a8:	200004cc 	.word	0x200004cc
 80018ac:	200004cd 	.word	0x200004cd
 80018b0:	20000018 	.word	0x20000018
 80018b4:	20000019 	.word	0x20000019

080018b8 <HAL_GPIO_EXTI_Callback>:

// ATENCION A LA INTERRUPCION
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LineSensor_Pin)
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2b80      	cmp	r3, #128	@ 0x80
 80018c6:	d11b      	bne.n	8001900 <HAL_GPIO_EXTI_Callback+0x48>
  {
    // Leer estado actual del sensor
    bool estado_actual = HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin);
 80018c8:	2180      	movs	r1, #128	@ 0x80
 80018ca:	481e      	ldr	r0, [pc, #120]	@ (8001944 <HAL_GPIO_EXTI_Callback+0x8c>)
 80018cc:	f001 fefe 	bl	80036cc <HAL_GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	73bb      	strb	r3, [r7, #14]

    // Solo activar flag si hubo transición HIGH → LOW
    if (ultimo_estado_linea == true && estado_actual == false)
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <HAL_GPIO_EXTI_Callback+0x90>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_GPIO_EXTI_Callback+0x40>
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_GPIO_EXTI_Callback+0x40>
    {
      flag_linea_detectada = true;
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <HAL_GPIO_EXTI_Callback+0x94>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
    }

    // Actualizar último estado
    ultimo_estado_linea = estado_actual;
 80018f8:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <HAL_GPIO_EXTI_Callback+0x90>)
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	7013      	strb	r3, [r2, #0]
    }

    // Actualizar último estado
    ultimo_estado_muro = estado_actual;
  }
}
 80018fe:	e01d      	b.n	800193c <HAL_GPIO_EXTI_Callback+0x84>
  else if (GPIO_Pin == WallSensor_Pin)
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	2b40      	cmp	r3, #64	@ 0x40
 8001904:	d11a      	bne.n	800193c <HAL_GPIO_EXTI_Callback+0x84>
    bool estado_actual = HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin);
 8001906:	2140      	movs	r1, #64	@ 0x40
 8001908:	480e      	ldr	r0, [pc, #56]	@ (8001944 <HAL_GPIO_EXTI_Callback+0x8c>)
 800190a:	f001 fedf 	bl	80036cc <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
    if (ultimo_estado_muro == true && estado_actual == false)
 800191a:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <HAL_GPIO_EXTI_Callback+0x98>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_GPIO_EXTI_Callback+0x7e>
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_GPIO_EXTI_Callback+0x7e>
      flag_muro_detectado = true;
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = estado_actual;
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <HAL_GPIO_EXTI_Callback+0x98>)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	7013      	strb	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020800 	.word	0x40020800
 8001948:	20000018 	.word	0x20000018
 800194c:	200004cc 	.word	0x200004cc
 8001950:	20000019 	.word	0x20000019
 8001954:	200004cd 	.word	0x200004cd

08001958 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <Error_Handler+0x8>

08001964 <calcular_mejor_direccion>:
 */

#include "navegacion.h"

brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) // nos devuelve direccion en TIPO BRUJULA gracias colo
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	460a      	mov	r2, r1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	4613      	mov	r3, r2
 8001972:	71bb      	strb	r3, [r7, #6]
    uint8_t peso_minimo = PESO_MAXIMO;
 8001974:	23ff      	movs	r3, #255	@ 0xff
 8001976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    brujula mejor_direccion = norte; // Dirección por defecto
 800197a:	2300      	movs	r3, #0
 800197c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool direccion_valida_encontrada = false;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // Para dar preferencia a oeste y norte que llevan hacia la meta (1,1)
    // Primero oeste, luego norte, luego sur, luego este
    static const brujula orden_eval[] = {oeste, norte, sur, este};

    for (int i = 0; i < 4; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800198a:	e04f      	b.n	8001a2c <calcular_mejor_direccion+0xc8>
    {
        brujula direccion = orden_eval[i];
 800198c:	4a55      	ldr	r2, [pc, #340]	@ (8001ae4 <calcular_mejor_direccion+0x180>)
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // 1. ¿Hay muro en esta dirección?
        if (laberinto_hay_muro(fila_actual, columna_actual, direccion))
 8001998:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800199c:	79b9      	ldrb	r1, [r7, #6]
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa4f 	bl	8000e44 <laberinto_hay_muro>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d139      	bne.n	8001a20 <calcular_mejor_direccion+0xbc>
            continue; // Saltar si hay muro
        }

        // 2. Obtener posición adyacente
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, direccion);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	763b      	strb	r3, [r7, #24]
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	767b      	strb	r3, [r7, #25]
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 80019b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019b8:	4619      	mov	r1, r3
 80019ba:	69b8      	ldr	r0, [r7, #24]
 80019bc:	f7ff fa72 	bl	8000ea4 <laberinto_get_posicion_adyacente>
 80019c0:	4603      	mov	r3, r0
 80019c2:	83bb      	strh	r3, [r7, #28]

        // 3. ¿Es válida? (no salirse del laberinto)
        if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 80019c4:	7f3b      	ldrb	r3, [r7, #28]
 80019c6:	7f7a      	ldrb	r2, [r7, #29]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff faa4 	bl	8000f18 <laberinto_posicion_valida>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d123      	bne.n	8001a24 <calcular_mejor_direccion+0xc0>
        {
            continue; // Saltar si está fuera del laberinto
        }

        // 4. Obtener peso de la casilla adyacente
        uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 80019dc:	7f3b      	ldrb	r3, [r7, #28]
 80019de:	7f7a      	ldrb	r2, [r7, #29]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f8f4 	bl	8000bd0 <laberinto_get_peso>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // 5. ¿Es el mejor peso hasta ahora? O primera dirección válida encontrada
        if (!direccion_valida_encontrada || peso_adyacente < peso_minimo)
 80019ee:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <calcular_mejor_direccion+0xa4>
 80019fc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001a00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d20e      	bcs.n	8001a26 <calcular_mejor_direccion+0xc2>
        {
            peso_minimo = peso_adyacente;
 8001a08:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001a0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mejor_direccion = direccion;
 8001a10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            direccion_valida_encontrada = true;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001a1e:	e002      	b.n	8001a26 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si hay muro
 8001a20:	bf00      	nop
 8001a22:	e000      	b.n	8001a26 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si está fuera del laberinto
 8001a24:	bf00      	nop
    for (int i = 0; i < 4; i++)
 8001a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a28:	3301      	adds	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	ddac      	ble.n	800198c <calcular_mejor_direccion+0x28>
        }
    }

    // Verificación final de seguridad: asegurarnos que la dirección elegida es válida
    if (direccion_valida_encontrada)
 8001a32:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04d      	beq.n	8001ad6 <calcular_mejor_direccion+0x172>
    {
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, mejor_direccion);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	743b      	strb	r3, [r7, #16]
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	747b      	strb	r3, [r7, #17]
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
 8001a42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a46:	4619      	mov	r1, r3
 8001a48:	6938      	ldr	r0, [r7, #16]
 8001a4a:	f7ff fa2b 	bl	8000ea4 <laberinto_get_posicion_adyacente>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	82bb      	strh	r3, [r7, #20]

        // Doble verificación para asegurarnos que no nos salimos del laberinto
        if (!laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna))
 8001a52:	7d3b      	ldrb	r3, [r7, #20]
 8001a54:	7d7a      	ldrb	r2, [r7, #21]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa5d 	bl	8000f18 <laberinto_posicion_valida>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f083 0301 	eor.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d035      	beq.n	8001ad6 <calcular_mejor_direccion+0x172>
        {
            // Algo salió mal, buscar cualquier dirección válida
            for (int i = 0; i < 4; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	e02f      	b.n	8001ad0 <calcular_mejor_direccion+0x16c>
            {
                brujula dir_alternativa = orden_eval[i];
 8001a70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <calcular_mejor_direccion+0x180>)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pos_siguiente = laberinto_get_posicion_adyacente(
                    (posicion_t){fila_actual, columna_actual}, dir_alternativa);
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	733b      	strb	r3, [r7, #12]
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	737b      	strb	r3, [r7, #13]
                pos_siguiente = laberinto_get_posicion_adyacente(
 8001a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a88:	4619      	mov	r1, r3
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fa0a 	bl	8000ea4 <laberinto_get_posicion_adyacente>
 8001a90:	4603      	mov	r3, r0
 8001a92:	82bb      	strh	r3, [r7, #20]

                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001a94:	7d3b      	ldrb	r3, [r7, #20]
 8001a96:	7d7a      	ldrb	r2, [r7, #21]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fa3c 	bl	8000f18 <laberinto_posicion_valida>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d011      	beq.n	8001aca <calcular_mejor_direccion+0x166>
                    !laberinto_hay_muro(fila_actual, columna_actual, dir_alternativa))
 8001aa6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001aaa:	79b9      	ldrb	r1, [r7, #6]
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f9c8 	bl	8000e44 <laberinto_hay_muro>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f083 0301 	eor.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <calcular_mejor_direccion+0x166>
                {
                    mejor_direccion = dir_alternativa;
 8001ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ac4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001ac8:	e005      	b.n	8001ad6 <calcular_mejor_direccion+0x172>
            for (int i = 0; i < 4; i++)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	3301      	adds	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	ddcc      	ble.n	8001a70 <calcular_mejor_direccion+0x10c>
                }
            }
        }
    }

    return mejor_direccion;
 8001ad6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3730      	adds	r7, #48	@ 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0800bc04 	.word	0x0800bc04

08001ae8 <ejecutar_movimiento>:

brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
    // ¿Ya está orientado correctamente?
    if (sentido_actual == sentido_deseado)
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d101      	bne.n	8001b04 <ejecutar_movimiento+0x1c>
    {
        // avanza(); // Solo avanzar
        return sentido_actual;
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	e02b      	b.n	8001b5c <ejecutar_movimiento+0x74>
    }

    // Calcular diferencia usando aritmética xq es un tipo brujula
    // norte=0, este=1, sur=2, oeste=3
    int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 8001b04:	79ba      	ldrb	r2, [r7, #6]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	425a      	negs	r2, r3
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	bf58      	it	pl
 8001b18:	4253      	negpl	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

    switch (diferencia)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d015      	beq.n	8001b4e <ejecutar_movimiento+0x66>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	dc18      	bgt.n	8001b5a <ejecutar_movimiento+0x72>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d003      	beq.n	8001b36 <ejecutar_movimiento+0x4e>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d006      	beq.n	8001b42 <ejecutar_movimiento+0x5a>
 8001b34:	e011      	b.n	8001b5a <ejecutar_movimiento+0x72>
    {
    case 1: // Girar 90° a la derecha
        return gira90der(sentido_actual);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe ff6d 	bl	8000a18 <gira90der>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	e00c      	b.n	8001b5c <ejecutar_movimiento+0x74>

    case 2: // Girar 180° (media vuelta)
        return gira180(sentido_actual);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe ffa1 	bl	8000a8c <gira180>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	e006      	b.n	8001b5c <ejecutar_movimiento+0x74>

    case 3: // Girar 90° a la izquierda
        return gira90izq(sentido_actual);
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe ff27 	bl	80009a4 <gira90izq>
 8001b56:	4603      	mov	r3, r0
 8001b58:	e000      	b.n	8001b5c <ejecutar_movimiento+0x74>

    default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
        // avanza();
        return sentido_actual;
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
    }
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba2:	2007      	movs	r0, #7
 8001ba4:	f001 f836 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d157      	bne.n	8001c86 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_ADC_MspInit+0xe0>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a2d      	ldr	r2, [pc, #180]	@ (8001c94 <HAL_ADC_MspInit+0xe0>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c94 <HAL_ADC_MspInit+0xe0>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <HAL_ADC_MspInit+0xe0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a26      	ldr	r2, [pc, #152]	@ (8001c94 <HAL_ADC_MspInit+0xe0>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_ADC_MspInit+0xe0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481d      	ldr	r0, [pc, #116]	@ (8001c98 <HAL_ADC_MspInit+0xe4>)
 8001c22:	f001 fbb7 	bl	8003394 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_ADC_MspInit+0xec>)
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c6a:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c6c:	f001 f822 	bl	8002cb4 <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c76:	f7ff fe6f 	bl	8001958 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <HAL_ADC_MspInit+0xe8>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	@ 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40012000 	.word	0x40012000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	20000194 	.word	0x20000194
 8001ca0:	40026410 	.word	0x40026410

08001ca4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	@ (8001d28 <HAL_I2C_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12c      	bne.n	8001d20 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_I2C_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <HAL_I2C_MspInit+0x88>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_I2C_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001ce2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce8:	2312      	movs	r3, #18
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <HAL_I2C_MspInit+0x8c>)
 8001d00:	f001 fb48 	bl	8003394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_I2C_MspInit+0x88>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <HAL_I2C_MspInit+0x88>)
 8001d0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_I2C_MspInit+0x88>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	@ 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020400 	.word	0x40020400

08001d34 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	@ 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a31      	ldr	r2, [pc, #196]	@ (8001e24 <HAL_I2S_MspInit+0xf0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d15a      	bne.n	8001e1a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d64:	2301      	movs	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d68:	23c0      	movs	r3, #192	@ 0xc0
 8001d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4618      	mov	r0, r3
 8001d76:	f005 f88f 	bl	8006e98 <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001d80:	f7ff fdea 	bl	8001958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	4a26      	ldr	r2, [pc, #152]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d94:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	4a18      	ldr	r2, [pc, #96]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_I2S_MspInit+0xf4>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001de8:	2306      	movs	r3, #6
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	480e      	ldr	r0, [pc, #56]	@ (8001e2c <HAL_I2S_MspInit+0xf8>)
 8001df4:	f001 face 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001df8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e0a:	2306      	movs	r3, #6
 8001e0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e12:	4619      	mov	r1, r3
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <HAL_I2S_MspInit+0xfc>)
 8001e16:	f001 fabd 	bl	8003394 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3738      	adds	r7, #56	@ 0x38
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40003c00 	.word	0x40003c00
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40020800 	.word	0x40020800

08001e34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	@ 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_SPI_MspInit+0x84>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12b      	bne.n	8001eae <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	4a17      	ldr	r2, [pc, #92]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e8e:	23e0      	movs	r3, #224	@ 0xe0
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <HAL_SPI_MspInit+0x8c>)
 8001eaa:	f001 fa73 	bl	8003394 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	@ 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40013000 	.word	0x40013000
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f00 <HAL_TIM_Base_MspInit+0x3c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_TIM_Base_MspInit+0x40>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_TIM_Base_MspInit+0x40>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <HAL_TIM_Base_MspInit+0x40>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <HAL_TIM_MspPostInit+0x68>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d11e      	bne.n	8001f68 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_TIM_MspPostInit+0x6c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_TIM_MspPostInit+0x6c>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_TIM_MspPostInit+0x6c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001f46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	4619      	mov	r1, r3
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_TIM_MspPostInit+0x70>)
 8001f64:	f001 fa16 	bl	8003394 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020800 	.word	0x40020800

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <NMI_Handler+0x4>

08001f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <MemManage_Handler+0x4>

08001f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd2:	f000 f8e5 	bl	80021a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WallSensor_Pin);
 8001fde:	2040      	movs	r0, #64	@ 0x40
 8001fe0:	f001 fba6 	bl	8003730 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 8001fe4:	2080      	movs	r0, #128	@ 0x80
 8001fe6:	f001 fba3 	bl	8003730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA2_Stream0_IRQHandler+0x10>)
 8001ff6:	f000 ff63 	bl	8002ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000194 	.word	0x20000194

08002004 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <OTG_FS_IRQHandler+0x10>)
 800200a:	f001 fe89 	bl	8003d20 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200008b4 	.word	0x200008b4

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f009 fd58 	bl	800bafc <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20020000 	.word	0x20020000
 8002078:	00000400 	.word	0x00000400
 800207c:	200004d0 	.word	0x200004d0
 8002080:	20000de0 	.word	0x20000de0

08002084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	@ (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020ac:	f7ff ffea 	bl	8002084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b0:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020b2:	490d      	ldr	r1, [pc, #52]	@ (80020e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020c8:	4c0a      	ldr	r4, [pc, #40]	@ (80020f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d6:	f009 fd17 	bl	800bb08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7fe ff3d 	bl	8000f58 <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80020ec:	0800bc38 	.word	0x0800bc38
  ldr r2, =_sbss
 80020f0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80020f4:	20000ddc 	.word	0x20000ddc

080020f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <HAL_Init+0x40>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800210a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800210c:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <HAL_Init+0x40>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a07      	ldr	r2, [pc, #28]	@ (800213c <HAL_Init+0x40>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 fd75 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f808 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002130:	f7ff fd18 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <HAL_InitTick+0x54>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_InitTick+0x58>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002156:	fbb3 f3f1 	udiv	r3, r3, r1
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fd9b 	bl	8002c9a <HAL_SYSTICK_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00e      	b.n	800218c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d80a      	bhi.n	800218a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	2200      	movs	r2, #0
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 fd55 	bl	8002c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002180:	4a06      	ldr	r2, [pc, #24]	@ (800219c <HAL_InitTick+0x5c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000001c 	.word	0x2000001c
 8002198:	20000024 	.word	0x20000024
 800219c:	20000020 	.word	0x20000020

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000024 	.word	0x20000024
 80021c4:	200004d4 	.word	0x200004d4

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	200004d4 	.word	0x200004d4

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff ffee 	bl	80021c8 <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffde 	bl	80021c8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000024 	.word	0x20000024

08002228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e033      	b.n	80022a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fcb4 	bl	8001bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800226e:	f023 0302 	bic.w	r3, r3, #2
 8002272:	f043 0202 	orr.w	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa58 	bl	8002730 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40
 8002296:	e001      	b.n	800229c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Start_DMA+0x22>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e0eb      	b.n	80024aa <HAL_ADC_Start_DMA+0x1fa>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d018      	beq.n	800231a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f8:	4b6e      	ldr	r3, [pc, #440]	@ (80024b4 <HAL_ADC_Start_DMA+0x204>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a6e      	ldr	r2, [pc, #440]	@ (80024b8 <HAL_ADC_Start_DMA+0x208>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9a      	lsrs	r2, r3, #18
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800230c:	e002      	b.n	8002314 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3b01      	subs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002328:	d107      	bne.n	800233a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002338:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 80a3 	bne.w	8002490 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002374:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002388:	d106      	bne.n	8002398 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f023 0206 	bic.w	r2, r3, #6
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	645a      	str	r2, [r3, #68]	@ 0x44
 8002396:	e002      	b.n	800239e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a6:	4b45      	ldr	r3, [pc, #276]	@ (80024bc <HAL_ADC_Start_DMA+0x20c>)
 80023a8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ae:	4a44      	ldr	r2, [pc, #272]	@ (80024c0 <HAL_ADC_Start_DMA+0x210>)
 80023b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b6:	4a43      	ldr	r2, [pc, #268]	@ (80024c4 <HAL_ADC_Start_DMA+0x214>)
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023be:	4a42      	ldr	r2, [pc, #264]	@ (80024c8 <HAL_ADC_Start_DMA+0x218>)
 80023c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023da:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023ea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	334c      	adds	r3, #76	@ 0x4c
 80023f6:	4619      	mov	r1, r3
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f000 fd08 	bl	8002e10 <HAL_DMA_Start_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b00      	cmp	r3, #0
 800240e:	d12a      	bne.n	8002466 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2d      	ldr	r2, [pc, #180]	@ (80024cc <HAL_ADC_Start_DMA+0x21c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d015      	beq.n	8002446 <HAL_ADC_Start_DMA+0x196>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <HAL_ADC_Start_DMA+0x220>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d105      	bne.n	8002430 <HAL_ADC_Start_DMA+0x180>
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_ADC_Start_DMA+0x20c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a27      	ldr	r2, [pc, #156]	@ (80024d4 <HAL_ADC_Start_DMA+0x224>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d136      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x1f8>
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_ADC_Start_DMA+0x20c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d130      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d129      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e020      	b.n	80024a8 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_ADC_Start_DMA+0x21c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d11b      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x1f8>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	e00b      	b.n	80024a8 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f043 0210 	orr.w	r2, r3, #16
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000001c 	.word	0x2000001c
 80024b8:	431bde83 	.word	0x431bde83
 80024bc:	40012300 	.word	0x40012300
 80024c0:	08002929 	.word	0x08002929
 80024c4:	080029e3 	.word	0x080029e3
 80024c8:	080029ff 	.word	0x080029ff
 80024cc:	40012000 	.word	0x40012000
 80024d0:	40012100 	.word	0x40012100
 80024d4:	40012200 	.word	0x40012200

080024d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1c>
 8002504:	2302      	movs	r3, #2
 8002506:	e105      	b.n	8002714 <HAL_ADC_ConfigChannel+0x228>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b09      	cmp	r3, #9
 8002516:	d925      	bls.n	8002564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68d9      	ldr	r1, [r3, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43da      	mvns	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	400a      	ands	r2, r1
 800253c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68d9      	ldr	r1, [r3, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	4603      	mov	r3, r0
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4403      	add	r3, r0
 8002556:	3b1e      	subs	r3, #30
 8002558:	409a      	lsls	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	e022      	b.n	80025aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	2207      	movs	r2, #7
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	400a      	ands	r2, r1
 8002586:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	4603      	mov	r3, r0
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4403      	add	r3, r0
 80025a0:	409a      	lsls	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d824      	bhi.n	80025fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b05      	subs	r3, #5
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b05      	subs	r3, #5
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025fa:	e04c      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d824      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	3b23      	subs	r3, #35	@ 0x23
 8002616:	221f      	movs	r2, #31
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43da      	mvns	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	400a      	ands	r2, r1
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	3b23      	subs	r3, #35	@ 0x23
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
 800264c:	e023      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b41      	subs	r3, #65	@ 0x41
 8002660:	221f      	movs	r2, #31
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b41      	subs	r3, #65	@ 0x41
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002696:	4b22      	ldr	r3, [pc, #136]	@ (8002720 <HAL_ADC_ConfigChannel+0x234>)
 8002698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a21      	ldr	r2, [pc, #132]	@ (8002724 <HAL_ADC_ConfigChannel+0x238>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d109      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1cc>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_ADC_ConfigChannel+0x238>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d123      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d003      	beq.n	80026d2 <HAL_ADC_ConfigChannel+0x1e6>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b11      	cmp	r3, #17
 80026d0:	d11b      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d111      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_ADC_ConfigChannel+0x23c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a10      	ldr	r2, [pc, #64]	@ (800272c <HAL_ADC_ConfigChannel+0x240>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	0c9a      	lsrs	r2, r3, #18
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	40012000 	.word	0x40012000
 8002728:	2000001c 	.word	0x2000001c
 800272c:	431bde83 	.word	0x431bde83

08002730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002738:	4b79      	ldr	r3, [pc, #484]	@ (8002920 <ADC_Init+0x1f0>)
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	4a58      	ldr	r2, [pc, #352]	@ (8002924 <ADC_Init+0x1f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	e00f      	b.n	800282e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800281c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800282c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0202 	bic.w	r2, r2, #2
 800283c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e1b      	ldrb	r3, [r3, #24]
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800286a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800287a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	3b01      	subs	r3, #1
 8002888:	035a      	lsls	r2, r3, #13
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e007      	b.n	80028a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	3b01      	subs	r3, #1
 80028c0:	051a      	lsls	r2, r3, #20
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028e6:	025a      	lsls	r2, r3, #9
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	029a      	lsls	r2, r3, #10
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	0f000001 	.word	0x0f000001

08002928 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002934:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800293e:	2b00      	cmp	r3, #0
 8002940:	d13c      	bne.n	80029bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d12b      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d127      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800297c:	2b00      	cmp	r3, #0
 800297e:	d119      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0220 	bic.w	r2, r2, #32
 800298e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7fd fdfd 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ba:	e00e      	b.n	80029da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff fd85 	bl	80024d8 <HAL_ADC_ErrorCallback>
}
 80029ce:	e004      	b.n	80029da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7fd fdd1 	bl	8000598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f043 0204 	orr.w	r2, r3, #4
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff fd5a 	bl	80024d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	@ (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	db12      	blt.n	8002b04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	490a      	ldr	r1, [pc, #40]	@ (8002b10 <__NVIC_DisableIRQ+0x44>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2001      	movs	r0, #1
 8002aee:	fa00 f202 	lsl.w	r2, r0, r2
 8002af2:	3320      	adds	r3, #32
 8002af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002af8:	f3bf 8f4f 	dsb	sy
}
 8002afc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002afe:	f3bf 8f6f 	isb	sy
}
 8002b02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	@ (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	@ (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	@ 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	@ 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f7ff ff8e 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff05 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff1a 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff8e 	bl	8002b68 <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff0d 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff1d 	bl	8002acc <__NVIC_DisableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff94 	bl	8002bd0 <SysTick_Config>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff fa82 	bl	80021c8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e099      	b.n	8002e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf0:	e00f      	b.n	8002d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf2:	f7ff fa69 	bl	80021c8 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d908      	bls.n	8002d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e078      	b.n	8002e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e8      	bne.n	8002cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4b38      	ldr	r3, [pc, #224]	@ (8002e0c <HAL_DMA_Init+0x158>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d107      	bne.n	8002d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	4313      	orrs	r3, r2
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f023 0307 	bic.w	r3, r3, #7
 8002d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d117      	bne.n	8002dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fa6f 	bl	800329c <DMA_CheckFifoParam>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2240      	movs	r2, #64	@ 0x40
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e016      	b.n	8002e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa26 	bl	8003230 <DMA_CalcBaseAndBitshift>
 8002de4:	4603      	mov	r3, r0
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dec:	223f      	movs	r2, #63	@ 0x3f
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	f010803f 	.word	0xf010803f

08002e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_DMA_Start_IT+0x26>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e040      	b.n	8002eb8 <HAL_DMA_Start_IT+0xa8>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d12f      	bne.n	8002eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f9b8 	bl	80031d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	223f      	movs	r2, #63	@ 0x3f
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0216 	orr.w	r2, r2, #22
 8002e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0208 	orr.w	r2, r2, #8
 8002e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e005      	b.n	8002eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8003108 <HAL_DMA_IRQHandler+0x248>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a8e      	ldr	r2, [pc, #568]	@ (800310c <HAL_DMA_IRQHandler+0x24c>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	2208      	movs	r2, #8
 8002eec:	409a      	lsls	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01a      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	2208      	movs	r2, #8
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	2201      	movs	r2, #1
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4e:	2201      	movs	r2, #1
 8002f50:	409a      	lsls	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f66:	2204      	movs	r2, #4
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d012      	beq.n	8002f98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	2204      	movs	r2, #4
 8002f86:	409a      	lsls	r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d043      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03c      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	2210      	movs	r2, #16
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d024      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
 8002fee:	e01f      	b.n	8003030 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e016      	b.n	8003030 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d107      	bne.n	8003020 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0208 	bic.w	r2, r2, #8
 800301e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	2220      	movs	r2, #32
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 808f 	beq.w	8003160 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8087 	beq.w	8003160 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	2220      	movs	r2, #32
 8003058:	409a      	lsls	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b05      	cmp	r3, #5
 8003068:	d136      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0216 	bic.w	r2, r2, #22
 8003078:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003088:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_DMA_IRQHandler+0x1da>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0208 	bic.w	r2, r2, #8
 80030a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	223f      	movs	r2, #63	@ 0x3f
 80030b0:	409a      	lsls	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d07e      	beq.n	80031cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
        }
        return;
 80030d6:	e079      	b.n	80031cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01d      	beq.n	8003122 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d031      	beq.n	8003160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
 8003104:	e02c      	b.n	8003160 <HAL_DMA_IRQHandler+0x2a0>
 8003106:	bf00      	nop
 8003108:	2000001c 	.word	0x2000001c
 800310c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d023      	beq.n	8003160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e01e      	b.n	8003160 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10f      	bne.n	8003150 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0210 	bic.w	r2, r2, #16
 800313e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	2b00      	cmp	r3, #0
 8003166:	d032      	beq.n	80031ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d022      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2205      	movs	r2, #5
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	3301      	adds	r3, #1
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	d307      	bcc.n	80031a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f2      	bne.n	800318c <HAL_DMA_IRQHandler+0x2cc>
 80031a6:	e000      	b.n	80031aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
 80031ca:	e000      	b.n	80031ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80031cc:	bf00      	nop
    }
  }
}
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b40      	cmp	r3, #64	@ 0x40
 8003200:	d108      	bne.n	8003214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003212:	e007      	b.n	8003224 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3b10      	subs	r3, #16
 8003240:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <DMA_CalcBaseAndBitshift+0x64>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800324a:	4a13      	ldr	r2, [pc, #76]	@ (8003298 <DMA_CalcBaseAndBitshift+0x68>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d909      	bls.n	8003272 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	1d1a      	adds	r2, r3, #4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003270:	e007      	b.n	8003282 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	aaaaaaab 	.word	0xaaaaaaab
 8003298:	0800bc20 	.word	0x0800bc20

0800329c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d11f      	bne.n	80032f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d856      	bhi.n	800336a <DMA_CheckFifoParam+0xce>
 80032bc:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <DMA_CheckFifoParam+0x28>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032e7 	.word	0x080032e7
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	0800336b 	.word	0x0800336b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d046      	beq.n	800336e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e043      	b.n	800336e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032ee:	d140      	bne.n	8003372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e03d      	b.n	8003372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fe:	d121      	bne.n	8003344 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d837      	bhi.n	8003376 <DMA_CheckFifoParam+0xda>
 8003306:	a201      	add	r2, pc, #4	@ (adr r2, 800330c <DMA_CheckFifoParam+0x70>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	0800331d 	.word	0x0800331d
 8003310:	08003323 	.word	0x08003323
 8003314:	0800331d 	.word	0x0800331d
 8003318:	08003335 	.word	0x08003335
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e030      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d025      	beq.n	800337a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003332:	e022      	b.n	800337a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003342:	e01c      	b.n	800337e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d903      	bls.n	8003352 <DMA_CheckFifoParam+0xb6>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d003      	beq.n	8003358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003350:	e018      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e015      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e00b      	b.n	8003382 <DMA_CheckFifoParam+0xe6>
      break;
 800336a:	bf00      	nop
 800336c:	e00a      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e008      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e006      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e004      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;   
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
    }
  } 
  
  return status; 
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	@ 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e16b      	b.n	8003688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f040 815a 	bne.w	8003682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d005      	beq.n	80033e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d130      	bne.n	8003448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 0201 	and.w	r2, r3, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b03      	cmp	r3, #3
 8003452:	d017      	beq.n	8003484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d123      	bne.n	80034d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80b4 	beq.w	8003682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	4b60      	ldr	r3, [pc, #384]	@ (80036a0 <HAL_GPIO_Init+0x30c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	4a5f      	ldr	r2, [pc, #380]	@ (80036a0 <HAL_GPIO_Init+0x30c>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003528:	6453      	str	r3, [r2, #68]	@ 0x44
 800352a:	4b5d      	ldr	r3, [pc, #372]	@ (80036a0 <HAL_GPIO_Init+0x30c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003536:	4a5b      	ldr	r2, [pc, #364]	@ (80036a4 <HAL_GPIO_Init+0x310>)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	3302      	adds	r3, #2
 800353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	220f      	movs	r2, #15
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a52      	ldr	r2, [pc, #328]	@ (80036a8 <HAL_GPIO_Init+0x314>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02b      	beq.n	80035ba <HAL_GPIO_Init+0x226>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a51      	ldr	r2, [pc, #324]	@ (80036ac <HAL_GPIO_Init+0x318>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d025      	beq.n	80035b6 <HAL_GPIO_Init+0x222>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a50      	ldr	r2, [pc, #320]	@ (80036b0 <HAL_GPIO_Init+0x31c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01f      	beq.n	80035b2 <HAL_GPIO_Init+0x21e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4f      	ldr	r2, [pc, #316]	@ (80036b4 <HAL_GPIO_Init+0x320>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_GPIO_Init+0x21a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4e      	ldr	r2, [pc, #312]	@ (80036b8 <HAL_GPIO_Init+0x324>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x216>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4d      	ldr	r2, [pc, #308]	@ (80036bc <HAL_GPIO_Init+0x328>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x212>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4c      	ldr	r2, [pc, #304]	@ (80036c0 <HAL_GPIO_Init+0x32c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x20e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4b      	ldr	r2, [pc, #300]	@ (80036c4 <HAL_GPIO_Init+0x330>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x20a>
 800359a:	2307      	movs	r3, #7
 800359c:	e00e      	b.n	80035bc <HAL_GPIO_Init+0x228>
 800359e:	2308      	movs	r3, #8
 80035a0:	e00c      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e00a      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e008      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035ba:	2300      	movs	r3, #0
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f002 0203 	and.w	r2, r2, #3
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	4093      	lsls	r3, r2
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035cc:	4935      	ldr	r1, [pc, #212]	@ (80036a4 <HAL_GPIO_Init+0x310>)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035da:	4b3b      	ldr	r3, [pc, #236]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fe:	4a32      	ldr	r2, [pc, #200]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003604:	4b30      	ldr	r3, [pc, #192]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003628:	4a27      	ldr	r2, [pc, #156]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362e:	4b26      	ldr	r3, [pc, #152]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003652:	4a1d      	ldr	r2, [pc, #116]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003658:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800367c:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <HAL_GPIO_Init+0x334>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	f67f ae90 	bls.w	80033b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3724      	adds	r7, #36	@ 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40021400 	.word	0x40021400
 80036c0:	40021800 	.word	0x40021800
 80036c4:	40021c00 	.word	0x40021c00
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e001      	b.n	80036ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003718:	e003      	b.n	8003722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800373a:	4b08      	ldr	r3, [pc, #32]	@ (800375c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003746:	4a05      	ldr	r2, [pc, #20]	@ (800375c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f8b2 	bl	80018b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40013c00 	.word	0x40013c00

08003760 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e059      	b.n	8003826 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f007 fe33 	bl	800b3f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2203      	movs	r2, #3
 8003796:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a0:	d102      	bne.n	80037a8 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f004 fc40 	bl	8008032 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7c1a      	ldrb	r2, [r3, #16]
 80037ba:	f88d 2000 	strb.w	r2, [sp]
 80037be:	3304      	adds	r3, #4
 80037c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c2:	f004 fbc1 	bl	8007f48 <USB_CoreInit>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e026      	b.n	8003826 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f004 fc38 	bl	8008054 <USB_SetCurrentMode>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e017      	b.n	8003826 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7c1a      	ldrb	r2, [r3, #16]
 80037fe:	f88d 2000 	strb.w	r2, [sp]
 8003802:	3304      	adds	r3, #4
 8003804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003806:	f004 fde1 	bl	80083cc <USB_HostInit>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e004      	b.n	8003826 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800382e:	b590      	push	{r4, r7, lr}
 8003830:	b08b      	sub	sp, #44	@ 0x2c
 8003832:	af04      	add	r7, sp, #16
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	4608      	mov	r0, r1
 8003838:	4611      	mov	r1, r2
 800383a:	461a      	mov	r2, r3
 800383c:	4603      	mov	r3, r0
 800383e:	70fb      	strb	r3, [r7, #3]
 8003840:	460b      	mov	r3, r1
 8003842:	70bb      	strb	r3, [r7, #2]
 8003844:	4613      	mov	r3, r2
 8003846:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003848:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800384a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_HCD_HC_Init+0x2c>
 8003856:	2302      	movs	r3, #2
 8003858:	e09d      	b.n	8003996 <HAL_HCD_HC_Init+0x168>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3319      	adds	r3, #25
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3314      	adds	r3, #20
 8003886:	787a      	ldrb	r2, [r7, #1]
 8003888:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3315      	adds	r3, #21
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3326      	adds	r3, #38	@ 0x26
 80038ae:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80038b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	78bb      	ldrb	r3, [r7, #2]
 80038b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038bc:	b2d8      	uxtb	r0, r3
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3316      	adds	r3, #22
 80038cc:	4602      	mov	r2, r0
 80038ce:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	4619      	mov	r1, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fbc7 	bl	8004068 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80038da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	da0a      	bge.n	80038f8 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3317      	adds	r3, #23
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e009      	b.n	800390c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	3317      	adds	r3, #23
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f004 febf 	bl	8008694 <USB_GetHostSpeed>
 8003916:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003918:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10b      	bne.n	8003938 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003920:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003924:	2b01      	cmp	r3, #1
 8003926:	d107      	bne.n	8003938 <HAL_HCD_HC_Init+0x10a>
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2bbc      	cmp	r3, #188	@ 0xbc
 8003932:	d901      	bls.n	8003938 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003934:	23bc      	movs	r3, #188	@ 0xbc
 8003936:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3318      	adds	r3, #24
 8003948:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800394c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	b298      	uxth	r0, r3
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3328      	adds	r3, #40	@ 0x28
 8003962:	4602      	mov	r2, r0
 8003964:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	b29b      	uxth	r3, r3
 800396e:	787c      	ldrb	r4, [r7, #1]
 8003970:	78ba      	ldrb	r2, [r7, #2]
 8003972:	78f9      	ldrb	r1, [r7, #3]
 8003974:	9302      	str	r3, [sp, #8]
 8003976:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	4623      	mov	r3, r4
 8003984:	f004 feae 	bl	80086e4 <USB_HC_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd90      	pop	{r4, r7, pc}

0800399e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_HCD_HC_Halt+0x1e>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e00f      	b.n	80039dc <HAL_HCD_HC_Halt+0x3e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f005 fa40 	bl	8008e52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	4608      	mov	r0, r1
 80039ee:	4611      	mov	r1, r2
 80039f0:	461a      	mov	r2, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	70fb      	strb	r3, [r7, #3]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70bb      	strb	r3, [r7, #2]
 80039fa:	4613      	mov	r3, r2
 80039fc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3317      	adds	r3, #23
 8003a0e:	78ba      	ldrb	r2, [r7, #2]
 8003a10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	3326      	adds	r3, #38	@ 0x26
 8003a22:	787a      	ldrb	r2, [r7, #1]
 8003a24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a26:	7c3b      	ldrb	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d114      	bne.n	8003a56 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	332a      	adds	r3, #42	@ 0x2a
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3319      	adds	r3, #25
 8003a50:	7f3a      	ldrb	r2, [r7, #28]
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e009      	b.n	8003a6a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	332a      	adds	r3, #42	@ 0x2a
 8003a66:	2202      	movs	r2, #2
 8003a68:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a6a:	787b      	ldrb	r3, [r7, #1]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	f200 8102 	bhi.w	8003c76 <HAL_HCD_HC_SubmitRequest+0x292>
 8003a72:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003c61 	.word	0x08003c61
 8003a80:	08003b4d 	.word	0x08003b4d
 8003a84:	08003bd7 	.word	0x08003bd7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003a88:	7c3b      	ldrb	r3, [r7, #16]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	f040 80f5 	bne.w	8003c7a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003a90:	78bb      	ldrb	r3, [r7, #2]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d12d      	bne.n	8003af2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003a96:	8b3b      	ldrh	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	333d      	adds	r3, #61	@ 0x3d
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	333d      	adds	r3, #61	@ 0x3d
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	332a      	adds	r3, #42	@ 0x2a
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003ada:	e0ce      	b.n	8003c7a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	332a      	adds	r3, #42	@ 0x2a
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
      break;
 8003af0:	e0c3      	b.n	8003c7a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	331a      	adds	r3, #26
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 80b8 	bne.w	8003c7a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	333c      	adds	r3, #60	@ 0x3c
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	332a      	adds	r3, #42	@ 0x2a
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
      break;
 8003b34:	e0a1      	b.n	8003c7a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	332a      	adds	r3, #42	@ 0x2a
 8003b46:	2202      	movs	r2, #2
 8003b48:	701a      	strb	r2, [r3, #0]
      break;
 8003b4a:	e096      	b.n	8003c7a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b4c:	78bb      	ldrb	r3, [r7, #2]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d120      	bne.n	8003b94 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	333d      	adds	r3, #61	@ 0x3d
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	332a      	adds	r3, #42	@ 0x2a
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b7c:	e07e      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	332a      	adds	r3, #42	@ 0x2a
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]
      break;
 8003b92:	e073      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	333c      	adds	r3, #60	@ 0x3c
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	332a      	adds	r3, #42	@ 0x2a
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
      break;
 8003bbe:	e05d      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	332a      	adds	r3, #42	@ 0x2a
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
      break;
 8003bd4:	e052      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003bd6:	78bb      	ldrb	r3, [r7, #2]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d120      	bne.n	8003c1e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	333d      	adds	r3, #61	@ 0x3d
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	332a      	adds	r3, #42	@ 0x2a
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c06:	e039      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	332a      	adds	r3, #42	@ 0x2a
 8003c18:	2202      	movs	r2, #2
 8003c1a:	701a      	strb	r2, [r3, #0]
      break;
 8003c1c:	e02e      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	333c      	adds	r3, #60	@ 0x3c
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	332a      	adds	r3, #42	@ 0x2a
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
      break;
 8003c48:	e018      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	332a      	adds	r3, #42	@ 0x2a
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]
      break;
 8003c5e:	e00d      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	332a      	adds	r3, #42	@ 0x2a
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
      break;
 8003c74:	e002      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003c7a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	332c      	adds	r3, #44	@ 0x2c
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	8b39      	ldrh	r1, [r7, #24]
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4403      	add	r3, r0
 8003ca0:	3334      	adds	r3, #52	@ 0x34
 8003ca2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	334c      	adds	r3, #76	@ 0x4c
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3338      	adds	r3, #56	@ 0x38
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3315      	adds	r3, #21
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334d      	adds	r3, #77	@ 0x4d
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	3310      	adds	r3, #16
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	1d19      	adds	r1, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	799b      	ldrb	r3, [r3, #6]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f004 fe14 	bl	800893c <USB_HC_StartXfer>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop

08003d20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f004 fb02 	bl	8008340 <USB_GetMode>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	f040 80fb 	bne.w	8003f3a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fac5 	bl	80082d8 <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80f1 	beq.w	8003f38 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 fabc 	bl	80082d8 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d6a:	d104      	bne.n	8003d76 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f004 faac 	bl	80082d8 <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8a:	d104      	bne.n	8003d96 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 fa9c 	bl	80082d8 <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003da6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003daa:	d104      	bne.n	8003db6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003db4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fa8c 	bl	80082d8 <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d103      	bne.n	8003dd2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 fa7e 	bl	80082d8 <USB_ReadInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003de6:	d120      	bne.n	8003e2a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003df0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d113      	bne.n	8003e2a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e02:	2110      	movs	r1, #16
 8003e04:	6938      	ldr	r0, [r7, #16]
 8003e06:	f004 f971 	bl	80080ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e0a:	6938      	ldr	r0, [r7, #16]
 8003e0c:	f004 f9a0 	bl	8008150 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7a5b      	ldrb	r3, [r3, #9]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d105      	bne.n	8003e24 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f004 fb98 	bl	8008554 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f007 fb65 	bl	800b4f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 fa52 	bl	80082d8 <USB_ReadInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e3e:	d102      	bne.n	8003e46 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f001 fd4d 	bl	80058e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f004 fa44 	bl	80082d8 <USB_ReadInterrupts>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d106      	bne.n	8003e68 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f007 fb2e 	bl	800b4bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2208      	movs	r2, #8
 8003e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 fa33 	bl	80082d8 <USB_ReadInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e7c:	d139      	bne.n	8003ef2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 ffd4 	bl	8008e30 <USB_HC_ReadInterrupt>
 8003e88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e025      	b.n	8003edc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d018      	beq.n	8003ed6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eba:	d106      	bne.n	8003eca <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f905 	bl	80040d2 <HCD_HC_IN_IRQHandler>
 8003ec8:	e005      	b.n	8003ed6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 ff67 	bl	8004da4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	795b      	ldrb	r3, [r3, #5]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d3d3      	bcc.n	8003e90 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 f9ee 	bl	80082d8 <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d101      	bne.n	8003f0a <HAL_HCD_IRQHandler+0x1ea>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_HCD_IRQHandler+0x1ec>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d014      	beq.n	8003f3a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0210 	bic.w	r2, r2, #16
 8003f1e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 fbfe 	bl	8005722 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0210 	orr.w	r2, r2, #16
 8003f34:	619a      	str	r2, [r3, #24]
 8003f36:	e000      	b.n	8003f3a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003f38:	bf00      	nop
    }
  }
}
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_HCD_Start+0x16>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e013      	b.n	8003f7e <HAL_HCD_Start+0x3e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 fb5c 	bl	8008622 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f004 f84e 	bl	8008010 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_HCD_Stop+0x16>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e00d      	b.n	8003fb8 <HAL_HCD_Stop+0x32>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f005 f8af 	bl	800910c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f004 fafe 	bl	80085ce <USB_ResetPort>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	334c      	adds	r3, #76	@ 0x4c
 8003ff8:	781b      	ldrb	r3, [r3, #0]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3338      	adds	r3, #56	@ 0x38
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f004 fb40 	bl	80086c2 <USB_GetCurrentFrame>
 8004042:	4603      	mov	r3, r0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f004 fb1b 	bl	8008694 <USB_GetHostSpeed>
 800405e:	4603      	mov	r3, r0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	331a      	adds	r3, #26
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	331b      	adds	r3, #27
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3325      	adds	r3, #37	@ 0x25
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3324      	adds	r3, #36	@ 0x24
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b086      	sub	sp, #24
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f004 f904 	bl	80082fe <USB_ReadChInterrupts>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d11a      	bne.n	8004136 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800410c:	461a      	mov	r2, r3
 800410e:	2304      	movs	r3, #4
 8004110:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	334d      	adds	r3, #77	@ 0x4d
 8004122:	2207      	movs	r2, #7
 8004124:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f004 fe8f 	bl	8008e52 <USB_HC_Halt>
 8004134:	e09e      	b.n	8004274 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f004 f8dd 	bl	80082fe <USB_ReadChInterrupts>
 8004144:	4603      	mov	r3, r0
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800414e:	d11b      	bne.n	8004188 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415c:	461a      	mov	r2, r3
 800415e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004162:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	334d      	adds	r3, #77	@ 0x4d
 8004174:	2208      	movs	r2, #8
 8004176:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f004 fe66 	bl	8008e52 <USB_HC_Halt>
 8004186:	e075      	b.n	8004274 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f004 f8b4 	bl	80082fe <USB_ReadChInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d11a      	bne.n	80041d6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ac:	461a      	mov	r2, r3
 80041ae:	2308      	movs	r3, #8
 80041b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334d      	adds	r3, #77	@ 0x4d
 80041c2:	2206      	movs	r2, #6
 80041c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f004 fe3f 	bl	8008e52 <USB_HC_Halt>
 80041d4:	e04e      	b.n	8004274 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f004 f88d 	bl	80082fe <USB_ReadChInterrupts>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ee:	d11b      	bne.n	8004228 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041fc:	461a      	mov	r2, r3
 80041fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004202:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334d      	adds	r3, #77	@ 0x4d
 8004214:	2209      	movs	r2, #9
 8004216:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fe16 	bl	8008e52 <USB_HC_Halt>
 8004226:	e025      	b.n	8004274 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f004 f864 	bl	80082fe <USB_ReadChInterrupts>
 8004236:	4603      	mov	r3, r0
 8004238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423c:	2b80      	cmp	r3, #128	@ 0x80
 800423e:	d119      	bne.n	8004274 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800424c:	461a      	mov	r2, r3
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	334d      	adds	r3, #77	@ 0x4d
 8004262:	2207      	movs	r2, #7
 8004264:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f004 fdef 	bl	8008e52 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f004 f83e 	bl	80082fe <USB_ReadChInterrupts>
 8004282:	4603      	mov	r3, r0
 8004284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800428c:	d112      	bne.n	80042b4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f004 fddb 	bl	8008e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	f000 bd75 	b.w	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 f81e 	bl	80082fe <USB_ReadChInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 8128 	bne.w	800451e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042da:	461a      	mov	r2, r3
 80042dc:	2320      	movs	r3, #32
 80042de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	331b      	adds	r3, #27
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d119      	bne.n	800432a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	331b      	adds	r3, #27
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	440a      	add	r2, r1
 8004320:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004328:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	799b      	ldrb	r3, [r3, #6]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01b      	beq.n	800436a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3330      	adds	r3, #48	@ 0x30
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4413      	add	r3, r2
 800434c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	1ac9      	subs	r1, r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4403      	add	r3, r0
 8004366:	3338      	adds	r3, #56	@ 0x38
 8004368:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	334d      	adds	r3, #77	@ 0x4d
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	3344      	adds	r3, #68	@ 0x44
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439e:	461a      	mov	r2, r3
 80043a0:	2301      	movs	r3, #1
 80043a2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3326      	adds	r3, #38	@ 0x26
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3326      	adds	r3, #38	@ 0x26
 80043ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d110      	bne.n	80043f2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f004 fd3a 	bl	8008e52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ea:	461a      	mov	r2, r3
 80043ec:	2310      	movs	r3, #16
 80043ee:	6093      	str	r3, [r2, #8]
 80043f0:	e03d      	b.n	800446e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3326      	adds	r3, #38	@ 0x26
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d00a      	beq.n	800441e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	3326      	adds	r3, #38	@ 0x26
 8004418:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800441a:	2b01      	cmp	r3, #1
 800441c:	d127      	bne.n	800446e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	440a      	add	r2, r1
 8004434:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004438:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800443c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	334c      	adds	r3, #76	@ 0x4c
 800444e:	2201      	movs	r2, #1
 8004450:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	334c      	adds	r3, #76	@ 0x4c
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f007 f851 	bl	800b510 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	799b      	ldrb	r3, [r3, #6]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d13b      	bne.n	80044ee <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	3338      	adds	r3, #56	@ 0x38
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4403      	add	r3, r0
 8004496:	3328      	adds	r3, #40	@ 0x28
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	440b      	add	r3, r1
 800449c:	1e59      	subs	r1, r3, #1
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4403      	add	r3, r0
 80044ac:	3328      	adds	r3, #40	@ 0x28
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8470 	beq.w	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	333c      	adds	r3, #60	@ 0x3c
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b2d8      	uxtb	r0, r3
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	333c      	adds	r3, #60	@ 0x3c
 80044e6:	4602      	mov	r2, r0
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	f000 bc58 	b.w	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	333c      	adds	r3, #60	@ 0x3c
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	f083 0301 	eor.w	r3, r3, #1
 8004506:	b2d8      	uxtb	r0, r3
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	333c      	adds	r3, #60	@ 0x3c
 8004516:	4602      	mov	r2, r0
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	f000 bc40 	b.w	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f003 fee9 	bl	80082fe <USB_ReadChInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b20      	cmp	r3, #32
 8004534:	d131      	bne.n	800459a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004542:	461a      	mov	r2, r3
 8004544:	2320      	movs	r3, #32
 8004546:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	331a      	adds	r3, #26
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b01      	cmp	r3, #1
 800455c:	f040 841f 	bne.w	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	331b      	adds	r3, #27
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	334d      	adds	r3, #77	@ 0x4d
 8004584:	2203      	movs	r2, #3
 8004586:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f004 fc5e 	bl	8008e52 <USB_HC_Halt>
 8004596:	f000 bc02 	b.w	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f003 feab 	bl	80082fe <USB_ReadChInterrupts>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	f040 8305 	bne.w	8004bbe <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	2302      	movs	r3, #2
 80045c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	334d      	adds	r3, #77	@ 0x4d
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d114      	bne.n	8004606 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	334d      	adds	r3, #77	@ 0x4d
 80045ec:	2202      	movs	r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	334c      	adds	r3, #76	@ 0x4c
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e2cc      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	334d      	adds	r3, #77	@ 0x4d
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b06      	cmp	r3, #6
 800461a:	d114      	bne.n	8004646 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	334d      	adds	r3, #77	@ 0x4d
 800462c:	2202      	movs	r2, #2
 800462e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	334c      	adds	r3, #76	@ 0x4c
 8004640:	2205      	movs	r2, #5
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e2ac      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	334d      	adds	r3, #77	@ 0x4d
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b07      	cmp	r3, #7
 800465a:	d00b      	beq.n	8004674 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	334d      	adds	r3, #77	@ 0x4d
 800466c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800466e:	2b09      	cmp	r3, #9
 8004670:	f040 80a6 	bne.w	80047c0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	334d      	adds	r3, #77	@ 0x4d
 8004684:	2202      	movs	r2, #2
 8004686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3344      	adds	r3, #68	@ 0x44
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	1c59      	adds	r1, r3, #1
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4403      	add	r3, r0
 80046a8:	3344      	adds	r3, #68	@ 0x44
 80046aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3344      	adds	r3, #68	@ 0x44
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d943      	bls.n	800474a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3344      	adds	r3, #68	@ 0x44
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	331a      	adds	r3, #26
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d123      	bne.n	8004734 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	331b      	adds	r3, #27
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	331c      	adds	r3, #28
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	440a      	add	r2, r1
 800472a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800472e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004732:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	334c      	adds	r3, #76	@ 0x4c
 8004744:	2204      	movs	r2, #4
 8004746:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004748:	e229      	b.n	8004b9e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	334c      	adds	r3, #76	@ 0x4c
 800475a:	2202      	movs	r2, #2
 800475c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	3326      	adds	r3, #38	@ 0x26
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	3326      	adds	r3, #38	@ 0x26
 8004784:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004786:	2b02      	cmp	r3, #2
 8004788:	f040 8209 	bne.w	8004b9e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047a2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047aa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047be:	e1ee      	b.n	8004b9e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	334d      	adds	r3, #77	@ 0x4d
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	f040 80c8 	bne.w	8004968 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	334d      	adds	r3, #77	@ 0x4d
 80047e8:	2202      	movs	r2, #2
 80047ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	331b      	adds	r3, #27
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	f040 81ce 	bne.w	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3326      	adds	r3, #38	@ 0x26
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d16b      	bne.n	80048f2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	3348      	adds	r3, #72	@ 0x48
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	1c59      	adds	r1, r3, #1
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4403      	add	r3, r0
 800483a:	3348      	adds	r3, #72	@ 0x48
 800483c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	3348      	adds	r3, #72	@ 0x48
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d943      	bls.n	80048dc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	3348      	adds	r3, #72	@ 0x48
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	331b      	adds	r3, #27
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	3344      	adds	r3, #68	@ 0x44
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d809      	bhi.n	80048a6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	331c      	adds	r3, #28
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	334c      	adds	r3, #76	@ 0x4c
 80048d6:	2204      	movs	r2, #4
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e014      	b.n	8004906 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	334c      	adds	r3, #76	@ 0x4c
 80048ec:	2202      	movs	r2, #2
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e009      	b.n	8004906 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	334c      	adds	r3, #76	@ 0x4c
 8004902:	2202      	movs	r2, #2
 8004904:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3326      	adds	r3, #38	@ 0x26
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	3326      	adds	r3, #38	@ 0x26
 800492c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800492e:	2b02      	cmp	r3, #2
 8004930:	f040 8136 	bne.w	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800494a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004952:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004960:	461a      	mov	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e11b      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	334d      	adds	r3, #77	@ 0x4d
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b03      	cmp	r3, #3
 800497c:	f040 8081 	bne.w	8004a82 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	334d      	adds	r3, #77	@ 0x4d
 8004990:	2202      	movs	r2, #2
 8004992:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	331b      	adds	r3, #27
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	f040 80fa 	bne.w	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	334c      	adds	r3, #76	@ 0x4c
 80049bc:	2202      	movs	r2, #2
 80049be:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049de:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	0151      	lsls	r1, r2, #5
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	440a      	add	r2, r1
 80049f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049fe:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a1a:	f023 0320 	bic.w	r3, r3, #32
 8004a1e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3326      	adds	r3, #38	@ 0x26
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	3326      	adds	r3, #38	@ 0x26
 8004a46:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f040 80a9 	bne.w	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a64:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a6c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e08e      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	334d      	adds	r3, #77	@ 0x4d
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d143      	bne.n	8004b20 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	334d      	adds	r3, #77	@ 0x4d
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	334c      	adds	r3, #76	@ 0x4c
 8004abc:	2202      	movs	r2, #2
 8004abe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	3326      	adds	r3, #38	@ 0x26
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3326      	adds	r3, #38	@ 0x26
 8004ae6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d159      	bne.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b02:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b0a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e03f      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	334d      	adds	r3, #77	@ 0x4d
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d126      	bne.n	8004b84 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	334d      	adds	r3, #77	@ 0x4d
 8004b46:	2202      	movs	r2, #2
 8004b48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3344      	adds	r3, #68	@ 0x44
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	1c59      	adds	r1, r3, #1
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4403      	add	r3, r0
 8004b6a:	3344      	adds	r3, #68	@ 0x44
 8004b6c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	334c      	adds	r3, #76	@ 0x4c
 8004b7e:	2204      	movs	r2, #4
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e00d      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	334d      	adds	r3, #77	@ 0x4d
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	f000 8100 	beq.w	8004d9c <HCD_HC_IN_IRQHandler+0xcca>
 8004b9c:	e000      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b9e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	334c      	adds	r3, #76	@ 0x4c
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f006 fcaa 	bl	800b510 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bbc:	e0ef      	b.n	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f003 fb99 	bl	80082fe <USB_ReadChInterrupts>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b40      	cmp	r3, #64	@ 0x40
 8004bd4:	d12f      	bne.n	8004c36 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be2:	461a      	mov	r2, r3
 8004be4:	2340      	movs	r3, #64	@ 0x40
 8004be6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	334d      	adds	r3, #77	@ 0x4d
 8004bf8:	2205      	movs	r2, #5
 8004bfa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	331a      	adds	r3, #26
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3344      	adds	r3, #68	@ 0x44
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 f90f 	bl	8008e52 <USB_HC_Halt>
 8004c34:	e0b3      	b.n	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f003 fb5d 	bl	80082fe <USB_ReadChInterrupts>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	f040 80a7 	bne.w	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3326      	adds	r3, #38	@ 0x26
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d11b      	bne.n	8004c9e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	3344      	adds	r3, #68	@ 0x44
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	334d      	adds	r3, #77	@ 0x4d
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f004 f8db 	bl	8008e52 <USB_HC_Halt>
 8004c9c:	e03f      	b.n	8004d1e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3326      	adds	r3, #38	@ 0x26
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3326      	adds	r3, #38	@ 0x26
 8004cc4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d129      	bne.n	8004d1e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3344      	adds	r3, #68	@ 0x44
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	799b      	ldrb	r3, [r3, #6]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HCD_HC_IN_IRQHandler+0xc2a>
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	331b      	adds	r3, #27
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d110      	bne.n	8004d1e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	334d      	adds	r3, #77	@ 0x4d
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f004 f89a 	bl	8008e52 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	331b      	adds	r3, #27
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d129      	bne.n	8004d88 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	331b      	adds	r3, #27
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d66:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d82:	f043 0320 	orr.w	r3, r3, #32
 8004d86:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d94:	461a      	mov	r2, r3
 8004d96:	2310      	movs	r3, #16
 8004d98:	6093      	str	r3, [r2, #8]
 8004d9a:	e000      	b.n	8004d9e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d9c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f003 fa9b 	bl	80082fe <USB_ReadChInterrupts>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d11b      	bne.n	8004e0a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dde:	461a      	mov	r2, r3
 8004de0:	2304      	movs	r3, #4
 8004de2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	334d      	adds	r3, #77	@ 0x4d
 8004df4:	2207      	movs	r2, #7
 8004df6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 f826 	bl	8008e52 <USB_HC_Halt>
 8004e06:	f000 bc89 	b.w	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f003 fa73 	bl	80082fe <USB_ReadChInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	f040 8082 	bne.w	8004f28 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e30:	461a      	mov	r2, r3
 8004e32:	2320      	movs	r3, #32
 8004e34:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	3319      	adds	r3, #25
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d124      	bne.n	8004e96 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3319      	adds	r3, #25
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	334c      	adds	r3, #76	@ 0x4c
 8004e70:	2202      	movs	r2, #2
 8004e72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	334d      	adds	r3, #77	@ 0x4d
 8004e84:	2203      	movs	r2, #3
 8004e86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f003 ffde 	bl	8008e52 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	331a      	adds	r3, #26
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 8437 	bne.w	800571c <HCD_HC_OUT_IRQHandler+0x978>
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	331b      	adds	r3, #27
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 842b 	bne.w	800571c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3326      	adds	r3, #38	@ 0x26
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d009      	beq.n	8004ef0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	331b      	adds	r3, #27
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	334d      	adds	r3, #77	@ 0x4d
 8004f00:	2203      	movs	r2, #3
 8004f02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f003 ffa0 	bl	8008e52 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	3344      	adds	r3, #68	@ 0x44
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e3f9      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f003 f9e4 	bl	80082fe <USB_ReadChInterrupts>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f40:	d111      	bne.n	8004f66 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	78fa      	ldrb	r2, [r7, #3]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f003 ff77 	bl	8008e52 <USB_HC_Halt>
 8004f64:	e3da      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f003 f9c5 	bl	80082fe <USB_ReadChInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d168      	bne.n	8005050 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3344      	adds	r3, #68	@ 0x44
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 f9af 	bl	80082fe <USB_ReadChInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d112      	bne.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3319      	adds	r3, #25
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2340      	movs	r3, #64	@ 0x40
 8004fce:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	331b      	adds	r3, #27
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d019      	beq.n	800501a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	331b      	adds	r3, #27
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	440a      	add	r2, r1
 8005010:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005018:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005026:	461a      	mov	r2, r3
 8005028:	2301      	movs	r3, #1
 800502a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	334d      	adds	r3, #77	@ 0x4d
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f003 ff02 	bl	8008e52 <USB_HC_Halt>
 800504e:	e365      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	78fa      	ldrb	r2, [r7, #3]
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f003 f950 	bl	80082fe <USB_ReadChInterrupts>
 800505e:	4603      	mov	r3, r0
 8005060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005064:	2b40      	cmp	r3, #64	@ 0x40
 8005066:	d139      	bne.n	80050dc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	334d      	adds	r3, #77	@ 0x4d
 8005078:	2205      	movs	r2, #5
 800507a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	331a      	adds	r3, #26
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3319      	adds	r3, #25
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3344      	adds	r3, #68	@ 0x44
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f003 fec5 	bl	8008e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050d4:	461a      	mov	r2, r3
 80050d6:	2340      	movs	r3, #64	@ 0x40
 80050d8:	6093      	str	r3, [r2, #8]
 80050da:	e31f      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f003 f90a 	bl	80082fe <USB_ReadChInterrupts>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d11a      	bne.n	800512a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005100:	461a      	mov	r2, r3
 8005102:	2308      	movs	r3, #8
 8005104:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	334d      	adds	r3, #77	@ 0x4d
 8005116:	2206      	movs	r2, #6
 8005118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f003 fe95 	bl	8008e52 <USB_HC_Halt>
 8005128:	e2f8      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f003 f8e3 	bl	80082fe <USB_ReadChInterrupts>
 8005138:	4603      	mov	r3, r0
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b10      	cmp	r3, #16
 8005140:	d144      	bne.n	80051cc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	3344      	adds	r3, #68	@ 0x44
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	334d      	adds	r3, #77	@ 0x4d
 8005166:	2204      	movs	r2, #4
 8005168:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3319      	adds	r3, #25
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d114      	bne.n	80051aa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3318      	adds	r3, #24
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3319      	adds	r3, #25
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f003 fe4d 	bl	8008e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c4:	461a      	mov	r2, r3
 80051c6:	2310      	movs	r3, #16
 80051c8:	6093      	str	r3, [r2, #8]
 80051ca:	e2a7      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f003 f892 	bl	80082fe <USB_ReadChInterrupts>
 80051da:	4603      	mov	r3, r0
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b80      	cmp	r3, #128	@ 0x80
 80051e2:	f040 8083 	bne.w	80052ec <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	799b      	ldrb	r3, [r3, #6]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d111      	bne.n	8005212 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	334d      	adds	r3, #77	@ 0x4d
 80051fe:	2207      	movs	r2, #7
 8005200:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f003 fe21 	bl	8008e52 <USB_HC_Halt>
 8005210:	e062      	b.n	80052d8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3344      	adds	r3, #68	@ 0x44
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4403      	add	r3, r0
 8005232:	3344      	adds	r3, #68	@ 0x44
 8005234:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	3344      	adds	r3, #68	@ 0x44
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d922      	bls.n	8005292 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	3344      	adds	r3, #68	@ 0x44
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	334c      	adds	r3, #76	@ 0x4c
 8005270:	2204      	movs	r2, #4
 8005272:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	334c      	adds	r3, #76	@ 0x4c
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f006 f940 	bl	800b510 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005290:	e022      	b.n	80052d8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	334c      	adds	r3, #76	@ 0x4c
 80052a2:	2202      	movs	r2, #2
 80052a4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052bc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052c4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e4:	461a      	mov	r2, r3
 80052e6:	2380      	movs	r3, #128	@ 0x80
 80052e8:	6093      	str	r3, [r2, #8]
 80052ea:	e217      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f003 f802 	bl	80082fe <USB_ReadChInterrupts>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005304:	d11b      	bne.n	800533e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	334d      	adds	r3, #77	@ 0x4d
 8005316:	2209      	movs	r2, #9
 8005318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f003 fd95 	bl	8008e52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800533a:	6093      	str	r3, [r2, #8]
 800533c:	e1ee      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f002 ffd9 	bl	80082fe <USB_ReadChInterrupts>
 800534c:	4603      	mov	r3, r0
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	f040 81df 	bne.w	8005716 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005364:	461a      	mov	r2, r3
 8005366:	2302      	movs	r3, #2
 8005368:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	334d      	adds	r3, #77	@ 0x4d
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 8093 	bne.w	80054a8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	334d      	adds	r3, #77	@ 0x4d
 8005392:	2202      	movs	r2, #2
 8005394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	334c      	adds	r3, #76	@ 0x4c
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3326      	adds	r3, #38	@ 0x26
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d00b      	beq.n	80053d8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	3326      	adds	r3, #38	@ 0x26
 80053d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	f040 8190 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	799b      	ldrb	r3, [r3, #6]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	333d      	adds	r3, #61	@ 0x3d
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2d8      	uxtb	r0, r3
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	333d      	adds	r3, #61	@ 0x3d
 8005408:	4602      	mov	r2, r0
 800540a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	799b      	ldrb	r3, [r3, #6]
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 8171 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3334      	adds	r3, #52	@ 0x34
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8165 	beq.w	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3334      	adds	r3, #52	@ 0x34
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4403      	add	r3, r0
 800544e:	3328      	adds	r3, #40	@ 0x28
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	440b      	add	r3, r1
 8005454:	1e59      	subs	r1, r3, #1
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4403      	add	r3, r0
 8005464:	3328      	adds	r3, #40	@ 0x28
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	fbb1 f3f3 	udiv	r3, r1, r3
 800546c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 813f 	beq.w	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	333d      	adds	r3, #61	@ 0x3d
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2d8      	uxtb	r0, r3
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	333d      	adds	r3, #61	@ 0x3d
 80054a2:	4602      	mov	r2, r0
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e127      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	334d      	adds	r3, #77	@ 0x4d
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d120      	bne.n	8005500 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	334d      	adds	r3, #77	@ 0x4d
 80054ce:	2202      	movs	r2, #2
 80054d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	331b      	adds	r3, #27
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 8107 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	334c      	adds	r3, #76	@ 0x4c
 80054fa:	2202      	movs	r2, #2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e0fb      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	334d      	adds	r3, #77	@ 0x4d
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d13a      	bne.n	800558c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	334d      	adds	r3, #77	@ 0x4d
 8005526:	2202      	movs	r2, #2
 8005528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	334c      	adds	r3, #76	@ 0x4c
 800553a:	2202      	movs	r2, #2
 800553c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	331b      	adds	r3, #27
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 80d1 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	331b      	adds	r3, #27
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	440a      	add	r2, r1
 8005580:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	e0b5      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	334d      	adds	r3, #77	@ 0x4d
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d114      	bne.n	80055cc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	334d      	adds	r3, #77	@ 0x4d
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	334c      	adds	r3, #76	@ 0x4c
 80055c6:	2202      	movs	r2, #2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e095      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	334d      	adds	r3, #77	@ 0x4d
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d114      	bne.n	800560c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	334d      	adds	r3, #77	@ 0x4d
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80055f6:	78fa      	ldrb	r2, [r7, #3]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	334c      	adds	r3, #76	@ 0x4c
 8005606:	2205      	movs	r2, #5
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e075      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	334d      	adds	r3, #77	@ 0x4d
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b07      	cmp	r3, #7
 8005620:	d00a      	beq.n	8005638 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	334d      	adds	r3, #77	@ 0x4d
 8005632:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005634:	2b09      	cmp	r3, #9
 8005636:	d170      	bne.n	800571a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	334d      	adds	r3, #77	@ 0x4d
 8005648:	2202      	movs	r2, #2
 800564a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	3344      	adds	r3, #68	@ 0x44
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4403      	add	r3, r0
 800566c:	3344      	adds	r3, #68	@ 0x44
 800566e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	3344      	adds	r3, #68	@ 0x44
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d914      	bls.n	80056b0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3344      	adds	r3, #68	@ 0x44
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	334c      	adds	r3, #76	@ 0x4c
 80056aa:	2204      	movs	r2, #4
 80056ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ae:	e022      	b.n	80056f6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	334c      	adds	r3, #76	@ 0x4c
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056da:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f0:	461a      	mov	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056f6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	334c      	adds	r3, #76	@ 0x4c
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f005 fefe 	bl	800b510 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005714:	e002      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800571a:	bf00      	nop
  }
}
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b08a      	sub	sp, #40	@ 0x28
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	0c5b      	lsrs	r3, r3, #17
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005756:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d004      	beq.n	8005768 <HCD_RXQLVL_IRQHandler+0x46>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b05      	cmp	r3, #5
 8005762:	f000 80b6 	beq.w	80058d2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005766:	e0b7      	b.n	80058d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80b3 	beq.w	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4613      	mov	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	332c      	adds	r3, #44	@ 0x2c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80a7 	beq.w	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4613      	mov	r3, r2
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	3338      	adds	r3, #56	@ 0x38
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	18d1      	adds	r1, r2, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4613      	mov	r3, r2
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4403      	add	r3, r0
 80057ac:	3334      	adds	r3, #52	@ 0x34
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4299      	cmp	r1, r3
 80057b2:	f200 8083 	bhi.w	80058bc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4613      	mov	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	332c      	adds	r3, #44	@ 0x2c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	b292      	uxth	r2, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	f002 fd29 	bl	8008228 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	332c      	adds	r3, #44	@ 0x2c
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	18d1      	adds	r1, r2, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4613      	mov	r3, r2
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4403      	add	r3, r0
 80057fa:	332c      	adds	r3, #44	@ 0x2c
 80057fc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3338      	adds	r3, #56	@ 0x38
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	18d1      	adds	r1, r2, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4613      	mov	r3, r2
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4403      	add	r3, r0
 8005822:	3338      	adds	r3, #56	@ 0x38
 8005824:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	0cdb      	lsrs	r3, r3, #19
 8005836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4613      	mov	r3, r2
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	3328      	adds	r3, #40	@ 0x28
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4293      	cmp	r3, r2
 8005854:	d13f      	bne.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d03c      	beq.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005872:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800587a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	333c      	adds	r3, #60	@ 0x3c
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f083 0301 	eor.w	r3, r3, #1
 80058a4:	b2d8      	uxtb	r0, r3
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4613      	mov	r3, r2
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	333c      	adds	r3, #60	@ 0x3c
 80058b6:	4602      	mov	r2, r0
 80058b8:	701a      	strb	r2, [r3, #0]
      break;
 80058ba:	e00c      	b.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4613      	mov	r3, r2
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	334c      	adds	r3, #76	@ 0x4c
 80058cc:	2204      	movs	r2, #4
 80058ce:	701a      	strb	r2, [r3, #0]
      break;
 80058d0:	e001      	b.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80058d6:	bf00      	nop
  }
}
 80058d8:	bf00      	nop
 80058da:	3728      	adds	r7, #40	@ 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800590c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b02      	cmp	r3, #2
 8005916:	d10b      	bne.n	8005930 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f005 fdd8 	bl	800b4d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f043 0302 	orr.w	r3, r3, #2
 800592e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b08      	cmp	r3, #8
 8005938:	d132      	bne.n	80059a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f043 0308 	orr.w	r3, r3, #8
 8005940:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b04      	cmp	r3, #4
 800594a:	d126      	bne.n	800599a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7a5b      	ldrb	r3, [r3, #9]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d113      	bne.n	800597c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800595a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800595e:	d106      	bne.n	800596e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2102      	movs	r1, #2
 8005966:	4618      	mov	r0, r3
 8005968:	f002 fdf4 	bl	8008554 <USB_InitFSLSPClkSel>
 800596c:	e011      	b.n	8005992 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f002 fded 	bl	8008554 <USB_InitFSLSPClkSel>
 800597a:	e00a      	b.n	8005992 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	79db      	ldrb	r3, [r3, #7]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d106      	bne.n	8005992 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800598a:	461a      	mov	r2, r3
 800598c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005990:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f005 fdca 	bl	800b52c <HAL_HCD_PortEnabled_Callback>
 8005998:	e002      	b.n	80059a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f005 fdd4 	bl	800b548 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d103      	bne.n	80059b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f043 0320 	orr.w	r3, r3, #32
 80059b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6013      	str	r3, [r2, #0]
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e12b      	b.n	8005c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc f958 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	@ 0x24
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f001 fa20 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8005a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4a81      	ldr	r2, [pc, #516]	@ (8005c3c <HAL_I2C_Init+0x274>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d807      	bhi.n	8005a4c <HAL_I2C_Init+0x84>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a80      	ldr	r2, [pc, #512]	@ (8005c40 <HAL_I2C_Init+0x278>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	bf94      	ite	ls
 8005a44:	2301      	movls	r3, #1
 8005a46:	2300      	movhi	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e006      	b.n	8005a5a <HAL_I2C_Init+0x92>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c44 <HAL_I2C_Init+0x27c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bf94      	ite	ls
 8005a54:	2301      	movls	r3, #1
 8005a56:	2300      	movhi	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0e7      	b.n	8005c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a78      	ldr	r2, [pc, #480]	@ (8005c48 <HAL_I2C_Init+0x280>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0c9b      	lsrs	r3, r3, #18
 8005a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a6a      	ldr	r2, [pc, #424]	@ (8005c3c <HAL_I2C_Init+0x274>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d802      	bhi.n	8005a9c <HAL_I2C_Init+0xd4>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	e009      	b.n	8005ab0 <HAL_I2C_Init+0xe8>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	4a69      	ldr	r2, [pc, #420]	@ (8005c4c <HAL_I2C_Init+0x284>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	099b      	lsrs	r3, r3, #6
 8005aae:	3301      	adds	r3, #1
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ac2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	495c      	ldr	r1, [pc, #368]	@ (8005c3c <HAL_I2C_Init+0x274>)
 8005acc:	428b      	cmp	r3, r1
 8005ace:	d819      	bhi.n	8005b04 <HAL_I2C_Init+0x13c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1e59      	subs	r1, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_I2C_Init+0x138>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1e59      	subs	r1, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af8:	3301      	adds	r3, #1
 8005afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afe:	e051      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b00:	2304      	movs	r3, #4
 8005b02:	e04f      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <HAL_I2C_Init+0x168>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1e58      	subs	r0, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	440b      	add	r3, r1
 8005b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e012      	b.n	8005b56 <HAL_I2C_Init+0x18e>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1e58      	subs	r0, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	0099      	lsls	r1, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b46:	3301      	adds	r3, #1
 8005b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Init+0x196>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e022      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10e      	bne.n	8005b84 <HAL_I2C_Init+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1e58      	subs	r0, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6859      	ldr	r1, [r3, #4]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	440b      	add	r3, r1
 8005b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b82:	e00f      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1e58      	subs	r0, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	0099      	lsls	r1, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	6809      	ldr	r1, [r1, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005bd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6911      	ldr	r1, [r2, #16]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68d2      	ldr	r2, [r2, #12]
 8005bde:	4311      	orrs	r1, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	000186a0 	.word	0x000186a0
 8005c40:	001e847f 	.word	0x001e847f
 8005c44:	003d08ff 	.word	0x003d08ff
 8005c48:	431bde83 	.word	0x431bde83
 8005c4c:	10624dd3 	.word	0x10624dd3

08005c50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e128      	b.n	8005eb4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a90      	ldr	r2, [pc, #576]	@ (8005ebc <HAL_I2S_Init+0x26c>)
 8005c7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fc f859 	bl	8001d34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005c98:	f023 030f 	bic.w	r3, r3, #15
 8005c9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d060      	beq.n	8005d70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e001      	b.n	8005cc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d802      	bhi.n	8005cce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f001 f9c4 	bl	800705c <HAL_RCCEx_GetPeriphCLKFreq>
 8005cd4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cde:	d125      	bne.n	8005d2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	3305      	adds	r3, #5
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	e01f      	b.n	8005d4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	3305      	adds	r3, #5
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e00e      	b.n	8005d4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d46:	3305      	adds	r3, #5
 8005d48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ec0 <HAL_I2S_Init+0x270>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	08db      	lsrs	r3, r3, #3
 8005d54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e003      	b.n	8005d78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005d70:	2302      	movs	r3, #2
 8005d72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d902      	bls.n	8005d84 <HAL_I2S_Init+0x134>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2bff      	cmp	r3, #255	@ 0xff
 8005d82:	d907      	bls.n	8005d94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d88:	f043 0210 	orr.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e08f      	b.n	8005eb4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	ea42 0103 	orr.w	r1, r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005db2:	f023 030f 	bic.w	r3, r3, #15
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6851      	ldr	r1, [r2, #4]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6892      	ldr	r2, [r2, #8]
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68d2      	ldr	r2, [r2, #12]
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6992      	ldr	r2, [r2, #24]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dd6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d161      	bne.n	8005ea4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a38      	ldr	r2, [pc, #224]	@ (8005ec4 <HAL_I2S_Init+0x274>)
 8005de4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a37      	ldr	r2, [pc, #220]	@ (8005ec8 <HAL_I2S_Init+0x278>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d101      	bne.n	8005df4 <HAL_I2S_Init+0x1a4>
 8005df0:	4b36      	ldr	r3, [pc, #216]	@ (8005ecc <HAL_I2S_Init+0x27c>)
 8005df2:	e001      	b.n	8005df8 <HAL_I2S_Init+0x1a8>
 8005df4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4932      	ldr	r1, [pc, #200]	@ (8005ec8 <HAL_I2S_Init+0x278>)
 8005e00:	428a      	cmp	r2, r1
 8005e02:	d101      	bne.n	8005e08 <HAL_I2S_Init+0x1b8>
 8005e04:	4a31      	ldr	r2, [pc, #196]	@ (8005ecc <HAL_I2S_Init+0x27c>)
 8005e06:	e001      	b.n	8005e0c <HAL_I2S_Init+0x1bc>
 8005e08:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005e0c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e10:	f023 030f 	bic.w	r3, r3, #15
 8005e14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec8 <HAL_I2S_Init+0x278>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <HAL_I2S_Init+0x1d4>
 8005e20:	4b2a      	ldr	r3, [pc, #168]	@ (8005ecc <HAL_I2S_Init+0x27c>)
 8005e22:	e001      	b.n	8005e28 <HAL_I2S_Init+0x1d8>
 8005e24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e28:	2202      	movs	r2, #2
 8005e2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a25      	ldr	r2, [pc, #148]	@ (8005ec8 <HAL_I2S_Init+0x278>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_I2S_Init+0x1ea>
 8005e36:	4b25      	ldr	r3, [pc, #148]	@ (8005ecc <HAL_I2S_Init+0x27c>)
 8005e38:	e001      	b.n	8005e3e <HAL_I2S_Init+0x1ee>
 8005e3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e4a:	d003      	beq.n	8005e54 <HAL_I2S_Init+0x204>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e001      	b.n	8005e60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e74:	4313      	orrs	r3, r2
 8005e76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005e8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec8 <HAL_I2S_Init+0x278>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d101      	bne.n	8005e9c <HAL_I2S_Init+0x24c>
 8005e98:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <HAL_I2S_Init+0x27c>)
 8005e9a:	e001      	b.n	8005ea0 <HAL_I2S_Init+0x250>
 8005e9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ea0:	897a      	ldrh	r2, [r7, #10]
 8005ea2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	08005fc7 	.word	0x08005fc7
 8005ec0:	cccccccd 	.word	0xcccccccd
 8005ec4:	080060dd 	.word	0x080060dd
 8005ec8:	40003800 	.word	0x40003800
 8005ecc:	40003400 	.word	0x40003400

08005ed0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10e      	bne.n	8005f60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff ffb8 	bl	8005ed0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	b292      	uxth	r2, r2
 8005f7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f82:	1c9a      	adds	r2, r3, #2
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10e      	bne.n	8005fbe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff ff93 	bl	8005ee4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d13a      	bne.n	8006058 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d109      	bne.n	8006000 <I2S_IRQHandler+0x3a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff6:	2b40      	cmp	r3, #64	@ 0x40
 8005ff8:	d102      	bne.n	8006000 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ffb4 	bl	8005f68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006006:	2b40      	cmp	r3, #64	@ 0x40
 8006008:	d126      	bne.n	8006058 <I2S_IRQHandler+0x92>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b20      	cmp	r3, #32
 8006016:	d11f      	bne.n	8006058 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006026:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006028:	2300      	movs	r3, #0
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604a:	f043 0202 	orr.w	r2, r3, #2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ff50 	bl	8005ef8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b03      	cmp	r3, #3
 8006062:	d136      	bne.n	80060d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b02      	cmp	r3, #2
 800606c:	d109      	bne.n	8006082 <I2S_IRQHandler+0xbc>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006078:	2b80      	cmp	r3, #128	@ 0x80
 800607a:	d102      	bne.n	8006082 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff45 	bl	8005f0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b08      	cmp	r3, #8
 800608a:	d122      	bne.n	80060d2 <I2S_IRQHandler+0x10c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b20      	cmp	r3, #32
 8006098:	d11b      	bne.n	80060d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c4:	f043 0204 	orr.w	r2, r3, #4
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff13 	bl	8005ef8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060d2:	bf00      	nop
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a92      	ldr	r2, [pc, #584]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80060f6:	4b92      	ldr	r3, [pc, #584]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060f8:	e001      	b.n	80060fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80060fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a8b      	ldr	r2, [pc, #556]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d101      	bne.n	8006118 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006114:	4b8a      	ldr	r3, [pc, #552]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006116:	e001      	b.n	800611c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006118:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006128:	d004      	beq.n	8006134 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 8099 	bne.w	8006266 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d107      	bne.n	800614e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f925 	bl	8006398 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d107      	bne.n	8006168 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9c8 	bl	80064f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d13a      	bne.n	80061e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d035      	beq.n	80061e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6e      	ldr	r2, [pc, #440]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006186:	4b6e      	ldr	r3, [pc, #440]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006188:	e001      	b.n	800618e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800618a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4969      	ldr	r1, [pc, #420]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006196:	428b      	cmp	r3, r1
 8006198:	d101      	bne.n	800619e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800619a:	4b69      	ldr	r3, [pc, #420]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800619c:	e001      	b.n	80061a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800619e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	f043 0202 	orr.w	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe88 	bl	8005ef8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	f040 80c3 	bne.w	800637a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80bd 	beq.w	800637a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800620e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a49      	ldr	r2, [pc, #292]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800621a:	4b49      	ldr	r3, [pc, #292]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800621c:	e001      	b.n	8006222 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800621e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4944      	ldr	r1, [pc, #272]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800622a:	428b      	cmp	r3, r1
 800622c:	d101      	bne.n	8006232 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800622e:	4b44      	ldr	r3, [pc, #272]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006230:	e001      	b.n	8006236 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006232:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006236:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800623a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800623c:	2300      	movs	r3, #0
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006256:	f043 0204 	orr.w	r2, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fe4a 	bl	8005ef8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006264:	e089      	b.n	800637a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d107      	bne.n	8006280 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8be 	bl	80063fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8fd 	bl	8006494 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b40      	cmp	r3, #64	@ 0x40
 80062a2:	d12f      	bne.n	8006304 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d02a      	beq.n	8006304 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1e      	ldr	r2, [pc, #120]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d101      	bne.n	80062cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80062c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062ca:	e001      	b.n	80062d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80062cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4919      	ldr	r1, [pc, #100]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062d8:	428b      	cmp	r3, r1
 80062da:	d101      	bne.n	80062e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80062dc:	4b18      	ldr	r3, [pc, #96]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062de:	e001      	b.n	80062e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80062e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	f043 0202 	orr.w	r2, r3, #2
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fdfa 	bl	8005ef8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b08      	cmp	r3, #8
 800630c:	d136      	bne.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d031      	beq.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a07      	ldr	r2, [pc, #28]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006322:	4b07      	ldr	r3, [pc, #28]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006324:	e001      	b.n	800632a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006326:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4902      	ldr	r1, [pc, #8]	@ (800633c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006332:	428b      	cmp	r3, r1
 8006334:	d106      	bne.n	8006344 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006336:	4b02      	ldr	r3, [pc, #8]	@ (8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006338:	e006      	b.n	8006348 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800633a:	bf00      	nop
 800633c:	40003800 	.word	0x40003800
 8006340:	40003400 	.word	0x40003400
 8006344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006348:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800634c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800635c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636a:	f043 0204 	orr.w	r2, r3, #4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fdc0 	bl	8005ef8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006378:	e000      	b.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800637a:	bf00      	nop
}
 800637c:	bf00      	nop
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	1c99      	adds	r1, r3, #2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d113      	bne.n	80063f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ffc9 	bl	8006384 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	1c99      	adds	r1, r3, #2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6251      	str	r1, [r2, #36]	@ 0x24
 800640e:	8819      	ldrh	r1, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1d      	ldr	r2, [pc, #116]	@ (800648c <I2SEx_TxISR_I2SExt+0x90>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d101      	bne.n	800641e <I2SEx_TxISR_I2SExt+0x22>
 800641a:	4b1d      	ldr	r3, [pc, #116]	@ (8006490 <I2SEx_TxISR_I2SExt+0x94>)
 800641c:	e001      	b.n	8006422 <I2SEx_TxISR_I2SExt+0x26>
 800641e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006422:	460a      	mov	r2, r1
 8006424:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d121      	bne.n	8006482 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a12      	ldr	r2, [pc, #72]	@ (800648c <I2SEx_TxISR_I2SExt+0x90>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d101      	bne.n	800644c <I2SEx_TxISR_I2SExt+0x50>
 8006448:	4b11      	ldr	r3, [pc, #68]	@ (8006490 <I2SEx_TxISR_I2SExt+0x94>)
 800644a:	e001      	b.n	8006450 <I2SEx_TxISR_I2SExt+0x54>
 800644c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	490d      	ldr	r1, [pc, #52]	@ (800648c <I2SEx_TxISR_I2SExt+0x90>)
 8006458:	428b      	cmp	r3, r1
 800645a:	d101      	bne.n	8006460 <I2SEx_TxISR_I2SExt+0x64>
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <I2SEx_TxISR_I2SExt+0x94>)
 800645e:	e001      	b.n	8006464 <I2SEx_TxISR_I2SExt+0x68>
 8006460:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006464:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006468:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d106      	bne.n	8006482 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff ff81 	bl	8006384 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40003800 	.word	0x40003800
 8006490:	40003400 	.word	0x40003400

08006494 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68d8      	ldr	r0, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	1c99      	adds	r1, r3, #2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80064ac:	b282      	uxth	r2, r0
 80064ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d113      	bne.n	80064f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80064d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ff4a 	bl	8006384 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a20      	ldr	r2, [pc, #128]	@ (8006588 <I2SEx_RxISR_I2SExt+0x90>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d101      	bne.n	800650e <I2SEx_RxISR_I2SExt+0x16>
 800650a:	4b20      	ldr	r3, [pc, #128]	@ (800658c <I2SEx_RxISR_I2SExt+0x94>)
 800650c:	e001      	b.n	8006512 <I2SEx_RxISR_I2SExt+0x1a>
 800650e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006512:	68d8      	ldr	r0, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006518:	1c99      	adds	r1, r3, #2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800651e:	b282      	uxth	r2, r0
 8006520:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d121      	bne.n	800657e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a12      	ldr	r2, [pc, #72]	@ (8006588 <I2SEx_RxISR_I2SExt+0x90>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <I2SEx_RxISR_I2SExt+0x50>
 8006544:	4b11      	ldr	r3, [pc, #68]	@ (800658c <I2SEx_RxISR_I2SExt+0x94>)
 8006546:	e001      	b.n	800654c <I2SEx_RxISR_I2SExt+0x54>
 8006548:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	490d      	ldr	r1, [pc, #52]	@ (8006588 <I2SEx_RxISR_I2SExt+0x90>)
 8006554:	428b      	cmp	r3, r1
 8006556:	d101      	bne.n	800655c <I2SEx_RxISR_I2SExt+0x64>
 8006558:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <I2SEx_RxISR_I2SExt+0x94>)
 800655a:	e001      	b.n	8006560 <I2SEx_RxISR_I2SExt+0x68>
 800655c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006560:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006564:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ff03 	bl	8006384 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40003800 	.word	0x40003800
 800658c:	40003400 	.word	0x40003400

08006590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e267      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d075      	beq.n	800669a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065ae:	4b88      	ldr	r3, [pc, #544]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d00c      	beq.n	80065d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ba:	4b85      	ldr	r3, [pc, #532]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d112      	bne.n	80065ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065c6:	4b82      	ldr	r3, [pc, #520]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065d2:	d10b      	bne.n	80065ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d4:	4b7e      	ldr	r3, [pc, #504]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d05b      	beq.n	8006698 <HAL_RCC_OscConfig+0x108>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d157      	bne.n	8006698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e242      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f4:	d106      	bne.n	8006604 <HAL_RCC_OscConfig+0x74>
 80065f6:	4b76      	ldr	r3, [pc, #472]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a75      	ldr	r2, [pc, #468]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e01d      	b.n	8006640 <HAL_RCC_OscConfig+0xb0>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800660c:	d10c      	bne.n	8006628 <HAL_RCC_OscConfig+0x98>
 800660e:	4b70      	ldr	r3, [pc, #448]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6f      	ldr	r2, [pc, #444]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 8006614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4b6d      	ldr	r3, [pc, #436]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a6c      	ldr	r2, [pc, #432]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 8006620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e00b      	b.n	8006640 <HAL_RCC_OscConfig+0xb0>
 8006628:	4b69      	ldr	r3, [pc, #420]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a68      	ldr	r2, [pc, #416]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 800662e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	4b66      	ldr	r3, [pc, #408]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a65      	ldr	r2, [pc, #404]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 800663a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800663e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d013      	beq.n	8006670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006648:	f7fb fdbe 	bl	80021c8 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006650:	f7fb fdba 	bl	80021c8 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b64      	cmp	r3, #100	@ 0x64
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e207      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006662:	4b5b      	ldr	r3, [pc, #364]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0f0      	beq.n	8006650 <HAL_RCC_OscConfig+0xc0>
 800666e:	e014      	b.n	800669a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006670:	f7fb fdaa 	bl	80021c8 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006678:	f7fb fda6 	bl	80021c8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b64      	cmp	r3, #100	@ 0x64
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e1f3      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800668a:	4b51      	ldr	r3, [pc, #324]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0xe8>
 8006696:	e000      	b.n	800669a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d063      	beq.n	800676e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066a6:	4b4a      	ldr	r3, [pc, #296]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b2:	4b47      	ldr	r3, [pc, #284]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d11c      	bne.n	80066f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066be:	4b44      	ldr	r3, [pc, #272]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d116      	bne.n	80066f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ca:	4b41      	ldr	r3, [pc, #260]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <HAL_RCC_OscConfig+0x152>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d001      	beq.n	80066e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e1c7      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e2:	4b3b      	ldr	r3, [pc, #236]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	4937      	ldr	r1, [pc, #220]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066f6:	e03a      	b.n	800676e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d020      	beq.n	8006742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006700:	4b34      	ldr	r3, [pc, #208]	@ (80067d4 <HAL_RCC_OscConfig+0x244>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006706:	f7fb fd5f 	bl	80021c8 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670e:	f7fb fd5b 	bl	80021c8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e1a8      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006720:	4b2b      	ldr	r3, [pc, #172]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672c:	4b28      	ldr	r3, [pc, #160]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	4925      	ldr	r1, [pc, #148]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 800673c:	4313      	orrs	r3, r2
 800673e:	600b      	str	r3, [r1, #0]
 8006740:	e015      	b.n	800676e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006742:	4b24      	ldr	r3, [pc, #144]	@ (80067d4 <HAL_RCC_OscConfig+0x244>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fb fd3e 	bl	80021c8 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006750:	f7fb fd3a 	bl	80021c8 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e187      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006762:	4b1b      	ldr	r3, [pc, #108]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d036      	beq.n	80067e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d016      	beq.n	80067b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006782:	4b15      	ldr	r3, [pc, #84]	@ (80067d8 <HAL_RCC_OscConfig+0x248>)
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006788:	f7fb fd1e 	bl	80021c8 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006790:	f7fb fd1a 	bl	80021c8 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e167      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a2:	4b0b      	ldr	r3, [pc, #44]	@ (80067d0 <HAL_RCC_OscConfig+0x240>)
 80067a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0f0      	beq.n	8006790 <HAL_RCC_OscConfig+0x200>
 80067ae:	e01b      	b.n	80067e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067b0:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <HAL_RCC_OscConfig+0x248>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067b6:	f7fb fd07 	bl	80021c8 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067bc:	e00e      	b.n	80067dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067be:	f7fb fd03 	bl	80021c8 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d907      	bls.n	80067dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e150      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
 80067d0:	40023800 	.word	0x40023800
 80067d4:	42470000 	.word	0x42470000
 80067d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067dc:	4b88      	ldr	r3, [pc, #544]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80067de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1ea      	bne.n	80067be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8097 	beq.w	8006924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067fa:	4b81      	ldr	r3, [pc, #516]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80067fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10f      	bne.n	8006826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	4b7d      	ldr	r3, [pc, #500]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	4a7c      	ldr	r2, [pc, #496]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006814:	6413      	str	r3, [r2, #64]	@ 0x40
 8006816:	4b7a      	ldr	r3, [pc, #488]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006826:	4b77      	ldr	r3, [pc, #476]	@ (8006a04 <HAL_RCC_OscConfig+0x474>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682e:	2b00      	cmp	r3, #0
 8006830:	d118      	bne.n	8006864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006832:	4b74      	ldr	r3, [pc, #464]	@ (8006a04 <HAL_RCC_OscConfig+0x474>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a73      	ldr	r2, [pc, #460]	@ (8006a04 <HAL_RCC_OscConfig+0x474>)
 8006838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800683c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800683e:	f7fb fcc3 	bl	80021c8 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006846:	f7fb fcbf 	bl	80021c8 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e10c      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006858:	4b6a      	ldr	r3, [pc, #424]	@ (8006a04 <HAL_RCC_OscConfig+0x474>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d106      	bne.n	800687a <HAL_RCC_OscConfig+0x2ea>
 800686c:	4b64      	ldr	r3, [pc, #400]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006870:	4a63      	ldr	r2, [pc, #396]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	6713      	str	r3, [r2, #112]	@ 0x70
 8006878:	e01c      	b.n	80068b4 <HAL_RCC_OscConfig+0x324>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b05      	cmp	r3, #5
 8006880:	d10c      	bne.n	800689c <HAL_RCC_OscConfig+0x30c>
 8006882:	4b5f      	ldr	r3, [pc, #380]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006886:	4a5e      	ldr	r2, [pc, #376]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006888:	f043 0304 	orr.w	r3, r3, #4
 800688c:	6713      	str	r3, [r2, #112]	@ 0x70
 800688e:	4b5c      	ldr	r3, [pc, #368]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006892:	4a5b      	ldr	r2, [pc, #364]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6713      	str	r3, [r2, #112]	@ 0x70
 800689a:	e00b      	b.n	80068b4 <HAL_RCC_OscConfig+0x324>
 800689c:	4b58      	ldr	r3, [pc, #352]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a0:	4a57      	ldr	r2, [pc, #348]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a8:	4b55      	ldr	r3, [pc, #340]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ac:	4a54      	ldr	r2, [pc, #336]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80068ae:	f023 0304 	bic.w	r3, r3, #4
 80068b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d015      	beq.n	80068e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068bc:	f7fb fc84 	bl	80021c8 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c2:	e00a      	b.n	80068da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c4:	f7fb fc80 	bl	80021c8 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0cb      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068da:	4b49      	ldr	r3, [pc, #292]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0ee      	beq.n	80068c4 <HAL_RCC_OscConfig+0x334>
 80068e6:	e014      	b.n	8006912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e8:	f7fb fc6e 	bl	80021c8 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ee:	e00a      	b.n	8006906 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f0:	f7fb fc6a 	bl	80021c8 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068fe:	4293      	cmp	r3, r2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e0b5      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006906:	4b3e      	ldr	r3, [pc, #248]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1ee      	bne.n	80068f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d105      	bne.n	8006924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006918:	4b39      	ldr	r3, [pc, #228]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	4a38      	ldr	r2, [pc, #224]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 800691e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80a1 	beq.w	8006a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800692e:	4b34      	ldr	r3, [pc, #208]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	2b08      	cmp	r3, #8
 8006938:	d05c      	beq.n	80069f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d141      	bne.n	80069c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	4b31      	ldr	r3, [pc, #196]	@ (8006a08 <HAL_RCC_OscConfig+0x478>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fb fc3e 	bl	80021c8 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006950:	f7fb fc3a 	bl	80021c8 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e087      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006962:	4b27      	ldr	r3, [pc, #156]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	019b      	lsls	r3, r3, #6
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	3b01      	subs	r3, #1
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	061b      	lsls	r3, r3, #24
 8006992:	491b      	ldr	r1, [pc, #108]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 8006994:	4313      	orrs	r3, r2
 8006996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006998:	4b1b      	ldr	r3, [pc, #108]	@ (8006a08 <HAL_RCC_OscConfig+0x478>)
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699e:	f7fb fc13 	bl	80021c8 <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a6:	f7fb fc0f 	bl	80021c8 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e05c      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b8:	4b11      	ldr	r3, [pc, #68]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f0      	beq.n	80069a6 <HAL_RCC_OscConfig+0x416>
 80069c4:	e054      	b.n	8006a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c6:	4b10      	ldr	r3, [pc, #64]	@ (8006a08 <HAL_RCC_OscConfig+0x478>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069cc:	f7fb fbfc 	bl	80021c8 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d4:	f7fb fbf8 	bl	80021c8 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e045      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e6:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <HAL_RCC_OscConfig+0x470>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x444>
 80069f2:	e03d      	b.n	8006a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d107      	bne.n	8006a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e038      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
 8006a00:	40023800 	.word	0x40023800
 8006a04:	40007000 	.word	0x40007000
 8006a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a7c <HAL_RCC_OscConfig+0x4ec>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d028      	beq.n	8006a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d121      	bne.n	8006a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d11a      	bne.n	8006a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d111      	bne.n	8006a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	3b01      	subs	r3, #1
 8006a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e000      	b.n	8006a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40023800 	.word	0x40023800

08006a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0cc      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a94:	4b68      	ldr	r3, [pc, #416]	@ (8006c38 <HAL_RCC_ClockConfig+0x1b8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d90c      	bls.n	8006abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa2:	4b65      	ldr	r3, [pc, #404]	@ (8006c38 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aaa:	4b63      	ldr	r3, [pc, #396]	@ (8006c38 <HAL_RCC_ClockConfig+0x1b8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0b8      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d020      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad4:	4b59      	ldr	r3, [pc, #356]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4a58      	ldr	r2, [pc, #352]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aec:	4b53      	ldr	r3, [pc, #332]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4a52      	ldr	r2, [pc, #328]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af8:	4b50      	ldr	r3, [pc, #320]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	494d      	ldr	r1, [pc, #308]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d044      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d107      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1e:	4b47      	ldr	r3, [pc, #284]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d119      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e07f      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d003      	beq.n	8006b3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e06f      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e067      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b5e:	4b37      	ldr	r3, [pc, #220]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f023 0203 	bic.w	r2, r3, #3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	4934      	ldr	r1, [pc, #208]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b70:	f7fb fb2a 	bl	80021c8 <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b76:	e00a      	b.n	8006b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b78:	f7fb fb26 	bl	80021c8 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e04f      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 020c 	and.w	r2, r3, #12
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d1eb      	bne.n	8006b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba0:	4b25      	ldr	r3, [pc, #148]	@ (8006c38 <HAL_RCC_ClockConfig+0x1b8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d20c      	bcs.n	8006bc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bae:	4b22      	ldr	r3, [pc, #136]	@ (8006c38 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb6:	4b20      	ldr	r3, [pc, #128]	@ (8006c38 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d001      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e032      	b.n	8006c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd4:	4b19      	ldr	r3, [pc, #100]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4916      	ldr	r1, [pc, #88]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bf2:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	490e      	ldr	r1, [pc, #56]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c06:	f000 f821 	bl	8006c4c <HAL_RCC_GetSysClockFreq>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c3c <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	091b      	lsrs	r3, r3, #4
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	490a      	ldr	r1, [pc, #40]	@ (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006c18:	5ccb      	ldrb	r3, [r1, r3]
 8006c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1e:	4a09      	ldr	r2, [pc, #36]	@ (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c22:	4b09      	ldr	r3, [pc, #36]	@ (8006c48 <HAL_RCC_ClockConfig+0x1c8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fb fa8a 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40023c00 	.word	0x40023c00
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	0800bc08 	.word	0x0800bc08
 8006c44:	2000001c 	.word	0x2000001c
 8006c48:	20000020 	.word	0x20000020

08006c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c50:	b094      	sub	sp, #80	@ 0x50
 8006c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c64:	4b79      	ldr	r3, [pc, #484]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 030c 	and.w	r3, r3, #12
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d00d      	beq.n	8006c8c <HAL_RCC_GetSysClockFreq+0x40>
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	f200 80e1 	bhi.w	8006e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x34>
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c7e:	e0db      	b.n	8006e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c80:	4b73      	ldr	r3, [pc, #460]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c84:	e0db      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c86:	4b73      	ldr	r3, [pc, #460]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c8a:	e0d8      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c96:	4b6d      	ldr	r3, [pc, #436]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d063      	beq.n	8006d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	099b      	lsrs	r3, r3, #6
 8006ca8:	2200      	movs	r2, #0
 8006caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	f04f 0000 	mov.w	r0, #0
 8006cc6:	f04f 0100 	mov.w	r1, #0
 8006cca:	0159      	lsls	r1, r3, #5
 8006ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cd0:	0150      	lsls	r0, r2, #5
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	1a51      	subs	r1, r2, r1
 8006cda:	6139      	str	r1, [r7, #16]
 8006cdc:	4629      	mov	r1, r5
 8006cde:	eb63 0301 	sbc.w	r3, r3, r1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	018b      	lsls	r3, r1, #6
 8006cf4:	4651      	mov	r1, sl
 8006cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cfa:	4651      	mov	r1, sl
 8006cfc:	018a      	lsls	r2, r1, #6
 8006cfe:	4651      	mov	r1, sl
 8006d00:	ebb2 0801 	subs.w	r8, r2, r1
 8006d04:	4659      	mov	r1, fp
 8006d06:	eb63 0901 	sbc.w	r9, r3, r1
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d1e:	4690      	mov	r8, r2
 8006d20:	4699      	mov	r9, r3
 8006d22:	4623      	mov	r3, r4
 8006d24:	eb18 0303 	adds.w	r3, r8, r3
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	eb49 0303 	adc.w	r3, r9, r3
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d3e:	4629      	mov	r1, r5
 8006d40:	024b      	lsls	r3, r1, #9
 8006d42:	4621      	mov	r1, r4
 8006d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d48:	4621      	mov	r1, r4
 8006d4a:	024a      	lsls	r2, r1, #9
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d52:	2200      	movs	r2, #0
 8006d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d5c:	f7f9 fa34 	bl	80001c8 <__aeabi_uldivmod>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4613      	mov	r3, r2
 8006d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d68:	e058      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d6a:	4b38      	ldr	r3, [pc, #224]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	099b      	lsrs	r3, r3, #6
 8006d70:	2200      	movs	r2, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	4611      	mov	r1, r2
 8006d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d7a:	623b      	str	r3, [r7, #32]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	f04f 0000 	mov.w	r0, #0
 8006d8c:	f04f 0100 	mov.w	r1, #0
 8006d90:	0159      	lsls	r1, r3, #5
 8006d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d96:	0150      	lsls	r0, r2, #5
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006da2:	4649      	mov	r1, r9
 8006da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8006dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	00eb      	lsls	r3, r5, #3
 8006dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dd2:	00e2      	lsls	r2, r4, #3
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	461d      	mov	r5, r3
 8006dd8:	4643      	mov	r3, r8
 8006dda:	18e3      	adds	r3, r4, r3
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	464b      	mov	r3, r9
 8006de0:	eb45 0303 	adc.w	r3, r5, r3
 8006de4:	607b      	str	r3, [r7, #4]
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006df2:	4629      	mov	r1, r5
 8006df4:	028b      	lsls	r3, r1, #10
 8006df6:	4621      	mov	r1, r4
 8006df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	028a      	lsls	r2, r1, #10
 8006e00:	4610      	mov	r0, r2
 8006e02:	4619      	mov	r1, r3
 8006e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e06:	2200      	movs	r2, #0
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	61fa      	str	r2, [r7, #28]
 8006e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e10:	f7f9 f9da 	bl	80001c8 <__aeabi_uldivmod>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4613      	mov	r3, r2
 8006e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	0c1b      	lsrs	r3, r3, #16
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	3301      	adds	r3, #1
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e36:	e002      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e38:	4b05      	ldr	r3, [pc, #20]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3750      	adds	r7, #80	@ 0x50
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	00f42400 	.word	0x00f42400
 8006e54:	007a1200 	.word	0x007a1200

08006e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e5c:	4b03      	ldr	r3, [pc, #12]	@ (8006e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	2000001c 	.word	0x2000001c

08006e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e74:	f7ff fff0 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	0a9b      	lsrs	r3, r3, #10
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4903      	ldr	r1, [pc, #12]	@ (8006e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40023800 	.word	0x40023800
 8006e94:	0800bc18 	.word	0x0800bc18

08006e98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d035      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ec0:	4b62      	ldr	r3, [pc, #392]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ec6:	f7fb f97f 	bl	80021c8 <HAL_GetTick>
 8006eca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ece:	f7fb f97b 	bl	80021c8 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e0b0      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	019a      	lsls	r2, r3, #6
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	071b      	lsls	r3, r3, #28
 8006ef8:	4955      	ldr	r1, [pc, #340]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f00:	4b52      	ldr	r3, [pc, #328]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f06:	f7fb f95f 	bl	80021c8 <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f0e:	f7fb f95b 	bl	80021c8 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e090      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f20:	4b4b      	ldr	r3, [pc, #300]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0f0      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8083 	beq.w	8007040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	4b44      	ldr	r3, [pc, #272]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f42:	4a43      	ldr	r2, [pc, #268]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f4a:	4b41      	ldr	r3, [pc, #260]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f56:	4b3f      	ldr	r3, [pc, #252]	@ (8007054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8007054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f62:	f7fb f931 	bl	80021c8 <HAL_GetTick>
 8006f66:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006f68:	e008      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f6a:	f7fb f92d 	bl	80021c8 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e062      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006f7c:	4b35      	ldr	r3, [pc, #212]	@ (8007054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f88:	4b31      	ldr	r3, [pc, #196]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f90:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d02f      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d028      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fb0:	4b29      	ldr	r3, [pc, #164]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fb6:	4b28      	ldr	r3, [pc, #160]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fbc:	4a24      	ldr	r2, [pc, #144]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fc2:	4b23      	ldr	r3, [pc, #140]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d114      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fce:	f7fb f8fb 	bl	80021c8 <HAL_GetTick>
 8006fd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd4:	e00a      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd6:	f7fb f8f7 	bl	80021c8 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e02a      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fec:	4b18      	ldr	r3, [pc, #96]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0ee      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007004:	d10d      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007006:	4b12      	ldr	r3, [pc, #72]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800701a:	490d      	ldr	r1, [pc, #52]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800701c:	4313      	orrs	r3, r2
 800701e:	608b      	str	r3, [r1, #8]
 8007020:	e005      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007022:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4a0a      	ldr	r2, [pc, #40]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007028:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800702c:	6093      	str	r3, [r2, #8]
 800702e:	4b08      	ldr	r3, [pc, #32]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007030:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800703a:	4905      	ldr	r1, [pc, #20]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800703c:	4313      	orrs	r3, r2
 800703e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	42470068 	.word	0x42470068
 8007050:	40023800 	.word	0x40023800
 8007054:	40007000 	.word	0x40007000
 8007058:	42470e40 	.word	0x42470e40

0800705c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d13f      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800707a:	4b24      	ldr	r3, [pc, #144]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007082:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d006      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007090:	d12f      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007092:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007094:	617b      	str	r3, [r7, #20]
          break;
 8007096:	e02f      	b.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007098:	4b1c      	ldr	r3, [pc, #112]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a4:	d108      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070a6:	4b19      	ldr	r3, [pc, #100]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ae:	4a19      	ldr	r2, [pc, #100]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	e007      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070b8:	4b14      	ldr	r3, [pc, #80]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070c0:	4a15      	ldr	r2, [pc, #84]	@ (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80070c8:	4b10      	ldr	r3, [pc, #64]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ce:	099b      	lsrs	r3, r3, #6
 80070d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80070dc:	4b0b      	ldr	r3, [pc, #44]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070e2:	0f1b      	lsrs	r3, r3, #28
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ee:	617b      	str	r3, [r7, #20]
          break;
 80070f0:	e002      	b.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
          break;
 80070f6:	bf00      	nop
        }
      }
      break;
 80070f8:	e000      	b.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80070fa:	bf00      	nop
    }
  }
  return frequency;
 80070fc:	697b      	ldr	r3, [r7, #20]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40023800 	.word	0x40023800
 8007110:	00bb8000 	.word	0x00bb8000
 8007114:	007a1200 	.word	0x007a1200
 8007118:	00f42400 	.word	0x00f42400

0800711c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e07b      	b.n	8007226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d108      	bne.n	8007148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800713e:	d009      	beq.n	8007154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	61da      	str	r2, [r3, #28]
 8007146:	e005      	b.n	8007154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fa fe60 	bl	8001e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800718a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d8:	ea42 0103 	orr.w	r1, r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	0c1b      	lsrs	r3, r3, #16
 80071f2:	f003 0104 	and.w	r1, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	f003 0210 	and.w	r2, r3, #16
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e041      	b.n	80072c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fa fe35 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3304      	adds	r3, #4
 800726a:	4619      	mov	r1, r3
 800726c:	4610      	mov	r0, r2
 800726e:	f000 fad9 	bl	8007824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e041      	b.n	8007362 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f839 	bl	800736a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f000 fa8a 	bl	8007824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d109      	bne.n	80073a4 <HAL_TIM_PWM_Start+0x24>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b01      	cmp	r3, #1
 800739a:	bf14      	ite	ne
 800739c:	2301      	movne	r3, #1
 800739e:	2300      	moveq	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	e022      	b.n	80073ea <HAL_TIM_PWM_Start+0x6a>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d109      	bne.n	80073be <HAL_TIM_PWM_Start+0x3e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	bf14      	ite	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	2300      	moveq	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	e015      	b.n	80073ea <HAL_TIM_PWM_Start+0x6a>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d109      	bne.n	80073d8 <HAL_TIM_PWM_Start+0x58>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	bf14      	ite	ne
 80073d0:	2301      	movne	r3, #1
 80073d2:	2300      	moveq	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	e008      	b.n	80073ea <HAL_TIM_PWM_Start+0x6a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	bf14      	ite	ne
 80073e4:	2301      	movne	r3, #1
 80073e6:	2300      	moveq	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e07c      	b.n	80074ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start+0x82>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007400:	e013      	b.n	800742a <HAL_TIM_PWM_Start+0xaa>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d104      	bne.n	8007412 <HAL_TIM_PWM_Start+0x92>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007410:	e00b      	b.n	800742a <HAL_TIM_PWM_Start+0xaa>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d104      	bne.n	8007422 <HAL_TIM_PWM_Start+0xa2>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007420:	e003      	b.n	800742a <HAL_TIM_PWM_Start+0xaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2201      	movs	r2, #1
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fce6 	bl	8007e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2d      	ldr	r2, [pc, #180]	@ (80074f4 <HAL_TIM_PWM_Start+0x174>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d004      	beq.n	800744c <HAL_TIM_PWM_Start+0xcc>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2c      	ldr	r2, [pc, #176]	@ (80074f8 <HAL_TIM_PWM_Start+0x178>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d101      	bne.n	8007450 <HAL_TIM_PWM_Start+0xd0>
 800744c:	2301      	movs	r3, #1
 800744e:	e000      	b.n	8007452 <HAL_TIM_PWM_Start+0xd2>
 8007450:	2300      	movs	r3, #0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007464:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a22      	ldr	r2, [pc, #136]	@ (80074f4 <HAL_TIM_PWM_Start+0x174>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d022      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x136>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007478:	d01d      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x136>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1f      	ldr	r2, [pc, #124]	@ (80074fc <HAL_TIM_PWM_Start+0x17c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x136>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1d      	ldr	r2, [pc, #116]	@ (8007500 <HAL_TIM_PWM_Start+0x180>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x136>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1c      	ldr	r2, [pc, #112]	@ (8007504 <HAL_TIM_PWM_Start+0x184>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x136>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a16      	ldr	r2, [pc, #88]	@ (80074f8 <HAL_TIM_PWM_Start+0x178>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x136>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a18      	ldr	r2, [pc, #96]	@ (8007508 <HAL_TIM_PWM_Start+0x188>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x136>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a16      	ldr	r2, [pc, #88]	@ (800750c <HAL_TIM_PWM_Start+0x18c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d111      	bne.n	80074da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d010      	beq.n	80074ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d8:	e007      	b.n	80074ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0201 	orr.w	r2, r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40010400 	.word	0x40010400
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40000c00 	.word	0x40000c00
 8007508:	40014000 	.word	0x40014000
 800750c:	40001800 	.word	0x40001800

08007510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800752a:	2302      	movs	r3, #2
 800752c:	e0ae      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b0c      	cmp	r3, #12
 800753a:	f200 809f 	bhi.w	800767c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800753e:	a201      	add	r2, pc, #4	@ (adr r2, 8007544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	08007579 	.word	0x08007579
 8007548:	0800767d 	.word	0x0800767d
 800754c:	0800767d 	.word	0x0800767d
 8007550:	0800767d 	.word	0x0800767d
 8007554:	080075b9 	.word	0x080075b9
 8007558:	0800767d 	.word	0x0800767d
 800755c:	0800767d 	.word	0x0800767d
 8007560:	0800767d 	.word	0x0800767d
 8007564:	080075fb 	.word	0x080075fb
 8007568:	0800767d 	.word	0x0800767d
 800756c:	0800767d 	.word	0x0800767d
 8007570:	0800767d 	.word	0x0800767d
 8007574:	0800763b 	.word	0x0800763b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f9f6 	bl	8007970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0208 	orr.w	r2, r2, #8
 8007592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0204 	bic.w	r2, r2, #4
 80075a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6999      	ldr	r1, [r3, #24]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	619a      	str	r2, [r3, #24]
      break;
 80075b6:	e064      	b.n	8007682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fa46 	bl	8007a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6999      	ldr	r1, [r3, #24]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	021a      	lsls	r2, r3, #8
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	619a      	str	r2, [r3, #24]
      break;
 80075f8:	e043      	b.n	8007682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fa9b 	bl	8007b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0208 	orr.w	r2, r2, #8
 8007614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0204 	bic.w	r2, r2, #4
 8007624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69d9      	ldr	r1, [r3, #28]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	61da      	str	r2, [r3, #28]
      break;
 8007638:	e023      	b.n	8007682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	4618      	mov	r0, r3
 8007642:	f000 faef 	bl	8007c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69da      	ldr	r2, [r3, #28]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69d9      	ldr	r1, [r3, #28]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	021a      	lsls	r2, r3, #8
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	61da      	str	r2, [r3, #28]
      break;
 800767a:	e002      	b.n	8007682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
      break;
 8007680:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <HAL_TIM_ConfigClockSource+0x1c>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e0b4      	b.n	800781a <HAL_TIM_ConfigClockSource+0x186>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e8:	d03e      	beq.n	8007768 <HAL_TIM_ConfigClockSource+0xd4>
 80076ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ee:	f200 8087 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 80076f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f6:	f000 8086 	beq.w	8007806 <HAL_TIM_ConfigClockSource+0x172>
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fe:	d87f      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b70      	cmp	r3, #112	@ 0x70
 8007702:	d01a      	beq.n	800773a <HAL_TIM_ConfigClockSource+0xa6>
 8007704:	2b70      	cmp	r3, #112	@ 0x70
 8007706:	d87b      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b60      	cmp	r3, #96	@ 0x60
 800770a:	d050      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x11a>
 800770c:	2b60      	cmp	r3, #96	@ 0x60
 800770e:	d877      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 8007710:	2b50      	cmp	r3, #80	@ 0x50
 8007712:	d03c      	beq.n	800778e <HAL_TIM_ConfigClockSource+0xfa>
 8007714:	2b50      	cmp	r3, #80	@ 0x50
 8007716:	d873      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 8007718:	2b40      	cmp	r3, #64	@ 0x40
 800771a:	d058      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x13a>
 800771c:	2b40      	cmp	r3, #64	@ 0x40
 800771e:	d86f      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d064      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x15a>
 8007724:	2b30      	cmp	r3, #48	@ 0x30
 8007726:	d86b      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d060      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x15a>
 800772c:	2b20      	cmp	r3, #32
 800772e:	d867      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d05c      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x15a>
 8007734:	2b10      	cmp	r3, #16
 8007736:	d05a      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x15a>
 8007738:	e062      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800774a:	f000 fb3b 	bl	8007dc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800775c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	609a      	str	r2, [r3, #8]
      break;
 8007766:	e04f      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007778:	f000 fb24 	bl	8007dc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800778a:	609a      	str	r2, [r3, #8]
      break;
 800778c:	e03c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800779a:	461a      	mov	r2, r3
 800779c:	f000 fa98 	bl	8007cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2150      	movs	r1, #80	@ 0x50
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 faf1 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 80077ac:	e02c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ba:	461a      	mov	r2, r3
 80077bc:	f000 fab7 	bl	8007d2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2160      	movs	r1, #96	@ 0x60
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fae1 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 80077cc:	e01c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077da:	461a      	mov	r2, r3
 80077dc:	f000 fa78 	bl	8007cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2140      	movs	r1, #64	@ 0x40
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fad1 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 80077ec:	e00c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f000 fac8 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 80077fe:	e003      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
      break;
 8007804:	e000      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a43      	ldr	r2, [pc, #268]	@ (8007944 <TIM_Base_SetConfig+0x120>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <TIM_Base_SetConfig+0x40>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007842:	d00f      	beq.n	8007864 <TIM_Base_SetConfig+0x40>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a40      	ldr	r2, [pc, #256]	@ (8007948 <TIM_Base_SetConfig+0x124>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00b      	beq.n	8007864 <TIM_Base_SetConfig+0x40>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a3f      	ldr	r2, [pc, #252]	@ (800794c <TIM_Base_SetConfig+0x128>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d007      	beq.n	8007864 <TIM_Base_SetConfig+0x40>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a3e      	ldr	r2, [pc, #248]	@ (8007950 <TIM_Base_SetConfig+0x12c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_Base_SetConfig+0x40>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a3d      	ldr	r2, [pc, #244]	@ (8007954 <TIM_Base_SetConfig+0x130>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d108      	bne.n	8007876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800786a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a32      	ldr	r2, [pc, #200]	@ (8007944 <TIM_Base_SetConfig+0x120>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d02b      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007884:	d027      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a2f      	ldr	r2, [pc, #188]	@ (8007948 <TIM_Base_SetConfig+0x124>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d023      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a2e      	ldr	r2, [pc, #184]	@ (800794c <TIM_Base_SetConfig+0x128>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01f      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a2d      	ldr	r2, [pc, #180]	@ (8007950 <TIM_Base_SetConfig+0x12c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d01b      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007954 <TIM_Base_SetConfig+0x130>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d017      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007958 <TIM_Base_SetConfig+0x134>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2a      	ldr	r2, [pc, #168]	@ (800795c <TIM_Base_SetConfig+0x138>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00f      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a29      	ldr	r2, [pc, #164]	@ (8007960 <TIM_Base_SetConfig+0x13c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a28      	ldr	r2, [pc, #160]	@ (8007964 <TIM_Base_SetConfig+0x140>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a27      	ldr	r2, [pc, #156]	@ (8007968 <TIM_Base_SetConfig+0x144>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a26      	ldr	r2, [pc, #152]	@ (800796c <TIM_Base_SetConfig+0x148>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d108      	bne.n	80078e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a0e      	ldr	r2, [pc, #56]	@ (8007944 <TIM_Base_SetConfig+0x120>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_Base_SetConfig+0xf2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a10      	ldr	r2, [pc, #64]	@ (8007954 <TIM_Base_SetConfig+0x130>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d103      	bne.n	800791e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f043 0204 	orr.w	r2, r3, #4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	40010000 	.word	0x40010000
 8007948:	40000400 	.word	0x40000400
 800794c:	40000800 	.word	0x40000800
 8007950:	40000c00 	.word	0x40000c00
 8007954:	40010400 	.word	0x40010400
 8007958:	40014000 	.word	0x40014000
 800795c:	40014400 	.word	0x40014400
 8007960:	40014800 	.word	0x40014800
 8007964:	40001800 	.word	0x40001800
 8007968:	40001c00 	.word	0x40001c00
 800796c:	40002000 	.word	0x40002000

08007970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	f023 0201 	bic.w	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f023 0302 	bic.w	r3, r3, #2
 80079b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a20      	ldr	r2, [pc, #128]	@ (8007a48 <TIM_OC1_SetConfig+0xd8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_OC1_SetConfig+0x64>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <TIM_OC1_SetConfig+0xdc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d10c      	bne.n	80079ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f023 0308 	bic.w	r3, r3, #8
 80079da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0304 	bic.w	r3, r3, #4
 80079ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a15      	ldr	r2, [pc, #84]	@ (8007a48 <TIM_OC1_SetConfig+0xd8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <TIM_OC1_SetConfig+0x8e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a14      	ldr	r2, [pc, #80]	@ (8007a4c <TIM_OC1_SetConfig+0xdc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d111      	bne.n	8007a22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	621a      	str	r2, [r3, #32]
}
 8007a3c:	bf00      	nop
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	40010000 	.word	0x40010000
 8007a4c:	40010400 	.word	0x40010400

08007a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	f023 0210 	bic.w	r2, r3, #16
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0320 	bic.w	r3, r3, #32
 8007a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a22      	ldr	r2, [pc, #136]	@ (8007b34 <TIM_OC2_SetConfig+0xe4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC2_SetConfig+0x68>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a21      	ldr	r2, [pc, #132]	@ (8007b38 <TIM_OC2_SetConfig+0xe8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d10d      	bne.n	8007ad4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a17      	ldr	r2, [pc, #92]	@ (8007b34 <TIM_OC2_SetConfig+0xe4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC2_SetConfig+0x94>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a16      	ldr	r2, [pc, #88]	@ (8007b38 <TIM_OC2_SetConfig+0xe8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d113      	bne.n	8007b0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40010000 	.word	0x40010000
 8007b38:	40010400 	.word	0x40010400

08007b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a21      	ldr	r2, [pc, #132]	@ (8007c1c <TIM_OC3_SetConfig+0xe0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d003      	beq.n	8007ba2 <TIM_OC3_SetConfig+0x66>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a20      	ldr	r2, [pc, #128]	@ (8007c20 <TIM_OC3_SetConfig+0xe4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d10d      	bne.n	8007bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a16      	ldr	r2, [pc, #88]	@ (8007c1c <TIM_OC3_SetConfig+0xe0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d003      	beq.n	8007bce <TIM_OC3_SetConfig+0x92>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a15      	ldr	r2, [pc, #84]	@ (8007c20 <TIM_OC3_SetConfig+0xe4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d113      	bne.n	8007bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	621a      	str	r2, [r3, #32]
}
 8007c10:	bf00      	nop
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	40010400 	.word	0x40010400

08007c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	031b      	lsls	r3, r3, #12
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a12      	ldr	r2, [pc, #72]	@ (8007cc8 <TIM_OC4_SetConfig+0xa4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_OC4_SetConfig+0x68>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a11      	ldr	r2, [pc, #68]	@ (8007ccc <TIM_OC4_SetConfig+0xa8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d109      	bne.n	8007ca0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	019b      	lsls	r3, r3, #6
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40010400 	.word	0x40010400

08007cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f023 0201 	bic.w	r2, r3, #1
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f023 030a 	bic.w	r3, r3, #10
 8007d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b087      	sub	sp, #28
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f023 0210 	bic.w	r2, r3, #16
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	031b      	lsls	r3, r3, #12
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	621a      	str	r2, [r3, #32]
}
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f043 0307 	orr.w	r3, r3, #7
 8007db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	609a      	str	r2, [r3, #8]
}
 8007db8:	bf00      	nop
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 031f 	and.w	r3, r3, #31
 8007e16:	2201      	movs	r2, #1
 8007e18:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1a      	ldr	r2, [r3, #32]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	43db      	mvns	r3, r3
 8007e26:	401a      	ands	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
}
 8007e42:	bf00      	nop
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e05a      	b.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a21      	ldr	r2, [pc, #132]	@ (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d022      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb4:	d01d      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1d      	ldr	r2, [pc, #116]	@ (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d018      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a1a      	ldr	r2, [pc, #104]	@ (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00e      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a18      	ldr	r2, [pc, #96]	@ (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a17      	ldr	r2, [pc, #92]	@ (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a15      	ldr	r2, [pc, #84]	@ (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d10c      	bne.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40010000 	.word	0x40010000
 8007f30:	40000400 	.word	0x40000400
 8007f34:	40000800 	.word	0x40000800
 8007f38:	40000c00 	.word	0x40000c00
 8007f3c:	40010400 	.word	0x40010400
 8007f40:	40014000 	.word	0x40014000
 8007f44:	40001800 	.word	0x40001800

08007f48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f48:	b084      	sub	sp, #16
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	f107 001c 	add.w	r0, r7, #28
 8007f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d123      	bne.n	8007faa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d105      	bne.n	8007f9e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f9dc 	bl	800835c <USB_CoreReset>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
 8007fa8:	e01b      	b.n	8007fe2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9d0 	bl	800835c <USB_CoreReset>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fd4:	e005      	b.n	8007fe2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fe2:	7fbb      	ldrb	r3, [r7, #30]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d10b      	bne.n	8008000 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f043 0206 	orr.w	r2, r3, #6
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f043 0220 	orr.w	r2, r3, #32
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800800c:	b004      	add	sp, #16
 800800e:	4770      	bx	lr

08008010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f043 0201 	orr.w	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f023 0201 	bic.w	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d115      	bne.n	80080a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008082:	200a      	movs	r0, #10
 8008084:	f7fa f8ac 	bl	80021e0 <HAL_Delay>
      ms += 10U;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	330a      	adds	r3, #10
 800808c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f956 	bl	8008340 <USB_GetMode>
 8008094:	4603      	mov	r3, r0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d01e      	beq.n	80080d8 <USB_SetCurrentMode+0x84>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2bc7      	cmp	r3, #199	@ 0xc7
 800809e:	d9f0      	bls.n	8008082 <USB_SetCurrentMode+0x2e>
 80080a0:	e01a      	b.n	80080d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d115      	bne.n	80080d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80080b4:	200a      	movs	r0, #10
 80080b6:	f7fa f893 	bl	80021e0 <HAL_Delay>
      ms += 10U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	330a      	adds	r3, #10
 80080be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f93d 	bl	8008340 <USB_GetMode>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <USB_SetCurrentMode+0x84>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80080d0:	d9f0      	bls.n	80080b4 <USB_SetCurrentMode+0x60>
 80080d2:	e001      	b.n	80080d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e005      	b.n	80080e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2bc8      	cmp	r3, #200	@ 0xc8
 80080dc:	d101      	bne.n	80080e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3301      	adds	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008106:	d901      	bls.n	800810c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e01b      	b.n	8008144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	daf2      	bge.n	80080fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	019b      	lsls	r3, r3, #6
 800811c:	f043 0220 	orr.w	r2, r3, #32
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008130:	d901      	bls.n	8008136 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e006      	b.n	8008144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b20      	cmp	r3, #32
 8008140:	d0f0      	beq.n	8008124 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008168:	d901      	bls.n	800816e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e018      	b.n	80081a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	daf2      	bge.n	800815c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2210      	movs	r2, #16
 800817e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800818c:	d901      	bls.n	8008192 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e006      	b.n	80081a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b10      	cmp	r3, #16
 800819c:	d0f0      	beq.n	8008180 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b089      	sub	sp, #36	@ 0x24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4611      	mov	r1, r2
 80081b8:	461a      	mov	r2, r3
 80081ba:	460b      	mov	r3, r1
 80081bc:	71fb      	strb	r3, [r7, #7]
 80081be:	4613      	mov	r3, r2
 80081c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80081ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d123      	bne.n	800821a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80081d2:	88bb      	ldrh	r3, [r7, #4]
 80081d4:	3303      	adds	r3, #3
 80081d6:	089b      	lsrs	r3, r3, #2
 80081d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081da:	2300      	movs	r3, #0
 80081dc:	61bb      	str	r3, [r7, #24]
 80081de:	e018      	b.n	8008212 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	031a      	lsls	r2, r3, #12
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ec:	461a      	mov	r2, r3
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	3301      	adds	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	3301      	adds	r3, #1
 80081fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	3301      	adds	r3, #1
 8008204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	3301      	adds	r3, #1
 800820a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	3301      	adds	r3, #1
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	429a      	cmp	r2, r3
 8008218:	d3e2      	bcc.n	80081e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3724      	adds	r7, #36	@ 0x24
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008228:	b480      	push	{r7}
 800822a:	b08b      	sub	sp, #44	@ 0x2c
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	089b      	lsrs	r3, r3, #2
 8008242:	b29b      	uxth	r3, r3
 8008244:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	f003 0303 	and.w	r3, r3, #3
 800824c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800824e:	2300      	movs	r3, #0
 8008250:	623b      	str	r3, [r7, #32]
 8008252:	e014      	b.n	800827e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	3301      	adds	r3, #1
 8008264:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	3301      	adds	r3, #1
 800826a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	3301      	adds	r3, #1
 8008270:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	3301      	adds	r3, #1
 8008276:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	3301      	adds	r3, #1
 800827c:	623b      	str	r3, [r7, #32]
 800827e:	6a3a      	ldr	r2, [r7, #32]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	429a      	cmp	r2, r3
 8008284:	d3e6      	bcc.n	8008254 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008286:	8bfb      	ldrh	r3, [r7, #30]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01e      	beq.n	80082ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008296:	461a      	mov	r2, r3
 8008298:	f107 0310 	add.w	r3, r7, #16
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	701a      	strb	r2, [r3, #0]
      i++;
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	3301      	adds	r3, #1
 80082b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	3301      	adds	r3, #1
 80082bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80082be:	8bfb      	ldrh	r3, [r7, #30]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80082c4:	8bfb      	ldrh	r3, [r7, #30]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1ea      	bne.n	80082a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	372c      	adds	r7, #44	@ 0x2c
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4013      	ands	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082f0:	68fb      	ldr	r3, [r7, #12]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	4013      	ands	r3, r2
 8008330:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008332:	68bb      	ldr	r3, [r7, #8]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	f003 0301 	and.w	r3, r3, #1
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008374:	d901      	bls.n	800837a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e022      	b.n	80083c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	daf2      	bge.n	8008368 <USB_CoreReset+0xc>

  count = 10U;
 8008382:	230a      	movs	r3, #10
 8008384:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008386:	e002      	b.n	800838e <USB_CoreReset+0x32>
  {
    count--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3b01      	subs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f9      	bne.n	8008388 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f043 0201 	orr.w	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3301      	adds	r3, #1
 80083a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083ac:	d901      	bls.n	80083b2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e006      	b.n	80083c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d0f0      	beq.n	80083a0 <USB_CoreReset+0x44>

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083cc:	b084      	sub	sp, #16
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b086      	sub	sp, #24
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80083da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083ec:	461a      	mov	r2, r3
 80083ee:	2300      	movs	r3, #0
 80083f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d119      	bne.n	8008456 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008426:	2b01      	cmp	r3, #1
 8008428:	d10a      	bne.n	8008440 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008438:	f043 0304 	orr.w	r3, r3, #4
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	e014      	b.n	800846a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800844e:	f023 0304 	bic.w	r3, r3, #4
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	e009      	b.n	800846a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008464:	f023 0304 	bic.w	r3, r3, #4
 8008468:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800846a:	2110      	movs	r1, #16
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fe3d 	bl	80080ec <USB_FlushTxFifo>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff fe67 	bl	8008150 <USB_FlushRxFifo>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	e015      	b.n	80084be <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800849e:	461a      	mov	r2, r3
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295
 80084a4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b2:	461a      	mov	r2, r3
 80084b4:	2300      	movs	r3, #0
 80084b6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	3301      	adds	r3, #1
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80084c2:	461a      	mov	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d3e3      	bcc.n	8008492 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f04f 32ff 	mov.w	r2, #4294967295
 80084d6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a18      	ldr	r2, [pc, #96]	@ (800853c <USB_HostInit+0x170>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d10b      	bne.n	80084f8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084e6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a15      	ldr	r2, [pc, #84]	@ (8008540 <USB_HostInit+0x174>)
 80084ec:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a14      	ldr	r2, [pc, #80]	@ (8008544 <USB_HostInit+0x178>)
 80084f2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80084f6:	e009      	b.n	800850c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2280      	movs	r2, #128	@ 0x80
 80084fc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a11      	ldr	r2, [pc, #68]	@ (8008548 <USB_HostInit+0x17c>)
 8008502:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a11      	ldr	r2, [pc, #68]	@ (800854c <USB_HostInit+0x180>)
 8008508:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800850c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f043 0210 	orr.w	r2, r3, #16
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <USB_HostInit+0x184>)
 8008526:	4313      	orrs	r3, r2
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008538:	b004      	add	sp, #16
 800853a:	4770      	bx	lr
 800853c:	40040000 	.word	0x40040000
 8008540:	01000200 	.word	0x01000200
 8008544:	00e00300 	.word	0x00e00300
 8008548:	00600080 	.word	0x00600080
 800854c:	004000e0 	.word	0x004000e0
 8008550:	a3200008 	.word	0xa3200008

08008554 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d107      	bne.n	80085a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800859c:	461a      	mov	r2, r3
 800859e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80085a2:	6053      	str	r3, [r2, #4]
 80085a4:	e00c      	b.n	80085c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d107      	bne.n	80085bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085b2:	461a      	mov	r2, r3
 80085b4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80085b8:	6053      	str	r3, [r2, #4]
 80085ba:	e001      	b.n	80085c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80085ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80085f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80085fe:	2064      	movs	r0, #100	@ 0x64
 8008600:	f7f9 fdee 	bl	80021e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800860c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008610:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008612:	200a      	movs	r0, #10
 8008614:	f7f9 fde4 	bl	80021e0 <HAL_Delay>

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008622:	b480      	push	{r7}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008646:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <USB_DriveVbus+0x44>
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d106      	bne.n	8008666 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008660:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008664:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800866c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008670:	d109      	bne.n	8008686 <USB_DriveVbus+0x64>
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d106      	bne.n	8008686 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008680:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008684:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	0c5b      	lsrs	r3, r3, #17
 80086b2:	f003 0303 	and.w	r3, r3, #3
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	b29b      	uxth	r3, r3
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	461a      	mov	r2, r3
 80086f2:	4603      	mov	r3, r0
 80086f4:	70fb      	strb	r3, [r7, #3]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70bb      	strb	r3, [r7, #2]
 80086fa:	4613      	mov	r3, r2
 80086fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008712:	461a      	mov	r2, r3
 8008714:	f04f 33ff 	mov.w	r3, #4294967295
 8008718:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800871a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800871e:	2b03      	cmp	r3, #3
 8008720:	d87c      	bhi.n	800881c <USB_HC_Init+0x138>
 8008722:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <USB_HC_Init+0x44>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	08008739 	.word	0x08008739
 800872c:	080087df 	.word	0x080087df
 8008730:	08008739 	.word	0x08008739
 8008734:	080087a1 	.word	0x080087a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4413      	add	r3, r2
 8008740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008744:	461a      	mov	r2, r3
 8008746:	f240 439d 	movw	r3, #1181	@ 0x49d
 800874a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800874c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008750:	2b00      	cmp	r3, #0
 8008752:	da10      	bge.n	8008776 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	4413      	add	r3, r2
 800875c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	440a      	add	r2, r1
 800876a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800876e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008772:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008774:	e055      	b.n	8008822 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a6f      	ldr	r2, [pc, #444]	@ (8008938 <USB_HC_Init+0x254>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d151      	bne.n	8008822 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4413      	add	r3, r2
 8008786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	78fa      	ldrb	r2, [r7, #3]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	440a      	add	r2, r1
 8008794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008798:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800879c:	60d3      	str	r3, [r2, #12]
      break;
 800879e:	e040      	b.n	8008822 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ac:	461a      	mov	r2, r3
 80087ae:	f240 639d 	movw	r3, #1693	@ 0x69d
 80087b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80087b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da34      	bge.n	8008826 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	78fa      	ldrb	r2, [r7, #3]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80087dc:	e023      	b.n	8008826 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ea:	461a      	mov	r2, r3
 80087ec:	f240 2325 	movw	r3, #549	@ 0x225
 80087f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80087f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	da17      	bge.n	800882a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	440a      	add	r2, r1
 8008810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008814:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008818:	60d3      	str	r3, [r2, #12]
      }
      break;
 800881a:	e006      	b.n	800882a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	77fb      	strb	r3, [r7, #31]
      break;
 8008820:	e004      	b.n	800882c <USB_HC_Init+0x148>
      break;
 8008822:	bf00      	nop
 8008824:	e002      	b.n	800882c <USB_HC_Init+0x148>
      break;
 8008826:	bf00      	nop
 8008828:	e000      	b.n	800882c <USB_HC_Init+0x148>
      break;
 800882a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008838:	461a      	mov	r2, r3
 800883a:	2300      	movs	r3, #0
 800883c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	78fa      	ldrb	r2, [r7, #3]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	440a      	add	r2, r1
 8008854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008858:	f043 0302 	orr.w	r3, r3, #2
 800885c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008864:	699a      	ldr	r2, [r3, #24]
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	2101      	movs	r1, #1
 800886e:	fa01 f303 	lsl.w	r3, r1, r3
 8008872:	6939      	ldr	r1, [r7, #16]
 8008874:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008878:	4313      	orrs	r3, r2
 800887a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008888:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	da03      	bge.n	8008898 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008894:	61bb      	str	r3, [r7, #24]
 8008896:	e001      	b.n	800889c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff fef9 	bl	8008694 <USB_GetHostSpeed>
 80088a2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d106      	bne.n	80088ba <USB_HC_Init+0x1d6>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d003      	beq.n	80088ba <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80088b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e001      	b.n	80088be <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088be:	787b      	ldrb	r3, [r7, #1]
 80088c0:	059b      	lsls	r3, r3, #22
 80088c2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80088c6:	78bb      	ldrb	r3, [r7, #2]
 80088c8:	02db      	lsls	r3, r3, #11
 80088ca:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088ce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80088d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80088d4:	049b      	lsls	r3, r3, #18
 80088d6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80088da:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80088dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80088de:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80088e2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80088f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088fc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80088fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008902:	2b03      	cmp	r3, #3
 8008904:	d003      	beq.n	800890e <USB_HC_Init+0x22a>
 8008906:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800890a:	2b01      	cmp	r3, #1
 800890c:	d10f      	bne.n	800892e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	4413      	add	r3, r2
 8008916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	440a      	add	r2, r1
 8008924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008928:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800892c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800892e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3720      	adds	r7, #32
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	40040000 	.word	0x40040000

0800893c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08c      	sub	sp, #48	@ 0x30
 8008940:	af02      	add	r7, sp, #8
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	785b      	ldrb	r3, [r3, #1]
 8008952:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008958:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4a5d      	ldr	r2, [pc, #372]	@ (8008ad4 <USB_HC_StartXfer+0x198>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d12f      	bne.n	80089c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d11c      	bne.n	80089a2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	7c9b      	ldrb	r3, [r3, #18]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <USB_HC_StartXfer+0x3c>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	7c9b      	ldrb	r3, [r3, #18]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d124      	bne.n	80089c2 <USB_HC_StartXfer+0x86>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	799b      	ldrb	r3, [r3, #6]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d120      	bne.n	80089c2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	4413      	add	r3, r2
 8008988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	0151      	lsls	r1, r2, #5
 8008992:	6a3a      	ldr	r2, [r7, #32]
 8008994:	440a      	add	r2, r1
 8008996:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800899a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899e:	60d3      	str	r3, [r2, #12]
 80089a0:	e00f      	b.n	80089c2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	791b      	ldrb	r3, [r3, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <USB_HC_StartXfer+0x86>
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	795b      	ldrb	r3, [r3, #5]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d107      	bne.n	80089c2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	4619      	mov	r1, r3
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fb6b 	bl	8009094 <USB_DoPing>
        return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e232      	b.n	8008e28 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	799b      	ldrb	r3, [r3, #6]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d158      	bne.n	8008a7c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80089ca:	2301      	movs	r3, #1
 80089cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	78db      	ldrb	r3, [r3, #3]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d007      	beq.n	80089e6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80089d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	8a92      	ldrh	r2, [r2, #20]
 80089dc:	fb03 f202 	mul.w	r2, r3, r2
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	61da      	str	r2, [r3, #28]
 80089e4:	e07c      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	7c9b      	ldrb	r3, [r3, #18]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d130      	bne.n	8008a50 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	2bbc      	cmp	r3, #188	@ 0xbc
 80089f4:	d918      	bls.n	8008a28 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	8a9b      	ldrh	r3, [r3, #20]
 80089fa:	461a      	mov	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	69da      	ldr	r2, [r3, #28]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d003      	beq.n	8008a18 <USB_HC_StartXfer+0xdc>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d103      	bne.n	8008a20 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	e05f      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2201      	movs	r2, #1
 8008a24:	60da      	str	r2, [r3, #12]
 8008a26:	e05b      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	6a1a      	ldr	r2, [r3, #32]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d007      	beq.n	8008a48 <USB_HC_StartXfer+0x10c>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d003      	beq.n	8008a48 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2204      	movs	r2, #4
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	e04b      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	60da      	str	r2, [r3, #12]
 8008a4e:	e047      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d10d      	bne.n	8008a72 <USB_HC_StartXfer+0x136>
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	8a92      	ldrh	r2, [r2, #20]
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d907      	bls.n	8008a72 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	8a92      	ldrh	r2, [r2, #20]
 8008a68:	fb03 f202 	mul.w	r2, r3, r2
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	61da      	str	r2, [r3, #28]
 8008a70:	e036      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6a1a      	ldr	r2, [r3, #32]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	61da      	str	r2, [r3, #28]
 8008a7a:	e031      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d018      	beq.n	8008ab6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	8a92      	ldrh	r2, [r2, #20]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	8a92      	ldrh	r2, [r2, #20]
 8008a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a98:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008a9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008a9c:	8b7b      	ldrh	r3, [r7, #26]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d90b      	bls.n	8008aba <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008aa2:	8b7b      	ldrh	r3, [r7, #26]
 8008aa4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008aa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	8a92      	ldrh	r2, [r2, #20]
 8008aac:	fb03 f202 	mul.w	r2, r3, r2
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	61da      	str	r2, [r3, #28]
 8008ab4:	e001      	b.n	8008aba <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	78db      	ldrb	r3, [r3, #3]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008ac2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	8a92      	ldrh	r2, [r2, #20]
 8008ac8:	fb03 f202 	mul.w	r2, r3, r2
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61da      	str	r2, [r3, #28]
 8008ad0:	e006      	b.n	8008ae0 <USB_HC_StartXfer+0x1a4>
 8008ad2:	bf00      	nop
 8008ad4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6a1a      	ldr	r2, [r3, #32]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ae8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008aea:	04d9      	lsls	r1, r3, #19
 8008aec:	4ba3      	ldr	r3, [pc, #652]	@ (8008d7c <USB_HC_StartXfer+0x440>)
 8008aee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008af0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	7d9b      	ldrb	r3, [r3, #22]
 8008af6:	075b      	lsls	r3, r3, #29
 8008af8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008afc:	69f9      	ldr	r1, [r7, #28]
 8008afe:	0148      	lsls	r0, r1, #5
 8008b00:	6a39      	ldr	r1, [r7, #32]
 8008b02:	4401      	add	r1, r0
 8008b04:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d009      	beq.n	8008b26 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	6999      	ldr	r1, [r3, #24]
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b22:	460a      	mov	r2, r1
 8008b24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bf0c      	ite	eq
 8008b36:	2301      	moveq	r3, #1
 8008b38:	2300      	movne	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	6a3a      	ldr	r2, [r7, #32]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	7e7b      	ldrb	r3, [r7, #25]
 8008b6e:	075b      	lsls	r3, r3, #29
 8008b70:	69f9      	ldr	r1, [r7, #28]
 8008b72:	0148      	lsls	r0, r1, #5
 8008b74:	6a39      	ldr	r1, [r7, #32]
 8008b76:	4401      	add	r1, r0
 8008b78:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	799b      	ldrb	r3, [r3, #6]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	f040 80c3 	bne.w	8008d10 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	7c5b      	ldrb	r3, [r3, #17]
 8008b8e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008b94:	4313      	orrs	r3, r2
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	0151      	lsls	r1, r2, #5
 8008b9a:	6a3a      	ldr	r2, [r7, #32]
 8008b9c:	440a      	add	r2, r1
 8008b9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ba6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	6a3a      	ldr	r2, [r7, #32]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bc2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008bc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	79db      	ldrb	r3, [r3, #7]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d123      	bne.n	8008c18 <USB_HC_StartXfer+0x2dc>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	78db      	ldrb	r3, [r3, #3]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d11f      	bne.n	8008c18 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	6a3a      	ldr	r2, [r7, #32]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bf6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	6a3a      	ldr	r2, [r7, #32]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c16:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	7c9b      	ldrb	r3, [r3, #18]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d003      	beq.n	8008c28 <USB_HC_StartXfer+0x2ec>
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	7c9b      	ldrb	r3, [r3, #18]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d117      	bne.n	8008c58 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d113      	bne.n	8008c58 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	78db      	ldrb	r3, [r3, #3]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10f      	bne.n	8008c58 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	0151      	lsls	r1, r2, #5
 8008c4a:	6a3a      	ldr	r2, [r7, #32]
 8008c4c:	440a      	add	r2, r1
 8008c4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c56:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	7c9b      	ldrb	r3, [r3, #18]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d162      	bne.n	8008d26 <USB_HC_StartXfer+0x3ea>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	78db      	ldrb	r3, [r3, #3]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d15e      	bne.n	8008d26 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d858      	bhi.n	8008d24 <USB_HC_StartXfer+0x3e8>
 8008c72:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <USB_HC_StartXfer+0x33c>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008c89 	.word	0x08008c89
 8008c7c:	08008cab 	.word	0x08008cab
 8008c80:	08008ccd 	.word	0x08008ccd
 8008c84:	08008cef 	.word	0x08008cef
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	0151      	lsls	r1, r2, #5
 8008c9a:	6a3a      	ldr	r2, [r7, #32]
 8008c9c:	440a      	add	r2, r1
 8008c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ca6:	6053      	str	r3, [r2, #4]
          break;
 8008ca8:	e03d      	b.n	8008d26 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	0151      	lsls	r1, r2, #5
 8008cbc:	6a3a      	ldr	r2, [r7, #32]
 8008cbe:	440a      	add	r2, r1
 8008cc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cc4:	f043 030e 	orr.w	r3, r3, #14
 8008cc8:	6053      	str	r3, [r2, #4]
          break;
 8008cca:	e02c      	b.n	8008d26 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	6a3a      	ldr	r2, [r7, #32]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cea:	6053      	str	r3, [r2, #4]
          break;
 8008cec:	e01b      	b.n	8008d26 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	0151      	lsls	r1, r2, #5
 8008d00:	6a3a      	ldr	r2, [r7, #32]
 8008d02:	440a      	add	r2, r1
 8008d04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d0c:	6053      	str	r3, [r2, #4]
          break;
 8008d0e:	e00a      	b.n	8008d26 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6053      	str	r3, [r2, #4]
 8008d22:	e000      	b.n	8008d26 <USB_HC_StartXfer+0x3ea>
          break;
 8008d24:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d3c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	78db      	ldrb	r3, [r3, #3]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d004      	beq.n	8008d50 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	e003      	b.n	8008d58 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d56:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d5e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e055      	b.n	8008e28 <USB_HC_StartXfer+0x4ec>
 8008d7c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	78db      	ldrb	r3, [r3, #3]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d14e      	bne.n	8008e26 <USB_HC_StartXfer+0x4ea>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d04a      	beq.n	8008e26 <USB_HC_StartXfer+0x4ea>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	79db      	ldrb	r3, [r3, #7]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d146      	bne.n	8008e26 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	7c9b      	ldrb	r3, [r3, #18]
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d831      	bhi.n	8008e04 <USB_HC_StartXfer+0x4c8>
 8008da0:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <USB_HC_StartXfer+0x46c>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008ddd 	.word	0x08008ddd
 8008db0:	08008db9 	.word	0x08008db9
 8008db4:	08008ddd 	.word	0x08008ddd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	3303      	adds	r3, #3
 8008dbe:	089b      	lsrs	r3, r3, #2
 8008dc0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008dc2:	8afa      	ldrh	r2, [r7, #22]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d91c      	bls.n	8008e08 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f043 0220 	orr.w	r2, r3, #32
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008dda:	e015      	b.n	8008e08 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	3303      	adds	r3, #3
 8008de2:	089b      	lsrs	r3, r3, #2
 8008de4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008de6:	8afa      	ldrh	r2, [r7, #22]
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d90a      	bls.n	8008e0c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e02:	e003      	b.n	8008e0c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008e04:	bf00      	nop
 8008e06:	e002      	b.n	8008e0e <USB_HC_StartXfer+0x4d2>
        break;
 8008e08:	bf00      	nop
 8008e0a:	e000      	b.n	8008e0e <USB_HC_StartXfer+0x4d2>
        break;
 8008e0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6999      	ldr	r1, [r3, #24]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	785a      	ldrb	r2, [r3, #1]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	9000      	str	r0, [sp, #0]
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff f9c3 	bl	80081ac <USB_WritePacket>
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3728      	adds	r7, #40	@ 0x28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	b29b      	uxth	r3, r3
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b089      	sub	sp, #36	@ 0x24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e62:	78fb      	ldrb	r3, [r7, #3]
 8008e64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	0c9b      	lsrs	r3, r3, #18
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	0fdb      	lsrs	r3, r3, #31
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	0fdb      	lsrs	r3, r3, #31
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d10d      	bne.n	8008ed4 <USB_HC_Halt+0x82>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10a      	bne.n	8008ed4 <USB_HC_Halt+0x82>
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d005      	beq.n	8008ed0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d002      	beq.n	8008ed0 <USB_HC_Halt+0x7e>
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d101      	bne.n	8008ed4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e0d8      	b.n	8009086 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <USB_HC_Halt+0x8e>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d173      	bne.n	8008fc8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008efa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008efe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d14a      	bne.n	8008fa2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d133      	bne.n	8008f80 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f36:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f56:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f64:	d82e      	bhi.n	8008fc4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f7c:	d0ec      	beq.n	8008f58 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f7e:	e081      	b.n	8009084 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f9e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fa0:	e070      	b.n	8009084 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	0151      	lsls	r1, r2, #5
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	440a      	add	r2, r1
 8008fb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fc0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fc2:	e05f      	b.n	8009084 <USB_HC_Halt+0x232>
            break;
 8008fc4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fc6:	e05d      	b.n	8009084 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fe2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fe6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d133      	bne.n	8009060 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	440a      	add	r2, r1
 800900e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009016:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009036:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	3301      	adds	r3, #1
 800903c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009044:	d81d      	bhi.n	8009082 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800905c:	d0ec      	beq.n	8009038 <USB_HC_Halt+0x1e6>
 800905e:	e011      	b.n	8009084 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	0151      	lsls	r1, r2, #5
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	440a      	add	r2, r1
 8009076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800907a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	e000      	b.n	8009084 <USB_HC_Halt+0x232>
          break;
 8009082:	bf00      	nop
    }
  }

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3724      	adds	r7, #36	@ 0x24
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80090a8:	2301      	movs	r3, #1
 80090aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	04da      	lsls	r2, r3, #19
 80090b0:	4b15      	ldr	r3, [pc, #84]	@ (8009108 <USB_DoPing+0x74>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090f2:	461a      	mov	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	1ff80000 	.word	0x1ff80000

0800910c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7fe ff86 	bl	8008032 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009126:	2110      	movs	r1, #16
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7fe ffdf 	bl	80080ec <USB_FlushTxFifo>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff f809 	bl	8008150 <USB_FlushRxFifo>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009148:	2300      	movs	r3, #0
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	e01f      	b.n	800918e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009164:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800916c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009174:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	4413      	add	r3, r2
 800917e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009182:	461a      	mov	r2, r3
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	3301      	adds	r3, #1
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b0f      	cmp	r3, #15
 8009192:	d9dc      	bls.n	800914e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009194:	2300      	movs	r3, #0
 8009196:	61bb      	str	r3, [r7, #24]
 8009198:	e034      	b.n	8009204 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ce:	461a      	mov	r2, r3
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091e0:	d80c      	bhi.n	80091fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091f8:	d0ec      	beq.n	80091d4 <USB_StopHost+0xc8>
 80091fa:	e000      	b.n	80091fe <USB_StopHost+0xf2>
        break;
 80091fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	3301      	adds	r3, #1
 8009202:	61bb      	str	r3, [r7, #24]
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2b0f      	cmp	r3, #15
 8009208:	d9c7      	bls.n	800919a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009210:	461a      	mov	r2, r3
 8009212:	f04f 33ff 	mov.w	r3, #4294967295
 8009216:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f04f 32ff 	mov.w	r2, #4294967295
 800921e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7fe fef5 	bl	8008010 <USB_EnableGlobalInt>

  return ret;
 8009226:	7ffb      	ldrb	r3, [r7, #31]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b089      	sub	sp, #36	@ 0x24
 8009234:	af04      	add	r7, sp, #16
 8009236:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009238:	2301      	movs	r3, #1
 800923a:	2202      	movs	r2, #2
 800923c:	2102      	movs	r1, #2
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc83 	bl	8009b4a <USBH_FindInterface>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	2bff      	cmp	r3, #255	@ 0xff
 800924c:	d002      	beq.n	8009254 <USBH_CDC_InterfaceInit+0x24>
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d901      	bls.n	8009258 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009254:	2302      	movs	r3, #2
 8009256:	e13d      	b.n	80094d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc58 	bl	8009b12 <USBH_SelectInterface>
 8009262:	4603      	mov	r3, r0
 8009264:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800926c:	2302      	movs	r3, #2
 800926e:	e131      	b.n	80094d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009276:	2050      	movs	r0, #80	@ 0x50
 8009278:	f002 fb6a 	bl	800b950 <malloc>
 800927c:	4603      	mov	r3, r0
 800927e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009290:	2302      	movs	r3, #2
 8009292:	e11f      	b.n	80094d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009294:	2250      	movs	r2, #80	@ 0x50
 8009296:	2100      	movs	r1, #0
 8009298:	68b8      	ldr	r0, [r7, #8]
 800929a:	f002 fc17 	bl	800bacc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	211a      	movs	r1, #26
 80092a4:	fb01 f303 	mul.w	r3, r1, r3
 80092a8:	4413      	add	r3, r2
 80092aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da15      	bge.n	80092e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	211a      	movs	r1, #26
 80092bc:	fb01 f303 	mul.w	r3, r1, r3
 80092c0:	4413      	add	r3, r2
 80092c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80092c6:	781a      	ldrb	r2, [r3, #0]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	211a      	movs	r1, #26
 80092d2:	fb01 f303 	mul.w	r3, r1, r3
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80092dc:	881a      	ldrh	r2, [r3, #0]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 ffc4 	bl	800b276 <USBH_AllocPipe>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	7819      	ldrb	r1, [r3, #0]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	7858      	ldrb	r0, [r3, #1]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	8952      	ldrh	r2, [r2, #10]
 800930e:	9202      	str	r2, [sp, #8]
 8009310:	2203      	movs	r2, #3
 8009312:	9201      	str	r2, [sp, #4]
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	4623      	mov	r3, r4
 8009318:	4602      	mov	r2, r0
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 ff7c 	bl	800b218 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2200      	movs	r2, #0
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f002 fa8b 	bl	800b844 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800932e:	2300      	movs	r3, #0
 8009330:	2200      	movs	r2, #0
 8009332:	210a      	movs	r1, #10
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc08 	bl	8009b4a <USBH_FindInterface>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	2bff      	cmp	r3, #255	@ 0xff
 8009342:	d002      	beq.n	800934a <USBH_CDC_InterfaceInit+0x11a>
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d901      	bls.n	800934e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800934a:	2302      	movs	r3, #2
 800934c:	e0c2      	b.n	80094d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	211a      	movs	r1, #26
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	4413      	add	r3, r2
 800935a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	b25b      	sxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	da16      	bge.n	8009394 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	211a      	movs	r1, #26
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	4413      	add	r3, r2
 8009372:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009376:	781a      	ldrb	r2, [r3, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	211a      	movs	r1, #26
 8009382:	fb01 f303 	mul.w	r3, r1, r3
 8009386:	4413      	add	r3, r2
 8009388:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800938c:	881a      	ldrh	r2, [r3, #0]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	835a      	strh	r2, [r3, #26]
 8009392:	e015      	b.n	80093c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	211a      	movs	r1, #26
 800939a:	fb01 f303 	mul.w	r3, r1, r3
 800939e:	4413      	add	r3, r2
 80093a0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	211a      	movs	r1, #26
 80093b0:	fb01 f303 	mul.w	r3, r1, r3
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093ba:	881a      	ldrh	r2, [r3, #0]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	211a      	movs	r1, #26
 80093c6:	fb01 f303 	mul.w	r3, r1, r3
 80093ca:	4413      	add	r3, r2
 80093cc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	b25b      	sxtb	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da16      	bge.n	8009406 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	211a      	movs	r1, #26
 80093de:	fb01 f303 	mul.w	r3, r1, r3
 80093e2:	4413      	add	r3, r2
 80093e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80093e8:	781a      	ldrb	r2, [r3, #0]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	211a      	movs	r1, #26
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80093fe:	881a      	ldrh	r2, [r3, #0]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	835a      	strh	r2, [r3, #26]
 8009404:	e015      	b.n	8009432 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	211a      	movs	r1, #26
 800940c:	fb01 f303 	mul.w	r3, r1, r3
 8009410:	4413      	add	r3, r2
 8009412:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	211a      	movs	r1, #26
 8009422:	fb01 f303 	mul.w	r3, r1, r3
 8009426:	4413      	add	r3, r2
 8009428:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800942c:	881a      	ldrh	r2, [r3, #0]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	7b9b      	ldrb	r3, [r3, #14]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 ff1c 	bl	800b276 <USBH_AllocPipe>
 800943e:	4603      	mov	r3, r0
 8009440:	461a      	mov	r2, r3
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	7bdb      	ldrb	r3, [r3, #15]
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 ff12 	bl	800b276 <USBH_AllocPipe>
 8009452:	4603      	mov	r3, r0
 8009454:	461a      	mov	r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	7b59      	ldrb	r1, [r3, #13]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	7b98      	ldrb	r0, [r3, #14]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	8b12      	ldrh	r2, [r2, #24]
 8009472:	9202      	str	r2, [sp, #8]
 8009474:	2202      	movs	r2, #2
 8009476:	9201      	str	r2, [sp, #4]
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	4623      	mov	r3, r4
 800947c:	4602      	mov	r2, r0
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 feca 	bl	800b218 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	7b19      	ldrb	r1, [r3, #12]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	7bd8      	ldrb	r0, [r3, #15]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	8b52      	ldrh	r2, [r2, #26]
 800949c:	9202      	str	r2, [sp, #8]
 800949e:	2202      	movs	r2, #2
 80094a0:	9201      	str	r2, [sp, #4]
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	4623      	mov	r3, r4
 80094a6:	4602      	mov	r2, r0
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 feb5 	bl	800b218 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	7b5b      	ldrb	r3, [r3, #13]
 80094ba:	2200      	movs	r2, #0
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f002 f9c0 	bl	800b844 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	7b1b      	ldrb	r3, [r3, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f002 f9b9 	bl	800b844 <USBH_LL_SetToggle>

  return USBH_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd90      	pop	{r4, r7, pc}

080094dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00e      	beq.n	8009514 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 feaa 	bl	800b256 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 fed5 	bl	800b2b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	7b1b      	ldrb	r3, [r3, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00e      	beq.n	800953a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	7b1b      	ldrb	r3, [r3, #12]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fe97 	bl	800b256 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	7b1b      	ldrb	r3, [r3, #12]
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 fec2 	bl	800b2b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	7b5b      	ldrb	r3, [r3, #13]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00e      	beq.n	8009560 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	7b5b      	ldrb	r3, [r3, #13]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fe84 	bl	800b256 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	7b5b      	ldrb	r3, [r3, #13]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 feaf 	bl	800b2b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009566:	69db      	ldr	r3, [r3, #28]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00b      	beq.n	8009584 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	4618      	mov	r0, r3
 8009576:	f002 f9f3 	bl	800b960 <free>
    phost->pActiveClass->pData = 0U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009580:	2200      	movs	r2, #0
 8009582:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3340      	adds	r3, #64	@ 0x40
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f8b1 	bl	800970e <GetLineCoding>
 80095ac:	4603      	mov	r3, r0
 80095ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80095b0:	7afb      	ldrb	r3, [r7, #11]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d105      	bne.n	80095c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095bc:	2102      	movs	r1, #2
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80095c2:	7afb      	ldrb	r3, [r7, #11]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80095d4:	2301      	movs	r3, #1
 80095d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d877      	bhi.n	80096e0 <USBH_CDC_Process+0x114>
 80095f0:	a201      	add	r2, pc, #4	@ (adr r2, 80095f8 <USBH_CDC_Process+0x2c>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	0800960d 	.word	0x0800960d
 80095fc:	08009613 	.word	0x08009613
 8009600:	08009643 	.word	0x08009643
 8009604:	080096b7 	.word	0x080096b7
 8009608:	080096c5 	.word	0x080096c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]
      break;
 8009610:	e06d      	b.n	80096ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f897 	bl	800974c <SetLineCoding>
 800961e:	4603      	mov	r3, r0
 8009620:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009630:	e058      	b.n	80096e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d055      	beq.n	80096e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2204      	movs	r2, #4
 800963c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009640:	e050      	b.n	80096e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	3340      	adds	r3, #64	@ 0x40
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f860 	bl	800970e <GetLineCoding>
 800964e:	4603      	mov	r3, r0
 8009650:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d126      	bne.n	80096a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800966a:	791b      	ldrb	r3, [r3, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d13b      	bne.n	80096e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800967a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800967c:	429a      	cmp	r2, r3
 800967e:	d133      	bne.n	80096e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800968a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800968c:	429a      	cmp	r2, r3
 800968e:	d12b      	bne.n	80096e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009698:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800969a:	429a      	cmp	r2, r3
 800969c:	d124      	bne.n	80096e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f958 	bl	8009954 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80096a4:	e020      	b.n	80096e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d01d      	beq.n	80096e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2204      	movs	r2, #4
 80096b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80096b4:	e018      	b.n	80096e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f867 	bl	800978a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f8da 	bl	8009876 <CDC_ProcessReception>
      break;
 80096c2:	e014      	b.n	80096ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80096c4:	2100      	movs	r1, #0
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f001 f81e 	bl	800a708 <USBH_ClrFeature>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80096de:	e005      	b.n	80096ec <USBH_CDC_Process+0x120>

    default:
      break;
 80096e0:	bf00      	nop
 80096e2:	e004      	b.n	80096ee <USBH_CDC_Process+0x122>
      break;
 80096e4:	bf00      	nop
 80096e6:	e002      	b.n	80096ee <USBH_CDC_Process+0x122>
      break;
 80096e8:	bf00      	nop
 80096ea:	e000      	b.n	80096ee <USBH_CDC_Process+0x122>
      break;
 80096ec:	bf00      	nop

  }

  return status;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	22a1      	movs	r2, #161	@ 0xa1
 800971c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2221      	movs	r2, #33	@ 0x21
 8009722:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2207      	movs	r2, #7
 8009734:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2207      	movs	r2, #7
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fb17 	bl	800ad70 <USBH_CtlReq>
 8009742:	4603      	mov	r3, r0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2221      	movs	r2, #33	@ 0x21
 800975a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2207      	movs	r2, #7
 8009772:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2207      	movs	r2, #7
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 faf8 	bl	800ad70 <USBH_CtlReq>
 8009780:	4603      	mov	r3, r0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af02      	add	r7, sp, #8
 8009790:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800979c:	2300      	movs	r3, #0
 800979e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d002      	beq.n	80097b0 <CDC_ProcessTransmission+0x26>
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d023      	beq.n	80097f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80097ae:	e05e      	b.n	800986e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	8b12      	ldrh	r2, [r2, #24]
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d90b      	bls.n	80097d4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	69d9      	ldr	r1, [r3, #28]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8b1a      	ldrh	r2, [r3, #24]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	7b5b      	ldrb	r3, [r3, #13]
 80097c8:	2001      	movs	r0, #1
 80097ca:	9000      	str	r0, [sp, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 fce0 	bl	800b192 <USBH_BulkSendData>
 80097d2:	e00b      	b.n	80097ec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	7b5b      	ldrb	r3, [r3, #13]
 80097e2:	2001      	movs	r0, #1
 80097e4:	9000      	str	r0, [sp, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fcd3 	bl	800b192 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80097f4:	e03b      	b.n	800986e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	7b5b      	ldrb	r3, [r3, #13]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fff7 	bl	800b7f0 <USBH_LL_GetURBState>
 8009802:	4603      	mov	r3, r0
 8009804:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d128      	bne.n	800985e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	8b12      	ldrh	r2, [r2, #24]
 8009814:	4293      	cmp	r3, r2
 8009816:	d90e      	bls.n	8009836 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	8b12      	ldrh	r2, [r2, #24]
 8009820:	1a9a      	subs	r2, r3, r2
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	8b12      	ldrh	r2, [r2, #24]
 800982e:	441a      	add	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	61da      	str	r2, [r3, #28]
 8009834:	e002      	b.n	800983c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800984c:	e00e      	b.n	800986c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f868 	bl	800992c <USBH_CDC_TransmitCallback>
      break;
 800985c:	e006      	b.n	800986c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d103      	bne.n	800986c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800986c:	bf00      	nop
  }
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b086      	sub	sp, #24
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009888:	2300      	movs	r3, #0
 800988a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009892:	2b03      	cmp	r3, #3
 8009894:	d002      	beq.n	800989c <CDC_ProcessReception+0x26>
 8009896:	2b04      	cmp	r3, #4
 8009898:	d00e      	beq.n	80098b8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800989a:	e043      	b.n	8009924 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	6a19      	ldr	r1, [r3, #32]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	8b5a      	ldrh	r2, [r3, #26]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	7b1b      	ldrb	r3, [r3, #12]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 fc97 	bl	800b1dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2204      	movs	r2, #4
 80098b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80098b6:	e035      	b.n	8009924 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	7b1b      	ldrb	r3, [r3, #12]
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 ff96 	bl	800b7f0 <USBH_LL_GetURBState>
 80098c4:	4603      	mov	r3, r0
 80098c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80098c8:	7cfb      	ldrb	r3, [r7, #19]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d129      	bne.n	8009922 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	7b1b      	ldrb	r3, [r3, #12]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 fef9 	bl	800b6cc <USBH_LL_GetLastXferSize>
 80098da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d016      	beq.n	8009914 <CDC_ProcessReception+0x9e>
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	8b5b      	ldrh	r3, [r3, #26]
 80098ea:	461a      	mov	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d110      	bne.n	8009914 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	1ad2      	subs	r2, r2, r3
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	6a1a      	ldr	r2, [r3, #32]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	441a      	add	r2, r3
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2203      	movs	r2, #3
 800990e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009912:	e006      	b.n	8009922 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f80f 	bl	8009940 <USBH_CDC_ReceiveCallback>
      break;
 8009922:	bf00      	nop
  }
}
 8009924:	bf00      	nop
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800997c:	2302      	movs	r3, #2
 800997e:	e029      	b.n	80099d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	79fa      	ldrb	r2, [r7, #7]
 8009984:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f81f 	bl	80099dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f001 fdc9 	bl	800b564 <USBH_LL_Init>

  return USBH_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	e009      	b.n	80099fe <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	33e0      	adds	r3, #224	@ 0xe0
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	2200      	movs	r2, #0
 80099f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b0f      	cmp	r3, #15
 8009a02:	d9f2      	bls.n	80099ea <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a04:	2300      	movs	r3, #0
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	e009      	b.n	8009a1e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a14:	2200      	movs	r2, #0
 8009a16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a24:	d3f1      	bcc.n	8009a0a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2240      	movs	r2, #64	@ 0x40
 8009a4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	331c      	adds	r3, #28
 8009a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f002 f825 	bl	800bacc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f002 f81c 	bl	800bacc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009a9a:	2212      	movs	r2, #18
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f002 f814 	bl	800bacc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009aaa:	223e      	movs	r2, #62	@ 0x3e
 8009aac:	2100      	movs	r1, #0
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f002 f80c 	bl	800bacc <memset>

  return USBH_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d016      	beq.n	8009b00 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10e      	bne.n	8009afa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009ae2:	1c59      	adds	r1, r3, #1
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	33de      	adds	r3, #222	@ 0xde
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
 8009af8:	e004      	b.n	8009b04 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009afa:	2302      	movs	r3, #2
 8009afc:	73fb      	strb	r3, [r7, #15]
 8009afe:	e001      	b.n	8009b04 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009b00:	2302      	movs	r3, #2
 8009b02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b085      	sub	sp, #20
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009b28:	78fa      	ldrb	r2, [r7, #3]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d204      	bcs.n	8009b38 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	78fa      	ldrb	r2, [r7, #3]
 8009b32:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009b36:	e001      	b.n	8009b3c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009b38:	2302      	movs	r3, #2
 8009b3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b087      	sub	sp, #28
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	4608      	mov	r0, r1
 8009b54:	4611      	mov	r1, r2
 8009b56:	461a      	mov	r2, r3
 8009b58:	4603      	mov	r3, r0
 8009b5a:	70fb      	strb	r3, [r7, #3]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70bb      	strb	r3, [r7, #2]
 8009b60:	4613      	mov	r3, r2
 8009b62:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009b72:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b74:	e025      	b.n	8009bc2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	221a      	movs	r2, #26
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	3308      	adds	r3, #8
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	3302      	adds	r3, #2
 8009b86:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	795b      	ldrb	r3, [r3, #5]
 8009b8c:	78fa      	ldrb	r2, [r7, #3]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d002      	beq.n	8009b98 <USBH_FindInterface+0x4e>
 8009b92:	78fb      	ldrb	r3, [r7, #3]
 8009b94:	2bff      	cmp	r3, #255	@ 0xff
 8009b96:	d111      	bne.n	8009bbc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b9c:	78ba      	ldrb	r2, [r7, #2]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d002      	beq.n	8009ba8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ba2:	78bb      	ldrb	r3, [r7, #2]
 8009ba4:	2bff      	cmp	r3, #255	@ 0xff
 8009ba6:	d109      	bne.n	8009bbc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bac:	787a      	ldrb	r2, [r7, #1]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d002      	beq.n	8009bb8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009bb2:	787b      	ldrb	r3, [r7, #1]
 8009bb4:	2bff      	cmp	r3, #255	@ 0xff
 8009bb6:	d101      	bne.n	8009bbc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	e006      	b.n	8009bca <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d9d6      	bls.n	8009b76 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009bc8:	23ff      	movs	r3, #255	@ 0xff
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fcfc 	bl	800b5dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009be4:	2101      	movs	r1, #1
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f001 fe15 	bl	800b816 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af04      	add	r7, sp, #16
 8009bfe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009c00:	2302      	movs	r3, #2
 8009c02:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d102      	bne.n	8009c1a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2203      	movs	r2, #3
 8009c18:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b0b      	cmp	r3, #11
 8009c22:	f200 81bc 	bhi.w	8009f9e <USBH_Process+0x3a6>
 8009c26:	a201      	add	r2, pc, #4	@ (adr r2, 8009c2c <USBH_Process+0x34>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c5d 	.word	0x08009c5d
 8009c30:	08009c8f 	.word	0x08009c8f
 8009c34:	08009cf9 	.word	0x08009cf9
 8009c38:	08009f39 	.word	0x08009f39
 8009c3c:	08009f9f 	.word	0x08009f9f
 8009c40:	08009d99 	.word	0x08009d99
 8009c44:	08009edf 	.word	0x08009edf
 8009c48:	08009dcf 	.word	0x08009dcf
 8009c4c:	08009def 	.word	0x08009def
 8009c50:	08009e0d 	.word	0x08009e0d
 8009c54:	08009e51 	.word	0x08009e51
 8009c58:	08009f21 	.word	0x08009f21
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 819c 	beq.w	8009fa2 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009c70:	20c8      	movs	r0, #200	@ 0xc8
 8009c72:	f001 fe1a 	bl	800b8aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 fd0d 	bl	800b696 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009c8c:	e189      	b.n	8009fa2 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d107      	bne.n	8009caa <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009ca8:	e18a      	b.n	8009fc0 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cb4:	d914      	bls.n	8009ce0 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d903      	bls.n	8009cd8 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	220d      	movs	r2, #13
 8009cd4:	701a      	strb	r2, [r3, #0]
      break;
 8009cd6:	e173      	b.n	8009fc0 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
      break;
 8009cde:	e16f      	b.n	8009fc0 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009ce6:	f103 020a 	add.w	r2, r3, #10
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009cf0:	200a      	movs	r0, #10
 8009cf2:	f001 fdda 	bl	800b8aa <USBH_Delay>
      break;
 8009cf6:	e163      	b.n	8009fc0 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d08:	2104      	movs	r1, #4
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009d0e:	2064      	movs	r0, #100	@ 0x64
 8009d10:	f001 fdcb 	bl	800b8aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 fc97 	bl	800b648 <USBH_LL_GetSpeed>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2205      	movs	r2, #5
 8009d28:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 faa2 	bl	800b276 <USBH_AllocPipe>
 8009d32:	4603      	mov	r3, r0
 8009d34:	461a      	mov	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009d3a:	2180      	movs	r1, #128	@ 0x80
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f001 fa9a 	bl	800b276 <USBH_AllocPipe>
 8009d42:	4603      	mov	r3, r0
 8009d44:	461a      	mov	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	7919      	ldrb	r1, [r3, #4]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d5e:	9202      	str	r2, [sp, #8]
 8009d60:	2200      	movs	r2, #0
 8009d62:	9201      	str	r2, [sp, #4]
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4603      	mov	r3, r0
 8009d68:	2280      	movs	r2, #128	@ 0x80
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fa54 	bl	800b218 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7959      	ldrb	r1, [r3, #5]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d84:	9202      	str	r2, [sp, #8]
 8009d86:	2200      	movs	r2, #0
 8009d88:	9201      	str	r2, [sp, #4]
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2200      	movs	r2, #0
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fa41 	bl	800b218 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009d96:	e113      	b.n	8009fc0 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f917 	bl	8009fcc <USBH_HandleEnum>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f040 80fd 	bne.w	8009fa6 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d103      	bne.n	8009dc6 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009dc4:	e0ef      	b.n	8009fa6 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2207      	movs	r2, #7
 8009dca:	701a      	strb	r2, [r3, #0]
      break;
 8009dcc:	e0eb      	b.n	8009fa6 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 80e8 	beq.w	8009faa <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009de0:	2101      	movs	r1, #1
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2208      	movs	r2, #8
 8009dea:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009dec:	e0dd      	b.n	8009faa <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fc3f 	bl	800a67a <USBH_SetCfg>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 80d5 	bne.w	8009fae <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2209      	movs	r2, #9
 8009e08:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009e0a:	e0d0      	b.n	8009fae <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d016      	beq.n	8009e48 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fc4f 	bl	800a6c0 <USBH_SetFeature>
 8009e22:	4603      	mov	r3, r0
 8009e24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d103      	bne.n	8009e36 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	220a      	movs	r2, #10
 8009e32:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009e34:	e0bd      	b.n	8009fb2 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	f040 80b9 	bne.w	8009fb2 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	220a      	movs	r2, #10
 8009e44:	701a      	strb	r2, [r3, #0]
      break;
 8009e46:	e0b4      	b.n	8009fb2 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	220a      	movs	r2, #10
 8009e4c:	701a      	strb	r2, [r3, #0]
      break;
 8009e4e:	e0b0      	b.n	8009fb2 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 80ad 	beq.w	8009fb6 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
 8009e68:	e016      	b.n	8009e98 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009e6a:	7bfa      	ldrb	r2, [r7, #15]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	32de      	adds	r2, #222	@ 0xde
 8009e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e74:	791a      	ldrb	r2, [r3, #4]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d108      	bne.n	8009e92 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009e80:	7bfa      	ldrb	r2, [r7, #15]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	32de      	adds	r2, #222	@ 0xde
 8009e86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009e90:	e005      	b.n	8009e9e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	3301      	adds	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0e5      	beq.n	8009e6a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d016      	beq.n	8009ed6 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2206      	movs	r2, #6
 8009ebe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ec6:	2103      	movs	r1, #3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009ecc:	e073      	b.n	8009fb6 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	220d      	movs	r2, #13
 8009ed2:	701a      	strb	r2, [r3, #0]
      break;
 8009ed4:	e06f      	b.n	8009fb6 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	220d      	movs	r2, #13
 8009eda:	701a      	strb	r2, [r3, #0]
      break;
 8009edc:	e06b      	b.n	8009fb6 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d017      	beq.n	8009f18 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	4798      	blx	r3
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	220b      	movs	r2, #11
 8009f04:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009f06:	e058      	b.n	8009fba <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d154      	bne.n	8009fba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	220d      	movs	r2, #13
 8009f14:	701a      	strb	r2, [r3, #0]
      break;
 8009f16:	e050      	b.n	8009fba <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	220d      	movs	r2, #13
 8009f1c:	701a      	strb	r2, [r3, #0]
      break;
 8009f1e:	e04c      	b.n	8009fba <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d049      	beq.n	8009fbe <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	4798      	blx	r3
      }
      break;
 8009f36:	e042      	b.n	8009fbe <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff fd4b 	bl	80099dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d009      	beq.n	8009f64 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f74:	2105      	movs	r1, #5
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d107      	bne.n	8009f96 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff fe21 	bl	8009bd6 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009f94:	e014      	b.n	8009fc0 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 fb20 	bl	800b5dc <USBH_LL_Start>
      break;
 8009f9c:	e010      	b.n	8009fc0 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009f9e:	bf00      	nop
 8009fa0:	e00e      	b.n	8009fc0 <USBH_Process+0x3c8>
      break;
 8009fa2:	bf00      	nop
 8009fa4:	e00c      	b.n	8009fc0 <USBH_Process+0x3c8>
      break;
 8009fa6:	bf00      	nop
 8009fa8:	e00a      	b.n	8009fc0 <USBH_Process+0x3c8>
    break;
 8009faa:	bf00      	nop
 8009fac:	e008      	b.n	8009fc0 <USBH_Process+0x3c8>
      break;
 8009fae:	bf00      	nop
 8009fb0:	e006      	b.n	8009fc0 <USBH_Process+0x3c8>
      break;
 8009fb2:	bf00      	nop
 8009fb4:	e004      	b.n	8009fc0 <USBH_Process+0x3c8>
      break;
 8009fb6:	bf00      	nop
 8009fb8:	e002      	b.n	8009fc0 <USBH_Process+0x3c8>
      break;
 8009fba:	bf00      	nop
 8009fbc:	e000      	b.n	8009fc0 <USBH_Process+0x3c8>
      break;
 8009fbe:	bf00      	nop
  }
  return USBH_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop

08009fcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af04      	add	r7, sp, #16
 8009fd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	785b      	ldrb	r3, [r3, #1]
 8009fe0:	2b07      	cmp	r3, #7
 8009fe2:	f200 81bd 	bhi.w	800a360 <USBH_HandleEnum+0x394>
 8009fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8009fec <USBH_HandleEnum+0x20>)
 8009fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fec:	0800a00d 	.word	0x0800a00d
 8009ff0:	0800a0c7 	.word	0x0800a0c7
 8009ff4:	0800a131 	.word	0x0800a131
 8009ff8:	0800a1bb 	.word	0x0800a1bb
 8009ffc:	0800a225 	.word	0x0800a225
 800a000:	0800a295 	.word	0x0800a295
 800a004:	0800a2db 	.word	0x0800a2db
 800a008:	0800a321 	.word	0x0800a321
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a00c:	2108      	movs	r1, #8
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fa50 	bl	800a4b4 <USBH_Get_DevDesc>
 800a014:	4603      	mov	r3, r0
 800a016:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d12e      	bne.n	800a07c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	7919      	ldrb	r1, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a042:	9202      	str	r2, [sp, #8]
 800a044:	2200      	movs	r2, #0
 800a046:	9201      	str	r2, [sp, #4]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4603      	mov	r3, r0
 800a04c:	2280      	movs	r2, #128	@ 0x80
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f001 f8e2 	bl	800b218 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	7959      	ldrb	r1, [r3, #5]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a068:	9202      	str	r2, [sp, #8]
 800a06a:	2200      	movs	r2, #0
 800a06c:	9201      	str	r2, [sp, #4]
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	4603      	mov	r3, r0
 800a072:	2200      	movs	r2, #0
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 f8cf 	bl	800b218 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a07a:	e173      	b.n	800a364 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
 800a07e:	2b03      	cmp	r3, #3
 800a080:	f040 8170 	bne.w	800a364 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a08a:	3301      	adds	r3, #1
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d903      	bls.n	800a0a6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	220d      	movs	r2, #13
 800a0a2:	701a      	strb	r2, [r3, #0]
      break;
 800a0a4:	e15e      	b.n	800a364 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	795b      	ldrb	r3, [r3, #5]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 f903 	bl	800b2b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	791b      	ldrb	r3, [r3, #4]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f001 f8fd 	bl	800b2b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	701a      	strb	r2, [r3, #0]
      break;
 800a0c4:	e14e      	b.n	800a364 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a0c6:	2112      	movs	r1, #18
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f9f3 	bl	800a4b4 <USBH_Get_DevDesc>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0de:	e143      	b.n	800a368 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	f040 8140 	bne.w	800a368 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d903      	bls.n	800a10a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	220d      	movs	r2, #13
 800a106:	701a      	strb	r2, [r3, #0]
      break;
 800a108:	e12e      	b.n	800a368 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 f8d1 	bl	800b2b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	791b      	ldrb	r3, [r3, #4]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f8cb 	bl	800b2b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
      break;
 800a12e:	e11b      	b.n	800a368 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a130:	2101      	movs	r1, #1
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa7d 	bl	800a632 <USBH_SetAddress>
 800a138:	4603      	mov	r3, r0
 800a13a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d130      	bne.n	800a1a4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a142:	2002      	movs	r0, #2
 800a144:	f001 fbb1 	bl	800b8aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2203      	movs	r2, #3
 800a154:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	7919      	ldrb	r1, [r3, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a16a:	9202      	str	r2, [sp, #8]
 800a16c:	2200      	movs	r2, #0
 800a16e:	9201      	str	r2, [sp, #4]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	4603      	mov	r3, r0
 800a174:	2280      	movs	r2, #128	@ 0x80
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f001 f84e 	bl	800b218 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7959      	ldrb	r1, [r3, #5]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a190:	9202      	str	r2, [sp, #8]
 800a192:	2200      	movs	r2, #0
 800a194:	9201      	str	r2, [sp, #4]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	4603      	mov	r3, r0
 800a19a:	2200      	movs	r2, #0
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 f83b 	bl	800b218 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a1a2:	e0e3      	b.n	800a36c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	f040 80e0 	bne.w	800a36c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	220d      	movs	r2, #13
 800a1b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	705a      	strb	r2, [r3, #1]
      break;
 800a1b8:	e0d8      	b.n	800a36c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a1ba:	2109      	movs	r1, #9
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f9a5 	bl	800a50c <USBH_Get_CfgDesc>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d103      	bne.n	800a1d4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2204      	movs	r2, #4
 800a1d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a1d2:	e0cd      	b.n	800a370 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	f040 80ca 	bne.w	800a370 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d903      	bls.n	800a1fe <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	220d      	movs	r2, #13
 800a1fa:	701a      	strb	r2, [r3, #0]
      break;
 800a1fc:	e0b8      	b.n	800a370 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	795b      	ldrb	r3, [r3, #5]
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 f857 	bl	800b2b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	791b      	ldrb	r3, [r3, #4]
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f001 f851 	bl	800b2b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	701a      	strb	r2, [r3, #0]
      break;
 800a222:	e0a5      	b.n	800a370 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f96d 	bl	800a50c <USBH_Get_CfgDesc>
 800a232:	4603      	mov	r3, r0
 800a234:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d103      	bne.n	800a244 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2205      	movs	r2, #5
 800a240:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a242:	e097      	b.n	800a374 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	2b03      	cmp	r3, #3
 800a248:	f040 8094 	bne.w	800a374 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a252:	3301      	adds	r3, #1
 800a254:	b2da      	uxtb	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a262:	2b03      	cmp	r3, #3
 800a264:	d903      	bls.n	800a26e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	220d      	movs	r2, #13
 800a26a:	701a      	strb	r2, [r3, #0]
      break;
 800a26c:	e082      	b.n	800a374 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	795b      	ldrb	r3, [r3, #5]
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 f81f 	bl	800b2b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	791b      	ldrb	r3, [r3, #4]
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 f819 	bl	800b2b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	701a      	strb	r2, [r3, #0]
      break;
 800a292:	e06f      	b.n	800a374 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d019      	beq.n	800a2d2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a2aa:	23ff      	movs	r3, #255	@ 0xff
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f957 	bl	800a560 <USBH_Get_StringDesc>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2b6:	7bbb      	ldrb	r3, [r7, #14]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d103      	bne.n	800a2c4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2206      	movs	r2, #6
 800a2c0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a2c2:	e059      	b.n	800a378 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d156      	bne.n	800a378 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2206      	movs	r2, #6
 800a2ce:	705a      	strb	r2, [r3, #1]
      break;
 800a2d0:	e052      	b.n	800a378 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2206      	movs	r2, #6
 800a2d6:	705a      	strb	r2, [r3, #1]
      break;
 800a2d8:	e04e      	b.n	800a378 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d019      	beq.n	800a318 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a2f0:	23ff      	movs	r3, #255	@ 0xff
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f934 	bl	800a560 <USBH_Get_StringDesc>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2207      	movs	r2, #7
 800a306:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a308:	e038      	b.n	800a37c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a30a:	7bbb      	ldrb	r3, [r7, #14]
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d135      	bne.n	800a37c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2207      	movs	r2, #7
 800a314:	705a      	strb	r2, [r3, #1]
      break;
 800a316:	e031      	b.n	800a37c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2207      	movs	r2, #7
 800a31c:	705a      	strb	r2, [r3, #1]
      break;
 800a31e:	e02d      	b.n	800a37c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a326:	2b00      	cmp	r3, #0
 800a328:	d017      	beq.n	800a35a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a336:	23ff      	movs	r3, #255	@ 0xff
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f911 	bl	800a560 <USBH_Get_StringDesc>
 800a33e:	4603      	mov	r3, r0
 800a340:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d102      	bne.n	800a34e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a34c:	e018      	b.n	800a380 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a34e:	7bbb      	ldrb	r3, [r7, #14]
 800a350:	2b03      	cmp	r3, #3
 800a352:	d115      	bne.n	800a380 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]
      break;
 800a358:	e012      	b.n	800a380 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
      break;
 800a35e:	e00f      	b.n	800a380 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a360:	bf00      	nop
 800a362:	e00e      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a364:	bf00      	nop
 800a366:	e00c      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a368:	bf00      	nop
 800a36a:	e00a      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a36c:	bf00      	nop
 800a36e:	e008      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a370:	bf00      	nop
 800a372:	e006      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a374:	bf00      	nop
 800a376:	e004      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a378:	bf00      	nop
 800a37a:	e002      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a37c:	bf00      	nop
 800a37e:	e000      	b.n	800a382 <USBH_HandleEnum+0x3b6>
      break;
 800a380:	bf00      	nop
  }
  return Status;
 800a382:	7bfb      	ldrb	r3, [r7, #15]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f804 	bl	800a3ce <USBH_HandleSof>
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b0b      	cmp	r3, #11
 800a3de:	d10a      	bne.n	800a3f6 <USBH_HandleSof+0x28>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d005      	beq.n	800a3f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b083      	sub	sp, #12
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a40e:	bf00      	nop
}
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a432:	bf00      	nop
}
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f8c0 	bl	800b612 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	791b      	ldrb	r3, [r3, #4]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 ff0d 	bl	800b2b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	795b      	ldrb	r3, [r3, #5]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 ff07 	bl	800b2b8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a4c0:	887b      	ldrh	r3, [r7, #2]
 800a4c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c6:	d901      	bls.n	800a4cc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e01b      	b.n	800a504 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a4d2:	887b      	ldrh	r3, [r7, #2]
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f872 	bl	800a5c8 <USBH_GetDescriptor>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d109      	bne.n	800a502 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a4f4:	887a      	ldrh	r2, [r7, #2]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f929 	bl	800a750 <USBH_ParseDevDesc>
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af02      	add	r7, sp, #8
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	331c      	adds	r3, #28
 800a51c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a51e:	887b      	ldrh	r3, [r7, #2]
 800a520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a524:	d901      	bls.n	800a52a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a526:	2303      	movs	r3, #3
 800a528:	e016      	b.n	800a558 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a52a:	887b      	ldrh	r3, [r7, #2]
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a534:	2100      	movs	r1, #0
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f846 	bl	800a5c8 <USBH_GetDescriptor>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d107      	bne.n	800a556 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a546:	887b      	ldrh	r3, [r7, #2]
 800a548:	461a      	mov	r2, r3
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f9af 	bl	800a8b0 <USBH_ParseCfgDesc>
 800a552:	4603      	mov	r3, r0
 800a554:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af02      	add	r7, sp, #8
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	607a      	str	r2, [r7, #4]
 800a56a:	461a      	mov	r2, r3
 800a56c:	460b      	mov	r3, r1
 800a56e:	72fb      	strb	r3, [r7, #11]
 800a570:	4613      	mov	r3, r2
 800a572:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a574:	893b      	ldrh	r3, [r7, #8]
 800a576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a57a:	d802      	bhi.n	800a582 <USBH_Get_StringDesc+0x22>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a582:	2303      	movs	r3, #3
 800a584:	e01c      	b.n	800a5c0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a58e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a596:	893b      	ldrh	r3, [r7, #8]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	460b      	mov	r3, r1
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 f812 	bl	800a5c8 <USBH_GetDescriptor>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d107      	bne.n	800a5be <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a5b4:	893a      	ldrh	r2, [r7, #8]
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fb8c 	bl	800acd6 <USBH_ParseStringDesc>
  }

  return status;
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	72fb      	strb	r3, [r7, #11]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	789b      	ldrb	r3, [r3, #2]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d11c      	bne.n	800a61c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a5e2:	7afb      	ldrb	r3, [r7, #11]
 800a5e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2206      	movs	r2, #6
 800a5f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	893a      	ldrh	r2, [r7, #8]
 800a5f8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a5fa:	893b      	ldrh	r3, [r7, #8]
 800a5fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a604:	d104      	bne.n	800a610 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f240 4209 	movw	r2, #1033	@ 0x409
 800a60c:	829a      	strh	r2, [r3, #20]
 800a60e:	e002      	b.n	800a616 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8b3a      	ldrh	r2, [r7, #24]
 800a61a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a61c:	8b3b      	ldrh	r3, [r7, #24]
 800a61e:	461a      	mov	r2, r3
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 fba4 	bl	800ad70 <USBH_CtlReq>
 800a628:	4603      	mov	r3, r0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	460b      	mov	r3, r1
 800a63c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	789b      	ldrb	r3, [r3, #2]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d10f      	bne.n	800a666 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2205      	movs	r2, #5
 800a650:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a652:	78fb      	ldrb	r3, [r7, #3]
 800a654:	b29a      	uxth	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a666:	2200      	movs	r2, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fb80 	bl	800ad70 <USBH_CtlReq>
 800a670:	4603      	mov	r3, r0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	789b      	ldrb	r3, [r3, #2]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d10e      	bne.n	800a6ac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2209      	movs	r2, #9
 800a698:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	887a      	ldrh	r2, [r7, #2]
 800a69e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fb5d 	bl	800ad70 <USBH_CtlReq>
 800a6b6:	4603      	mov	r3, r0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	789b      	ldrb	r3, [r3, #2]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d10f      	bne.n	800a6f4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fb39 	bl	800ad70 <USBH_CtlReq>
 800a6fe:	4603      	mov	r3, r0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	789b      	ldrb	r3, [r3, #2]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d10f      	bne.n	800a73c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a73c:	2200      	movs	r2, #0
 800a73e:	2100      	movs	r1, #0
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fb15 	bl	800ad70 <USBH_CtlReq>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a764:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a770:	2302      	movs	r3, #2
 800a772:	e094      	b.n	800a89e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	781a      	ldrb	r2, [r3, #0]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	785a      	ldrb	r2, [r3, #1]
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	3302      	adds	r3, #2
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	3303      	adds	r3, #3
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	b29b      	uxth	r3, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	b29a      	uxth	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	791a      	ldrb	r2, [r3, #4]
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	795a      	ldrb	r2, [r3, #5]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	799a      	ldrb	r2, [r3, #6]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	79da      	ldrb	r2, [r3, #7]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d11b      	bne.n	800a80a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	79db      	ldrb	r3, [r3, #7]
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	dc0f      	bgt.n	800a7fa <USBH_ParseDevDesc+0xaa>
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	db0f      	blt.n	800a7fe <USBH_ParseDevDesc+0xae>
 800a7de:	3b08      	subs	r3, #8
 800a7e0:	4a32      	ldr	r2, [pc, #200]	@ (800a8ac <USBH_ParseDevDesc+0x15c>)
 800a7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bf14      	ite	ne
 800a7ee:	2301      	movne	r3, #1
 800a7f0:	2300      	moveq	r3, #0
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d106      	bne.n	800a806 <USBH_ParseDevDesc+0xb6>
 800a7f8:	e001      	b.n	800a7fe <USBH_ParseDevDesc+0xae>
 800a7fa:	2b40      	cmp	r3, #64	@ 0x40
 800a7fc:	d003      	beq.n	800a806 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2208      	movs	r2, #8
 800a802:	71da      	strb	r2, [r3, #7]
        break;
 800a804:	e000      	b.n	800a808 <USBH_ParseDevDesc+0xb8>
        break;
 800a806:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a808:	e00e      	b.n	800a828 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a810:	2b02      	cmp	r3, #2
 800a812:	d107      	bne.n	800a824 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	79db      	ldrb	r3, [r3, #7]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d005      	beq.n	800a828 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2208      	movs	r2, #8
 800a820:	71da      	strb	r2, [r3, #7]
 800a822:	e001      	b.n	800a828 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a824:	2303      	movs	r3, #3
 800a826:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a828:	88fb      	ldrh	r3, [r7, #6]
 800a82a:	2b08      	cmp	r3, #8
 800a82c:	d936      	bls.n	800a89c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	3308      	adds	r3, #8
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	3309      	adds	r3, #9
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	b29b      	uxth	r3, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	b29a      	uxth	r2, r3
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	330a      	adds	r3, #10
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	330b      	adds	r3, #11
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	021b      	lsls	r3, r3, #8
 800a858:	b29b      	uxth	r3, r3
 800a85a:	4313      	orrs	r3, r2
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	330c      	adds	r3, #12
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	330d      	adds	r3, #13
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	021b      	lsls	r3, r3, #8
 800a872:	b29b      	uxth	r3, r3
 800a874:	4313      	orrs	r3, r2
 800a876:	b29a      	uxth	r2, r3
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	7b9a      	ldrb	r2, [r3, #14]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	7bda      	ldrb	r2, [r3, #15]
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	7c1a      	ldrb	r2, [r3, #16]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	7c5a      	ldrb	r2, [r3, #17]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	371c      	adds	r7, #28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	01000101 	.word	0x01000101

0800a8b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08c      	sub	sp, #48	@ 0x30
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a8c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e0de      	b.n	800aaa0 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	2b09      	cmp	r3, #9
 800a8ec:	d002      	beq.n	800a8f4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	2209      	movs	r2, #9
 800a8f2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	785a      	ldrb	r2, [r3, #1]
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	3302      	adds	r3, #2
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	3303      	adds	r3, #3
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	021b      	lsls	r3, r3, #8
 800a914:	b29b      	uxth	r3, r3
 800a916:	4313      	orrs	r3, r2
 800a918:	b29b      	uxth	r3, r3
 800a91a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a91e:	bf28      	it	cs
 800a920:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a924:	b29a      	uxth	r2, r3
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	791a      	ldrb	r2, [r3, #4]
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	795a      	ldrb	r2, [r3, #5]
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	799a      	ldrb	r2, [r3, #6]
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	79da      	ldrb	r2, [r3, #7]
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	7a1a      	ldrb	r2, [r3, #8]
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	2b09      	cmp	r3, #9
 800a956:	f240 80a1 	bls.w	800aa9c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a95a:	2309      	movs	r3, #9
 800a95c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a962:	e085      	b.n	800aa70 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a964:	f107 0316 	add.w	r3, r7, #22
 800a968:	4619      	mov	r1, r3
 800a96a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a96c:	f000 f9e6 	bl	800ad3c <USBH_GetNextDesc>
 800a970:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b04      	cmp	r3, #4
 800a978:	d17a      	bne.n	800aa70 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b09      	cmp	r3, #9
 800a980:	d002      	beq.n	800a988 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	2209      	movs	r2, #9
 800a986:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a98c:	221a      	movs	r2, #26
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	3308      	adds	r3, #8
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	4413      	add	r3, r2
 800a998:	3302      	adds	r3, #2
 800a99a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a99c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a99e:	69f8      	ldr	r0, [r7, #28]
 800a9a0:	f000 f882 	bl	800aaa8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a9ae:	e043      	b.n	800aa38 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a9b0:	f107 0316 	add.w	r3, r7, #22
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9b8:	f000 f9c0 	bl	800ad3c <USBH_GetNextDesc>
 800a9bc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c0:	785b      	ldrb	r3, [r3, #1]
 800a9c2:	2b05      	cmp	r3, #5
 800a9c4:	d138      	bne.n	800aa38 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	795b      	ldrb	r3, [r3, #5]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d113      	bne.n	800a9f6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d003      	beq.n	800a9de <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	799b      	ldrb	r3, [r3, #6]
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d10b      	bne.n	800a9f6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	79db      	ldrb	r3, [r3, #7]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10b      	bne.n	800a9fe <USBH_ParseCfgDesc+0x14e>
 800a9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	2b09      	cmp	r3, #9
 800a9ec:	d007      	beq.n	800a9fe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	2209      	movs	r2, #9
 800a9f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a9f4:	e003      	b.n	800a9fe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f8:	2207      	movs	r2, #7
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e000      	b.n	800aa00 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a9fe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa08:	3201      	adds	r2, #1
 800aa0a:	00d2      	lsls	r2, r2, #3
 800aa0c:	211a      	movs	r1, #26
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	4413      	add	r3, r2
 800aa14:	3308      	adds	r3, #8
 800aa16:	6a3a      	ldr	r2, [r7, #32]
 800aa18:	4413      	add	r3, r2
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800aa1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa20:	69b9      	ldr	r1, [r7, #24]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 f86f 	bl	800ab06 <USBH_ParseEPDesc>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800aa2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa32:	3301      	adds	r3, #1
 800aa34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d80a      	bhi.n	800aa56 <USBH_ParseCfgDesc+0x1a6>
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	791b      	ldrb	r3, [r3, #4]
 800aa44:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d204      	bcs.n	800aa56 <USBH_ParseCfgDesc+0x1a6>
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	885a      	ldrh	r2, [r3, #2]
 800aa50:	8afb      	ldrh	r3, [r7, #22]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d8ac      	bhi.n	800a9b0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	791b      	ldrb	r3, [r3, #4]
 800aa5a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d201      	bcs.n	800aa66 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e01c      	b.n	800aaa0 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800aa66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d805      	bhi.n	800aa84 <USBH_ParseCfgDesc+0x1d4>
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	885a      	ldrh	r2, [r3, #2]
 800aa7c:	8afb      	ldrh	r3, [r7, #22]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	f63f af70 	bhi.w	800a964 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	791b      	ldrb	r3, [r3, #4]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	bf28      	it	cs
 800aa8c:	2302      	movcs	r3, #2
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d201      	bcs.n	800aa9c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e001      	b.n	800aaa0 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800aa9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3730      	adds	r7, #48	@ 0x30
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	781a      	ldrb	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	785a      	ldrb	r2, [r3, #1]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	789a      	ldrb	r2, [r3, #2]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	78da      	ldrb	r2, [r3, #3]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	791a      	ldrb	r2, [r3, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	795a      	ldrb	r2, [r3, #5]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	799a      	ldrb	r2, [r3, #6]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	79da      	ldrb	r2, [r3, #7]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	7a1a      	ldrb	r2, [r3, #8]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	721a      	strb	r2, [r3, #8]
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b087      	sub	sp, #28
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	60f8      	str	r0, [r7, #12]
 800ab0e:	60b9      	str	r1, [r7, #8]
 800ab10:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	781a      	ldrb	r2, [r3, #0]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	785a      	ldrb	r2, [r3, #1]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	789a      	ldrb	r2, [r3, #2]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	78da      	ldrb	r2, [r3, #3]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3305      	adds	r3, #5
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	799a      	ldrb	r2, [r3, #6]
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	889b      	ldrh	r3, [r3, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ab64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab68:	d804      	bhi.n	800ab74 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ab6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab72:	d901      	bls.n	800ab78 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ab74:	2303      	movs	r3, #3
 800ab76:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d136      	bne.n	800abf0 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	78db      	ldrb	r3, [r3, #3]
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d108      	bne.n	800aba0 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	889b      	ldrh	r3, [r3, #4]
 800ab92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab96:	f240 8097 	bls.w	800acc8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	75fb      	strb	r3, [r7, #23]
 800ab9e:	e093      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	78db      	ldrb	r3, [r3, #3]
 800aba4:	f003 0303 	and.w	r3, r3, #3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d107      	bne.n	800abbc <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	889b      	ldrh	r3, [r3, #4]
 800abb0:	2b40      	cmp	r3, #64	@ 0x40
 800abb2:	f240 8089 	bls.w	800acc8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abb6:	2303      	movs	r3, #3
 800abb8:	75fb      	strb	r3, [r7, #23]
 800abba:	e085      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	78db      	ldrb	r3, [r3, #3]
 800abc0:	f003 0303 	and.w	r3, r3, #3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d005      	beq.n	800abd4 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	78db      	ldrb	r3, [r3, #3]
 800abcc:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d10a      	bne.n	800abea <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	799b      	ldrb	r3, [r3, #6]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <USBH_ParseEPDesc+0xde>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	799b      	ldrb	r3, [r3, #6]
 800abe0:	2b10      	cmp	r3, #16
 800abe2:	d970      	bls.n	800acc6 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800abe4:	2303      	movs	r3, #3
 800abe6:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800abe8:	e06d      	b.n	800acc6 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800abea:	2303      	movs	r3, #3
 800abec:	75fb      	strb	r3, [r7, #23]
 800abee:	e06b      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d13c      	bne.n	800ac74 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	78db      	ldrb	r3, [r3, #3]
 800abfe:	f003 0303 	and.w	r3, r3, #3
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d005      	beq.n	800ac12 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	78db      	ldrb	r3, [r3, #3]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	889b      	ldrh	r3, [r3, #4]
 800ac16:	2b40      	cmp	r3, #64	@ 0x40
 800ac18:	d956      	bls.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac1e:	e053      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	78db      	ldrb	r3, [r3, #3]
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d10e      	bne.n	800ac4a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	799b      	ldrb	r3, [r3, #6]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d007      	beq.n	800ac44 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ac38:	2b10      	cmp	r3, #16
 800ac3a:	d803      	bhi.n	800ac44 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ac40:	2b40      	cmp	r3, #64	@ 0x40
 800ac42:	d941      	bls.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac44:	2303      	movs	r3, #3
 800ac46:	75fb      	strb	r3, [r7, #23]
 800ac48:	e03e      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	78db      	ldrb	r3, [r3, #3]
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d10b      	bne.n	800ac6e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	799b      	ldrb	r3, [r3, #6]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d004      	beq.n	800ac68 <USBH_ParseEPDesc+0x162>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	889b      	ldrh	r3, [r3, #4]
 800ac62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac66:	d32f      	bcc.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	75fb      	strb	r3, [r7, #23]
 800ac6c:	e02c      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	75fb      	strb	r3, [r7, #23]
 800ac72:	e029      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d120      	bne.n	800acc0 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	78db      	ldrb	r3, [r3, #3]
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	889b      	ldrh	r3, [r3, #4]
 800ac8e:	2b08      	cmp	r3, #8
 800ac90:	d01a      	beq.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac92:	2303      	movs	r3, #3
 800ac94:	75fb      	strb	r3, [r7, #23]
 800ac96:	e017      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	78db      	ldrb	r3, [r3, #3]
 800ac9c:	f003 0303 	and.w	r3, r3, #3
 800aca0:	2b03      	cmp	r3, #3
 800aca2:	d10a      	bne.n	800acba <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	799b      	ldrb	r3, [r3, #6]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <USBH_ParseEPDesc+0x1ae>
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	889b      	ldrh	r3, [r3, #4]
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d909      	bls.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800acb4:	2303      	movs	r3, #3
 800acb6:	75fb      	strb	r3, [r7, #23]
 800acb8:	e006      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800acba:	2303      	movs	r3, #3
 800acbc:	75fb      	strb	r3, [r7, #23]
 800acbe:	e003      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800acc0:	2303      	movs	r3, #3
 800acc2:	75fb      	strb	r3, [r7, #23]
 800acc4:	e000      	b.n	800acc8 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800acc6:	bf00      	nop
  }

  return status;
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acca:	4618      	mov	r0, r3
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b087      	sub	sp, #28
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	4613      	mov	r3, r2
 800ace2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3301      	adds	r3, #1
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	2b03      	cmp	r3, #3
 800acec:	d120      	bne.n	800ad30 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	1e9a      	subs	r2, r3, #2
 800acf4:	88fb      	ldrh	r3, [r7, #6]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bf28      	it	cs
 800acfa:	4613      	movcs	r3, r2
 800acfc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3302      	adds	r3, #2
 800ad02:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ad04:	2300      	movs	r3, #0
 800ad06:	82fb      	strh	r3, [r7, #22]
 800ad08:	e00b      	b.n	800ad22 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ad0a:	8afb      	ldrh	r3, [r7, #22]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	4413      	add	r3, r2
 800ad10:	781a      	ldrb	r2, [r3, #0]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ad1c:	8afb      	ldrh	r3, [r7, #22]
 800ad1e:	3302      	adds	r3, #2
 800ad20:	82fb      	strh	r3, [r7, #22]
 800ad22:	8afa      	ldrh	r2, [r7, #22]
 800ad24:	8abb      	ldrh	r3, [r7, #20]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d3ef      	bcc.n	800ad0a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
  }
}
 800ad30:	bf00      	nop
 800ad32:	371c      	adds	r7, #28
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	7812      	ldrb	r2, [r2, #0]
 800ad4e:	4413      	add	r3, r2
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4413      	add	r3, r2
 800ad60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad62:	68fb      	ldr	r3, [r7, #12]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	789b      	ldrb	r3, [r3, #2]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d002      	beq.n	800ad90 <USBH_CtlReq+0x20>
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d00f      	beq.n	800adae <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800ad8e:	e027      	b.n	800ade0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	88fa      	ldrh	r2, [r7, #6]
 800ad9a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2202      	movs	r2, #2
 800ada6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ada8:	2301      	movs	r3, #1
 800adaa:	75fb      	strb	r3, [r7, #23]
      break;
 800adac:	e018      	b.n	800ade0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 f81c 	bl	800adec <USBH_HandleControl>
 800adb4:	4603      	mov	r3, r0
 800adb6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <USBH_CtlReq+0x54>
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d106      	bne.n	800add2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2201      	movs	r2, #1
 800adc8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	761a      	strb	r2, [r3, #24]
      break;
 800add0:	e005      	b.n	800adde <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d102      	bne.n	800adde <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	709a      	strb	r2, [r3, #2]
      break;
 800adde:	bf00      	nop
  }
  return status;
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af02      	add	r7, sp, #8
 800adf2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800adf4:	2301      	movs	r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7e1b      	ldrb	r3, [r3, #24]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	2b0a      	cmp	r3, #10
 800ae04:	f200 8157 	bhi.w	800b0b6 <USBH_HandleControl+0x2ca>
 800ae08:	a201      	add	r2, pc, #4	@ (adr r2, 800ae10 <USBH_HandleControl+0x24>)
 800ae0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0e:	bf00      	nop
 800ae10:	0800ae3d 	.word	0x0800ae3d
 800ae14:	0800ae57 	.word	0x0800ae57
 800ae18:	0800aec1 	.word	0x0800aec1
 800ae1c:	0800aee7 	.word	0x0800aee7
 800ae20:	0800af21 	.word	0x0800af21
 800ae24:	0800af4b 	.word	0x0800af4b
 800ae28:	0800af9d 	.word	0x0800af9d
 800ae2c:	0800afbf 	.word	0x0800afbf
 800ae30:	0800affb 	.word	0x0800affb
 800ae34:	0800b021 	.word	0x0800b021
 800ae38:	0800b05f 	.word	0x0800b05f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f103 0110 	add.w	r1, r3, #16
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	795b      	ldrb	r3, [r3, #5]
 800ae46:	461a      	mov	r2, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f945 	bl	800b0d8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2202      	movs	r2, #2
 800ae52:	761a      	strb	r2, [r3, #24]
      break;
 800ae54:	e13a      	b.n	800b0cc <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	795b      	ldrb	r3, [r3, #5]
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fcc7 	bl	800b7f0 <USBH_LL_GetURBState>
 800ae62:	4603      	mov	r3, r0
 800ae64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d11e      	bne.n	800aeaa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	7c1b      	ldrb	r3, [r3, #16]
 800ae70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ae74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	8adb      	ldrh	r3, [r3, #22]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae7e:	7b7b      	ldrb	r3, [r7, #13]
 800ae80:	2b80      	cmp	r3, #128	@ 0x80
 800ae82:	d103      	bne.n	800ae8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2203      	movs	r2, #3
 800ae88:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ae8a:	e116      	b.n	800b0ba <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2205      	movs	r2, #5
 800ae90:	761a      	strb	r2, [r3, #24]
      break;
 800ae92:	e112      	b.n	800b0ba <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800ae94:	7b7b      	ldrb	r3, [r7, #13]
 800ae96:	2b80      	cmp	r3, #128	@ 0x80
 800ae98:	d103      	bne.n	800aea2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2209      	movs	r2, #9
 800ae9e:	761a      	strb	r2, [r3, #24]
      break;
 800aea0:	e10b      	b.n	800b0ba <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2207      	movs	r2, #7
 800aea6:	761a      	strb	r2, [r3, #24]
      break;
 800aea8:	e107      	b.n	800b0ba <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	2b04      	cmp	r3, #4
 800aeae:	d003      	beq.n	800aeb8 <USBH_HandleControl+0xcc>
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	f040 8101 	bne.w	800b0ba <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	220b      	movs	r2, #11
 800aebc:	761a      	strb	r2, [r3, #24]
      break;
 800aebe:	e0fc      	b.n	800b0ba <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6899      	ldr	r1, [r3, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	899a      	ldrh	r2, [r3, #12]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	791b      	ldrb	r3, [r3, #4]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f93c 	bl	800b156 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2204      	movs	r2, #4
 800aee2:	761a      	strb	r2, [r3, #24]
      break;
 800aee4:	e0f2      	b.n	800b0cc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	791b      	ldrb	r3, [r3, #4]
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fc7f 	bl	800b7f0 <USBH_LL_GetURBState>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d103      	bne.n	800af04 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2209      	movs	r2, #9
 800af00:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800af02:	e0dc      	b.n	800b0be <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	2b05      	cmp	r3, #5
 800af08:	d102      	bne.n	800af10 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800af0a:	2303      	movs	r3, #3
 800af0c:	73fb      	strb	r3, [r7, #15]
      break;
 800af0e:	e0d6      	b.n	800b0be <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800af10:	7bbb      	ldrb	r3, [r7, #14]
 800af12:	2b04      	cmp	r3, #4
 800af14:	f040 80d3 	bne.w	800b0be <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	220b      	movs	r2, #11
 800af1c:	761a      	strb	r2, [r3, #24]
      break;
 800af1e:	e0ce      	b.n	800b0be <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6899      	ldr	r1, [r3, #8]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	899a      	ldrh	r2, [r3, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	795b      	ldrb	r3, [r3, #5]
 800af2c:	2001      	movs	r0, #1
 800af2e:	9000      	str	r0, [sp, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f8eb 	bl	800b10c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2206      	movs	r2, #6
 800af46:	761a      	strb	r2, [r3, #24]
      break;
 800af48:	e0c0      	b.n	800b0cc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	795b      	ldrb	r3, [r3, #5]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fc4d 	bl	800b7f0 <USBH_LL_GetURBState>
 800af56:	4603      	mov	r3, r0
 800af58:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d103      	bne.n	800af68 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2207      	movs	r2, #7
 800af64:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800af66:	e0ac      	b.n	800b0c2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b05      	cmp	r3, #5
 800af6c:	d105      	bne.n	800af7a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	220c      	movs	r2, #12
 800af72:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800af74:	2303      	movs	r3, #3
 800af76:	73fb      	strb	r3, [r7, #15]
      break;
 800af78:	e0a3      	b.n	800b0c2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d103      	bne.n	800af88 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2205      	movs	r2, #5
 800af84:	761a      	strb	r2, [r3, #24]
      break;
 800af86:	e09c      	b.n	800b0c2 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	f040 8099 	bne.w	800b0c2 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	220b      	movs	r2, #11
 800af94:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800af96:	2302      	movs	r3, #2
 800af98:	73fb      	strb	r3, [r7, #15]
      break;
 800af9a:	e092      	b.n	800b0c2 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	791b      	ldrb	r3, [r3, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	2100      	movs	r1, #0
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f8d6 	bl	800b156 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2208      	movs	r2, #8
 800afba:	761a      	strb	r2, [r3, #24]

      break;
 800afbc:	e086      	b.n	800b0cc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	791b      	ldrb	r3, [r3, #4]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fc13 	bl	800b7f0 <USBH_LL_GetURBState>
 800afca:	4603      	mov	r3, r0
 800afcc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800afce:	7bbb      	ldrb	r3, [r7, #14]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d105      	bne.n	800afe0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	220d      	movs	r2, #13
 800afd8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800afde:	e072      	b.n	800b0c6 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d103      	bne.n	800afee <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	220b      	movs	r2, #11
 800afea:	761a      	strb	r2, [r3, #24]
      break;
 800afec:	e06b      	b.n	800b0c6 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b05      	cmp	r3, #5
 800aff2:	d168      	bne.n	800b0c6 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800aff4:	2303      	movs	r3, #3
 800aff6:	73fb      	strb	r3, [r7, #15]
      break;
 800aff8:	e065      	b.n	800b0c6 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	795b      	ldrb	r3, [r3, #5]
 800affe:	2201      	movs	r2, #1
 800b000:	9200      	str	r2, [sp, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	2100      	movs	r1, #0
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f880 	bl	800b10c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b012:	b29a      	uxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	220a      	movs	r2, #10
 800b01c:	761a      	strb	r2, [r3, #24]
      break;
 800b01e:	e055      	b.n	800b0cc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	795b      	ldrb	r3, [r3, #5]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fbe2 	bl	800b7f0 <USBH_LL_GetURBState>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d105      	bne.n	800b042 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	220d      	movs	r2, #13
 800b03e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b040:	e043      	b.n	800b0ca <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b02      	cmp	r3, #2
 800b046:	d103      	bne.n	800b050 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2209      	movs	r2, #9
 800b04c:	761a      	strb	r2, [r3, #24]
      break;
 800b04e:	e03c      	b.n	800b0ca <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2b04      	cmp	r3, #4
 800b054:	d139      	bne.n	800b0ca <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	220b      	movs	r2, #11
 800b05a:	761a      	strb	r2, [r3, #24]
      break;
 800b05c:	e035      	b.n	800b0ca <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	7e5b      	ldrb	r3, [r3, #25]
 800b062:	3301      	adds	r3, #1
 800b064:	b2da      	uxtb	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	765a      	strb	r2, [r3, #25]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	7e5b      	ldrb	r3, [r3, #25]
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d806      	bhi.n	800b080 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b07e:	e025      	b.n	800b0cc <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b086:	2106      	movs	r1, #6
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	795b      	ldrb	r3, [r3, #5]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f90d 	bl	800b2b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	791b      	ldrb	r3, [r3, #4]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f907 	bl	800b2b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b4:	e00a      	b.n	800b0cc <USBH_HandleControl+0x2e0>

    default:
      break;
 800b0b6:	bf00      	nop
 800b0b8:	e008      	b.n	800b0cc <USBH_HandleControl+0x2e0>
      break;
 800b0ba:	bf00      	nop
 800b0bc:	e006      	b.n	800b0cc <USBH_HandleControl+0x2e0>
      break;
 800b0be:	bf00      	nop
 800b0c0:	e004      	b.n	800b0cc <USBH_HandleControl+0x2e0>
      break;
 800b0c2:	bf00      	nop
 800b0c4:	e002      	b.n	800b0cc <USBH_HandleControl+0x2e0>
      break;
 800b0c6:	bf00      	nop
 800b0c8:	e000      	b.n	800b0cc <USBH_HandleControl+0x2e0>
      break;
 800b0ca:	bf00      	nop
  }

  return status;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop

0800b0d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b088      	sub	sp, #32
 800b0dc:	af04      	add	r7, sp, #16
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0e6:	79f9      	ldrb	r1, [r7, #7]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	2308      	movs	r3, #8
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 fb46 	bl	800b78e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af04      	add	r7, sp, #16
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	4611      	mov	r1, r2
 800b118:	461a      	mov	r2, r3
 800b11a:	460b      	mov	r3, r1
 800b11c:	80fb      	strh	r3, [r7, #6]
 800b11e:	4613      	mov	r3, r2
 800b120:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b12c:	2300      	movs	r3, #0
 800b12e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b130:	7979      	ldrb	r1, [r7, #5]
 800b132:	7e3b      	ldrb	r3, [r7, #24]
 800b134:	9303      	str	r3, [sp, #12]
 800b136:	88fb      	ldrh	r3, [r7, #6]
 800b138:	9302      	str	r3, [sp, #8]
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	2301      	movs	r3, #1
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	2300      	movs	r3, #0
 800b144:	2200      	movs	r2, #0
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 fb21 	bl	800b78e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b088      	sub	sp, #32
 800b15a:	af04      	add	r7, sp, #16
 800b15c:	60f8      	str	r0, [r7, #12]
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	4611      	mov	r1, r2
 800b162:	461a      	mov	r2, r3
 800b164:	460b      	mov	r3, r1
 800b166:	80fb      	strh	r3, [r7, #6]
 800b168:	4613      	mov	r3, r2
 800b16a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b16c:	7979      	ldrb	r1, [r7, #5]
 800b16e:	2300      	movs	r3, #0
 800b170:	9303      	str	r3, [sp, #12]
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	9302      	str	r3, [sp, #8]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	2301      	movs	r3, #1
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	2300      	movs	r3, #0
 800b180:	2201      	movs	r2, #1
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 fb03 	bl	800b78e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b188:	2300      	movs	r3, #0

}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b088      	sub	sp, #32
 800b196:	af04      	add	r7, sp, #16
 800b198:	60f8      	str	r0, [r7, #12]
 800b19a:	60b9      	str	r1, [r7, #8]
 800b19c:	4611      	mov	r1, r2
 800b19e:	461a      	mov	r2, r3
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	80fb      	strh	r3, [r7, #6]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1b6:	7979      	ldrb	r1, [r7, #5]
 800b1b8:	7e3b      	ldrb	r3, [r7, #24]
 800b1ba:	9303      	str	r3, [sp, #12]
 800b1bc:	88fb      	ldrh	r3, [r7, #6]
 800b1be:	9302      	str	r3, [sp, #8]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 fade 	bl	800b78e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af04      	add	r7, sp, #16
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	80fb      	strh	r3, [r7, #6]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1f2:	7979      	ldrb	r1, [r7, #5]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	9303      	str	r3, [sp, #12]
 800b1f8:	88fb      	ldrh	r3, [r7, #6]
 800b1fa:	9302      	str	r3, [sp, #8]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	2301      	movs	r3, #1
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	2302      	movs	r3, #2
 800b206:	2201      	movs	r2, #1
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fac0 	bl	800b78e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af04      	add	r7, sp, #16
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	4608      	mov	r0, r1
 800b222:	4611      	mov	r1, r2
 800b224:	461a      	mov	r2, r3
 800b226:	4603      	mov	r3, r0
 800b228:	70fb      	strb	r3, [r7, #3]
 800b22a:	460b      	mov	r3, r1
 800b22c:	70bb      	strb	r3, [r7, #2]
 800b22e:	4613      	mov	r3, r2
 800b230:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b232:	7878      	ldrb	r0, [r7, #1]
 800b234:	78ba      	ldrb	r2, [r7, #2]
 800b236:	78f9      	ldrb	r1, [r7, #3]
 800b238:	8b3b      	ldrh	r3, [r7, #24]
 800b23a:	9302      	str	r3, [sp, #8]
 800b23c:	7d3b      	ldrb	r3, [r7, #20]
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	7c3b      	ldrb	r3, [r7, #16]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4603      	mov	r3, r0
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa53 	bl	800b6f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	460b      	mov	r3, r1
 800b260:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b262:	78fb      	ldrb	r3, [r7, #3]
 800b264:	4619      	mov	r1, r3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fa72 	bl	800b750 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	460b      	mov	r3, r1
 800b280:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f836 	bl	800b2f4 <USBH_GetFreePipe>
 800b288:	4603      	mov	r3, r0
 800b28a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b28c:	89fb      	ldrh	r3, [r7, #14]
 800b28e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b292:	4293      	cmp	r3, r2
 800b294:	d00a      	beq.n	800b2ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b296:	78fa      	ldrb	r2, [r7, #3]
 800b298:	89fb      	ldrh	r3, [r7, #14]
 800b29a:	f003 030f 	and.w	r3, r3, #15
 800b29e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b2a2:	6879      	ldr	r1, [r7, #4]
 800b2a4:	33e0      	adds	r3, #224	@ 0xe0
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	440b      	add	r3, r1
 800b2aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b2ac:	89fb      	ldrh	r3, [r7, #14]
 800b2ae:	b2db      	uxtb	r3, r3
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b2c4:	78fb      	ldrb	r3, [r7, #3]
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	d80d      	bhi.n	800b2e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	33e0      	adds	r3, #224	@ 0xe0
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	78fb      	ldrb	r3, [r7, #3]
 800b2d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b2dc:	6879      	ldr	r1, [r7, #4]
 800b2de:	33e0      	adds	r3, #224	@ 0xe0
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	440b      	add	r3, r1
 800b2e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
 800b304:	e00f      	b.n	800b326 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	33e0      	adds	r3, #224	@ 0xe0
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b316:	2b00      	cmp	r3, #0
 800b318:	d102      	bne.n	800b320 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	e007      	b.n	800b330 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	3301      	adds	r3, #1
 800b324:	73fb      	strb	r3, [r7, #15]
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	2b0f      	cmp	r3, #15
 800b32a:	d9ec      	bls.n	800b306 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b32c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b340:	2201      	movs	r2, #1
 800b342:	490e      	ldr	r1, [pc, #56]	@ (800b37c <MX_USB_HOST_Init+0x40>)
 800b344:	480e      	ldr	r0, [pc, #56]	@ (800b380 <MX_USB_HOST_Init+0x44>)
 800b346:	f7fe fb0f 	bl	8009968 <USBH_Init>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b350:	f7f6 fb02 	bl	8001958 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b354:	490b      	ldr	r1, [pc, #44]	@ (800b384 <MX_USB_HOST_Init+0x48>)
 800b356:	480a      	ldr	r0, [pc, #40]	@ (800b380 <MX_USB_HOST_Init+0x44>)
 800b358:	f7fe fbb1 	bl	8009abe <USBH_RegisterClass>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b362:	f7f6 faf9 	bl	8001958 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b366:	4806      	ldr	r0, [pc, #24]	@ (800b380 <MX_USB_HOST_Init+0x44>)
 800b368:	f7fe fc35 	bl	8009bd6 <USBH_Start>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b372:	f7f6 faf1 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b376:	bf00      	nop
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	0800b39d 	.word	0x0800b39d
 800b380:	200004d8 	.word	0x200004d8
 800b384:	20000028 	.word	0x20000028

0800b388 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b38c:	4802      	ldr	r0, [pc, #8]	@ (800b398 <MX_USB_HOST_Process+0x10>)
 800b38e:	f7fe fc33 	bl	8009bf8 <USBH_Process>
}
 800b392:	bf00      	nop
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	200004d8 	.word	0x200004d8

0800b39c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b3a8:	78fb      	ldrb	r3, [r7, #3]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d819      	bhi.n	800b3e4 <USBH_UserProcess+0x48>
 800b3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b8 <USBH_UserProcess+0x1c>)
 800b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b6:	bf00      	nop
 800b3b8:	0800b3e5 	.word	0x0800b3e5
 800b3bc:	0800b3d5 	.word	0x0800b3d5
 800b3c0:	0800b3e5 	.word	0x0800b3e5
 800b3c4:	0800b3dd 	.word	0x0800b3dd
 800b3c8:	0800b3cd 	.word	0x0800b3cd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b3cc:	4b09      	ldr	r3, [pc, #36]	@ (800b3f4 <USBH_UserProcess+0x58>)
 800b3ce:	2203      	movs	r2, #3
 800b3d0:	701a      	strb	r2, [r3, #0]
  break;
 800b3d2:	e008      	b.n	800b3e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b3d4:	4b07      	ldr	r3, [pc, #28]	@ (800b3f4 <USBH_UserProcess+0x58>)
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	701a      	strb	r2, [r3, #0]
  break;
 800b3da:	e004      	b.n	800b3e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <USBH_UserProcess+0x58>)
 800b3de:	2201      	movs	r2, #1
 800b3e0:	701a      	strb	r2, [r3, #0]
  break;
 800b3e2:	e000      	b.n	800b3e6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b3e4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b3e6:	bf00      	nop
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	200008b0 	.word	0x200008b0

0800b3f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08a      	sub	sp, #40	@ 0x28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b400:	f107 0314 	add.w	r3, r7, #20
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	605a      	str	r2, [r3, #4]
 800b40a:	609a      	str	r2, [r3, #8]
 800b40c:	60da      	str	r2, [r3, #12]
 800b40e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b418:	d147      	bne.n	800b4aa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b41a:	2300      	movs	r3, #0
 800b41c:	613b      	str	r3, [r7, #16]
 800b41e:	4b25      	ldr	r3, [pc, #148]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b422:	4a24      	ldr	r2, [pc, #144]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b424:	f043 0301 	orr.w	r3, r3, #1
 800b428:	6313      	str	r3, [r2, #48]	@ 0x30
 800b42a:	4b22      	ldr	r3, [pc, #136]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	613b      	str	r3, [r7, #16]
 800b434:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b436:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b43a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b43c:	2300      	movs	r3, #0
 800b43e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b440:	2300      	movs	r3, #0
 800b442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b444:	f107 0314 	add.w	r3, r7, #20
 800b448:	4619      	mov	r1, r3
 800b44a:	481b      	ldr	r0, [pc, #108]	@ (800b4b8 <HAL_HCD_MspInit+0xc0>)
 800b44c:	f7f7 ffa2 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b450:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b456:	2302      	movs	r3, #2
 800b458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b45e:	2300      	movs	r3, #0
 800b460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b462:	230a      	movs	r3, #10
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b466:	f107 0314 	add.w	r3, r7, #20
 800b46a:	4619      	mov	r1, r3
 800b46c:	4812      	ldr	r0, [pc, #72]	@ (800b4b8 <HAL_HCD_MspInit+0xc0>)
 800b46e:	f7f7 ff91 	bl	8003394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b472:	4b10      	ldr	r3, [pc, #64]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b476:	4a0f      	ldr	r2, [pc, #60]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b47c:	6353      	str	r3, [r2, #52]	@ 0x34
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b486:	4a0b      	ldr	r2, [pc, #44]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b48c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b48e:	4b09      	ldr	r3, [pc, #36]	@ (800b4b4 <HAL_HCD_MspInit+0xbc>)
 800b490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b49a:	2200      	movs	r2, #0
 800b49c:	2100      	movs	r1, #0
 800b49e:	2043      	movs	r0, #67	@ 0x43
 800b4a0:	f7f7 fbc3 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4a4:	2043      	movs	r0, #67	@ 0x43
 800b4a6:	f7f7 fbdc 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b4aa:	bf00      	nop
 800b4ac:	3728      	adds	r7, #40	@ 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	40023800 	.word	0x40023800
 800b4b8:	40020000 	.word	0x40020000

0800b4bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe ff6d 	bl	800a3aa <USBH_LL_IncTimer>
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fe ffa9 	bl	800a43e <USBH_LL_Connect>
}
 800b4ec:	bf00      	nop
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe ffb2 	bl	800a46c <USBH_LL_Disconnect>
}
 800b508:	bf00      	nop
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
 800b51c:	4613      	mov	r3, r2
 800b51e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe ff5f 	bl	800a3fe <USBH_LL_PortEnabled>
}
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe ff5f 	bl	800a41a <USBH_LL_PortDisabled>
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b572:	2b01      	cmp	r3, #1
 800b574:	d12a      	bne.n	800b5cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b576:	4a18      	ldr	r2, [pc, #96]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a15      	ldr	r2, [pc, #84]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b582:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b586:	4b14      	ldr	r3, [pc, #80]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b588:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b58c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b58e:	4b12      	ldr	r3, [pc, #72]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b590:	2208      	movs	r2, #8
 800b592:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b594:	4b10      	ldr	r3, [pc, #64]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b596:	2201      	movs	r2, #1
 800b598:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b59a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b5ac:	480a      	ldr	r0, [pc, #40]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b5ae:	f7f8 f8d7 	bl	8003760 <HAL_HCD_Init>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b5b8:	f7f6 f9ce 	bl	8001958 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b5bc:	4806      	ldr	r0, [pc, #24]	@ (800b5d8 <USBH_LL_Init+0x74>)
 800b5be:	f7f8 fd37 	bl	8004030 <HAL_HCD_GetCurrentFrame>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7fe fee0 	bl	800a38c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200008b4 	.word	0x200008b4

0800b5dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7f8 fca4 	bl	8003f40 <HAL_HCD_Start>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 f95e 	bl	800b8c0 <USBH_Get_USB_Status>
 800b604:	4603      	mov	r3, r0
 800b606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b608:	7bbb      	ldrb	r3, [r7, #14]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f8 fcac 	bl	8003f86 <HAL_HCD_Stop>
 800b62e:	4603      	mov	r3, r0
 800b630:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	4618      	mov	r0, r3
 800b636:	f000 f943 	bl	800b8c0 <USBH_Get_USB_Status>
 800b63a:	4603      	mov	r3, r0
 800b63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b650:	2301      	movs	r3, #1
 800b652:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7f8 fcf6 	bl	800404c <HAL_HCD_GetCurrentSpeed>
 800b660:	4603      	mov	r3, r0
 800b662:	2b02      	cmp	r3, #2
 800b664:	d00c      	beq.n	800b680 <USBH_LL_GetSpeed+0x38>
 800b666:	2b02      	cmp	r3, #2
 800b668:	d80d      	bhi.n	800b686 <USBH_LL_GetSpeed+0x3e>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <USBH_LL_GetSpeed+0x2c>
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d003      	beq.n	800b67a <USBH_LL_GetSpeed+0x32>
 800b672:	e008      	b.n	800b686 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
    break;
 800b678:	e008      	b.n	800b68c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b67a:	2301      	movs	r3, #1
 800b67c:	73fb      	strb	r3, [r7, #15]
    break;
 800b67e:	e005      	b.n	800b68c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b680:	2302      	movs	r3, #2
 800b682:	73fb      	strb	r3, [r7, #15]
    break;
 800b684:	e002      	b.n	800b68c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b686:	2301      	movs	r3, #1
 800b688:	73fb      	strb	r3, [r7, #15]
    break;
 800b68a:	bf00      	nop
  }
  return  speed;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7f8 fc87 	bl	8003fc0 <HAL_HCD_ResetPort>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 f901 	bl	800b8c0 <USBH_Get_USB_Status>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6de:	78fa      	ldrb	r2, [r7, #3]
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f8 fc8f 	bl	8004006 <HAL_HCD_HC_GetXferCount>
 800b6e8:	4603      	mov	r3, r0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6f2:	b590      	push	{r4, r7, lr}
 800b6f4:	b089      	sub	sp, #36	@ 0x24
 800b6f6:	af04      	add	r7, sp, #16
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	4608      	mov	r0, r1
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	461a      	mov	r2, r3
 800b700:	4603      	mov	r3, r0
 800b702:	70fb      	strb	r3, [r7, #3]
 800b704:	460b      	mov	r3, r1
 800b706:	70bb      	strb	r3, [r7, #2]
 800b708:	4613      	mov	r3, r2
 800b70a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b71a:	787c      	ldrb	r4, [r7, #1]
 800b71c:	78ba      	ldrb	r2, [r7, #2]
 800b71e:	78f9      	ldrb	r1, [r7, #3]
 800b720:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b722:	9302      	str	r3, [sp, #8]
 800b724:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	4623      	mov	r3, r4
 800b732:	f7f8 f87c 	bl	800382e <HAL_HCD_HC_Init>
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 f8bf 	bl	800b8c0 <USBH_Get_USB_Status>
 800b742:	4603      	mov	r3, r0
 800b744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b746:	7bbb      	ldrb	r3, [r7, #14]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd90      	pop	{r4, r7, pc}

0800b750 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	460b      	mov	r3, r1
 800b75a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b76a:	78fa      	ldrb	r2, [r7, #3]
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f7f8 f915 	bl	800399e <HAL_HCD_HC_Halt>
 800b774:	4603      	mov	r3, r0
 800b776:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b778:	7bfb      	ldrb	r3, [r7, #15]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 f8a0 	bl	800b8c0 <USBH_Get_USB_Status>
 800b780:	4603      	mov	r3, r0
 800b782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b784:	7bbb      	ldrb	r3, [r7, #14]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b78e:	b590      	push	{r4, r7, lr}
 800b790:	b089      	sub	sp, #36	@ 0x24
 800b792:	af04      	add	r7, sp, #16
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	4608      	mov	r0, r1
 800b798:	4611      	mov	r1, r2
 800b79a:	461a      	mov	r2, r3
 800b79c:	4603      	mov	r3, r0
 800b79e:	70fb      	strb	r3, [r7, #3]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	70bb      	strb	r3, [r7, #2]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b7b6:	787c      	ldrb	r4, [r7, #1]
 800b7b8:	78ba      	ldrb	r2, [r7, #2]
 800b7ba:	78f9      	ldrb	r1, [r7, #3]
 800b7bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b7c0:	9303      	str	r3, [sp, #12]
 800b7c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b7c4:	9302      	str	r3, [sp, #8]
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	4623      	mov	r3, r4
 800b7d2:	f7f8 f907 	bl	80039e4 <HAL_HCD_HC_SubmitRequest>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 f86f 	bl	800b8c0 <USBH_Get_USB_Status>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd90      	pop	{r4, r7, pc}

0800b7f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b802:	78fa      	ldrb	r2, [r7, #3]
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f7f8 fbe8 	bl	8003fdc <HAL_HCD_HC_GetURBState>
 800b80c:	4603      	mov	r3, r0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	460b      	mov	r3, r1
 800b820:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d103      	bne.n	800b834 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 f872 	bl	800b918 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b834:	20c8      	movs	r0, #200	@ 0xc8
 800b836:	f7f6 fcd3 	bl	80021e0 <HAL_Delay>
  return USBH_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
 800b850:	4613      	mov	r3, r2
 800b852:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b85a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b85c:	78fa      	ldrb	r2, [r7, #3]
 800b85e:	68f9      	ldr	r1, [r7, #12]
 800b860:	4613      	mov	r3, r2
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	440b      	add	r3, r1
 800b86a:	3317      	adds	r3, #23
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00a      	beq.n	800b888 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b872:	78fa      	ldrb	r2, [r7, #3]
 800b874:	68f9      	ldr	r1, [r7, #12]
 800b876:	4613      	mov	r3, r2
 800b878:	011b      	lsls	r3, r3, #4
 800b87a:	1a9b      	subs	r3, r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	440b      	add	r3, r1
 800b880:	333c      	adds	r3, #60	@ 0x3c
 800b882:	78ba      	ldrb	r2, [r7, #2]
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	e009      	b.n	800b89c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b888:	78fa      	ldrb	r2, [r7, #3]
 800b88a:	68f9      	ldr	r1, [r7, #12]
 800b88c:	4613      	mov	r3, r2
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	440b      	add	r3, r1
 800b896:	333d      	adds	r3, #61	@ 0x3d
 800b898:	78ba      	ldrb	r2, [r7, #2]
 800b89a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7f6 fc94 	bl	80021e0 <HAL_Delay>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d817      	bhi.n	800b904 <USBH_Get_USB_Status+0x44>
 800b8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b8dc <USBH_Get_USB_Status+0x1c>)
 800b8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8da:	bf00      	nop
 800b8dc:	0800b8ed 	.word	0x0800b8ed
 800b8e0:	0800b8f3 	.word	0x0800b8f3
 800b8e4:	0800b8f9 	.word	0x0800b8f9
 800b8e8:	0800b8ff 	.word	0x0800b8ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f0:	e00b      	b.n	800b90a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f6:	e008      	b.n	800b90a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b8fc:	e005      	b.n	800b90a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b8fe:	2302      	movs	r3, #2
 800b900:	73fb      	strb	r3, [r7, #15]
    break;
 800b902:	e002      	b.n	800b90a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b904:	2302      	movs	r3, #2
 800b906:	73fb      	strb	r3, [r7, #15]
    break;
 800b908:	bf00      	nop
  }
  return usb_status;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b926:	79fb      	ldrb	r3, [r7, #7]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d102      	bne.n	800b932 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
 800b930:	e001      	b.n	800b936 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b932:	2301      	movs	r3, #1
 800b934:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	461a      	mov	r2, r3
 800b93a:	2101      	movs	r1, #1
 800b93c:	4803      	ldr	r0, [pc, #12]	@ (800b94c <MX_DriverVbusFS+0x34>)
 800b93e:	f7f7 fedd 	bl	80036fc <HAL_GPIO_WritePin>
}
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	40020800 	.word	0x40020800

0800b950 <malloc>:
 800b950:	4b02      	ldr	r3, [pc, #8]	@ (800b95c <malloc+0xc>)
 800b952:	4601      	mov	r1, r0
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	f000 b82d 	b.w	800b9b4 <_malloc_r>
 800b95a:	bf00      	nop
 800b95c:	20000048 	.word	0x20000048

0800b960 <free>:
 800b960:	4b02      	ldr	r3, [pc, #8]	@ (800b96c <free+0xc>)
 800b962:	4601      	mov	r1, r0
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	f000 b8f5 	b.w	800bb54 <_free_r>
 800b96a:	bf00      	nop
 800b96c:	20000048 	.word	0x20000048

0800b970 <sbrk_aligned>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	4e0f      	ldr	r6, [pc, #60]	@ (800b9b0 <sbrk_aligned+0x40>)
 800b974:	460c      	mov	r4, r1
 800b976:	6831      	ldr	r1, [r6, #0]
 800b978:	4605      	mov	r5, r0
 800b97a:	b911      	cbnz	r1, 800b982 <sbrk_aligned+0x12>
 800b97c:	f000 f8ae 	bl	800badc <_sbrk_r>
 800b980:	6030      	str	r0, [r6, #0]
 800b982:	4621      	mov	r1, r4
 800b984:	4628      	mov	r0, r5
 800b986:	f000 f8a9 	bl	800badc <_sbrk_r>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	d103      	bne.n	800b996 <sbrk_aligned+0x26>
 800b98e:	f04f 34ff 	mov.w	r4, #4294967295
 800b992:	4620      	mov	r0, r4
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	1cc4      	adds	r4, r0, #3
 800b998:	f024 0403 	bic.w	r4, r4, #3
 800b99c:	42a0      	cmp	r0, r4
 800b99e:	d0f8      	beq.n	800b992 <sbrk_aligned+0x22>
 800b9a0:	1a21      	subs	r1, r4, r0
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f000 f89a 	bl	800badc <_sbrk_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d1f2      	bne.n	800b992 <sbrk_aligned+0x22>
 800b9ac:	e7ef      	b.n	800b98e <sbrk_aligned+0x1e>
 800b9ae:	bf00      	nop
 800b9b0:	20000c94 	.word	0x20000c94

0800b9b4 <_malloc_r>:
 800b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	1ccd      	adds	r5, r1, #3
 800b9ba:	f025 0503 	bic.w	r5, r5, #3
 800b9be:	3508      	adds	r5, #8
 800b9c0:	2d0c      	cmp	r5, #12
 800b9c2:	bf38      	it	cc
 800b9c4:	250c      	movcc	r5, #12
 800b9c6:	2d00      	cmp	r5, #0
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	db01      	blt.n	800b9d0 <_malloc_r+0x1c>
 800b9cc:	42a9      	cmp	r1, r5
 800b9ce:	d904      	bls.n	800b9da <_malloc_r+0x26>
 800b9d0:	230c      	movs	r3, #12
 800b9d2:	6033      	str	r3, [r6, #0]
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bab0 <_malloc_r+0xfc>
 800b9de:	f000 f869 	bl	800bab4 <__malloc_lock>
 800b9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e6:	461c      	mov	r4, r3
 800b9e8:	bb44      	cbnz	r4, 800ba3c <_malloc_r+0x88>
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff ffbf 	bl	800b970 <sbrk_aligned>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	d158      	bne.n	800baaa <_malloc_r+0xf6>
 800b9f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b9fc:	4627      	mov	r7, r4
 800b9fe:	2f00      	cmp	r7, #0
 800ba00:	d143      	bne.n	800ba8a <_malloc_r+0xd6>
 800ba02:	2c00      	cmp	r4, #0
 800ba04:	d04b      	beq.n	800ba9e <_malloc_r+0xea>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	4639      	mov	r1, r7
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	eb04 0903 	add.w	r9, r4, r3
 800ba10:	f000 f864 	bl	800badc <_sbrk_r>
 800ba14:	4581      	cmp	r9, r0
 800ba16:	d142      	bne.n	800ba9e <_malloc_r+0xea>
 800ba18:	6821      	ldr	r1, [r4, #0]
 800ba1a:	1a6d      	subs	r5, r5, r1
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7ff ffa6 	bl	800b970 <sbrk_aligned>
 800ba24:	3001      	adds	r0, #1
 800ba26:	d03a      	beq.n	800ba9e <_malloc_r+0xea>
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	442b      	add	r3, r5
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	bb62      	cbnz	r2, 800ba90 <_malloc_r+0xdc>
 800ba36:	f8c8 7000 	str.w	r7, [r8]
 800ba3a:	e00f      	b.n	800ba5c <_malloc_r+0xa8>
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	1b52      	subs	r2, r2, r5
 800ba40:	d420      	bmi.n	800ba84 <_malloc_r+0xd0>
 800ba42:	2a0b      	cmp	r2, #11
 800ba44:	d917      	bls.n	800ba76 <_malloc_r+0xc2>
 800ba46:	1961      	adds	r1, r4, r5
 800ba48:	42a3      	cmp	r3, r4
 800ba4a:	6025      	str	r5, [r4, #0]
 800ba4c:	bf18      	it	ne
 800ba4e:	6059      	strne	r1, [r3, #4]
 800ba50:	6863      	ldr	r3, [r4, #4]
 800ba52:	bf08      	it	eq
 800ba54:	f8c8 1000 	streq.w	r1, [r8]
 800ba58:	5162      	str	r2, [r4, r5]
 800ba5a:	604b      	str	r3, [r1, #4]
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f000 f82f 	bl	800bac0 <__malloc_unlock>
 800ba62:	f104 000b 	add.w	r0, r4, #11
 800ba66:	1d23      	adds	r3, r4, #4
 800ba68:	f020 0007 	bic.w	r0, r0, #7
 800ba6c:	1ac2      	subs	r2, r0, r3
 800ba6e:	bf1c      	itt	ne
 800ba70:	1a1b      	subne	r3, r3, r0
 800ba72:	50a3      	strne	r3, [r4, r2]
 800ba74:	e7af      	b.n	800b9d6 <_malloc_r+0x22>
 800ba76:	6862      	ldr	r2, [r4, #4]
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	bf0c      	ite	eq
 800ba7c:	f8c8 2000 	streq.w	r2, [r8]
 800ba80:	605a      	strne	r2, [r3, #4]
 800ba82:	e7eb      	b.n	800ba5c <_malloc_r+0xa8>
 800ba84:	4623      	mov	r3, r4
 800ba86:	6864      	ldr	r4, [r4, #4]
 800ba88:	e7ae      	b.n	800b9e8 <_malloc_r+0x34>
 800ba8a:	463c      	mov	r4, r7
 800ba8c:	687f      	ldr	r7, [r7, #4]
 800ba8e:	e7b6      	b.n	800b9fe <_malloc_r+0x4a>
 800ba90:	461a      	mov	r2, r3
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	d1fb      	bne.n	800ba90 <_malloc_r+0xdc>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	6053      	str	r3, [r2, #4]
 800ba9c:	e7de      	b.n	800ba5c <_malloc_r+0xa8>
 800ba9e:	230c      	movs	r3, #12
 800baa0:	6033      	str	r3, [r6, #0]
 800baa2:	4630      	mov	r0, r6
 800baa4:	f000 f80c 	bl	800bac0 <__malloc_unlock>
 800baa8:	e794      	b.n	800b9d4 <_malloc_r+0x20>
 800baaa:	6005      	str	r5, [r0, #0]
 800baac:	e7d6      	b.n	800ba5c <_malloc_r+0xa8>
 800baae:	bf00      	nop
 800bab0:	20000c98 	.word	0x20000c98

0800bab4 <__malloc_lock>:
 800bab4:	4801      	ldr	r0, [pc, #4]	@ (800babc <__malloc_lock+0x8>)
 800bab6:	f000 b84b 	b.w	800bb50 <__retarget_lock_acquire_recursive>
 800baba:	bf00      	nop
 800babc:	20000dd8 	.word	0x20000dd8

0800bac0 <__malloc_unlock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	@ (800bac8 <__malloc_unlock+0x8>)
 800bac2:	f000 b846 	b.w	800bb52 <__retarget_lock_release_recursive>
 800bac6:	bf00      	nop
 800bac8:	20000dd8 	.word	0x20000dd8

0800bacc <memset>:
 800bacc:	4402      	add	r2, r0
 800bace:	4603      	mov	r3, r0
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d100      	bne.n	800bad6 <memset+0xa>
 800bad4:	4770      	bx	lr
 800bad6:	f803 1b01 	strb.w	r1, [r3], #1
 800bada:	e7f9      	b.n	800bad0 <memset+0x4>

0800badc <_sbrk_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d06      	ldr	r5, [pc, #24]	@ (800baf8 <_sbrk_r+0x1c>)
 800bae0:	2300      	movs	r3, #0
 800bae2:	4604      	mov	r4, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	602b      	str	r3, [r5, #0]
 800bae8:	f7f6 fa96 	bl	8002018 <_sbrk>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_sbrk_r+0x1a>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_sbrk_r+0x1a>
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20000dd4 	.word	0x20000dd4

0800bafc <__errno>:
 800bafc:	4b01      	ldr	r3, [pc, #4]	@ (800bb04 <__errno+0x8>)
 800bafe:	6818      	ldr	r0, [r3, #0]
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20000048 	.word	0x20000048

0800bb08 <__libc_init_array>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	4d0d      	ldr	r5, [pc, #52]	@ (800bb40 <__libc_init_array+0x38>)
 800bb0c:	4c0d      	ldr	r4, [pc, #52]	@ (800bb44 <__libc_init_array+0x3c>)
 800bb0e:	1b64      	subs	r4, r4, r5
 800bb10:	10a4      	asrs	r4, r4, #2
 800bb12:	2600      	movs	r6, #0
 800bb14:	42a6      	cmp	r6, r4
 800bb16:	d109      	bne.n	800bb2c <__libc_init_array+0x24>
 800bb18:	4d0b      	ldr	r5, [pc, #44]	@ (800bb48 <__libc_init_array+0x40>)
 800bb1a:	4c0c      	ldr	r4, [pc, #48]	@ (800bb4c <__libc_init_array+0x44>)
 800bb1c:	f000 f864 	bl	800bbe8 <_init>
 800bb20:	1b64      	subs	r4, r4, r5
 800bb22:	10a4      	asrs	r4, r4, #2
 800bb24:	2600      	movs	r6, #0
 800bb26:	42a6      	cmp	r6, r4
 800bb28:	d105      	bne.n	800bb36 <__libc_init_array+0x2e>
 800bb2a:	bd70      	pop	{r4, r5, r6, pc}
 800bb2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb30:	4798      	blx	r3
 800bb32:	3601      	adds	r6, #1
 800bb34:	e7ee      	b.n	800bb14 <__libc_init_array+0xc>
 800bb36:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb3a:	4798      	blx	r3
 800bb3c:	3601      	adds	r6, #1
 800bb3e:	e7f2      	b.n	800bb26 <__libc_init_array+0x1e>
 800bb40:	0800bc30 	.word	0x0800bc30
 800bb44:	0800bc30 	.word	0x0800bc30
 800bb48:	0800bc30 	.word	0x0800bc30
 800bb4c:	0800bc34 	.word	0x0800bc34

0800bb50 <__retarget_lock_acquire_recursive>:
 800bb50:	4770      	bx	lr

0800bb52 <__retarget_lock_release_recursive>:
 800bb52:	4770      	bx	lr

0800bb54 <_free_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4605      	mov	r5, r0
 800bb58:	2900      	cmp	r1, #0
 800bb5a:	d041      	beq.n	800bbe0 <_free_r+0x8c>
 800bb5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb60:	1f0c      	subs	r4, r1, #4
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	bfb8      	it	lt
 800bb66:	18e4      	addlt	r4, r4, r3
 800bb68:	f7ff ffa4 	bl	800bab4 <__malloc_lock>
 800bb6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bbe4 <_free_r+0x90>)
 800bb6e:	6813      	ldr	r3, [r2, #0]
 800bb70:	b933      	cbnz	r3, 800bb80 <_free_r+0x2c>
 800bb72:	6063      	str	r3, [r4, #4]
 800bb74:	6014      	str	r4, [r2, #0]
 800bb76:	4628      	mov	r0, r5
 800bb78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb7c:	f7ff bfa0 	b.w	800bac0 <__malloc_unlock>
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	d908      	bls.n	800bb96 <_free_r+0x42>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	1821      	adds	r1, r4, r0
 800bb88:	428b      	cmp	r3, r1
 800bb8a:	bf01      	itttt	eq
 800bb8c:	6819      	ldreq	r1, [r3, #0]
 800bb8e:	685b      	ldreq	r3, [r3, #4]
 800bb90:	1809      	addeq	r1, r1, r0
 800bb92:	6021      	streq	r1, [r4, #0]
 800bb94:	e7ed      	b.n	800bb72 <_free_r+0x1e>
 800bb96:	461a      	mov	r2, r3
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	b10b      	cbz	r3, 800bba0 <_free_r+0x4c>
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	d9fa      	bls.n	800bb96 <_free_r+0x42>
 800bba0:	6811      	ldr	r1, [r2, #0]
 800bba2:	1850      	adds	r0, r2, r1
 800bba4:	42a0      	cmp	r0, r4
 800bba6:	d10b      	bne.n	800bbc0 <_free_r+0x6c>
 800bba8:	6820      	ldr	r0, [r4, #0]
 800bbaa:	4401      	add	r1, r0
 800bbac:	1850      	adds	r0, r2, r1
 800bbae:	4283      	cmp	r3, r0
 800bbb0:	6011      	str	r1, [r2, #0]
 800bbb2:	d1e0      	bne.n	800bb76 <_free_r+0x22>
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	6053      	str	r3, [r2, #4]
 800bbba:	4408      	add	r0, r1
 800bbbc:	6010      	str	r0, [r2, #0]
 800bbbe:	e7da      	b.n	800bb76 <_free_r+0x22>
 800bbc0:	d902      	bls.n	800bbc8 <_free_r+0x74>
 800bbc2:	230c      	movs	r3, #12
 800bbc4:	602b      	str	r3, [r5, #0]
 800bbc6:	e7d6      	b.n	800bb76 <_free_r+0x22>
 800bbc8:	6820      	ldr	r0, [r4, #0]
 800bbca:	1821      	adds	r1, r4, r0
 800bbcc:	428b      	cmp	r3, r1
 800bbce:	bf04      	itt	eq
 800bbd0:	6819      	ldreq	r1, [r3, #0]
 800bbd2:	685b      	ldreq	r3, [r3, #4]
 800bbd4:	6063      	str	r3, [r4, #4]
 800bbd6:	bf04      	itt	eq
 800bbd8:	1809      	addeq	r1, r1, r0
 800bbda:	6021      	streq	r1, [r4, #0]
 800bbdc:	6054      	str	r4, [r2, #4]
 800bbde:	e7ca      	b.n	800bb76 <_free_r+0x22>
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000c98 	.word	0x20000c98

0800bbe8 <_init>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr

0800bbf4 <_fini>:
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf6:	bf00      	nop
 800bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfa:	bc08      	pop	{r3}
 800bbfc:	469e      	mov	lr, r3
 800bbfe:	4770      	bx	lr
