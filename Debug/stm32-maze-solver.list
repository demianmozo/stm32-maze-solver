
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b710  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800b898  0800b898  0000c898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8bc  0800b8bc  0000d090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b8bc  0800b8bc  0000c8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8c4  0800b8c4  0000d090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c4  0800b8c4  0000c8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8c8  0800b8c8  0000c8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800b8cc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d090  2**0
                  CONTENTS
 10 .bss          00000d3c  20000090  20000090  0000d090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dcc  20000dcc  0000d090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfdd  00000000  00000000  0000d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b3f  00000000  00000000  0002a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  0002ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c2  00000000  00000000  00030588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bd7  00000000  00000000  0003194a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000235ec  00000000  00000000  00058521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e166b  00000000  00000000  0007bb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d178  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ef8  00000000  00000000  0015d1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001640b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b880 	.word	0x0800b880

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800b880 	.word	0x0800b880

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 8000508:	e005      	b.n	8000516 <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 800050a:	89bb      	ldrh	r3, [r7, #12]
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 8000516:	89bb      	ldrh	r3, [r7, #12]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d8f6      	bhi.n	800050a <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f002 ff35 	bl	8003394 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <antirebote+0x9c>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d109      	bne.n	800054c <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	4916      	ldr	r1, [pc, #88]	@ (8000594 <antirebote+0xa0>)
 800053c:	7aba      	ldrb	r2, [r7, #10]
 800053e:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <antirebote+0x9c>)
 8000544:	2101      	movs	r1, #1
 8000546:	54d1      	strb	r1, [r2, r3]
        return false;
 8000548:	2300      	movs	r3, #0
 800054a:	e01d      	b.n	8000588 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <antirebote+0xa0>)
 8000550:	5cd3      	ldrb	r3, [r2, r3]
 8000552:	7aba      	ldrb	r2, [r7, #10]
 8000554:	429a      	cmp	r2, r3
 8000556:	d016      	beq.n	8000586 <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000558:	2032      	movs	r0, #50	@ 0x32
 800055a:	f001 fcd7 	bl	8001f0c <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f002 ff16 	bl	8003394 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 800056c:	7aba      	ldrb	r2, [r7, #10]
 800056e:	7a7b      	ldrb	r3, [r7, #9]
 8000570:	429a      	cmp	r2, r3
 8000572:	d108      	bne.n	8000586 <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4907      	ldr	r1, [pc, #28]	@ (8000594 <antirebote+0xa0>)
 8000578:	7a7a      	ldrb	r2, [r7, #9]
 800057a:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 800057c:	7a7b      	ldrb	r3, [r7, #9]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <antirebote+0x92>
            {
                pulsado = true;
 8000582:	2301      	movs	r3, #1
 8000584:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000ac 	.word	0x200000ac
 8000594:	200000bc 	.word	0x200000bc

08000598 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80005a2:	f000 f815 	bl	80005d0 <promediar_sensores>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000032c 	.word	0x2000032c

080005b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <HAL_ADC_ConvCpltCallback+0x18>)
 80005be:	f000 f807 	bl	80005d0 <promediar_sensores>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200003f4 	.word	0x200003f4

080005d0 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e012      	b.n	800060c <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4413      	add	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3302      	adds	r3, #2
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3304      	adds	r3, #4
 8000604:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b31      	cmp	r3, #49	@ 0x31
 8000610:	dde9      	ble.n	80005e6 <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <promediar_sensores+0x70>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	091b      	lsrs	r3, r3, #4
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <promediar_sensores+0x74>)
 8000620:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <promediar_sensores+0x70>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <promediar_sensores+0x78>)
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	51eb851f 	.word	0x51eb851f
 8000644:	200000ce 	.word	0x200000ce
 8000648:	200000cc 	.word	0x200000cc

0800064c <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000654:	f001 fc5a 	bl	8001f0c <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065e:	4835      	ldr	r0, [pc, #212]	@ (8000734 <auto_calibracion+0xe8>)
 8000660:	f002 feb0 	bl	80033c4 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 8000664:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000668:	f001 fc50 	bl	8001f0c <HAL_Delay>

    der_cerca = sensor_der_avg;
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <auto_calibracion+0xec>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b32      	ldr	r3, [pc, #200]	@ (800073c <auto_calibracion+0xf0>)
 8000672:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067a:	482e      	ldr	r0, [pc, #184]	@ (8000734 <auto_calibracion+0xe8>)
 800067c:	f002 fea2 	bl	80033c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000686:	482b      	ldr	r0, [pc, #172]	@ (8000734 <auto_calibracion+0xe8>)
 8000688:	f002 fe9c 	bl	80033c4 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 800068c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000690:	f001 fc3c 	bl	8001f0c <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <auto_calibracion+0xf4>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <auto_calibracion+0xf8>)
 800069a:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a2:	4824      	ldr	r0, [pc, #144]	@ (8000734 <auto_calibracion+0xe8>)
 80006a4:	f002 fe8e 	bl	80033c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ae:	4821      	ldr	r0, [pc, #132]	@ (8000734 <auto_calibracion+0xe8>)
 80006b0:	f002 fe88 	bl	80033c4 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 80006b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006b8:	f001 fc28 	bl	8001f0c <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <auto_calibracion+0xf4>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <auto_calibracion+0xfc>)
 80006c2:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <auto_calibracion+0xec>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <auto_calibracion+0x100>)
 80006ca:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <auto_calibracion+0xf8>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <auto_calibracion+0xfc>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <auto_calibracion+0x104>)
 80006e2:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <auto_calibracion+0xf0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <auto_calibracion+0x100>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	0fda      	lsrs	r2, r3, #31
 80006f2:	4413      	add	r3, r2
 80006f4:	105b      	asrs	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <auto_calibracion+0x108>)
 80006fa:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <auto_calibracion+0xe8>)
 8000704:	f002 fe5e 	bl	80033c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <auto_calibracion+0xe8>)
 8000710:	f002 fe58 	bl	80033c4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000718:	f001 fbf8 	bl	8001f0c <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <auto_calibracion+0xe8>)
 8000724:	f002 fe4e 	bl	80033c4 <HAL_GPIO_WritePin>

    calibrado = true;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <auto_calibracion+0x10c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020c00 	.word	0x40020c00
 8000738:	200000ce 	.word	0x200000ce
 800073c:	20000006 	.word	0x20000006
 8000740:	200000cc 	.word	0x200000cc
 8000744:	20000000 	.word	0x20000000
 8000748:	20000002 	.word	0x20000002
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004
 8000754:	2000000a 	.word	0x2000000a
 8000758:	200000d0 	.word	0x200000d0

0800075c <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
    if (!calibrado)
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <controlar_linea_recta+0x60>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d120      	bne.n	80007b2 <controlar_linea_recta+0x56>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca);
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <controlar_linea_recta+0x64>)
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <controlar_linea_recta+0x68>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	bf34      	ite	cc
 800077c:	2301      	movcc	r3, #1
 800077e:	2300      	movcs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca);
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <controlar_linea_recta+0x6c>)
 8000784:	881a      	ldrh	r2, [r3, #0]
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <controlar_linea_recta+0x70>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	bf34      	ite	cc
 800078e:	2301      	movcc	r3, #1
 8000790:	2300      	movcs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <controlar_linea_recta+0x44>
    {
        correccion_derecha();
 800079a:	f000 f9ab 	bl	8000af4 <correccion_derecha>
 800079e:	e009      	b.n	80007b4 <controlar_linea_recta+0x58>
    }
    else if (muy_cerca_der)
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <controlar_linea_recta+0x50>
    {
        correccion_izquierda();
 80007a6:	f000 f979 	bl	8000a9c <correccion_izquierda>
 80007aa:	e003      	b.n	80007b4 <controlar_linea_recta+0x58>
    }
    else
    {
        avanza();
 80007ac:	f000 f8b6 	bl	800091c <avanza>
 80007b0:	e000      	b.n	80007b4 <controlar_linea_recta+0x58>
        return;
 80007b2:	bf00      	nop
    }
}
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000d0 	.word	0x200000d0
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	20000000 	.word	0x20000000
 80007c8:	200000ce 	.word	0x200000ce
 80007cc:	20000006 	.word	0x20000006

080007d0 <activar_modo_sprint>:
extern volatile bool flag_muro_detectado;//flag muro

uint16_t VELOCIDAD_AVANCE = VELOCIDAD_EXPLORACION; // Inicializa en modo lento

void activar_modo_sprint(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    VELOCIDAD_AVANCE = VELOCIDAD_SPRINT;
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <activar_modo_sprint+0x18>)
 80007d6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80007da:	801a      	strh	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	2000000c 	.word	0x2000000c

080007ec <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80007f0:	2108      	movs	r1, #8
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <control_motor_init+0x1c>)
 80007f4:	f006 fc10 	bl	8007018 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 80007f8:	210c      	movs	r1, #12
 80007fa:	4803      	ldr	r0, [pc, #12]	@ (8000808 <control_motor_init+0x1c>)
 80007fc:	f006 fc0c 	bl	8007018 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000800:	f000 f88c 	bl	800091c <avanza>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200002e0 	.word	0x200002e0

0800080c <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <set_motor_izq+0x1c>
 8000822:	2b01      	cmp	r3, #1
 8000824:	d00d      	beq.n	8000842 <set_motor_izq+0x36>
 8000826:	e019      	b.n	800085c <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800082e:	4817      	ldr	r0, [pc, #92]	@ (800088c <set_motor_izq+0x80>)
 8000830:	f002 fdc8 	bl	80033c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	4814      	ldr	r0, [pc, #80]	@ (800088c <set_motor_izq+0x80>)
 800083c:	f002 fdc2 	bl	80033c4 <HAL_GPIO_WritePin>
        break;
 8000840:	e01b      	b.n	800087a <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000848:	4810      	ldr	r0, [pc, #64]	@ (800088c <set_motor_izq+0x80>)
 800084a:	f002 fdbb 	bl	80033c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <set_motor_izq+0x80>)
 8000856:	f002 fdb5 	bl	80033c4 <HAL_GPIO_WritePin>
        break;
 800085a:	e00e      	b.n	800087a <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000862:	480a      	ldr	r0, [pc, #40]	@ (800088c <set_motor_izq+0x80>)
 8000864:	f002 fdae 	bl	80033c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800086e:	4807      	ldr	r0, [pc, #28]	@ (800088c <set_motor_izq+0x80>)
 8000870:	f002 fda8 	bl	80033c4 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000874:	2300      	movs	r3, #0
 8000876:	80bb      	strh	r3, [r7, #4]
        break;
 8000878:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <set_motor_izq+0x84>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	88ba      	ldrh	r2, [r7, #4]
 8000880:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40020400 	.word	0x40020400
 8000890:	200002e0 	.word	0x200002e0

08000894 <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <set_motor_der+0x1c>
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d00d      	beq.n	80008ca <set_motor_der+0x36>
 80008ae:	e019      	b.n	80008e4 <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b6:	4817      	ldr	r0, [pc, #92]	@ (8000914 <set_motor_der+0x80>)
 80008b8:	f002 fd84 	bl	80033c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c2:	4814      	ldr	r0, [pc, #80]	@ (8000914 <set_motor_der+0x80>)
 80008c4:	f002 fd7e 	bl	80033c4 <HAL_GPIO_WritePin>
        break;
 80008c8:	e01b      	b.n	8000902 <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d0:	4810      	ldr	r0, [pc, #64]	@ (8000914 <set_motor_der+0x80>)
 80008d2:	f002 fd77 	bl	80033c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008dc:	480d      	ldr	r0, [pc, #52]	@ (8000914 <set_motor_der+0x80>)
 80008de:	f002 fd71 	bl	80033c4 <HAL_GPIO_WritePin>
        break;
 80008e2:	e00e      	b.n	8000902 <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ea:	480a      	ldr	r0, [pc, #40]	@ (8000914 <set_motor_der+0x80>)
 80008ec:	f002 fd6a 	bl	80033c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <set_motor_der+0x80>)
 80008f8:	f002 fd64 	bl	80033c4 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80008fc:	2300      	movs	r3, #0
 80008fe:	80bb      	strh	r3, [r7, #4]
        break;
 8000900:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <set_motor_der+0x84>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	88ba      	ldrh	r2, [r7, #4]
 8000908:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020400 	.word	0x40020400
 8000918:	200002e0 	.word	0x200002e0

0800091c <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <avanza+0x20>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff ff70 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <avanza+0x20>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ffae 	bl	8000894 <set_motor_der>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000000c 	.word	0x2000000c

08000940 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800094a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff5c 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000954:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff9b 	bl	8000894 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 800095e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000962:	f001 fad3 	bl	8001f0c <HAL_Delay>
    switch (sentido)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d817      	bhi.n	800099c <gira90izq+0x5c>
 800096c:	a201      	add	r2, pc, #4	@ (adr r2, 8000974 <gira90izq+0x34>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000985 	.word	0x08000985
 8000978:	0800098b 	.word	0x0800098b
 800097c:	08000991 	.word	0x08000991
 8000980:	08000997 	.word	0x08000997
    {
    case norte:
        sentido = oeste;
 8000984:	2303      	movs	r3, #3
 8000986:	71fb      	strb	r3, [r7, #7]
        break;
 8000988:	e008      	b.n	800099c <gira90izq+0x5c>

    case este:
        sentido = norte;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
        break;
 800098e:	e005      	b.n	800099c <gira90izq+0x5c>

    case sur:
        sentido = este;
 8000990:	2301      	movs	r3, #1
 8000992:	71fb      	strb	r3, [r7, #7]
        break;
 8000994:	e002      	b.n	800099c <gira90izq+0x5c>

    case oeste:
        sentido = sur;
 8000996:	2302      	movs	r3, #2
 8000998:	71fb      	strb	r3, [r7, #7]
        break;
 800099a:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 800099c:	f7ff ffbe 	bl	800091c <avanza>
    return sentido;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop

080009ac <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 80009b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ff26 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 80009c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff ff65 	bl	8000894 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80009ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ce:	f001 fa9d 	bl	8001f0c <HAL_Delay>
    switch (sentido)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d817      	bhi.n	8000a08 <gira90der+0x5c>
 80009d8:	a201      	add	r2, pc, #4	@ (adr r2, 80009e0 <gira90der+0x34>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	080009f1 	.word	0x080009f1
 80009e4:	080009f7 	.word	0x080009f7
 80009e8:	080009fd 	.word	0x080009fd
 80009ec:	08000a03 	.word	0x08000a03
    {
    case norte:
        sentido = este;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
        break;
 80009f4:	e008      	b.n	8000a08 <gira90der+0x5c>

    case este:
        sentido = sur;
 80009f6:	2302      	movs	r3, #2
 80009f8:	71fb      	strb	r3, [r7, #7]
        break;
 80009fa:	e005      	b.n	8000a08 <gira90der+0x5c>

    case sur:
        sentido = oeste;
 80009fc:	2303      	movs	r3, #3
 80009fe:	71fb      	strb	r3, [r7, #7]
        break;
 8000a00:	e002      	b.n	8000a08 <gira90der+0x5c>

    case oeste:
        sentido = norte;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71fb      	strb	r3, [r7, #7]
        break;
 8000a06:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000a08:	f7ff ff88 	bl	800091c <avanza>
    return sentido;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop

08000a18 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000a22:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fef0 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 8000a2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ff2f 	bl	8000894 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000a36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3a:	f001 fa67 	bl	8001f0c <HAL_Delay>
    switch (sentido)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d817      	bhi.n	8000a74 <gira180+0x5c>
 8000a44:	a201      	add	r2, pc, #4	@ (adr r2, 8000a4c <gira180+0x34>)
 8000a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4a:	bf00      	nop
 8000a4c:	08000a5d 	.word	0x08000a5d
 8000a50:	08000a63 	.word	0x08000a63
 8000a54:	08000a69 	.word	0x08000a69
 8000a58:	08000a6f 	.word	0x08000a6f
    {
    case norte:
        sentido = sur;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	71fb      	strb	r3, [r7, #7]
        break;
 8000a60:	e008      	b.n	8000a74 <gira180+0x5c>

    case este:
        sentido = oeste;
 8000a62:	2303      	movs	r3, #3
 8000a64:	71fb      	strb	r3, [r7, #7]
        break;
 8000a66:	e005      	b.n	8000a74 <gira180+0x5c>

    case sur:
        sentido = norte;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	71fb      	strb	r3, [r7, #7]
        break;
 8000a6c:	e002      	b.n	8000a74 <gira180+0x5c>

    case oeste:
        sentido = este;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
        break;
 8000a72:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000a74:	f7ff ff52 	bl	800091c <avanza>
    return sentido;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop

08000a84 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff febe 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff fefe 	bl	8000894 <set_motor_der>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 80);  // Motor izq más lento
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <correccion_izquierda+0x4c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2250      	movs	r2, #80	@ 0x50
 8000aa8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100); // Motor der normal
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <correccion_izquierda+0x4c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2264      	movs	r2, #100	@ 0x64
 8000ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    for (int i = 0; i < 10; i++) // 10 ciclos de 10 ms = 100 ms de corrección
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	e00f      	b.n	8000ad8 <correccion_izquierda+0x3c>
{
    if (flag_linea_detectada || flag_muro_detectado)
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <correccion_izquierda+0x50>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10e      	bne.n	8000ae0 <correccion_izquierda+0x44>
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <correccion_izquierda+0x54>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d109      	bne.n	8000ae0 <correccion_izquierda+0x44>
        return; // Salir si hay algo urgente

    HAL_Delay(10);
 8000acc:	200a      	movs	r0, #10
 8000ace:	f001 fa1d 	bl	8001f0c <HAL_Delay>
    for (int i = 0; i < 10; i++) // 10 ciclos de 10 ms = 100 ms de corrección
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b09      	cmp	r3, #9
 8000adc:	ddec      	ble.n	8000ab8 <correccion_izquierda+0x1c>
 8000ade:	e000      	b.n	8000ae2 <correccion_izquierda+0x46>
        return; // Salir si hay algo urgente
 8000ae0:	bf00      	nop
}
}
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200002e0 	.word	0x200002e0
 8000aec:	200004bc 	.word	0x200004bc
 8000af0:	200004bd 	.word	0x200004bd

08000af4 <correccion_derecha>:


void correccion_derecha(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100); // Motor izq normal
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <correccion_derecha+0x4c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2264      	movs	r2, #100	@ 0x64
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 80);  // Motor der más lento
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <correccion_derecha+0x4c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2250      	movs	r2, #80	@ 0x50
 8000b08:	639a      	str	r2, [r3, #56]	@ 0x38
    for (int i = 0; i < 10; i++) // 10 ciclos de 10 ms = 100 ms de corrección
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	e00f      	b.n	8000b30 <correccion_derecha+0x3c>
{
    if (flag_linea_detectada || flag_muro_detectado)
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <correccion_derecha+0x50>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10e      	bne.n	8000b38 <correccion_derecha+0x44>
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <correccion_derecha+0x54>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d109      	bne.n	8000b38 <correccion_derecha+0x44>
        return; // Salir si hay algo urgente

    HAL_Delay(10);
 8000b24:	200a      	movs	r0, #10
 8000b26:	f001 f9f1 	bl	8001f0c <HAL_Delay>
    for (int i = 0; i < 10; i++) // 10 ciclos de 10 ms = 100 ms de corrección
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b09      	cmp	r3, #9
 8000b34:	ddec      	ble.n	8000b10 <correccion_derecha+0x1c>
 8000b36:	e000      	b.n	8000b3a <correccion_derecha+0x46>
        return; // Salir si hay algo urgente
 8000b38:	bf00      	nop
}
}
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200002e0 	.word	0x200002e0
 8000b44:	200004bc 	.word	0x200004bc
 8000b48:	200004bd 	.word	0x200004bd

08000b4c <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f996 	bl	8000e94 <laberinto_posicion_valida>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f083 0301 	eor.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000b74:	23ff      	movs	r3, #255	@ 0xff
 8000b76:	e00f      	b.n	8000b98 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	1e59      	subs	r1, r3, #1
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <laberinto_get_peso+0x54>)
 8000b82:	461a      	mov	r2, r3
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	1ad2      	subs	r2, r2, r3
 8000b88:	460b      	mov	r3, r1
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	4403      	add	r3, r0
 8000b94:	3302      	adds	r3, #2
 8000b96:	781b      	ldrb	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000d4 	.word	0x200000d4

08000ba4 <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	71bb      	strb	r3, [r7, #6]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f969 	bl	8000e94 <laberinto_posicion_valida>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d146      	bne.n	8000c5c <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	1e59      	subs	r1, r3, #1
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	7978      	ldrb	r0, [r7, #5]
 8000bd8:	4c22      	ldr	r4, [pc, #136]	@ (8000c64 <laberinto_set_muro+0xc0>)
 8000bda:	461a      	mov	r2, r3
 8000bdc:	00d2      	lsls	r2, r2, #3
 8000bde:	1ad2      	subs	r2, r2, r3
 8000be0:	460b      	mov	r3, r1
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	4423      	add	r3, r4
 8000bec:	4403      	add	r3, r0
 8000bee:	3303      	adds	r3, #3
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	723b      	strb	r3, [r7, #8]
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000bfc:	797b      	ldrb	r3, [r7, #5]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	68b8      	ldr	r0, [r7, #8]
 8000c02:	f000 f90d 	bl	8000e20 <laberinto_get_posicion_adyacente>
 8000c06:	4603      	mov	r3, r0
 8000c08:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000c0a:	7b3b      	ldrb	r3, [r7, #12]
 8000c0c:	7b7a      	ldrb	r2, [r7, #13]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f93f 	bl	8000e94 <laberinto_posicion_valida>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d01c      	beq.n	8000c56 <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000c1c:	797b      	ldrb	r3, [r7, #5]
 8000c1e:	3302      	adds	r3, #2
 8000c20:	425a      	negs	r2, r3
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	f002 0203 	and.w	r2, r2, #3
 8000c2a:	bf58      	it	pl
 8000c2c:	4253      	negpl	r3, r2
 8000c2e:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000c30:	7b3b      	ldrb	r3, [r7, #12]
 8000c32:	1e59      	subs	r1, r3, #1
 8000c34:	7b7b      	ldrb	r3, [r7, #13]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	7bf8      	ldrb	r0, [r7, #15]
 8000c3a:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <laberinto_set_muro+0xc0>)
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	00d2      	lsls	r2, r2, #3
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	460b      	mov	r3, r1
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	1a5b      	subs	r3, r3, r1
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4423      	add	r3, r4
 8000c4e:	4403      	add	r3, r0
 8000c50:	3303      	adds	r3, #3
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000c56:	f000 f807 	bl	8000c68 <laberinto_recalcular_pesos>
 8000c5a:	e000      	b.n	8000c5e <laberinto_set_muro+0xba>
        return;
 8000c5c:	bf00      	nop
}
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	200000d4 	.word	0x200000d4

08000c68 <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000c76:	2314      	movs	r3, #20
 8000c78:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000c7a:	e092      	b.n	8000da2 <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	3301      	adds	r3, #1
 8000c84:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000c86:	2301      	movs	r3, #1
 8000c88:	737b      	strb	r3, [r7, #13]
 8000c8a:	e086      	b.n	8000d9a <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	733b      	strb	r3, [r7, #12]
 8000c90:	e07c      	b.n	8000d8c <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000c92:	7b7b      	ldrb	r3, [r7, #13]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d102      	bne.n	8000c9e <laberinto_recalcular_pesos+0x36>
 8000c98:	7b3b      	ldrb	r3, [r7, #12]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d072      	beq.n	8000d84 <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000c9e:	23ff      	movs	r3, #255	@ 0xff
 8000ca0:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	72bb      	strb	r3, [r7, #10]
 8000ca6:	e03a      	b.n	8000d1e <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000ca8:	7b7b      	ldrb	r3, [r7, #13]
 8000caa:	1e59      	subs	r1, r3, #1
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	7ab8      	ldrb	r0, [r7, #10]
 8000cb2:	4c42      	ldr	r4, [pc, #264]	@ (8000dbc <laberinto_recalcular_pesos+0x154>)
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	00d2      	lsls	r2, r2, #3
 8000cb8:	1ad2      	subs	r2, r2, r3
 8000cba:	460b      	mov	r3, r1
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	1a5b      	subs	r3, r3, r1
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4423      	add	r3, r4
 8000cc6:	4403      	add	r3, r0
 8000cc8:	3303      	adds	r3, #3
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d122      	bne.n	8000d16 <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000cd0:	7b7b      	ldrb	r3, [r7, #13]
 8000cd2:	703b      	strb	r3, [r7, #0]
 8000cd4:	7b3b      	ldrb	r3, [r7, #12]
 8000cd6:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000cd8:	7abb      	ldrb	r3, [r7, #10]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	f000 f89f 	bl	8000e20 <laberinto_get_posicion_adyacente>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000ce6:	793b      	ldrb	r3, [r7, #4]
 8000ce8:	797a      	ldrb	r2, [r7, #5]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f8d1 	bl	8000e94 <laberinto_posicion_valida>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00f      	beq.n	8000d18 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000cf8:	793b      	ldrb	r3, [r7, #4]
 8000cfa:	797a      	ldrb	r2, [r7, #5]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff24 	bl	8000b4c <laberinto_get_peso>
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d203      	bcs.n	8000d18 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	72fb      	strb	r3, [r7, #11]
 8000d14:	e000      	b.n	8000d18 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000d16:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000d18:	7abb      	ldrb	r3, [r7, #10]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	72bb      	strb	r3, [r7, #10]
 8000d1e:	7abb      	ldrb	r3, [r7, #10]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d9c1      	bls.n	8000ca8 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000d24:	7afb      	ldrb	r3, [r7, #11]
 8000d26:	2bff      	cmp	r3, #255	@ 0xff
 8000d28:	d003      	beq.n	8000d32 <laberinto_recalcular_pesos+0xca>
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	e000      	b.n	8000d34 <laberinto_recalcular_pesos+0xcc>
 8000d32:	23ff      	movs	r3, #255	@ 0xff
 8000d34:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	1e59      	subs	r1, r3, #1
 8000d3a:	7b3b      	ldrb	r3, [r7, #12]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	481f      	ldr	r0, [pc, #124]	@ (8000dbc <laberinto_recalcular_pesos+0x154>)
 8000d40:	461a      	mov	r2, r3
 8000d42:	00d2      	lsls	r2, r2, #3
 8000d44:	1ad2      	subs	r2, r2, r3
 8000d46:	460b      	mov	r3, r1
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	1a5b      	subs	r3, r3, r1
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	4403      	add	r3, r0
 8000d52:	3302      	adds	r3, #2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	7a3a      	ldrb	r2, [r7, #8]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d014      	beq.n	8000d86 <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000d5c:	7b7b      	ldrb	r3, [r7, #13]
 8000d5e:	1e59      	subs	r1, r3, #1
 8000d60:	7b3b      	ldrb	r3, [r7, #12]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4815      	ldr	r0, [pc, #84]	@ (8000dbc <laberinto_recalcular_pesos+0x154>)
 8000d66:	461a      	mov	r2, r3
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a5b      	subs	r3, r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	4403      	add	r3, r0
 8000d78:	3302      	adds	r3, #2
 8000d7a:	7a3a      	ldrb	r2, [r7, #8]
 8000d7c:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e000      	b.n	8000d86 <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000d84:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000d86:	7b3b      	ldrb	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	733b      	strb	r3, [r7, #12]
 8000d8c:	7b3b      	ldrb	r3, [r7, #12]
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	f67f af7f 	bls.w	8000c92 <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000d94:	7b7b      	ldrb	r3, [r7, #13]
 8000d96:	3301      	adds	r3, #1
 8000d98:	737b      	strb	r3, [r7, #13]
 8000d9a:	7b7b      	ldrb	r3, [r7, #13]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	f67f af75 	bls.w	8000c8c <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <laberinto_recalcular_pesos+0x14a>
 8000da8:	7bba      	ldrb	r2, [r7, #14]
 8000daa:	7a7b      	ldrb	r3, [r7, #9]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f4ff af65 	bcc.w	8000c7c <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd90      	pop	{r4, r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000d4 	.word	0x200000d4

08000dc0 <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	71bb      	strb	r3, [r7, #6]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f85b 	bl	8000e94 <laberinto_posicion_valida>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f083 0301 	eor.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000dea:	2301      	movs	r3, #1
 8000dec:	e011      	b.n	8000e12 <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	1e59      	subs	r1, r3, #1
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	7978      	ldrb	r0, [r7, #5]
 8000df8:	4c08      	ldr	r4, [pc, #32]	@ (8000e1c <laberinto_hay_muro+0x5c>)
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	00d2      	lsls	r2, r2, #3
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	4423      	add	r3, r4
 8000e0c:	4403      	add	r3, r0
 8000e0e:	3303      	adds	r3, #3
 8000e10:	781b      	ldrb	r3, [r3, #0]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000d4 	.word	0x200000d4

08000e20 <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	80b8      	strh	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d81e      	bhi.n	8000e74 <laberinto_get_posicion_adyacente+0x54>
 8000e36:	a201      	add	r2, pc, #4	@ (adr r2, 8000e3c <laberinto_get_posicion_adyacente+0x1c>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e4d 	.word	0x08000e4d
 8000e40:	08000e57 	.word	0x08000e57
 8000e44:	08000e61 	.word	0x08000e61
 8000e48:	08000e6b 	.word	0x08000e6b
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000e4c:	793b      	ldrb	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	723b      	strb	r3, [r7, #8]
        break;
 8000e54:	e00e      	b.n	8000e74 <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	727b      	strb	r3, [r7, #9]
        break;
 8000e5e:	e009      	b.n	8000e74 <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000e60:	793b      	ldrb	r3, [r7, #4]
 8000e62:	3301      	adds	r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	723b      	strb	r3, [r7, #8]
        break;
 8000e68:	e004      	b.n	8000e74 <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	727b      	strb	r3, [r7, #9]
        break;
 8000e72:	bf00      	nop
    }

    return nueva_pos;
 8000e74:	893b      	ldrh	r3, [r7, #8]
 8000e76:	81bb      	strh	r3, [r7, #12]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	7b3a      	ldrb	r2, [r7, #12]
 8000e7c:	f362 0307 	bfi	r3, r2, #0, #8
 8000e80:	7b7a      	ldrb	r2, [r7, #13]
 8000e82:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d807      	bhi.n	8000ec0 <laberinto_posicion_valida+0x2c>
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d004      	beq.n	8000ec0 <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d801      	bhi.n	8000ec0 <laberinto_posicion_valida+0x2c>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <laberinto_posicion_valida+0x2e>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 ffa6 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f848 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 fa44 	bl	800136c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee4:	f000 fa22 	bl	800132c <MX_DMA_Init>
  MX_I2C1_Init();
 8000ee8:	f000 f90c 	bl	8001104 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000eec:	f000 f938 	bl	8001160 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ef0:	f000 f964 	bl	80011bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ef4:	f00a f86e 	bl	800afd4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000ef8:	f000 f8a4 	bl	8001044 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000efc:	f000 f994 	bl	8001228 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 8000f00:	22c8      	movs	r2, #200	@ 0xc8
 8000f02:	4916      	ldr	r1, [pc, #88]	@ (8000f5c <main+0x88>)
 8000f04:	4816      	ldr	r0, [pc, #88]	@ (8000f60 <main+0x8c>)
 8000f06:	f001 f869 	bl	8001fdc <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8000f0a:	f7ff fb9f 	bl	800064c <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 8000f0e:	f7ff fc6d 	bl	80007ec <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f12:	f00a f885 	bl	800b020 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <main+0x90>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	f083 0301 	eor.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d017      	beq.n	8000f54 <main+0x80>
    {
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

      if (flag_linea_detectada)
 8000f24:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <main+0x94>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <main+0x66>
      {
        flag_linea_detectada = false; // Clear flag PRIMERO
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <main+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
        chequeolinea();               // Ejecutar función completa
 8000f34:	f000 fb78 	bl	8001628 <chequeolinea>
 8000f38:	e00c      	b.n	8000f54 <main+0x80>
      }
      else if (flag_muro_detectado)
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <main+0x98>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <main+0x7c>
      {                              // else if = prioridad a línea
        flag_muro_detectado = false; // Clear flag PRIMERO
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <main+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
        chequeomuro();               // Ejecutar función completa
 8000f4a:	f000 fbb5 	bl	80016b8 <chequeomuro>
 8000f4e:	e001      	b.n	8000f54 <main+0x80>
      }
      else
      {
        // Solo ejecutar control de línea recta si NO hay interrupciones pendientes
        // FALTA HACER: HACER BREAKS DENTRO DE CONTROLAR_LINEA_RECTA PARA VERIFICAR SI HAY MURO O LINEA
        controlar_linea_recta();
 8000f50:	f7ff fc04 	bl	800075c <controlar_linea_recta>
      }
    }

    reset_posicion_pushbutton(); // ⚡ I AM SPEED button
 8000f54:	f000 fbe6 	bl	8001724 <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 8000f58:	e7db      	b.n	8000f12 <main+0x3e>
 8000f5a:	bf00      	nop
 8000f5c:	2000032c 	.word	0x2000032c
 8000f60:	20000144 	.word	0x20000144
 8000f64:	20000329 	.word	0x20000329
 8000f68:	200004bc 	.word	0x200004bc
 8000f6c:	200004bd 	.word	0x200004bd

08000f70 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b094      	sub	sp, #80	@ 0x50
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	2230      	movs	r2, #48	@ 0x30
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00a fbf0 	bl	800b764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	4b28      	ldr	r3, [pc, #160]	@ (800103c <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	4a27      	ldr	r2, [pc, #156]	@ (800103c <SystemClock_Config+0xcc>)
 8000f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <SystemClock_Config+0xcc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <SystemClock_Config+0xd0>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 f916 	bl	8006228 <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001002:	f000 fbb9 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001006:	230f      	movs	r3, #15
 8001008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2302      	movs	r3, #2
 800100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001012:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001016:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2105      	movs	r1, #5
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fb77 	bl	8006718 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001030:	f000 fba2 	bl	8001778 <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	3750      	adds	r7, #80	@ 0x50
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8001056:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001058:	4a28      	ldr	r2, [pc, #160]	@ (80010fc <MX_ADC1_Init+0xb8>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 800105e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800106a:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 800106c:	2201      	movs	r2, #1
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001070:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001072:	2201      	movs	r2, #1
 8001074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <MX_ADC1_Init+0xbc>)
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001092:	2202      	movs	r2, #2
 8001094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800109e:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 80010a6:	f000 ff55 	bl	8001f54 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 fb62 	bl	8001778 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 80010b4:	2308      	movs	r3, #8
 80010b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80010bc:	2305      	movs	r3, #5
 80010be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 80010c6:	f001 f8a7 	bl	8002218 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010d0:	f000 fb52 	bl	8001778 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80010d4:	2309      	movs	r3, #9
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC1_Init+0xb4>)
 80010e2:	f001 f899 	bl	8002218 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010ec:	f000 fb44 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000144 	.word	0x20000144
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_I2C1_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <MX_I2C1_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	@ (800115c <MX_I2C1_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001122:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001142:	f004 fa8d 	bl	8005660 <HAL_I2C_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 fb14 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001ec 	.word	0x200001ec
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_I2S3_Init+0x54>)
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <MX_I2S3_Init+0x58>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2S3_Init+0x54>)
 800116c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001170:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_I2S3_Init+0x54>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_I2S3_Init+0x54>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <MX_I2S3_Init+0x54>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_I2S3_Init+0x54>)
 8001186:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800118a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_I2S3_Init+0x54>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_I2S3_Init+0x54>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_I2S3_Init+0x54>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_I2S3_Init+0x54>)
 80011a0:	f004 fba2 	bl	80058e8 <HAL_I2S_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011aa:	f000 fae5 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000240 	.word	0x20000240
 80011b8:	40003c00 	.word	0x40003c00

080011bc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	@ (8001224 <MX_SPI1_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_SPI1_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_SPI1_Init+0x64>)
 800120e:	f005 fdd1 	bl	8006db4 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001218:	f000 faae 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000288 	.word	0x20000288
 8001224:	40013000 	.word	0x40013000

08001228 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	@ 0x38
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001258:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <MX_TIM3_Init+0xfc>)
 800125a:	4a33      	ldr	r2, [pc, #204]	@ (8001328 <MX_TIM3_Init+0x100>)
 800125c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800125e:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <MX_TIM3_Init+0xfc>)
 8001260:	2253      	movs	r2, #83	@ 0x53
 8001262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b2f      	ldr	r3, [pc, #188]	@ (8001324 <MX_TIM3_Init+0xfc>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800126a:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <MX_TIM3_Init+0xfc>)
 800126c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <MX_TIM3_Init+0xfc>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <MX_TIM3_Init+0xfc>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800127e:	4829      	ldr	r0, [pc, #164]	@ (8001324 <MX_TIM3_Init+0xfc>)
 8001280:	f005 fe21 	bl	8006ec6 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800128a:	f000 fa75 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001294:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001298:	4619      	mov	r1, r3
 800129a:	4822      	ldr	r0, [pc, #136]	@ (8001324 <MX_TIM3_Init+0xfc>)
 800129c:	f006 f846 	bl	800732c <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012a6:	f000 fa67 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012aa:	481e      	ldr	r0, [pc, #120]	@ (8001324 <MX_TIM3_Init+0xfc>)
 80012ac:	f005 fe5a 	bl	8006f64 <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012b6:	f000 fa5f 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	4619      	mov	r1, r3
 80012c8:	4816      	ldr	r0, [pc, #88]	@ (8001324 <MX_TIM3_Init+0xfc>)
 80012ca:	f006 fc0d 	bl	8007ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012d4:	f000 fa50 	bl	8001778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	@ 0x60
 80012da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2208      	movs	r2, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_TIM3_Init+0xfc>)
 80012f0:	f005 ff5a 	bl	80071a8 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012fa:	f000 fa3d 	bl	8001778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	220c      	movs	r2, #12
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <MX_TIM3_Init+0xfc>)
 8001306:	f005 ff4f 	bl	80071a8 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001310:	f000 fa32 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <MX_TIM3_Init+0xfc>)
 8001316:	f000 fc97 	bl	8001c48 <HAL_TIM_MspPostInit>
}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	@ 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200002e0 	.word	0x200002e0
 8001328:	40000400 	.word	0x40000400

0800132c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_DMA_Init+0x3c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <MX_DMA_Init+0x3c>)
 800133c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_DMA_Init+0x3c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2038      	movs	r0, #56	@ 0x38
 8001354:	f001 fadb 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001358:	2038      	movs	r0, #56	@ 0x38
 800135a:	f001 faf4 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	@ 0x30
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	4b86      	ldr	r3, [pc, #536]	@ (80015a0 <MX_GPIO_Init+0x234>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a85      	ldr	r2, [pc, #532]	@ (80015a0 <MX_GPIO_Init+0x234>)
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b83      	ldr	r3, [pc, #524]	@ (80015a0 <MX_GPIO_Init+0x234>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	4b7f      	ldr	r3, [pc, #508]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a7e      	ldr	r2, [pc, #504]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b7c      	ldr	r3, [pc, #496]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b78      	ldr	r3, [pc, #480]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a77      	ldr	r2, [pc, #476]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b75      	ldr	r3, [pc, #468]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b71      	ldr	r3, [pc, #452]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a70      	ldr	r2, [pc, #448]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b6e      	ldr	r3, [pc, #440]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b6a      	ldr	r3, [pc, #424]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a69      	ldr	r2, [pc, #420]	@ (80015a0 <MX_GPIO_Init+0x234>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b67      	ldr	r3, [pc, #412]	@ (80015a0 <MX_GPIO_Init+0x234>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <MX_GPIO_Init+0x234>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a62      	ldr	r2, [pc, #392]	@ (80015a0 <MX_GPIO_Init+0x234>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b60      	ldr	r3, [pc, #384]	@ (80015a0 <MX_GPIO_Init+0x234>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2108      	movs	r1, #8
 800142e:	485d      	ldr	r0, [pc, #372]	@ (80015a4 <MX_GPIO_Init+0x238>)
 8001430:	f001 ffc8 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2101      	movs	r1, #1
 8001438:	485b      	ldr	r0, [pc, #364]	@ (80015a8 <MX_GPIO_Init+0x23c>)
 800143a:	f001 ffc3 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001444:	4859      	ldr	r0, [pc, #356]	@ (80015ac <MX_GPIO_Init+0x240>)
 8001446:	f001 ffbd 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001450:	4857      	ldr	r0, [pc, #348]	@ (80015b0 <MX_GPIO_Init+0x244>)
 8001452:	f001 ffb7 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001456:	2308      	movs	r3, #8
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	484d      	ldr	r0, [pc, #308]	@ (80015a4 <MX_GPIO_Init+0x238>)
 800146e:	f001 fdf5 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4847      	ldr	r0, [pc, #284]	@ (80015a8 <MX_GPIO_Init+0x23c>)
 800148a:	f001 fde7 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800148e:	2308      	movs	r3, #8
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149e:	2305      	movs	r3, #5
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	483f      	ldr	r0, [pc, #252]	@ (80015a8 <MX_GPIO_Init+0x23c>)
 80014aa:	f001 fdd7 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	483c      	ldr	r0, [pc, #240]	@ (80015b4 <MX_GPIO_Init+0x248>)
 80014c2:	f001 fdcb 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014c6:	2304      	movs	r3, #4
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4834      	ldr	r0, [pc, #208]	@ (80015ac <MX_GPIO_Init+0x240>)
 80014da:	f001 fdbf 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f0:	2305      	movs	r3, #5
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	482c      	ldr	r0, [pc, #176]	@ (80015ac <MX_GPIO_Init+0x240>)
 80014fc:	f001 fdae 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8001500:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4824      	ldr	r0, [pc, #144]	@ (80015ac <MX_GPIO_Init+0x240>)
 800151a:	f001 fd9f 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800151e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	481e      	ldr	r0, [pc, #120]	@ (80015b0 <MX_GPIO_Init+0x244>)
 8001538:	f001 fd90 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 800153c:	23c0      	movs	r3, #192	@ 0xc0
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001540:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <MX_GPIO_Init+0x23c>)
 8001552:	f001 fd83 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001556:	2320      	movs	r3, #32
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <MX_GPIO_Init+0x244>)
 800156a:	f001 fd77 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800156e:	2302      	movs	r3, #2
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001572:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <MX_GPIO_Init+0x238>)
 8001584:	f001 fd6a 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001588:	2200      	movs	r2, #0
 800158a:	2101      	movs	r1, #1
 800158c:	2017      	movs	r0, #23
 800158e:	f001 f9be 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001592:	2017      	movs	r0, #23
 8001594:	f001 f9d7 	bl	8002946 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3730      	adds	r7, #48	@ 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020c00 	.word	0x40020c00
 80015b4:	40020000 	.word	0x40020000

080015b8 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	4613      	mov	r3, r2
 80015c4:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d827      	bhi.n	800161c <actualizar_posicion+0x64>
 80015cc:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <actualizar_posicion+0x1c>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	080015e5 	.word	0x080015e5
 80015d8:	080015f3 	.word	0x080015f3
 80015dc:	08001601 	.word	0x08001601
 80015e0:	0800160f 	.word	0x0800160f
  {
  case norte:
    (*fila)--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	701a      	strb	r2, [r3, #0]
    break;
 80015f0:	e014      	b.n	800161c <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	701a      	strb	r2, [r3, #0]
    break;
 80015fe:	e00d      	b.n	800161c <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	701a      	strb	r2, [r3, #0]
    break;
 800160c:	e006      	b.n	800161c <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3b01      	subs	r3, #1
 8001614:	b2da      	uxtb	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	701a      	strb	r2, [r3, #0]
    break;
 800161a:	bf00      	nop
  }
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  if (antirebote(LineSensor_GPIO_Port, LineSensor_Pin))
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	481b      	ldr	r0, [pc, #108]	@ (80016a0 <chequeolinea+0x78>)
 8001632:	f7fe ff5f 	bl	80004f4 <antirebote>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d02e      	beq.n	800169a <chequeolinea+0x72>
  {
    // RETARDO DE UNOS MS
    HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <chequeolinea+0x7c>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fc63 	bl	8001f0c <HAL_Delay>

    // Actualizar posición
    actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <chequeolinea+0x80>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4917      	ldr	r1, [pc, #92]	@ (80016ac <chequeolinea+0x84>)
 800164e:	4818      	ldr	r0, [pc, #96]	@ (80016b0 <chequeolinea+0x88>)
 8001650:	f7ff ffb2 	bl	80015b8 <actualizar_posicion>

    // terminó?
    if (fila_actual == 1 && columna_actual == 1)
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <chequeolinea+0x88>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d109      	bne.n	8001670 <chequeolinea+0x48>
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <chequeolinea+0x84>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <chequeolinea+0x48>
    {
      termino();
 8001664:	f7ff fa0e 	bl	8000a84 <termino>
      terminado = true;
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <chequeolinea+0x8c>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
      return;
 800166e:	e014      	b.n	800169a <chequeolinea+0x72>
    }

    // Calcular y ejecutar
    brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <chequeolinea+0x88>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <chequeolinea+0x84>)
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f882 	bl	8001784 <calcular_mejor_direccion>
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
    sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <chequeolinea+0x80>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f8c7 	bl	8001820 <ejecutar_movimiento>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <chequeolinea+0x80>)
 8001698:	701a      	strb	r2, [r3, #0]
  }
}
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020800 	.word	0x40020800
 80016a4:	20000010 	.word	0x20000010
 80016a8:	20000328 	.word	0x20000328
 80016ac:	2000000f 	.word	0x2000000f
 80016b0:	2000000e 	.word	0x2000000e
 80016b4:	20000329 	.word	0x20000329

080016b8 <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  if (antirebote(WallSensor_GPIO_Port, WallSensor_Pin))
 80016be:	2140      	movs	r1, #64	@ 0x40
 80016c0:	4814      	ldr	r0, [pc, #80]	@ (8001714 <chequeomuro+0x5c>)
 80016c2:	f7fe ff17 	bl	80004f4 <antirebote>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01f      	beq.n	800170c <chequeomuro+0x54>
  {

    // 1. Registrar el muro detectado
    laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <chequeomuro+0x60>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4a12      	ldr	r2, [pc, #72]	@ (800171c <chequeomuro+0x64>)
 80016d2:	7811      	ldrb	r1, [r2, #0]
 80016d4:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <chequeomuro+0x68>)
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fa63 	bl	8000ba4 <laberinto_set_muro>

    // 2. Recalcular todos los pesos con el nuevo muro
    laberinto_recalcular_pesos();
 80016de:	f7ff fac3 	bl	8000c68 <laberinto_recalcular_pesos>

    // 3. Calcular nueva mejor dirección
    brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <chequeomuro+0x60>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <chequeomuro+0x64>)
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f849 	bl	8001784 <calcular_mejor_direccion>
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]

    // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
    sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <chequeomuro+0x68>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	79fa      	ldrb	r2, [r7, #7]
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f88e 	bl	8001820 <ejecutar_movimiento>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <chequeomuro+0x68>)
 800170a:	701a      	strb	r2, [r3, #0]
  }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40020800 	.word	0x40020800
 8001718:	2000000e 	.word	0x2000000e
 800171c:	2000000f 	.word	0x2000000f
 8001720:	20000328 	.word	0x20000328

08001724 <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001728:	2101      	movs	r1, #1
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <reset_posicion_pushbutton+0x3c>)
 800172c:	f7fe fee2 	bl	80004f4 <antirebote>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d011      	beq.n	800175a <reset_posicion_pushbutton+0x36>
  {

    // Resetear posición
    fila_actual = 4;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <reset_posicion_pushbutton+0x40>)
 8001738:	2204      	movs	r2, #4
 800173a:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 800173c:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <reset_posicion_pushbutton+0x44>)
 800173e:	2204      	movs	r2, #4
 8001740:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <reset_posicion_pushbutton+0x48>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
    terminado = false;
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <reset_posicion_pushbutton+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 800174e:	f7ff f83f 	bl	80007d0 <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <reset_posicion_pushbutton+0x50>)
 8001754:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001758:	801a      	strh	r2, [r3, #0]
  }
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40020000 	.word	0x40020000
 8001764:	2000000e 	.word	0x2000000e
 8001768:	2000000f 	.word	0x2000000f
 800176c:	20000328 	.word	0x20000328
 8001770:	20000329 	.word	0x20000329
 8001774:	20000010 	.word	0x20000010

08001778 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <Error_Handler+0x8>

08001784 <calcular_mejor_direccion>:
 */

 #include "navegacion.h"

 brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) //nos devuelve direccion en TIPO BRUJULA gracias colo
 {
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	71bb      	strb	r3, [r7, #6]
     uint8_t peso_minimo = PESO_MAXIMO;
 8001794:	23ff      	movs	r3, #255	@ 0xff
 8001796:	75fb      	strb	r3, [r7, #23]
     brujula mejor_direccion = norte; // Dirección por defecto
 8001798:	2300      	movs	r3, #0
 800179a:	75bb      	strb	r3, [r7, #22]
     
     // Evaluar las 4 direcciones posibles
     for (brujula direccion = norte; direccion <= oeste; direccion++) {
 800179c:	2300      	movs	r3, #0
 800179e:	757b      	strb	r3, [r7, #21]
 80017a0:	e036      	b.n	8001810 <calcular_mejor_direccion+0x8c>
         
         // 1. ¿Hay muro en esta dirección?
         if (laberinto_hay_muro(fila_actual, columna_actual, direccion)) {
 80017a2:	7d7a      	ldrb	r2, [r7, #21]
 80017a4:	79b9      	ldrb	r1, [r7, #6]
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fb09 	bl	8000dc0 <laberinto_hay_muro>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d127      	bne.n	8001804 <calcular_mejor_direccion+0x80>
             continue; // Saltar si hay muro
         }
         
         // 2. Obtener posición adyacente
         posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
             (posicion_t){fila_actual, columna_actual}, direccion);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	733b      	strb	r3, [r7, #12]
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	737b      	strb	r3, [r7, #13]
         posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 80017bc:	7d7b      	ldrb	r3, [r7, #21]
 80017be:	4619      	mov	r1, r3
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fb2d 	bl	8000e20 <laberinto_get_posicion_adyacente>
 80017c6:	4603      	mov	r3, r0
 80017c8:	823b      	strh	r3, [r7, #16]
         
         // 3. ¿Es válida? (no salirse del laberinto)
         if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna)) {
 80017ca:	7c3b      	ldrb	r3, [r7, #16]
 80017cc:	7c7a      	ldrb	r2, [r7, #17]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fb5f 	bl	8000e94 <laberinto_posicion_valida>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d112      	bne.n	8001808 <calcular_mejor_direccion+0x84>
             continue; // Saltar si está fuera del laberinto
         }
         
         // 4. Obtener peso de la casilla adyacente
         uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 80017e2:	7c3b      	ldrb	r3, [r7, #16]
 80017e4:	7c7a      	ldrb	r2, [r7, #17]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff f9af 	bl	8000b4c <laberinto_get_peso>
 80017ee:	4603      	mov	r3, r0
 80017f0:	753b      	strb	r3, [r7, #20]
         
         // 5. ¿Es el mejor peso hasta ahora?
         if (peso_adyacente < peso_minimo) {
 80017f2:	7d3a      	ldrb	r2, [r7, #20]
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d207      	bcs.n	800180a <calcular_mejor_direccion+0x86>
             peso_minimo = peso_adyacente;
 80017fa:	7d3b      	ldrb	r3, [r7, #20]
 80017fc:	75fb      	strb	r3, [r7, #23]
             mejor_direccion = direccion;
 80017fe:	7d7b      	ldrb	r3, [r7, #21]
 8001800:	75bb      	strb	r3, [r7, #22]
 8001802:	e002      	b.n	800180a <calcular_mejor_direccion+0x86>
             continue; // Saltar si hay muro
 8001804:	bf00      	nop
 8001806:	e000      	b.n	800180a <calcular_mejor_direccion+0x86>
             continue; // Saltar si está fuera del laberinto
 8001808:	bf00      	nop
     for (brujula direccion = norte; direccion <= oeste; direccion++) {
 800180a:	7d7b      	ldrb	r3, [r7, #21]
 800180c:	3301      	adds	r3, #1
 800180e:	757b      	strb	r3, [r7, #21]
 8001810:	7d7b      	ldrb	r3, [r7, #21]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9c5      	bls.n	80017a2 <calcular_mejor_direccion+0x1e>
         }
     }
     
     return mejor_direccion;
 8001816:	7dbb      	ldrb	r3, [r7, #22]
 }
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <ejecutar_movimiento>:

 brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
 {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]
     // ¿Ya está orientado correctamente?
     if (sentido_actual == sentido_deseado)
 8001830:	79fa      	ldrb	r2, [r7, #7]
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	429a      	cmp	r2, r3
 8001836:	d103      	bne.n	8001840 <ejecutar_movimiento+0x20>
     {
         avanza(); // Solo avanzar
 8001838:	f7ff f870 	bl	800091c <avanza>
         return sentido_actual;
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	e02d      	b.n	800189c <ejecutar_movimiento+0x7c>
     }

     // Calcular diferencia usando aritmética xq es un tipo brujula
     // norte=0, este=1, sur=2, oeste=3
     int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	3304      	adds	r3, #4
 8001848:	425a      	negs	r2, r3
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	bf58      	it	pl
 8001854:	4253      	negpl	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

     switch (diferencia)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d015      	beq.n	800188a <ejecutar_movimiento+0x6a>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b03      	cmp	r3, #3
 8001862:	dc18      	bgt.n	8001896 <ejecutar_movimiento+0x76>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d003      	beq.n	8001872 <ejecutar_movimiento+0x52>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d006      	beq.n	800187e <ejecutar_movimiento+0x5e>
 8001870:	e011      	b.n	8001896 <ejecutar_movimiento+0x76>
     {
     case 1: // Girar 90° a la derecha
         return gira90der(sentido_actual);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f899 	bl	80009ac <gira90der>
 800187a:	4603      	mov	r3, r0
 800187c:	e00e      	b.n	800189c <ejecutar_movimiento+0x7c>

     case 2: // Girar 180° (media vuelta)
         return gira180(sentido_actual);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f8c9 	bl	8000a18 <gira180>
 8001886:	4603      	mov	r3, r0
 8001888:	e008      	b.n	800189c <ejecutar_movimiento+0x7c>

     case 3: // Girar 90° a la izquierda
         return gira90izq(sentido_actual);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f857 	bl	8000940 <gira90izq>
 8001892:	4603      	mov	r3, r0
 8001894:	e002      	b.n	800189c <ejecutar_movimiento+0x7c>

     default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
         avanza();
 8001896:	f7ff f841 	bl	800091c <avanza>
         return sentido_actual;
 800189a:	79fb      	ldrb	r3, [r7, #7]
     }
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018e2:	2007      	movs	r0, #7
 80018e4:	f001 f808 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2f      	ldr	r2, [pc, #188]	@ (80019d0 <HAL_ADC_MspInit+0xdc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d157      	bne.n	80019c6 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <HAL_ADC_MspInit+0xe0>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	4a2d      	ldr	r2, [pc, #180]	@ (80019d4 <HAL_ADC_MspInit+0xe0>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001924:	6453      	str	r3, [r2, #68]	@ 0x44
 8001926:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_ADC_MspInit+0xe0>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_ADC_MspInit+0xe0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a26      	ldr	r2, [pc, #152]	@ (80019d4 <HAL_ADC_MspInit+0xe0>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <HAL_ADC_MspInit+0xe0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 800194e:	2303      	movs	r3, #3
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001952:	2303      	movs	r3, #3
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	481d      	ldr	r0, [pc, #116]	@ (80019d8 <HAL_ADC_MspInit+0xe4>)
 8001962:	f001 fb7b 	bl	800305c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 8001968:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <HAL_ADC_MspInit+0xec>)
 800196a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 8001980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001984:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 8001988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800198c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 8001990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001994:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 8001998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019aa:	480c      	ldr	r0, [pc, #48]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 80019ac:	f000 ffe6 	bl	800297c <HAL_DMA_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80019b6:	f7ff fedf 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 80019be:	639a      	str	r2, [r3, #56]	@ 0x38
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <HAL_ADC_MspInit+0xe8>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40012000 	.word	0x40012000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020400 	.word	0x40020400
 80019dc:	2000018c 	.word	0x2000018c
 80019e0:	40026410 	.word	0x40026410

080019e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_I2C_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12c      	bne.n	8001a60 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a17      	ldr	r2, [pc, #92]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a28:	2312      	movs	r3, #18
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a34:	2304      	movs	r3, #4
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <HAL_I2C_MspInit+0x8c>)
 8001a40:	f001 fb0c 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	@ 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	@ 0x38
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a31      	ldr	r2, [pc, #196]	@ (8001b64 <HAL_I2S_MspInit+0xf0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d15a      	bne.n	8001b5a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001aa8:	23c0      	movs	r3, #192	@ 0xc0
 8001aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 f83b 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ac0:	f7ff fe5a 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	4a26      	ldr	r2, [pc, #152]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <HAL_I2S_MspInit+0xf4>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b18:	2310      	movs	r3, #16
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b28:	2306      	movs	r3, #6
 8001b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b30:	4619      	mov	r1, r3
 8001b32:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <HAL_I2S_MspInit+0xf8>)
 8001b34:	f001 fa92 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b52:	4619      	mov	r1, r3
 8001b54:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <HAL_I2S_MspInit+0xfc>)
 8001b56:	f001 fa81 	bl	800305c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3738      	adds	r7, #56	@ 0x38
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40003c00 	.word	0x40003c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020800 	.word	0x40020800

08001b74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	@ (8001bf8 <HAL_SPI_MspInit+0x84>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d12b      	bne.n	8001bee <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a10      	ldr	r2, [pc, #64]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001bce:	23e0      	movs	r3, #224	@ 0xe0
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bde:	2305      	movs	r3, #5
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <HAL_SPI_MspInit+0x8c>)
 8001bea:	f001 fa37 	bl	800305c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40013000 	.word	0x40013000
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000

08001c04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_TIM_Base_MspInit+0x3c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10d      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_TIM_Base_MspInit+0x40>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <HAL_TIM_Base_MspInit+0x40>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <HAL_TIM_Base_MspInit+0x40>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <HAL_TIM_MspPostInit+0x68>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d11e      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_TIM_MspPostInit+0x6c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a10      	ldr	r2, [pc, #64]	@ (8001cb4 <HAL_TIM_MspPostInit+0x6c>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <HAL_TIM_MspPostInit+0x6c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001c86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <HAL_TIM_MspPostInit+0x70>)
 8001ca4:	f001 f9da 	bl	800305c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020800 	.word	0x40020800

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d12:	f000 f8db 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <DMA2_Stream0_IRQHandler+0x10>)
 8001d22:	f000 ff31 	bl	8002b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000018c 	.word	0x2000018c

08001d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <OTG_FS_IRQHandler+0x10>)
 8001d36:	f001 fe3f 	bl	80039b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200008a4 	.word	0x200008a4

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f009 fd0e 	bl	800b794 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20020000 	.word	0x20020000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	200004c0 	.word	0x200004c0
 8001dac:	20000dd0 	.word	0x20000dd0

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dd8:	f7ff ffea 	bl	8001db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f009 fccd 	bl	800b7a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff f865 	bl	8000ed4 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001e18:	0800b8cc 	.word	0x0800b8cc
  ldr r2, =_sbss
 8001e1c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001e20:	20000dcc 	.word	0x20000dcc

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 fd51 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fd22 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fd69 	bl	8002962 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 fd31 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	2000001c 	.word	0x2000001c
 8001ec8:	20000018 	.word	0x20000018

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000001c 	.word	0x2000001c
 8001ef0:	200004c4 	.word	0x200004c4

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200004c4 	.word	0x200004c4

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000001c 	.word	0x2000001c

08001f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e033      	b.n	8001fd2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fcbe 	bl	80018f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f9a:	f023 0302 	bic.w	r3, r3, #2
 8001f9e:	f043 0202 	orr.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fa58 	bl	800245c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fc2:	e001      	b.n	8001fc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Start_DMA+0x22>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0eb      	b.n	80021d6 <HAL_ADC_Start_DMA+0x1fa>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d018      	beq.n	8002046 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002024:	4b6e      	ldr	r3, [pc, #440]	@ (80021e0 <HAL_ADC_Start_DMA+0x204>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6e      	ldr	r2, [pc, #440]	@ (80021e4 <HAL_ADC_Start_DMA+0x208>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9a      	lsrs	r2, r3, #18
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3b01      	subs	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002054:	d107      	bne.n	8002066 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002064:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 80a3 	bne.w	80021bc <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020b4:	d106      	bne.n	80020c4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f023 0206 	bic.w	r2, r3, #6
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80020c2:	e002      	b.n	80020ca <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d2:	4b45      	ldr	r3, [pc, #276]	@ (80021e8 <HAL_ADC_Start_DMA+0x20c>)
 80020d4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020da:	4a44      	ldr	r2, [pc, #272]	@ (80021ec <HAL_ADC_Start_DMA+0x210>)
 80020dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e2:	4a43      	ldr	r2, [pc, #268]	@ (80021f0 <HAL_ADC_Start_DMA+0x214>)
 80020e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ea:	4a42      	ldr	r2, [pc, #264]	@ (80021f4 <HAL_ADC_Start_DMA+0x218>)
 80020ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80020f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002106:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002116:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	334c      	adds	r3, #76	@ 0x4c
 8002122:	4619      	mov	r1, r3
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f000 fcd6 	bl	8002ad8 <HAL_DMA_Start_IT>
 800212c:	4603      	mov	r3, r0
 800212e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2b00      	cmp	r3, #0
 800213a:	d12a      	bne.n	8002192 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2d      	ldr	r2, [pc, #180]	@ (80021f8 <HAL_ADC_Start_DMA+0x21c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d015      	beq.n	8002172 <HAL_ADC_Start_DMA+0x196>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2c      	ldr	r2, [pc, #176]	@ (80021fc <HAL_ADC_Start_DMA+0x220>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d105      	bne.n	800215c <HAL_ADC_Start_DMA+0x180>
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_ADC_Start_DMA+0x20c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <HAL_ADC_Start_DMA+0x224>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d136      	bne.n	80021d4 <HAL_ADC_Start_DMA+0x1f8>
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <HAL_ADC_Start_DMA+0x20c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d130      	bne.n	80021d4 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d129      	bne.n	80021d4 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	e020      	b.n	80021d4 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <HAL_ADC_Start_DMA+0x21c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d11b      	bne.n	80021d4 <HAL_ADC_Start_DMA+0x1f8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d114      	bne.n	80021d4 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	e00b      	b.n	80021d4 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0210 	orr.w	r2, r3, #16
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000014 	.word	0x20000014
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	40012300 	.word	0x40012300
 80021ec:	08002655 	.word	0x08002655
 80021f0:	0800270f 	.word	0x0800270f
 80021f4:	0800272b 	.word	0x0800272b
 80021f8:	40012000 	.word	0x40012000
 80021fc:	40012100 	.word	0x40012100
 8002200:	40012200 	.word	0x40012200

08002204 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e105      	b.n	8002440 <HAL_ADC_ConfigChannel+0x228>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d925      	bls.n	8002290 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	3b1e      	subs	r3, #30
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	4603      	mov	r3, r0
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4403      	add	r3, r0
 8002282:	3b1e      	subs	r3, #30
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	e022      	b.n	80022d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	2207      	movs	r2, #7
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d824      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b05      	subs	r3, #5
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b05      	subs	r3, #5
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	@ 0x34
 8002326:	e04c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d824      	bhi.n	800237a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b23      	subs	r3, #35	@ 0x23
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	@ 0x23
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	631a      	str	r2, [r3, #48]	@ 0x30
 8002378:	e023      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b41      	subs	r3, #65	@ 0x41
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b41      	subs	r3, #65	@ 0x41
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b22      	ldr	r3, [pc, #136]	@ (800244c <HAL_ADC_ConfigChannel+0x234>)
 80023c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_ADC_ConfigChannel+0x238>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1cc>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	@ (8002450 <HAL_ADC_ConfigChannel+0x238>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d123      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d003      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x1e6>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b11      	cmp	r3, #17
 80023fc:	d11b      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b10      	cmp	r3, #16
 8002410:	d111      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <HAL_ADC_ConfigChannel+0x23c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a10      	ldr	r2, [pc, #64]	@ (8002458 <HAL_ADC_ConfigChannel+0x240>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0c9a      	lsrs	r2, r3, #18
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002428:	e002      	b.n	8002430 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3b01      	subs	r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f9      	bne.n	800242a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40012300 	.word	0x40012300
 8002450:	40012000 	.word	0x40012000
 8002454:	20000014 	.word	0x20000014
 8002458:	431bde83 	.word	0x431bde83

0800245c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002464:	4b79      	ldr	r3, [pc, #484]	@ (800264c <ADC_Init+0x1f0>)
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	021a      	lsls	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	4a58      	ldr	r2, [pc, #352]	@ (8002650 <ADC_Init+0x1f4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002502:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	e00f      	b.n	800255a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002558:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0202 	bic.w	r2, r2, #2
 8002568:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6899      	ldr	r1, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
 8002574:	005a      	lsls	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002596:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	035a      	lsls	r2, r3, #13
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	e007      	b.n	80025d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	051a      	lsls	r2, r3, #20
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002612:	025a      	lsls	r2, r3, #9
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	029a      	lsls	r2, r3, #10
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012300 	.word	0x40012300
 8002650:	0f000001 	.word	0x0f000001

08002654 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800266a:	2b00      	cmp	r3, #0
 800266c:	d13c      	bne.n	80026e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d12b      	bne.n	80026e0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d127      	bne.n	80026e0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d119      	bne.n	80026e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0220 	bic.w	r2, r2, #32
 80026ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7fd ff67 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026e6:	e00e      	b.n	8002706 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff fd85 	bl	8002204 <HAL_ADC_ErrorCallback>
}
 80026fa:	e004      	b.n	8002706 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7fd ff3b 	bl	8000598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002736:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2240      	movs	r2, #64	@ 0x40
 800273c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f043 0204 	orr.w	r2, r3, #4
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff fd5a 	bl	8002204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff3e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff fab4 	bl	8001ef4 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e099      	b.n	8002acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e00f      	b.n	80029da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff fa9b 	bl	8001ef4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d908      	bls.n	80029da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e078      	b.n	8002acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e8      	bne.n	80029ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_DMA_Init+0x158>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d117      	bne.n	8002a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fa6f 	bl	8002f64 <DMA_CheckFifoParam>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa26 	bl	8002ef8 <DMA_CalcBaseAndBitshift>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	223f      	movs	r2, #63	@ 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	f010803f 	.word	0xf010803f

08002ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Start_IT+0x26>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e040      	b.n	8002b80 <HAL_DMA_Start_IT+0xa8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d12f      	bne.n	8002b72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f9b8 	bl	8002e9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0216 	orr.w	r2, r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e005      	b.n	8002b7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b94:	4b8e      	ldr	r3, [pc, #568]	@ (8002dd0 <HAL_DMA_IRQHandler+0x248>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a8e      	ldr	r2, [pc, #568]	@ (8002dd4 <HAL_DMA_IRQHandler+0x24c>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	2208      	movs	r2, #8
 8002be2:	409a      	lsls	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	2201      	movs	r2, #1
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	2204      	movs	r2, #4
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	2210      	movs	r2, #16
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d043      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03c      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	2210      	movs	r2, #16
 8002c84:	409a      	lsls	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d108      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d024      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
 8002cb6:	e01f      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01b      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e016      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0208 	bic.w	r2, r2, #8
 8002ce6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 808f 	beq.w	8002e28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8087 	beq.w	8002e28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1e:	2220      	movs	r2, #32
 8002d20:	409a      	lsls	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d136      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0216 	bic.w	r2, r2, #22
 8002d40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_DMA_IRQHandler+0x1da>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0208 	bic.w	r2, r2, #8
 8002d70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	223f      	movs	r2, #63	@ 0x3f
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d07e      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
        }
        return;
 8002d9e:	e079      	b.n	8002e94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e02c      	b.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
 8002dce:	bf00      	nop
 8002dd0:	20000014 	.word	0x20000014
 8002dd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
 8002de8:	e01e      	b.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0210 	bic.w	r2, r2, #16
 8002e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d032      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2205      	movs	r2, #5
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d307      	bcc.n	8002e70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f2      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x2cc>
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
 8002e92:	e000      	b.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e94:	bf00      	nop
    }
  }
}
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b40      	cmp	r3, #64	@ 0x40
 8002ec8:	d108      	bne.n	8002edc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eda:	e007      	b.n	8002eec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3b10      	subs	r3, #16
 8002f08:	4a14      	ldr	r2, [pc, #80]	@ (8002f5c <DMA_CalcBaseAndBitshift+0x64>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f12:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <DMA_CalcBaseAndBitshift+0x68>)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d909      	bls.n	8002f3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	1d1a      	adds	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f38:	e007      	b.n	8002f4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	aaaaaaab 	.word	0xaaaaaaab
 8002f60:	0800b8b4 	.word	0x0800b8b4

08002f64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11f      	bne.n	8002fbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d856      	bhi.n	8003032 <DMA_CheckFifoParam+0xce>
 8002f84:	a201      	add	r2, pc, #4	@ (adr r2, 8002f8c <DMA_CheckFifoParam+0x28>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002faf 	.word	0x08002faf
 8002f94:	08002f9d 	.word	0x08002f9d
 8002f98:	08003033 	.word	0x08003033
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d046      	beq.n	8003036 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fac:	e043      	b.n	8003036 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fb6:	d140      	bne.n	800303a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbc:	e03d      	b.n	800303a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc6:	d121      	bne.n	800300c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d837      	bhi.n	800303e <DMA_CheckFifoParam+0xda>
 8002fce:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <DMA_CheckFifoParam+0x70>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08002fe5 	.word	0x08002fe5
 8002fd8:	08002feb 	.word	0x08002feb
 8002fdc:	08002fe5 	.word	0x08002fe5
 8002fe0:	08002ffd 	.word	0x08002ffd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e030      	b.n	800304c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d025      	beq.n	8003042 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffa:	e022      	b.n	8003042 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003004:	d11f      	bne.n	8003046 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800300a:	e01c      	b.n	8003046 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d903      	bls.n	800301a <DMA_CheckFifoParam+0xb6>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d003      	beq.n	8003020 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003018:	e018      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
      break;
 800301e:	e015      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e00b      	b.n	800304a <DMA_CheckFifoParam+0xe6>
      break;
 8003032:	bf00      	nop
 8003034:	e00a      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      break;
 8003036:	bf00      	nop
 8003038:	e008      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      break;
 800303a:	bf00      	nop
 800303c:	e006      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      break;
 800303e:	bf00      	nop
 8003040:	e004      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      break;   
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <DMA_CheckFifoParam+0xe8>
      break;
 800304a:	bf00      	nop
    }
  } 
  
  return status; 
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	@ 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	e16b      	b.n	8003350 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003078:	2201      	movs	r2, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	429a      	cmp	r2, r3
 8003092:	f040 815a 	bne.w	800334a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d005      	beq.n	80030ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d130      	bne.n	8003110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e4:	2201      	movs	r2, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 0201 	and.w	r2, r3, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b03      	cmp	r3, #3
 800311a:	d017      	beq.n	800314c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d123      	bne.n	80031a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	08da      	lsrs	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3208      	adds	r2, #8
 8003160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	08da      	lsrs	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3208      	adds	r2, #8
 800319a:	69b9      	ldr	r1, [r7, #24]
 800319c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0203 	and.w	r2, r3, #3
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80b4 	beq.w	800334a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b60      	ldr	r3, [pc, #384]	@ (8003368 <HAL_GPIO_Init+0x30c>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003368 <HAL_GPIO_Init+0x30c>)
 80031ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <HAL_GPIO_Init+0x30c>)
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031fe:	4a5b      	ldr	r2, [pc, #364]	@ (800336c <HAL_GPIO_Init+0x310>)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	220f      	movs	r2, #15
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a52      	ldr	r2, [pc, #328]	@ (8003370 <HAL_GPIO_Init+0x314>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02b      	beq.n	8003282 <HAL_GPIO_Init+0x226>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a51      	ldr	r2, [pc, #324]	@ (8003374 <HAL_GPIO_Init+0x318>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d025      	beq.n	800327e <HAL_GPIO_Init+0x222>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a50      	ldr	r2, [pc, #320]	@ (8003378 <HAL_GPIO_Init+0x31c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01f      	beq.n	800327a <HAL_GPIO_Init+0x21e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4f      	ldr	r2, [pc, #316]	@ (800337c <HAL_GPIO_Init+0x320>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d019      	beq.n	8003276 <HAL_GPIO_Init+0x21a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4e      	ldr	r2, [pc, #312]	@ (8003380 <HAL_GPIO_Init+0x324>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_Init+0x216>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4d      	ldr	r2, [pc, #308]	@ (8003384 <HAL_GPIO_Init+0x328>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00d      	beq.n	800326e <HAL_GPIO_Init+0x212>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4c      	ldr	r2, [pc, #304]	@ (8003388 <HAL_GPIO_Init+0x32c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <HAL_GPIO_Init+0x20e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4b      	ldr	r2, [pc, #300]	@ (800338c <HAL_GPIO_Init+0x330>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_GPIO_Init+0x20a>
 8003262:	2307      	movs	r3, #7
 8003264:	e00e      	b.n	8003284 <HAL_GPIO_Init+0x228>
 8003266:	2308      	movs	r3, #8
 8003268:	e00c      	b.n	8003284 <HAL_GPIO_Init+0x228>
 800326a:	2306      	movs	r3, #6
 800326c:	e00a      	b.n	8003284 <HAL_GPIO_Init+0x228>
 800326e:	2305      	movs	r3, #5
 8003270:	e008      	b.n	8003284 <HAL_GPIO_Init+0x228>
 8003272:	2304      	movs	r3, #4
 8003274:	e006      	b.n	8003284 <HAL_GPIO_Init+0x228>
 8003276:	2303      	movs	r3, #3
 8003278:	e004      	b.n	8003284 <HAL_GPIO_Init+0x228>
 800327a:	2302      	movs	r3, #2
 800327c:	e002      	b.n	8003284 <HAL_GPIO_Init+0x228>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_GPIO_Init+0x228>
 8003282:	2300      	movs	r3, #0
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	f002 0203 	and.w	r2, r2, #3
 800328a:	0092      	lsls	r2, r2, #2
 800328c:	4093      	lsls	r3, r2
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003294:	4935      	ldr	r1, [pc, #212]	@ (800336c <HAL_GPIO_Init+0x310>)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <HAL_GPIO_Init+0x334>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c6:	4a32      	ldr	r2, [pc, #200]	@ (8003390 <HAL_GPIO_Init+0x334>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032cc:	4b30      	ldr	r3, [pc, #192]	@ (8003390 <HAL_GPIO_Init+0x334>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f0:	4a27      	ldr	r2, [pc, #156]	@ (8003390 <HAL_GPIO_Init+0x334>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032f6:	4b26      	ldr	r3, [pc, #152]	@ (8003390 <HAL_GPIO_Init+0x334>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800331a:	4a1d      	ldr	r2, [pc, #116]	@ (8003390 <HAL_GPIO_Init+0x334>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_GPIO_Init+0x334>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003344:	4a12      	ldr	r2, [pc, #72]	@ (8003390 <HAL_GPIO_Init+0x334>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3301      	adds	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b0f      	cmp	r3, #15
 8003354:	f67f ae90 	bls.w	8003078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3724      	adds	r7, #36	@ 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	40013800 	.word	0x40013800
 8003370:	40020000 	.word	0x40020000
 8003374:	40020400 	.word	0x40020400
 8003378:	40020800 	.word	0x40020800
 800337c:	40020c00 	.word	0x40020c00
 8003380:	40021000 	.word	0x40021000
 8003384:	40021400 	.word	0x40021400
 8003388:	40021800 	.word	0x40021800
 800338c:	40021c00 	.word	0x40021c00
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e001      	b.n	80033b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
 80033d0:	4613      	mov	r3, r2
 80033d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d4:	787b      	ldrb	r3, [r7, #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e0:	e003      	b.n	80033ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033e2:	887b      	ldrh	r3, [r7, #2]
 80033e4:	041a      	lsls	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	619a      	str	r2, [r3, #24]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af02      	add	r7, sp, #8
 80033fc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e059      	b.n	80034bc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f007 fe34 	bl	800b090 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003436:	d102      	bne.n	800343e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fc41 	bl	8007cca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7c1a      	ldrb	r2, [r3, #16]
 8003450:	f88d 2000 	strb.w	r2, [sp]
 8003454:	3304      	adds	r3, #4
 8003456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003458:	f004 fbc2 	bl	8007be0 <USB_CoreInit>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e026      	b.n	80034bc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f004 fc39 	bl	8007cec <USB_SetCurrentMode>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e017      	b.n	80034bc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7c1a      	ldrb	r2, [r3, #16]
 8003494:	f88d 2000 	strb.w	r2, [sp]
 8003498:	3304      	adds	r3, #4
 800349a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800349c:	f004 fde2 	bl	8008064 <USB_HostInit>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e004      	b.n	80034bc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b08b      	sub	sp, #44	@ 0x2c
 80034c8:	af04      	add	r7, sp, #16
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	70fb      	strb	r3, [r7, #3]
 80034d6:	460b      	mov	r3, r1
 80034d8:	70bb      	strb	r3, [r7, #2]
 80034da:	4613      	mov	r3, r2
 80034dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80034de:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80034e0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_HCD_HC_Init+0x2c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e09d      	b.n	800362c <HAL_HCD_HC_Init+0x168>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3319      	adds	r3, #25
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3314      	adds	r3, #20
 800351c:	787a      	ldrb	r2, [r7, #1]
 800351e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3315      	adds	r3, #21
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3326      	adds	r3, #38	@ 0x26
 8003544:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003548:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	78bb      	ldrb	r3, [r7, #2]
 800354e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003552:	b2d8      	uxtb	r0, r3
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3316      	adds	r3, #22
 8003562:	4602      	mov	r2, r0
 8003564:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fbc8 	bl	8003d00 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da0a      	bge.n	800358e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3317      	adds	r3, #23
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e009      	b.n	80035a2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3317      	adds	r3, #23
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 fec0 	bl	800832c <USB_GetHostSpeed>
 80035ac:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80035ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10b      	bne.n	80035ce <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80035b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_HCD_HC_Init+0x10a>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80035c8:	d901      	bls.n	80035ce <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80035ca:	23bc      	movs	r3, #188	@ 0xbc
 80035cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3318      	adds	r3, #24
 80035de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80035e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	b298      	uxth	r0, r3
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3328      	adds	r3, #40	@ 0x28
 80035f8:	4602      	mov	r2, r0
 80035fa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	b29b      	uxth	r3, r3
 8003604:	787c      	ldrb	r4, [r7, #1]
 8003606:	78ba      	ldrb	r2, [r7, #2]
 8003608:	78f9      	ldrb	r1, [r7, #3]
 800360a:	9302      	str	r3, [sp, #8]
 800360c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4623      	mov	r3, r4
 800361a:	f004 feaf 	bl	800837c <USB_HC_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd90      	pop	{r4, r7, pc}

08003634 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_HCD_HC_Halt+0x1e>
 800364e:	2302      	movs	r3, #2
 8003650:	e00f      	b.n	8003672 <HAL_HCD_HC_Halt+0x3e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f005 fa41 	bl	8008aea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	70fb      	strb	r3, [r7, #3]
 800368e:	460b      	mov	r3, r1
 8003690:	70bb      	strb	r3, [r7, #2]
 8003692:	4613      	mov	r3, r2
 8003694:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3317      	adds	r3, #23
 80036a6:	78ba      	ldrb	r2, [r7, #2]
 80036a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3326      	adds	r3, #38	@ 0x26
 80036ba:	787a      	ldrb	r2, [r7, #1]
 80036bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80036be:	7c3b      	ldrb	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d114      	bne.n	80036ee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	332a      	adds	r3, #42	@ 0x2a
 80036d4:	2203      	movs	r2, #3
 80036d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3319      	adds	r3, #25
 80036e8:	7f3a      	ldrb	r2, [r7, #28]
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e009      	b.n	8003702 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	332a      	adds	r3, #42	@ 0x2a
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003702:	787b      	ldrb	r3, [r7, #1]
 8003704:	2b03      	cmp	r3, #3
 8003706:	f200 8102 	bhi.w	800390e <HAL_HCD_HC_SubmitRequest+0x292>
 800370a:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <HAL_HCD_HC_SubmitRequest+0x94>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003721 	.word	0x08003721
 8003714:	080038f9 	.word	0x080038f9
 8003718:	080037e5 	.word	0x080037e5
 800371c:	0800386f 	.word	0x0800386f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003720:	7c3b      	ldrb	r3, [r7, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	f040 80f5 	bne.w	8003912 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003728:	78bb      	ldrb	r3, [r7, #2]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d12d      	bne.n	800378a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800372e:	8b3b      	ldrh	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	333d      	adds	r3, #61	@ 0x3d
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	333d      	adds	r3, #61	@ 0x3d
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	332a      	adds	r3, #42	@ 0x2a
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003772:	e0ce      	b.n	8003912 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	332a      	adds	r3, #42	@ 0x2a
 8003784:	2202      	movs	r2, #2
 8003786:	701a      	strb	r2, [r3, #0]
      break;
 8003788:	e0c3      	b.n	8003912 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	331a      	adds	r3, #26
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	f040 80b8 	bne.w	8003912 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	333c      	adds	r3, #60	@ 0x3c
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	332a      	adds	r3, #42	@ 0x2a
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
      break;
 80037cc:	e0a1      	b.n	8003912 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	332a      	adds	r3, #42	@ 0x2a
 80037de:	2202      	movs	r2, #2
 80037e0:	701a      	strb	r2, [r3, #0]
      break;
 80037e2:	e096      	b.n	8003912 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80037e4:	78bb      	ldrb	r3, [r7, #2]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d120      	bne.n	800382c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	333d      	adds	r3, #61	@ 0x3d
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	332a      	adds	r3, #42	@ 0x2a
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003814:	e07e      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	332a      	adds	r3, #42	@ 0x2a
 8003826:	2202      	movs	r2, #2
 8003828:	701a      	strb	r2, [r3, #0]
      break;
 800382a:	e073      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	333c      	adds	r3, #60	@ 0x3c
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	332a      	adds	r3, #42	@ 0x2a
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
      break;
 8003856:	e05d      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	332a      	adds	r3, #42	@ 0x2a
 8003868:	2202      	movs	r2, #2
 800386a:	701a      	strb	r2, [r3, #0]
      break;
 800386c:	e052      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800386e:	78bb      	ldrb	r3, [r7, #2]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d120      	bne.n	80038b6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	333d      	adds	r3, #61	@ 0x3d
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	332a      	adds	r3, #42	@ 0x2a
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800389e:	e039      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	332a      	adds	r3, #42	@ 0x2a
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]
      break;
 80038b4:	e02e      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	333c      	adds	r3, #60	@ 0x3c
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	332a      	adds	r3, #42	@ 0x2a
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
      break;
 80038e0:	e018      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	332a      	adds	r3, #42	@ 0x2a
 80038f2:	2202      	movs	r2, #2
 80038f4:	701a      	strb	r2, [r3, #0]
      break;
 80038f6:	e00d      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	332a      	adds	r3, #42	@ 0x2a
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
      break;
 800390c:	e002      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003912:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	332c      	adds	r3, #44	@ 0x2c
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	8b39      	ldrh	r1, [r7, #24]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4403      	add	r3, r0
 8003938:	3334      	adds	r3, #52	@ 0x34
 800393a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	334c      	adds	r3, #76	@ 0x4c
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	3338      	adds	r3, #56	@ 0x38
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3315      	adds	r3, #21
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	334d      	adds	r3, #77	@ 0x4d
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	3310      	adds	r3, #16
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	1d19      	adds	r1, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	799b      	ldrb	r3, [r3, #6]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f004 fe14 	bl	80085d4 <USB_HC_StartXfer>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop

080039b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 fb02 	bl	8007fd8 <USB_GetMode>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 80fb 	bne.w	8003bd2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f004 fac5 	bl	8007f70 <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80f1 	beq.w	8003bd0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 fabc 	bl	8007f70 <USB_ReadInterrupts>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a02:	d104      	bne.n	8003a0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 faac 	bl	8007f70 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a22:	d104      	bne.n	8003a2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 fa9c 	bl	8007f70 <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a42:	d104      	bne.n	8003a4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 fa8c 	bl	8007f70 <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d103      	bne.n	8003a6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2202      	movs	r2, #2
 8003a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 fa7e 	bl	8007f70 <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a7e:	d120      	bne.n	8003ac2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003a88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d113      	bne.n	8003ac2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a9a:	2110      	movs	r1, #16
 8003a9c:	6938      	ldr	r0, [r7, #16]
 8003a9e:	f004 f971 	bl	8007d84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003aa2:	6938      	ldr	r0, [r7, #16]
 8003aa4:	f004 f9a0 	bl	8007de8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7a5b      	ldrb	r3, [r3, #9]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d105      	bne.n	8003abc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 fb98 	bl	80081ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f007 fb65 	bl	800b18c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 fa52 	bl	8007f70 <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad6:	d102      	bne.n	8003ade <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f001 fd4d 	bl	8005578 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f004 fa44 	bl	8007f70 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d106      	bne.n	8003b00 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f007 fb2e 	bl	800b154 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2208      	movs	r2, #8
 8003afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f004 fa33 	bl	8007f70 <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b14:	d139      	bne.n	8003b8a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 ffd4 	bl	8008ac8 <USB_HC_ReadInterrupt>
 8003b20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e025      	b.n	8003b74 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d018      	beq.n	8003b6e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b52:	d106      	bne.n	8003b62 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f905 	bl	8003d6a <HCD_HC_IN_IRQHandler>
 8003b60:	e005      	b.n	8003b6e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 ff67 	bl	8004a3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	795b      	ldrb	r3, [r3, #5]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d3d3      	bcc.n	8003b28 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f004 f9ee 	bl	8007f70 <USB_ReadInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d101      	bne.n	8003ba2 <HAL_HCD_IRQHandler+0x1ea>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_HCD_IRQHandler+0x1ec>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d014      	beq.n	8003bd2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0210 	bic.w	r2, r2, #16
 8003bb6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 fbfe 	bl	80053ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0210 	orr.w	r2, r2, #16
 8003bcc:	619a      	str	r2, [r3, #24]
 8003bce:	e000      	b.n	8003bd2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003bd0:	bf00      	nop
    }
  }
}
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_HCD_Start+0x16>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e013      	b.n	8003c16 <HAL_HCD_Start+0x3e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 fb5c 	bl	80082ba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f004 f84e 	bl	8007ca8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_HCD_Stop+0x16>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e00d      	b.n	8003c50 <HAL_HCD_Stop+0x32>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f005 f8af 	bl	8008da4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 fafe 	bl	8008266 <USB_ResetPort>
 8003c6a:	4603      	mov	r3, r0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	334c      	adds	r3, #76	@ 0x4c
 8003c90:	781b      	ldrb	r3, [r3, #0]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3338      	adds	r3, #56	@ 0x38
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f004 fb40 	bl	800835a <USB_GetCurrentFrame>
 8003cda:	4603      	mov	r3, r0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f004 fb1b 	bl	800832c <USB_GetHostSpeed>
 8003cf6:	4603      	mov	r3, r0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	331a      	adds	r3, #26
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	331b      	adds	r3, #27
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3325      	adds	r3, #37	@ 0x25
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	3324      	adds	r3, #36	@ 0x24
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 f904 	bl	8007f96 <USB_ReadChInterrupts>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d11a      	bne.n	8003dce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da4:	461a      	mov	r2, r3
 8003da6:	2304      	movs	r3, #4
 8003da8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	334d      	adds	r3, #77	@ 0x4d
 8003dba:	2207      	movs	r2, #7
 8003dbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 fe8f 	bl	8008aea <USB_HC_Halt>
 8003dcc:	e09e      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 f8dd 	bl	8007f96 <USB_ReadChInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de6:	d11b      	bne.n	8003e20 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	334d      	adds	r3, #77	@ 0x4d
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fe66 	bl	8008aea <USB_HC_Halt>
 8003e1e:	e075      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f004 f8b4 	bl	8007f96 <USB_ReadChInterrupts>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d11a      	bne.n	8003e6e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e44:	461a      	mov	r2, r3
 8003e46:	2308      	movs	r3, #8
 8003e48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	334d      	adds	r3, #77	@ 0x4d
 8003e5a:	2206      	movs	r2, #6
 8003e5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 fe3f 	bl	8008aea <USB_HC_Halt>
 8003e6c:	e04e      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f004 f88d 	bl	8007f96 <USB_ReadChInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e86:	d11b      	bne.n	8003ec0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e94:	461a      	mov	r2, r3
 8003e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	334d      	adds	r3, #77	@ 0x4d
 8003eac:	2209      	movs	r2, #9
 8003eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f004 fe16 	bl	8008aea <USB_HC_Halt>
 8003ebe:	e025      	b.n	8003f0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 f864 	bl	8007f96 <USB_ReadChInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed4:	2b80      	cmp	r3, #128	@ 0x80
 8003ed6:	d119      	bne.n	8003f0c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	334d      	adds	r3, #77	@ 0x4d
 8003efa:	2207      	movs	r2, #7
 8003efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f004 fdef 	bl	8008aea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f004 f83e 	bl	8007f96 <USB_ReadChInterrupts>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f24:	d112      	bne.n	8003f4c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f004 fddb 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f40:	461a      	mov	r2, r3
 8003f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f46:	6093      	str	r3, [r2, #8]
 8003f48:	f000 bd75 	b.w	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 f81e 	bl	8007f96 <USB_ReadChInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 8128 	bne.w	80041b6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f72:	461a      	mov	r2, r3
 8003f74:	2320      	movs	r3, #32
 8003f76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	331b      	adds	r3, #27
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d119      	bne.n	8003fc2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	331b      	adds	r3, #27
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	799b      	ldrb	r3, [r3, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01b      	beq.n	8004002 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3330      	adds	r3, #48	@ 0x30
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	1ac9      	subs	r1, r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4403      	add	r3, r0
 8003ffe:	3338      	adds	r3, #56	@ 0x38
 8004000:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334d      	adds	r3, #77	@ 0x4d
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3344      	adds	r3, #68	@ 0x44
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004036:	461a      	mov	r2, r3
 8004038:	2301      	movs	r3, #1
 800403a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	3326      	adds	r3, #38	@ 0x26
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3326      	adds	r3, #38	@ 0x26
 8004062:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004064:	2b02      	cmp	r3, #2
 8004066:	d110      	bne.n	800408a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f004 fd3a 	bl	8008aea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004082:	461a      	mov	r2, r3
 8004084:	2310      	movs	r3, #16
 8004086:	6093      	str	r3, [r2, #8]
 8004088:	e03d      	b.n	8004106 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3326      	adds	r3, #38	@ 0x26
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d00a      	beq.n	80040b6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	3326      	adds	r3, #38	@ 0x26
 80040b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d127      	bne.n	8004106 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	0151      	lsls	r1, r2, #5
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	440a      	add	r2, r1
 80040cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040d4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	334c      	adds	r3, #76	@ 0x4c
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	334c      	adds	r3, #76	@ 0x4c
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f007 f851 	bl	800b1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	799b      	ldrb	r3, [r3, #6]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d13b      	bne.n	8004186 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3338      	adds	r3, #56	@ 0x38
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4403      	add	r3, r0
 800412e:	3328      	adds	r3, #40	@ 0x28
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	440b      	add	r3, r1
 8004134:	1e59      	subs	r1, r3, #1
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4403      	add	r3, r0
 8004144:	3328      	adds	r3, #40	@ 0x28
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	fbb1 f3f3 	udiv	r3, r1, r3
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8470 	beq.w	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	333c      	adds	r3, #60	@ 0x3c
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	f083 0301 	eor.w	r3, r3, #1
 800416e:	b2d8      	uxtb	r0, r3
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	333c      	adds	r3, #60	@ 0x3c
 800417e:	4602      	mov	r2, r0
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	f000 bc58 	b.w	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	333c      	adds	r3, #60	@ 0x3c
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	f083 0301 	eor.w	r3, r3, #1
 800419e:	b2d8      	uxtb	r0, r3
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	333c      	adds	r3, #60	@ 0x3c
 80041ae:	4602      	mov	r2, r0
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	f000 bc40 	b.w	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f003 fee9 	bl	8007f96 <USB_ReadChInterrupts>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d131      	bne.n	8004232 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041da:	461a      	mov	r2, r3
 80041dc:	2320      	movs	r3, #32
 80041de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	331a      	adds	r3, #26
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f040 841f 	bne.w	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	331b      	adds	r3, #27
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	334d      	adds	r3, #77	@ 0x4d
 800421c:	2203      	movs	r2, #3
 800421e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f004 fc5e 	bl	8008aea <USB_HC_Halt>
 800422e:	f000 bc02 	b.w	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f003 feab 	bl	8007f96 <USB_ReadChInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b02      	cmp	r3, #2
 8004248:	f040 8305 	bne.w	8004856 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004258:	461a      	mov	r2, r3
 800425a:	2302      	movs	r3, #2
 800425c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	334d      	adds	r3, #77	@ 0x4d
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d114      	bne.n	800429e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	334d      	adds	r3, #77	@ 0x4d
 8004284:	2202      	movs	r2, #2
 8004286:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334c      	adds	r3, #76	@ 0x4c
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e2cc      	b.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334d      	adds	r3, #77	@ 0x4d
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d114      	bne.n	80042de <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	334d      	adds	r3, #77	@ 0x4d
 80042c4:	2202      	movs	r2, #2
 80042c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	334c      	adds	r3, #76	@ 0x4c
 80042d8:	2205      	movs	r2, #5
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e2ac      	b.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	334d      	adds	r3, #77	@ 0x4d
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b07      	cmp	r3, #7
 80042f2:	d00b      	beq.n	800430c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	334d      	adds	r3, #77	@ 0x4d
 8004304:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004306:	2b09      	cmp	r3, #9
 8004308:	f040 80a6 	bne.w	8004458 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	334d      	adds	r3, #77	@ 0x4d
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	3344      	adds	r3, #68	@ 0x44
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	1c59      	adds	r1, r3, #1
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4403      	add	r3, r0
 8004340:	3344      	adds	r3, #68	@ 0x44
 8004342:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3344      	adds	r3, #68	@ 0x44
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d943      	bls.n	80043e2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3344      	adds	r3, #68	@ 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	331a      	adds	r3, #26
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d123      	bne.n	80043cc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	331b      	adds	r3, #27
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	331c      	adds	r3, #28
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334c      	adds	r3, #76	@ 0x4c
 80043dc:	2204      	movs	r2, #4
 80043de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043e0:	e229      	b.n	8004836 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	334c      	adds	r3, #76	@ 0x4c
 80043f2:	2202      	movs	r2, #2
 80043f4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3326      	adds	r3, #38	@ 0x26
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3326      	adds	r3, #38	@ 0x26
 800441c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800441e:	2b02      	cmp	r3, #2
 8004420:	f040 8209 	bne.w	8004836 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800443a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004442:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004450:	461a      	mov	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004456:	e1ee      	b.n	8004836 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	334d      	adds	r3, #77	@ 0x4d
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b05      	cmp	r3, #5
 800446c:	f040 80c8 	bne.w	8004600 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	334d      	adds	r3, #77	@ 0x4d
 8004480:	2202      	movs	r2, #2
 8004482:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	331b      	adds	r3, #27
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	f040 81ce 	bne.w	8004838 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3326      	adds	r3, #38	@ 0x26
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d16b      	bne.n	800458a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3348      	adds	r3, #72	@ 0x48
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1c59      	adds	r1, r3, #1
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4403      	add	r3, r0
 80044d2:	3348      	adds	r3, #72	@ 0x48
 80044d4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3348      	adds	r3, #72	@ 0x48
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d943      	bls.n	8004574 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3348      	adds	r3, #72	@ 0x48
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	331b      	adds	r3, #27
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	3344      	adds	r3, #68	@ 0x44
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d809      	bhi.n	800453e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	331c      	adds	r3, #28
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	440a      	add	r2, r1
 8004554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	334c      	adds	r3, #76	@ 0x4c
 800456e:	2204      	movs	r2, #4
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e014      	b.n	800459e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	334c      	adds	r3, #76	@ 0x4c
 8004584:	2202      	movs	r2, #2
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e009      	b.n	800459e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	334c      	adds	r3, #76	@ 0x4c
 800459a:	2202      	movs	r2, #2
 800459c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3326      	adds	r3, #38	@ 0x26
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3326      	adds	r3, #38	@ 0x26
 80045c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	f040 8136 	bne.w	8004838 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f8:	461a      	mov	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e11b      	b.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	334d      	adds	r3, #77	@ 0x4d
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b03      	cmp	r3, #3
 8004614:	f040 8081 	bne.w	800471a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	334d      	adds	r3, #77	@ 0x4d
 8004628:	2202      	movs	r2, #2
 800462a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	331b      	adds	r3, #27
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	f040 80fa 	bne.w	8004838 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	334c      	adds	r3, #76	@ 0x4c
 8004654:	2202      	movs	r2, #2
 8004656:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	440a      	add	r2, r1
 800466e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004676:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	440a      	add	r2, r1
 800468e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004696:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	0151      	lsls	r1, r2, #5
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	440a      	add	r2, r1
 80046ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046b2:	f023 0320 	bic.w	r3, r3, #32
 80046b6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3326      	adds	r3, #38	@ 0x26
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3326      	adds	r3, #38	@ 0x26
 80046de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f040 80a9 	bne.w	8004838 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004704:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e08e      	b.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	334d      	adds	r3, #77	@ 0x4d
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d143      	bne.n	80047b8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	334d      	adds	r3, #77	@ 0x4d
 8004740:	2202      	movs	r2, #2
 8004742:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	334c      	adds	r3, #76	@ 0x4c
 8004754:	2202      	movs	r2, #2
 8004756:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3326      	adds	r3, #38	@ 0x26
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	3326      	adds	r3, #38	@ 0x26
 800477e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004780:	2b02      	cmp	r3, #2
 8004782:	d159      	bne.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800479a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b0:	461a      	mov	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e03f      	b.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	334d      	adds	r3, #77	@ 0x4d
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d126      	bne.n	800481c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	334d      	adds	r3, #77	@ 0x4d
 80047de:	2202      	movs	r2, #2
 80047e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3344      	adds	r3, #68	@ 0x44
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1c59      	adds	r1, r3, #1
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4403      	add	r3, r0
 8004802:	3344      	adds	r3, #68	@ 0x44
 8004804:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	334c      	adds	r3, #76	@ 0x4c
 8004816:	2204      	movs	r2, #4
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e00d      	b.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	334d      	adds	r3, #77	@ 0x4d
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b02      	cmp	r3, #2
 8004830:	f000 8100 	beq.w	8004a34 <HCD_HC_IN_IRQHandler+0xcca>
 8004834:	e000      	b.n	8004838 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004836:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	334c      	adds	r3, #76	@ 0x4c
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f006 fcaa 	bl	800b1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004854:	e0ef      	b.n	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f003 fb99 	bl	8007f96 <USB_ReadChInterrupts>
 8004864:	4603      	mov	r3, r0
 8004866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486a:	2b40      	cmp	r3, #64	@ 0x40
 800486c:	d12f      	bne.n	80048ce <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800487a:	461a      	mov	r2, r3
 800487c:	2340      	movs	r3, #64	@ 0x40
 800487e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	334d      	adds	r3, #77	@ 0x4d
 8004890:	2205      	movs	r2, #5
 8004892:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	331a      	adds	r3, #26
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	3344      	adds	r3, #68	@ 0x44
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f004 f90f 	bl	8008aea <USB_HC_Halt>
 80048cc:	e0b3      	b.n	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f003 fb5d 	bl	8007f96 <USB_ReadChInterrupts>
 80048dc:	4603      	mov	r3, r0
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	f040 80a7 	bne.w	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3326      	adds	r3, #38	@ 0x26
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d11b      	bne.n	8004936 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	3344      	adds	r3, #68	@ 0x44
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	334d      	adds	r3, #77	@ 0x4d
 8004922:	2204      	movs	r2, #4
 8004924:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	4611      	mov	r1, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f004 f8db 	bl	8008aea <USB_HC_Halt>
 8004934:	e03f      	b.n	80049b6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	3326      	adds	r3, #38	@ 0x26
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	3326      	adds	r3, #38	@ 0x26
 800495c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800495e:	2b02      	cmp	r3, #2
 8004960:	d129      	bne.n	80049b6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	3344      	adds	r3, #68	@ 0x44
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	799b      	ldrb	r3, [r3, #6]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HCD_HC_IN_IRQHandler+0xc2a>
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	331b      	adds	r3, #27
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d110      	bne.n	80049b6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	334d      	adds	r3, #77	@ 0x4d
 80049a4:	2204      	movs	r2, #4
 80049a6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f004 f89a 	bl	8008aea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	331b      	adds	r3, #27
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d129      	bne.n	8004a20 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	331b      	adds	r3, #27
 80049dc:	2200      	movs	r2, #0
 80049de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	0151      	lsls	r1, r2, #5
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	440a      	add	r2, r1
 80049f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049fe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a1a:	f043 0320 	orr.w	r3, r3, #32
 8004a1e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2310      	movs	r3, #16
 8004a30:	6093      	str	r3, [r2, #8]
 8004a32:	e000      	b.n	8004a36 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004a34:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f003 fa9b 	bl	8007f96 <USB_ReadChInterrupts>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d11b      	bne.n	8004aa2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a76:	461a      	mov	r2, r3
 8004a78:	2304      	movs	r3, #4
 8004a7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	334d      	adds	r3, #77	@ 0x4d
 8004a8c:	2207      	movs	r2, #7
 8004a8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	4611      	mov	r1, r2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f004 f826 	bl	8008aea <USB_HC_Halt>
 8004a9e:	f000 bc89 	b.w	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f003 fa73 	bl	8007f96 <USB_ReadChInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	f040 8082 	bne.w	8004bc0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2320      	movs	r3, #32
 8004acc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3319      	adds	r3, #25
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d124      	bne.n	8004b2e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3319      	adds	r3, #25
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	334c      	adds	r3, #76	@ 0x4c
 8004b08:	2202      	movs	r2, #2
 8004b0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	334d      	adds	r3, #77	@ 0x4d
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	78fa      	ldrb	r2, [r7, #3]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f003 ffde 	bl	8008aea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	331a      	adds	r3, #26
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f040 8437 	bne.w	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	331b      	adds	r3, #27
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f040 842b 	bne.w	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3326      	adds	r3, #38	@ 0x26
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d009      	beq.n	8004b88 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	331b      	adds	r3, #27
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	334d      	adds	r3, #77	@ 0x4d
 8004b98:	2203      	movs	r2, #3
 8004b9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f003 ffa0 	bl	8008aea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3344      	adds	r3, #68	@ 0x44
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e3f9      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f003 f9e4 	bl	8007f96 <USB_ReadChInterrupts>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd8:	d111      	bne.n	8004bfe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be6:	461a      	mov	r2, r3
 8004be8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 ff77 	bl	8008aea <USB_HC_Halt>
 8004bfc:	e3da      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 f9c5 	bl	8007f96 <USB_ReadChInterrupts>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d168      	bne.n	8004ce8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	3344      	adds	r3, #68	@ 0x44
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 f9af 	bl	8007f96 <USB_ReadChInterrupts>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3e:	2b40      	cmp	r3, #64	@ 0x40
 8004c40:	d112      	bne.n	8004c68 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	3319      	adds	r3, #25
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c62:	461a      	mov	r2, r3
 8004c64:	2340      	movs	r3, #64	@ 0x40
 8004c66:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	331b      	adds	r3, #27
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d019      	beq.n	8004cb2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	331b      	adds	r3, #27
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	334d      	adds	r3, #77	@ 0x4d
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f003 ff02 	bl	8008aea <USB_HC_Halt>
 8004ce6:	e365      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f003 f950 	bl	8007f96 <USB_ReadChInterrupts>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfc:	2b40      	cmp	r3, #64	@ 0x40
 8004cfe:	d139      	bne.n	8004d74 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	334d      	adds	r3, #77	@ 0x4d
 8004d10:	2205      	movs	r2, #5
 8004d12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	331a      	adds	r3, #26
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3319      	adds	r3, #25
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3344      	adds	r3, #68	@ 0x44
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f003 fec5 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2340      	movs	r3, #64	@ 0x40
 8004d70:	6093      	str	r3, [r2, #8]
 8004d72:	e31f      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f003 f90a 	bl	8007f96 <USB_ReadChInterrupts>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d11a      	bne.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	334d      	adds	r3, #77	@ 0x4d
 8004dae:	2206      	movs	r2, #6
 8004db0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f003 fe95 	bl	8008aea <USB_HC_Halt>
 8004dc0:	e2f8      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 f8e3 	bl	8007f96 <USB_ReadChInterrupts>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d144      	bne.n	8004e64 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	3344      	adds	r3, #68	@ 0x44
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	334d      	adds	r3, #77	@ 0x4d
 8004dfe:	2204      	movs	r2, #4
 8004e00:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3319      	adds	r3, #25
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d114      	bne.n	8004e42 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3318      	adds	r3, #24
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3319      	adds	r3, #25
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f003 fe4d 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2310      	movs	r3, #16
 8004e60:	6093      	str	r3, [r2, #8]
 8004e62:	e2a7      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f003 f892 	bl	8007f96 <USB_ReadChInterrupts>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e78:	2b80      	cmp	r3, #128	@ 0x80
 8004e7a:	f040 8083 	bne.w	8004f84 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	799b      	ldrb	r3, [r3, #6]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d111      	bne.n	8004eaa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	334d      	adds	r3, #77	@ 0x4d
 8004e96:	2207      	movs	r2, #7
 8004e98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 fe21 	bl	8008aea <USB_HC_Halt>
 8004ea8:	e062      	b.n	8004f70 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3344      	adds	r3, #68	@ 0x44
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	1c59      	adds	r1, r3, #1
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4403      	add	r3, r0
 8004eca:	3344      	adds	r3, #68	@ 0x44
 8004ecc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ece:	78fa      	ldrb	r2, [r7, #3]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3344      	adds	r3, #68	@ 0x44
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d922      	bls.n	8004f2a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3344      	adds	r3, #68	@ 0x44
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	334c      	adds	r3, #76	@ 0x4c
 8004f08:	2204      	movs	r2, #4
 8004f0a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	334c      	adds	r3, #76	@ 0x4c
 8004f1c:	781a      	ldrb	r2, [r3, #0]
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f006 f940 	bl	800b1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f28:	e022      	b.n	8004f70 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	334c      	adds	r3, #76	@ 0x4c
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f54:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f5c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2380      	movs	r3, #128	@ 0x80
 8004f80:	6093      	str	r3, [r2, #8]
 8004f82:	e217      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f003 f802 	bl	8007f96 <USB_ReadChInterrupts>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9c:	d11b      	bne.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	334d      	adds	r3, #77	@ 0x4d
 8004fae:	2209      	movs	r2, #9
 8004fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f003 fd95 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fd2:	6093      	str	r3, [r2, #8]
 8004fd4:	e1ee      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f002 ffd9 	bl	8007f96 <USB_ReadChInterrupts>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	f040 81df 	bne.w	80053ae <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2302      	movs	r3, #2
 8005000:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	334d      	adds	r3, #77	@ 0x4d
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	f040 8093 	bne.w	8005140 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	334d      	adds	r3, #77	@ 0x4d
 800502a:	2202      	movs	r2, #2
 800502c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	334c      	adds	r3, #76	@ 0x4c
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3326      	adds	r3, #38	@ 0x26
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d00b      	beq.n	8005070 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	3326      	adds	r3, #38	@ 0x26
 8005068:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800506a:	2b03      	cmp	r3, #3
 800506c:	f040 8190 	bne.w	8005390 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	799b      	ldrb	r3, [r3, #6]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d115      	bne.n	80050a4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	333d      	adds	r3, #61	@ 0x3d
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	f083 0301 	eor.w	r3, r3, #1
 8005090:	b2d8      	uxtb	r0, r3
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	333d      	adds	r3, #61	@ 0x3d
 80050a0:	4602      	mov	r2, r0
 80050a2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	799b      	ldrb	r3, [r3, #6]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 8171 	bne.w	8005390 <HCD_HC_OUT_IRQHandler+0x954>
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	3334      	adds	r3, #52	@ 0x34
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8165 	beq.w	8005390 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3334      	adds	r3, #52	@ 0x34
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4403      	add	r3, r0
 80050e6:	3328      	adds	r3, #40	@ 0x28
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	440b      	add	r3, r1
 80050ec:	1e59      	subs	r1, r3, #1
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4403      	add	r3, r0
 80050fc:	3328      	adds	r3, #40	@ 0x28
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	fbb1 f3f3 	udiv	r3, r1, r3
 8005104:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 813f 	beq.w	8005390 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	333d      	adds	r3, #61	@ 0x3d
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	f083 0301 	eor.w	r3, r3, #1
 800512a:	b2d8      	uxtb	r0, r3
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	333d      	adds	r3, #61	@ 0x3d
 800513a:	4602      	mov	r2, r0
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e127      	b.n	8005390 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	334d      	adds	r3, #77	@ 0x4d
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d120      	bne.n	8005198 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	334d      	adds	r3, #77	@ 0x4d
 8005166:	2202      	movs	r2, #2
 8005168:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	331b      	adds	r3, #27
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	f040 8107 	bne.w	8005390 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	334c      	adds	r3, #76	@ 0x4c
 8005192:	2202      	movs	r2, #2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e0fb      	b.n	8005390 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	334d      	adds	r3, #77	@ 0x4d
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d13a      	bne.n	8005224 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	334d      	adds	r3, #77	@ 0x4d
 80051be:	2202      	movs	r2, #2
 80051c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	334c      	adds	r3, #76	@ 0x4c
 80051d2:	2202      	movs	r2, #2
 80051d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	331b      	adds	r3, #27
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 80d1 	bne.w	8005390 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	331b      	adds	r3, #27
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	440a      	add	r2, r1
 8005218:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800521c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005220:	6053      	str	r3, [r2, #4]
 8005222:	e0b5      	b.n	8005390 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005224:	78fa      	ldrb	r2, [r7, #3]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	334d      	adds	r3, #77	@ 0x4d
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b05      	cmp	r3, #5
 8005238:	d114      	bne.n	8005264 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	334d      	adds	r3, #77	@ 0x4d
 800524a:	2202      	movs	r2, #2
 800524c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	334c      	adds	r3, #76	@ 0x4c
 800525e:	2202      	movs	r2, #2
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e095      	b.n	8005390 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	334d      	adds	r3, #77	@ 0x4d
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d114      	bne.n	80052a4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	334d      	adds	r3, #77	@ 0x4d
 800528a:	2202      	movs	r2, #2
 800528c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	334c      	adds	r3, #76	@ 0x4c
 800529e:	2205      	movs	r2, #5
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e075      	b.n	8005390 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	334d      	adds	r3, #77	@ 0x4d
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	d00a      	beq.n	80052d0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	334d      	adds	r3, #77	@ 0x4d
 80052ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052cc:	2b09      	cmp	r3, #9
 80052ce:	d170      	bne.n	80053b2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052d0:	78fa      	ldrb	r2, [r7, #3]
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	334d      	adds	r3, #77	@ 0x4d
 80052e0:	2202      	movs	r2, #2
 80052e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3344      	adds	r3, #68	@ 0x44
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	1c59      	adds	r1, r3, #1
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4403      	add	r3, r0
 8005304:	3344      	adds	r3, #68	@ 0x44
 8005306:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	3344      	adds	r3, #68	@ 0x44
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d914      	bls.n	8005348 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3344      	adds	r3, #68	@ 0x44
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	334c      	adds	r3, #76	@ 0x4c
 8005342:	2204      	movs	r2, #4
 8005344:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005346:	e022      	b.n	800538e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	334c      	adds	r3, #76	@ 0x4c
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005372:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800537a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005388:	461a      	mov	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800538e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	334c      	adds	r3, #76	@ 0x4c
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f005 fefe 	bl	800b1a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053ac:	e002      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80053b2:	bf00      	nop
  }
}
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b08a      	sub	sp, #40	@ 0x28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	0c5b      	lsrs	r3, r3, #17
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d004      	beq.n	8005400 <HCD_RXQLVL_IRQHandler+0x46>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	f000 80b6 	beq.w	800556a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80053fe:	e0b7      	b.n	8005570 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80b3 	beq.w	800556e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4613      	mov	r3, r2
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	332c      	adds	r3, #44	@ 0x2c
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80a7 	beq.w	800556e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4613      	mov	r3, r2
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	3338      	adds	r3, #56	@ 0x38
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	18d1      	adds	r1, r2, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4613      	mov	r3, r2
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4403      	add	r3, r0
 8005444:	3334      	adds	r3, #52	@ 0x34
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4299      	cmp	r1, r3
 800544a:	f200 8083 	bhi.w	8005554 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	332c      	adds	r3, #44	@ 0x2c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	b292      	uxth	r2, r2
 8005468:	4619      	mov	r1, r3
 800546a:	f002 fd29 	bl	8007ec0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4613      	mov	r3, r2
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	332c      	adds	r3, #44	@ 0x2c
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	18d1      	adds	r1, r2, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4613      	mov	r3, r2
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4403      	add	r3, r0
 8005492:	332c      	adds	r3, #44	@ 0x2c
 8005494:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3338      	adds	r3, #56	@ 0x38
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	18d1      	adds	r1, r2, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4403      	add	r3, r0
 80054ba:	3338      	adds	r3, #56	@ 0x38
 80054bc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	0cdb      	lsrs	r3, r3, #19
 80054ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3328      	adds	r3, #40	@ 0x28
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d13f      	bne.n	800556e <HCD_RXQLVL_IRQHandler+0x1b4>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d03c      	beq.n	800556e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800550a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	333c      	adds	r3, #60	@ 0x3c
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f083 0301 	eor.w	r3, r3, #1
 800553c:	b2d8      	uxtb	r0, r3
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	333c      	adds	r3, #60	@ 0x3c
 800554e:	4602      	mov	r2, r0
 8005550:	701a      	strb	r2, [r3, #0]
      break;
 8005552:	e00c      	b.n	800556e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4613      	mov	r3, r2
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	334c      	adds	r3, #76	@ 0x4c
 8005564:	2204      	movs	r2, #4
 8005566:	701a      	strb	r2, [r3, #0]
      break;
 8005568:	e001      	b.n	800556e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800556e:	bf00      	nop
  }
}
 8005570:	bf00      	nop
 8005572:	3728      	adds	r7, #40	@ 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d10b      	bne.n	80055c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d102      	bne.n	80055c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f005 fdd8 	bl	800b170 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f043 0302 	orr.w	r3, r3, #2
 80055c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d132      	bne.n	8005638 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f043 0308 	orr.w	r3, r3, #8
 80055d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d126      	bne.n	8005632 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	7a5b      	ldrb	r3, [r3, #9]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d113      	bne.n	8005614 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80055f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055f6:	d106      	bne.n	8005606 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2102      	movs	r1, #2
 80055fe:	4618      	mov	r0, r3
 8005600:	f002 fdf4 	bl	80081ec <USB_InitFSLSPClkSel>
 8005604:	e011      	b.n	800562a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2101      	movs	r1, #1
 800560c:	4618      	mov	r0, r3
 800560e:	f002 fded 	bl	80081ec <USB_InitFSLSPClkSel>
 8005612:	e00a      	b.n	800562a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	79db      	ldrb	r3, [r3, #7]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d106      	bne.n	800562a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005622:	461a      	mov	r2, r3
 8005624:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005628:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f005 fdca 	bl	800b1c4 <HAL_HCD_PortEnabled_Callback>
 8005630:	e002      	b.n	8005638 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f005 fdd4 	bl	800b1e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b20      	cmp	r3, #32
 8005640:	d103      	bne.n	800564a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f043 0320 	orr.w	r3, r3, #32
 8005648:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005650:	461a      	mov	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	6013      	str	r3, [r2, #0]
}
 8005656:	bf00      	nop
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e12b      	b.n	80058ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc f9ac 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	@ 0x24
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056c4:	f001 fa20 	bl	8006b08 <HAL_RCC_GetPCLK1Freq>
 80056c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4a81      	ldr	r2, [pc, #516]	@ (80058d4 <HAL_I2C_Init+0x274>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d807      	bhi.n	80056e4 <HAL_I2C_Init+0x84>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a80      	ldr	r2, [pc, #512]	@ (80058d8 <HAL_I2C_Init+0x278>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	bf94      	ite	ls
 80056dc:	2301      	movls	r3, #1
 80056de:	2300      	movhi	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e006      	b.n	80056f2 <HAL_I2C_Init+0x92>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a7d      	ldr	r2, [pc, #500]	@ (80058dc <HAL_I2C_Init+0x27c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	bf94      	ite	ls
 80056ec:	2301      	movls	r3, #1
 80056ee:	2300      	movhi	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e0e7      	b.n	80058ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a78      	ldr	r2, [pc, #480]	@ (80058e0 <HAL_I2C_Init+0x280>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	0c9b      	lsrs	r3, r3, #18
 8005704:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a6a      	ldr	r2, [pc, #424]	@ (80058d4 <HAL_I2C_Init+0x274>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d802      	bhi.n	8005734 <HAL_I2C_Init+0xd4>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	3301      	adds	r3, #1
 8005732:	e009      	b.n	8005748 <HAL_I2C_Init+0xe8>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	4a69      	ldr	r2, [pc, #420]	@ (80058e4 <HAL_I2C_Init+0x284>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	099b      	lsrs	r3, r3, #6
 8005746:	3301      	adds	r3, #1
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	430b      	orrs	r3, r1
 800574e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800575a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	495c      	ldr	r1, [pc, #368]	@ (80058d4 <HAL_I2C_Init+0x274>)
 8005764:	428b      	cmp	r3, r1
 8005766:	d819      	bhi.n	800579c <HAL_I2C_Init+0x13c>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1e59      	subs	r1, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	fbb1 f3f3 	udiv	r3, r1, r3
 8005776:	1c59      	adds	r1, r3, #1
 8005778:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800577c:	400b      	ands	r3, r1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_I2C_Init+0x138>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1e59      	subs	r1, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005790:	3301      	adds	r3, #1
 8005792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005796:	e051      	b.n	800583c <HAL_I2C_Init+0x1dc>
 8005798:	2304      	movs	r3, #4
 800579a:	e04f      	b.n	800583c <HAL_I2C_Init+0x1dc>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d111      	bne.n	80057c8 <HAL_I2C_Init+0x168>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1e58      	subs	r0, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	440b      	add	r3, r1
 80057b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b6:	3301      	adds	r3, #1
 80057b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf0c      	ite	eq
 80057c0:	2301      	moveq	r3, #1
 80057c2:	2300      	movne	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e012      	b.n	80057ee <HAL_I2C_Init+0x18e>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1e58      	subs	r0, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6859      	ldr	r1, [r3, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	0099      	lsls	r1, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	fbb0 f3f3 	udiv	r3, r0, r3
 80057de:	3301      	adds	r3, #1
 80057e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bf0c      	ite	eq
 80057e8:	2301      	moveq	r3, #1
 80057ea:	2300      	movne	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Init+0x196>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e022      	b.n	800583c <HAL_I2C_Init+0x1dc>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10e      	bne.n	800581c <HAL_I2C_Init+0x1bc>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1e58      	subs	r0, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6859      	ldr	r1, [r3, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	440b      	add	r3, r1
 800580c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005810:	3301      	adds	r3, #1
 8005812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581a:	e00f      	b.n	800583c <HAL_I2C_Init+0x1dc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	1e58      	subs	r0, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6859      	ldr	r1, [r3, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	0099      	lsls	r1, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005832:	3301      	adds	r3, #1
 8005834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	6809      	ldr	r1, [r1, #0]
 8005840:	4313      	orrs	r3, r2
 8005842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800586a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6911      	ldr	r1, [r2, #16]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68d2      	ldr	r2, [r2, #12]
 8005876:	4311      	orrs	r1, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	430b      	orrs	r3, r1
 800587e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	000186a0 	.word	0x000186a0
 80058d8:	001e847f 	.word	0x001e847f
 80058dc:	003d08ff 	.word	0x003d08ff
 80058e0:	431bde83 	.word	0x431bde83
 80058e4:	10624dd3 	.word	0x10624dd3

080058e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e128      	b.n	8005b4c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a90      	ldr	r2, [pc, #576]	@ (8005b54 <HAL_I2S_Init+0x26c>)
 8005912:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fc f8ad 	bl	8001a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005930:	f023 030f 	bic.w	r3, r3, #15
 8005934:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2202      	movs	r2, #2
 800593c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d060      	beq.n	8005a08 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800594e:	2310      	movs	r3, #16
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	e001      	b.n	8005958 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005954:	2320      	movs	r3, #32
 8005956:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b20      	cmp	r3, #32
 800595e:	d802      	bhi.n	8005966 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005966:	2001      	movs	r0, #1
 8005968:	f001 f9c4 	bl	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 800596c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005976:	d125      	bne.n	80059c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d010      	beq.n	80059a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	fbb2 f2f3 	udiv	r2, r2, r3
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	3305      	adds	r3, #5
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	e01f      	b.n	80059e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	461a      	mov	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	3305      	adds	r3, #5
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e00e      	b.n	80059e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	461a      	mov	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	fbb2 f3f3 	udiv	r3, r2, r3
 80059de:	3305      	adds	r3, #5
 80059e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4a5c      	ldr	r2, [pc, #368]	@ (8005b58 <HAL_I2S_Init+0x270>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	e003      	b.n	8005a10 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d902      	bls.n	8005a1c <HAL_I2S_Init+0x134>
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2bff      	cmp	r3, #255	@ 0xff
 8005a1a:	d907      	bls.n	8005a2c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a20:	f043 0210 	orr.w	r2, r3, #16
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e08f      	b.n	8005b4c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	ea42 0103 	orr.w	r1, r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a4a:	f023 030f 	bic.w	r3, r3, #15
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6851      	ldr	r1, [r2, #4]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6892      	ldr	r2, [r2, #8]
 8005a56:	4311      	orrs	r1, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68d2      	ldr	r2, [r2, #12]
 8005a5c:	4311      	orrs	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6992      	ldr	r2, [r2, #24]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a6e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d161      	bne.n	8005b3c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a38      	ldr	r2, [pc, #224]	@ (8005b5c <HAL_I2S_Init+0x274>)
 8005a7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a37      	ldr	r2, [pc, #220]	@ (8005b60 <HAL_I2S_Init+0x278>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_I2S_Init+0x1a4>
 8005a88:	4b36      	ldr	r3, [pc, #216]	@ (8005b64 <HAL_I2S_Init+0x27c>)
 8005a8a:	e001      	b.n	8005a90 <HAL_I2S_Init+0x1a8>
 8005a8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	4932      	ldr	r1, [pc, #200]	@ (8005b60 <HAL_I2S_Init+0x278>)
 8005a98:	428a      	cmp	r2, r1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_I2S_Init+0x1b8>
 8005a9c:	4a31      	ldr	r2, [pc, #196]	@ (8005b64 <HAL_I2S_Init+0x27c>)
 8005a9e:	e001      	b.n	8005aa4 <HAL_I2S_Init+0x1bc>
 8005aa0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005aa4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005aa8:	f023 030f 	bic.w	r3, r3, #15
 8005aac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8005b60 <HAL_I2S_Init+0x278>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d101      	bne.n	8005abc <HAL_I2S_Init+0x1d4>
 8005ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b64 <HAL_I2S_Init+0x27c>)
 8005aba:	e001      	b.n	8005ac0 <HAL_I2S_Init+0x1d8>
 8005abc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a25      	ldr	r2, [pc, #148]	@ (8005b60 <HAL_I2S_Init+0x278>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2S_Init+0x1ea>
 8005ace:	4b25      	ldr	r3, [pc, #148]	@ (8005b64 <HAL_I2S_Init+0x27c>)
 8005ad0:	e001      	b.n	8005ad6 <HAL_I2S_Init+0x1ee>
 8005ad2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae2:	d003      	beq.n	8005aec <HAL_I2S_Init+0x204>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e001      	b.n	8005af8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b02:	4313      	orrs	r3, r2
 8005b04:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b16:	4313      	orrs	r3, r2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	897b      	ldrh	r3, [r7, #10]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b24:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8005b60 <HAL_I2S_Init+0x278>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d101      	bne.n	8005b34 <HAL_I2S_Init+0x24c>
 8005b30:	4b0c      	ldr	r3, [pc, #48]	@ (8005b64 <HAL_I2S_Init+0x27c>)
 8005b32:	e001      	b.n	8005b38 <HAL_I2S_Init+0x250>
 8005b34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b38:	897a      	ldrh	r2, [r7, #10]
 8005b3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3720      	adds	r7, #32
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	08005c5f 	.word	0x08005c5f
 8005b58:	cccccccd 	.word	0xcccccccd
 8005b5c:	08005d75 	.word	0x08005d75
 8005b60:	40003800 	.word	0x40003800
 8005b64:	40003400 	.word	0x40003400

08005b68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10e      	bne.n	8005bf8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005be8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff ffb8 	bl	8005b68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c12:	b292      	uxth	r2, r2
 8005c14:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10e      	bne.n	8005c56 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff ff93 	bl	8005b7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d13a      	bne.n	8005cf0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d109      	bne.n	8005c98 <I2S_IRQHandler+0x3a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8e:	2b40      	cmp	r3, #64	@ 0x40
 8005c90:	d102      	bne.n	8005c98 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ffb4 	bl	8005c00 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ca0:	d126      	bne.n	8005cf0 <I2S_IRQHandler+0x92>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d11f      	bne.n	8005cf0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005cbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce2:	f043 0202 	orr.w	r2, r3, #2
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ff50 	bl	8005b90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d136      	bne.n	8005d6a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d109      	bne.n	8005d1a <I2S_IRQHandler+0xbc>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d10:	2b80      	cmp	r3, #128	@ 0x80
 8005d12:	d102      	bne.n	8005d1a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ff45 	bl	8005ba4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d122      	bne.n	8005d6a <I2S_IRQHandler+0x10c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d11b      	bne.n	8005d6a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d40:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5c:	f043 0204 	orr.w	r2, r3, #4
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff ff13 	bl	8005b90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a92      	ldr	r2, [pc, #584]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d101      	bne.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d8e:	4b92      	ldr	r3, [pc, #584]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d90:	e001      	b.n	8005d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a8b      	ldr	r2, [pc, #556]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d101      	bne.n	8005db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005dac:	4b8a      	ldr	r3, [pc, #552]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dae:	e001      	b.n	8005db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005db0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc0:	d004      	beq.n	8005dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 8099 	bne.w	8005efe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d107      	bne.n	8005de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f925 	bl	8006030 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d107      	bne.n	8005e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9c8 	bl	8006190 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d13a      	bne.n	8005e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d035      	beq.n	8005e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a6e      	ldr	r2, [pc, #440]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e1e:	4b6e      	ldr	r3, [pc, #440]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e20:	e001      	b.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4969      	ldr	r1, [pc, #420]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e2e:	428b      	cmp	r3, r1
 8005e30:	d101      	bne.n	8005e36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e32:	4b69      	ldr	r3, [pc, #420]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e34:	e001      	b.n	8005e3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e3e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e72:	f043 0202 	orr.w	r2, r3, #2
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fe88 	bl	8005b90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	f040 80c3 	bne.w	8006012 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80bd 	beq.w	8006012 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ea6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a49      	ldr	r2, [pc, #292]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005eb2:	4b49      	ldr	r3, [pc, #292]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005eb4:	e001      	b.n	8005eba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005eb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4944      	ldr	r1, [pc, #272]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ec2:	428b      	cmp	r3, r1
 8005ec4:	d101      	bne.n	8005eca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005ec6:	4b44      	ldr	r3, [pc, #272]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ec8:	e001      	b.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005eca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ece:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ed2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fe4a 	bl	8005b90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005efc:	e089      	b.n	8006012 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d107      	bne.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8be 	bl	8006094 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d107      	bne.n	8005f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f8fd 	bl	800612c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d12f      	bne.n	8005f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d02a      	beq.n	8005f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f60:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f62:	e001      	b.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4919      	ldr	r1, [pc, #100]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f70:	428b      	cmp	r3, r1
 8005f72:	d101      	bne.n	8005f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f74:	4b18      	ldr	r3, [pc, #96]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f76:	e001      	b.n	8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8e:	f043 0202 	orr.w	r2, r3, #2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fdfa 	bl	8005b90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d136      	bne.n	8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d031      	beq.n	8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a07      	ldr	r2, [pc, #28]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005fba:	4b07      	ldr	r3, [pc, #28]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fbc:	e001      	b.n	8005fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005fbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4902      	ldr	r1, [pc, #8]	@ (8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fca:	428b      	cmp	r3, r1
 8005fcc:	d106      	bne.n	8005fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005fce:	4b02      	ldr	r3, [pc, #8]	@ (8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fd0:	e006      	b.n	8005fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005fd2:	bf00      	nop
 8005fd4:	40003800 	.word	0x40003800
 8005fd8:	40003400 	.word	0x40003400
 8005fdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fe0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fe4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ff4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006002:	f043 0204 	orr.w	r2, r3, #4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fdc0 	bl	8005b90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006010:	e000      	b.n	8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006012:	bf00      	nop
}
 8006014:	bf00      	nop
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	1c99      	adds	r1, r3, #2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6251      	str	r1, [r2, #36]	@ 0x24
 8006042:	881a      	ldrh	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d113      	bne.n	800608a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006070:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ffc9 	bl	800601c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	1c99      	adds	r1, r3, #2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80060a6:	8819      	ldrh	r1, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006124 <I2SEx_TxISR_I2SExt+0x90>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d101      	bne.n	80060b6 <I2SEx_TxISR_I2SExt+0x22>
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <I2SEx_TxISR_I2SExt+0x94>)
 80060b4:	e001      	b.n	80060ba <I2SEx_TxISR_I2SExt+0x26>
 80060b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060ba:	460a      	mov	r2, r1
 80060bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d121      	bne.n	800611a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a12      	ldr	r2, [pc, #72]	@ (8006124 <I2SEx_TxISR_I2SExt+0x90>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d101      	bne.n	80060e4 <I2SEx_TxISR_I2SExt+0x50>
 80060e0:	4b11      	ldr	r3, [pc, #68]	@ (8006128 <I2SEx_TxISR_I2SExt+0x94>)
 80060e2:	e001      	b.n	80060e8 <I2SEx_TxISR_I2SExt+0x54>
 80060e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	490d      	ldr	r1, [pc, #52]	@ (8006124 <I2SEx_TxISR_I2SExt+0x90>)
 80060f0:	428b      	cmp	r3, r1
 80060f2:	d101      	bne.n	80060f8 <I2SEx_TxISR_I2SExt+0x64>
 80060f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <I2SEx_TxISR_I2SExt+0x94>)
 80060f6:	e001      	b.n	80060fc <I2SEx_TxISR_I2SExt+0x68>
 80060f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006100:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff81 	bl	800601c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40003800 	.word	0x40003800
 8006128:	40003400 	.word	0x40003400

0800612c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68d8      	ldr	r0, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	1c99      	adds	r1, r3, #2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006144:	b282      	uxth	r2, r0
 8006146:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d113      	bne.n	8006188 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800616e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ff4a 	bl	800601c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a20      	ldr	r2, [pc, #128]	@ (8006220 <I2SEx_RxISR_I2SExt+0x90>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d101      	bne.n	80061a6 <I2SEx_RxISR_I2SExt+0x16>
 80061a2:	4b20      	ldr	r3, [pc, #128]	@ (8006224 <I2SEx_RxISR_I2SExt+0x94>)
 80061a4:	e001      	b.n	80061aa <I2SEx_RxISR_I2SExt+0x1a>
 80061a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061aa:	68d8      	ldr	r0, [r3, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	1c99      	adds	r1, r3, #2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80061b6:	b282      	uxth	r2, r0
 80061b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d121      	bne.n	8006216 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a12      	ldr	r2, [pc, #72]	@ (8006220 <I2SEx_RxISR_I2SExt+0x90>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d101      	bne.n	80061e0 <I2SEx_RxISR_I2SExt+0x50>
 80061dc:	4b11      	ldr	r3, [pc, #68]	@ (8006224 <I2SEx_RxISR_I2SExt+0x94>)
 80061de:	e001      	b.n	80061e4 <I2SEx_RxISR_I2SExt+0x54>
 80061e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	490d      	ldr	r1, [pc, #52]	@ (8006220 <I2SEx_RxISR_I2SExt+0x90>)
 80061ec:	428b      	cmp	r3, r1
 80061ee:	d101      	bne.n	80061f4 <I2SEx_RxISR_I2SExt+0x64>
 80061f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <I2SEx_RxISR_I2SExt+0x94>)
 80061f2:	e001      	b.n	80061f8 <I2SEx_RxISR_I2SExt+0x68>
 80061f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ff03 	bl	800601c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40003800 	.word	0x40003800
 8006224:	40003400 	.word	0x40003400

08006228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e267      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d075      	beq.n	8006332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006246:	4b88      	ldr	r3, [pc, #544]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 030c 	and.w	r3, r3, #12
 800624e:	2b04      	cmp	r3, #4
 8006250:	d00c      	beq.n	800626c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006252:	4b85      	ldr	r3, [pc, #532]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800625a:	2b08      	cmp	r3, #8
 800625c:	d112      	bne.n	8006284 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800625e:	4b82      	ldr	r3, [pc, #520]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800626a:	d10b      	bne.n	8006284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626c:	4b7e      	ldr	r3, [pc, #504]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d05b      	beq.n	8006330 <HAL_RCC_OscConfig+0x108>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d157      	bne.n	8006330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e242      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628c:	d106      	bne.n	800629c <HAL_RCC_OscConfig+0x74>
 800628e:	4b76      	ldr	r3, [pc, #472]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a75      	ldr	r2, [pc, #468]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e01d      	b.n	80062d8 <HAL_RCC_OscConfig+0xb0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x98>
 80062a6:	4b70      	ldr	r3, [pc, #448]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6f      	ldr	r2, [pc, #444]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a6c      	ldr	r2, [pc, #432]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e00b      	b.n	80062d8 <HAL_RCC_OscConfig+0xb0>
 80062c0:	4b69      	ldr	r3, [pc, #420]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a68      	ldr	r2, [pc, #416]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	4b66      	ldr	r3, [pc, #408]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a65      	ldr	r2, [pc, #404]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d013      	beq.n	8006308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fb fe08 	bl	8001ef4 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062e8:	f7fb fe04 	bl	8001ef4 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	@ 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e207      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0f0      	beq.n	80062e8 <HAL_RCC_OscConfig+0xc0>
 8006306:	e014      	b.n	8006332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fb fdf4 	bl	8001ef4 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006310:	f7fb fdf0 	bl	8001ef4 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b64      	cmp	r3, #100	@ 0x64
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e1f3      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006322:	4b51      	ldr	r3, [pc, #324]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f0      	bne.n	8006310 <HAL_RCC_OscConfig+0xe8>
 800632e:	e000      	b.n	8006332 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d063      	beq.n	8006406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800633e:	4b4a      	ldr	r3, [pc, #296]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800634a:	4b47      	ldr	r3, [pc, #284]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006352:	2b08      	cmp	r3, #8
 8006354:	d11c      	bne.n	8006390 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006356:	4b44      	ldr	r3, [pc, #272]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d116      	bne.n	8006390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006362:	4b41      	ldr	r3, [pc, #260]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_RCC_OscConfig+0x152>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d001      	beq.n	800637a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e1c7      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637a:	4b3b      	ldr	r3, [pc, #236]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4937      	ldr	r1, [pc, #220]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 800638a:	4313      	orrs	r3, r2
 800638c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638e:	e03a      	b.n	8006406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d020      	beq.n	80063da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006398:	4b34      	ldr	r3, [pc, #208]	@ (800646c <HAL_RCC_OscConfig+0x244>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639e:	f7fb fda9 	bl	8001ef4 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a6:	f7fb fda5 	bl	8001ef4 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e1a8      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c4:	4b28      	ldr	r3, [pc, #160]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4925      	ldr	r1, [pc, #148]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	600b      	str	r3, [r1, #0]
 80063d8:	e015      	b.n	8006406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063da:	4b24      	ldr	r3, [pc, #144]	@ (800646c <HAL_RCC_OscConfig+0x244>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e0:	f7fb fd88 	bl	8001ef4 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e8:	f7fb fd84 	bl	8001ef4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e187      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f0      	bne.n	80063e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d036      	beq.n	8006480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800641a:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <HAL_RCC_OscConfig+0x248>)
 800641c:	2201      	movs	r2, #1
 800641e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006420:	f7fb fd68 	bl	8001ef4 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006428:	f7fb fd64 	bl	8001ef4 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e167      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800643a:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RCC_OscConfig+0x240>)
 800643c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0f0      	beq.n	8006428 <HAL_RCC_OscConfig+0x200>
 8006446:	e01b      	b.n	8006480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <HAL_RCC_OscConfig+0x248>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644e:	f7fb fd51 	bl	8001ef4 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006454:	e00e      	b.n	8006474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006456:	f7fb fd4d 	bl	8001ef4 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d907      	bls.n	8006474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e150      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
 8006468:	40023800 	.word	0x40023800
 800646c:	42470000 	.word	0x42470000
 8006470:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006474:	4b88      	ldr	r3, [pc, #544]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1ea      	bne.n	8006456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8097 	beq.w	80065bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006492:	4b81      	ldr	r3, [pc, #516]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80064a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80064ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064be:	4b77      	ldr	r3, [pc, #476]	@ (800669c <HAL_RCC_OscConfig+0x474>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d118      	bne.n	80064fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ca:	4b74      	ldr	r3, [pc, #464]	@ (800669c <HAL_RCC_OscConfig+0x474>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a73      	ldr	r2, [pc, #460]	@ (800669c <HAL_RCC_OscConfig+0x474>)
 80064d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064d6:	f7fb fd0d 	bl	8001ef4 <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064de:	f7fb fd09 	bl	8001ef4 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e10c      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f0:	4b6a      	ldr	r3, [pc, #424]	@ (800669c <HAL_RCC_OscConfig+0x474>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0f0      	beq.n	80064de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d106      	bne.n	8006512 <HAL_RCC_OscConfig+0x2ea>
 8006504:	4b64      	ldr	r3, [pc, #400]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006508:	4a63      	ldr	r2, [pc, #396]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006510:	e01c      	b.n	800654c <HAL_RCC_OscConfig+0x324>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b05      	cmp	r3, #5
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0x30c>
 800651a:	4b5f      	ldr	r3, [pc, #380]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651e:	4a5e      	ldr	r2, [pc, #376]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006520:	f043 0304 	orr.w	r3, r3, #4
 8006524:	6713      	str	r3, [r2, #112]	@ 0x70
 8006526:	4b5c      	ldr	r3, [pc, #368]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652a:	4a5b      	ldr	r2, [pc, #364]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	6713      	str	r3, [r2, #112]	@ 0x70
 8006532:	e00b      	b.n	800654c <HAL_RCC_OscConfig+0x324>
 8006534:	4b58      	ldr	r3, [pc, #352]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006538:	4a57      	ldr	r2, [pc, #348]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006540:	4b55      	ldr	r3, [pc, #340]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006544:	4a54      	ldr	r2, [pc, #336]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006546:	f023 0304 	bic.w	r3, r3, #4
 800654a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006554:	f7fb fcce 	bl	8001ef4 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655a:	e00a      	b.n	8006572 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655c:	f7fb fcca 	bl	8001ef4 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e0cb      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006572:	4b49      	ldr	r3, [pc, #292]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0ee      	beq.n	800655c <HAL_RCC_OscConfig+0x334>
 800657e:	e014      	b.n	80065aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006580:	f7fb fcb8 	bl	8001ef4 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006586:	e00a      	b.n	800659e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006588:	f7fb fcb4 	bl	8001ef4 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e0b5      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800659e:	4b3e      	ldr	r3, [pc, #248]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1ee      	bne.n	8006588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d105      	bne.n	80065bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065b0:	4b39      	ldr	r3, [pc, #228]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	4a38      	ldr	r2, [pc, #224]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80065b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80a1 	beq.w	8006708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065c6:	4b34      	ldr	r3, [pc, #208]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d05c      	beq.n	800668c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d141      	bne.n	800665e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065da:	4b31      	ldr	r3, [pc, #196]	@ (80066a0 <HAL_RCC_OscConfig+0x478>)
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e0:	f7fb fc88 	bl	8001ef4 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fb fc84 	bl	8001ef4 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e087      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fa:	4b27      	ldr	r3, [pc, #156]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69da      	ldr	r2, [r3, #28]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	019b      	lsls	r3, r3, #6
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	085b      	lsrs	r3, r3, #1
 800661e:	3b01      	subs	r3, #1
 8006620:	041b      	lsls	r3, r3, #16
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	491b      	ldr	r1, [pc, #108]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006630:	4b1b      	ldr	r3, [pc, #108]	@ (80066a0 <HAL_RCC_OscConfig+0x478>)
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006636:	f7fb fc5d 	bl	8001ef4 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663e:	f7fb fc59 	bl	8001ef4 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e05c      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006650:	4b11      	ldr	r3, [pc, #68]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x416>
 800665c:	e054      	b.n	8006708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665e:	4b10      	ldr	r3, [pc, #64]	@ (80066a0 <HAL_RCC_OscConfig+0x478>)
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fb fc46 	bl	8001ef4 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800666c:	f7fb fc42 	bl	8001ef4 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e045      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667e:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <HAL_RCC_OscConfig+0x470>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x444>
 800668a:	e03d      	b.n	8006708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d107      	bne.n	80066a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e038      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
 8006698:	40023800 	.word	0x40023800
 800669c:	40007000 	.word	0x40007000
 80066a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006714 <HAL_RCC_OscConfig+0x4ec>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d028      	beq.n	8006704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066bc:	429a      	cmp	r2, r3
 80066be:	d121      	bne.n	8006704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d11a      	bne.n	8006704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066d4:	4013      	ands	r3, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066dc:	4293      	cmp	r3, r2
 80066de:	d111      	bne.n	8006704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	3b01      	subs	r3, #1
 80066ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d107      	bne.n	8006704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40023800 	.word	0x40023800

08006718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0cc      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800672c:	4b68      	ldr	r3, [pc, #416]	@ (80068d0 <HAL_RCC_ClockConfig+0x1b8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d90c      	bls.n	8006754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673a:	4b65      	ldr	r3, [pc, #404]	@ (80068d0 <HAL_RCC_ClockConfig+0x1b8>)
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006742:	4b63      	ldr	r3, [pc, #396]	@ (80068d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d001      	beq.n	8006754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0b8      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d020      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800676c:	4b59      	ldr	r3, [pc, #356]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	4a58      	ldr	r2, [pc, #352]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006784:	4b53      	ldr	r3, [pc, #332]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4a52      	ldr	r2, [pc, #328]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 800678a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800678e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006790:	4b50      	ldr	r3, [pc, #320]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	494d      	ldr	r1, [pc, #308]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d044      	beq.n	8006838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d107      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b6:	4b47      	ldr	r3, [pc, #284]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d119      	bne.n	80067f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e07f      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d003      	beq.n	80067d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d6:	4b3f      	ldr	r3, [pc, #252]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e06f      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e6:	4b3b      	ldr	r3, [pc, #236]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e067      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067f6:	4b37      	ldr	r3, [pc, #220]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f023 0203 	bic.w	r2, r3, #3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4934      	ldr	r1, [pc, #208]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006804:	4313      	orrs	r3, r2
 8006806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006808:	f7fb fb74 	bl	8001ef4 <HAL_GetTick>
 800680c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800680e:	e00a      	b.n	8006826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006810:	f7fb fb70 	bl	8001ef4 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800681e:	4293      	cmp	r3, r2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e04f      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006826:	4b2b      	ldr	r3, [pc, #172]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 020c 	and.w	r2, r3, #12
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	429a      	cmp	r2, r3
 8006836:	d1eb      	bne.n	8006810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006838:	4b25      	ldr	r3, [pc, #148]	@ (80068d0 <HAL_RCC_ClockConfig+0x1b8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d20c      	bcs.n	8006860 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006846:	4b22      	ldr	r3, [pc, #136]	@ (80068d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684e:	4b20      	ldr	r3, [pc, #128]	@ (80068d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e032      	b.n	80068c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800686c:	4b19      	ldr	r3, [pc, #100]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	4916      	ldr	r1, [pc, #88]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	4313      	orrs	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800688a:	4b12      	ldr	r3, [pc, #72]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	490e      	ldr	r1, [pc, #56]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	4313      	orrs	r3, r2
 800689c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800689e:	f000 f821 	bl	80068e4 <HAL_RCC_GetSysClockFreq>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <HAL_RCC_ClockConfig+0x1bc>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	490a      	ldr	r1, [pc, #40]	@ (80068d8 <HAL_RCC_ClockConfig+0x1c0>)
 80068b0:	5ccb      	ldrb	r3, [r1, r3]
 80068b2:	fa22 f303 	lsr.w	r3, r2, r3
 80068b6:	4a09      	ldr	r2, [pc, #36]	@ (80068dc <HAL_RCC_ClockConfig+0x1c4>)
 80068b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068ba:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <HAL_RCC_ClockConfig+0x1c8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fb fad4 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40023c00 	.word	0x40023c00
 80068d4:	40023800 	.word	0x40023800
 80068d8:	0800b89c 	.word	0x0800b89c
 80068dc:	20000014 	.word	0x20000014
 80068e0:	20000018 	.word	0x20000018

080068e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e8:	b094      	sub	sp, #80	@ 0x50
 80068ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068fc:	4b79      	ldr	r3, [pc, #484]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 030c 	and.w	r3, r3, #12
 8006904:	2b08      	cmp	r3, #8
 8006906:	d00d      	beq.n	8006924 <HAL_RCC_GetSysClockFreq+0x40>
 8006908:	2b08      	cmp	r3, #8
 800690a:	f200 80e1 	bhi.w	8006ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x34>
 8006912:	2b04      	cmp	r3, #4
 8006914:	d003      	beq.n	800691e <HAL_RCC_GetSysClockFreq+0x3a>
 8006916:	e0db      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006918:	4b73      	ldr	r3, [pc, #460]	@ (8006ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800691a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800691c:	e0db      	b.n	8006ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800691e:	4b73      	ldr	r3, [pc, #460]	@ (8006aec <HAL_RCC_GetSysClockFreq+0x208>)
 8006920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006922:	e0d8      	b.n	8006ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006924:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800692c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800692e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d063      	beq.n	8006a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	099b      	lsrs	r3, r3, #6
 8006940:	2200      	movs	r2, #0
 8006942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006944:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694c:	633b      	str	r3, [r7, #48]	@ 0x30
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
 8006952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006956:	4622      	mov	r2, r4
 8006958:	462b      	mov	r3, r5
 800695a:	f04f 0000 	mov.w	r0, #0
 800695e:	f04f 0100 	mov.w	r1, #0
 8006962:	0159      	lsls	r1, r3, #5
 8006964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006968:	0150      	lsls	r0, r2, #5
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4621      	mov	r1, r4
 8006970:	1a51      	subs	r1, r2, r1
 8006972:	6139      	str	r1, [r7, #16]
 8006974:	4629      	mov	r1, r5
 8006976:	eb63 0301 	sbc.w	r3, r3, r1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006988:	4659      	mov	r1, fp
 800698a:	018b      	lsls	r3, r1, #6
 800698c:	4651      	mov	r1, sl
 800698e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006992:	4651      	mov	r1, sl
 8006994:	018a      	lsls	r2, r1, #6
 8006996:	4651      	mov	r1, sl
 8006998:	ebb2 0801 	subs.w	r8, r2, r1
 800699c:	4659      	mov	r1, fp
 800699e:	eb63 0901 	sbc.w	r9, r3, r1
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069b6:	4690      	mov	r8, r2
 80069b8:	4699      	mov	r9, r3
 80069ba:	4623      	mov	r3, r4
 80069bc:	eb18 0303 	adds.w	r3, r8, r3
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	462b      	mov	r3, r5
 80069c4:	eb49 0303 	adc.w	r3, r9, r3
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069d6:	4629      	mov	r1, r5
 80069d8:	024b      	lsls	r3, r1, #9
 80069da:	4621      	mov	r1, r4
 80069dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069e0:	4621      	mov	r1, r4
 80069e2:	024a      	lsls	r2, r1, #9
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ea:	2200      	movs	r2, #0
 80069ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069f4:	f7f9 fbe8 	bl	80001c8 <__aeabi_uldivmod>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4613      	mov	r3, r2
 80069fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a00:	e058      	b.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a02:	4b38      	ldr	r3, [pc, #224]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	099b      	lsrs	r3, r3, #6
 8006a08:	2200      	movs	r2, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	2300      	movs	r3, #0
 8006a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	f04f 0000 	mov.w	r0, #0
 8006a24:	f04f 0100 	mov.w	r1, #0
 8006a28:	0159      	lsls	r1, r3, #5
 8006a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a2e:	0150      	lsls	r0, r2, #5
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4641      	mov	r1, r8
 8006a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a54:	ebb2 040a 	subs.w	r4, r2, sl
 8006a58:	eb63 050b 	sbc.w	r5, r3, fp
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	00eb      	lsls	r3, r5, #3
 8006a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a6a:	00e2      	lsls	r2, r4, #3
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	4643      	mov	r3, r8
 8006a72:	18e3      	adds	r3, r4, r3
 8006a74:	603b      	str	r3, [r7, #0]
 8006a76:	464b      	mov	r3, r9
 8006a78:	eb45 0303 	adc.w	r3, r5, r3
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	028b      	lsls	r3, r1, #10
 8006a8e:	4621      	mov	r1, r4
 8006a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a94:	4621      	mov	r1, r4
 8006a96:	028a      	lsls	r2, r1, #10
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	61fa      	str	r2, [r7, #28]
 8006aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aa8:	f7f9 fb8e 	bl	80001c8 <__aeabi_uldivmod>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	3301      	adds	r3, #1
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006acc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ace:	e002      	b.n	8006ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ad0:	4b05      	ldr	r3, [pc, #20]	@ (8006ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3750      	adds	r7, #80	@ 0x50
 8006adc:	46bd      	mov	sp, r7
 8006ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	00f42400 	.word	0x00f42400
 8006aec:	007a1200 	.word	0x007a1200

08006af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006af4:	4b03      	ldr	r3, [pc, #12]	@ (8006b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8006af6:	681b      	ldr	r3, [r3, #0]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000014 	.word	0x20000014

08006b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b0c:	f7ff fff0 	bl	8006af0 <HAL_RCC_GetHCLKFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0a9b      	lsrs	r3, r3, #10
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4903      	ldr	r1, [pc, #12]	@ (8006b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	0800b8ac 	.word	0x0800b8ac

08006b30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d035      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b58:	4b62      	ldr	r3, [pc, #392]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b5e:	f7fb f9c9 	bl	8001ef4 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b66:	f7fb f9c5 	bl	8001ef4 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e0b0      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b78:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	019a      	lsls	r2, r3, #6
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	071b      	lsls	r3, r3, #28
 8006b90:	4955      	ldr	r1, [pc, #340]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b98:	4b52      	ldr	r3, [pc, #328]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b9e:	f7fb f9a9 	bl	8001ef4 <HAL_GetTick>
 8006ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ba6:	f7fb f9a5 	bl	8001ef4 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e090      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8083 	beq.w	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	4b44      	ldr	r3, [pc, #272]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	4a43      	ldr	r2, [pc, #268]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006be2:	4b41      	ldr	r3, [pc, #260]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bee:	4b3f      	ldr	r3, [pc, #252]	@ (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bf8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfa:	f7fb f97b 	bl	8001ef4 <HAL_GetTick>
 8006bfe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c02:	f7fb f977 	bl	8001ef4 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e062      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c14:	4b35      	ldr	r3, [pc, #212]	@ (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c20:	4b31      	ldr	r3, [pc, #196]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c28:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d028      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c48:	4b29      	ldr	r3, [pc, #164]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	4b28      	ldr	r3, [pc, #160]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c54:	4a24      	ldr	r2, [pc, #144]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c5a:	4b23      	ldr	r3, [pc, #140]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d114      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c66:	f7fb f945 	bl	8001ef4 <HAL_GetTick>
 8006c6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c6c:	e00a      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6e:	f7fb f941 	bl	8001ef4 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e02a      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	4b18      	ldr	r3, [pc, #96]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0ee      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c9c:	d10d      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c9e:	4b12      	ldr	r3, [pc, #72]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb2:	490d      	ldr	r1, [pc, #52]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	608b      	str	r3, [r1, #8]
 8006cb8:	e005      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006cc4:	6093      	str	r3, [r2, #8]
 8006cc6:	4b08      	ldr	r3, [pc, #32]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd2:	4905      	ldr	r1, [pc, #20]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	42470068 	.word	0x42470068
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40007000 	.word	0x40007000
 8006cf0:	42470e40 	.word	0x42470e40

08006cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d13f      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d12:	4b24      	ldr	r3, [pc, #144]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d1a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d28:	d12f      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d2c:	617b      	str	r3, [r7, #20]
          break;
 8006d2e:	e02f      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d30:	4b1c      	ldr	r3, [pc, #112]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d3c:	d108      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d3e:	4b19      	ldr	r3, [pc, #100]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d46:	4a19      	ldr	r2, [pc, #100]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	e007      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d50:	4b14      	ldr	r3, [pc, #80]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d58:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d60:	4b10      	ldr	r3, [pc, #64]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	fb02 f303 	mul.w	r3, r2, r3
 8006d72:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d74:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d7a:	0f1b      	lsrs	r3, r3, #28
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	617b      	str	r3, [r7, #20]
          break;
 8006d88:	e002      	b.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
          break;
 8006d8e:	bf00      	nop
        }
      }
      break;
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006d92:	bf00      	nop
    }
  }
  return frequency;
 8006d94:	697b      	ldr	r3, [r7, #20]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40023800 	.word	0x40023800
 8006da8:	00bb8000 	.word	0x00bb8000
 8006dac:	007a1200 	.word	0x007a1200
 8006db0:	00f42400 	.word	0x00f42400

08006db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e07b      	b.n	8006ebe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dd6:	d009      	beq.n	8006dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	61da      	str	r2, [r3, #28]
 8006dde:	e005      	b.n	8006dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fa feb4 	bl	8001b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e70:	ea42 0103 	orr.w	r1, r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	0c1b      	lsrs	r3, r3, #16
 8006e8a:	f003 0104 	and.w	r1, r3, #4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	f003 0210 	and.w	r2, r3, #16
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e041      	b.n	8006f5c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fa fe89 	bl	8001c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f000 fad9 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e041      	b.n	8006ffa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f839 	bl	8007002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f000 fa8a 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_TIM_PWM_Start+0x24>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	e022      	b.n	8007082 <HAL_TIM_PWM_Start+0x6a>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d109      	bne.n	8007056 <HAL_TIM_PWM_Start+0x3e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	e015      	b.n	8007082 <HAL_TIM_PWM_Start+0x6a>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b08      	cmp	r3, #8
 800705a:	d109      	bne.n	8007070 <HAL_TIM_PWM_Start+0x58>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	bf14      	ite	ne
 8007068:	2301      	movne	r3, #1
 800706a:	2300      	moveq	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	e008      	b.n	8007082 <HAL_TIM_PWM_Start+0x6a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b01      	cmp	r3, #1
 800707a:	bf14      	ite	ne
 800707c:	2301      	movne	r3, #1
 800707e:	2300      	moveq	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e07c      	b.n	8007184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <HAL_TIM_PWM_Start+0x82>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007098:	e013      	b.n	80070c2 <HAL_TIM_PWM_Start+0xaa>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d104      	bne.n	80070aa <HAL_TIM_PWM_Start+0x92>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070a8:	e00b      	b.n	80070c2 <HAL_TIM_PWM_Start+0xaa>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_PWM_Start+0xa2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070b8:	e003      	b.n	80070c2 <HAL_TIM_PWM_Start+0xaa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fce6 	bl	8007a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2d      	ldr	r2, [pc, #180]	@ (800718c <HAL_TIM_PWM_Start+0x174>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_TIM_PWM_Start+0xcc>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a2c      	ldr	r2, [pc, #176]	@ (8007190 <HAL_TIM_PWM_Start+0x178>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d101      	bne.n	80070e8 <HAL_TIM_PWM_Start+0xd0>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <HAL_TIM_PWM_Start+0xd2>
 80070e8:	2300      	movs	r3, #0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a22      	ldr	r2, [pc, #136]	@ (800718c <HAL_TIM_PWM_Start+0x174>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d022      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007110:	d01d      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1f      	ldr	r2, [pc, #124]	@ (8007194 <HAL_TIM_PWM_Start+0x17c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d018      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1d      	ldr	r2, [pc, #116]	@ (8007198 <HAL_TIM_PWM_Start+0x180>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1c      	ldr	r2, [pc, #112]	@ (800719c <HAL_TIM_PWM_Start+0x184>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00e      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a16      	ldr	r2, [pc, #88]	@ (8007190 <HAL_TIM_PWM_Start+0x178>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d009      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <HAL_TIM_PWM_Start+0x188>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d004      	beq.n	800714e <HAL_TIM_PWM_Start+0x136>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <HAL_TIM_PWM_Start+0x18c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d111      	bne.n	8007172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b06      	cmp	r3, #6
 800715e:	d010      	beq.n	8007182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007170:	e007      	b.n	8007182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40001800 	.word	0x40001800

080071a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e0ae      	b.n	8007324 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b0c      	cmp	r3, #12
 80071d2:	f200 809f 	bhi.w	8007314 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071d6:	a201      	add	r2, pc, #4	@ (adr r2, 80071dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007211 	.word	0x08007211
 80071e0:	08007315 	.word	0x08007315
 80071e4:	08007315 	.word	0x08007315
 80071e8:	08007315 	.word	0x08007315
 80071ec:	08007251 	.word	0x08007251
 80071f0:	08007315 	.word	0x08007315
 80071f4:	08007315 	.word	0x08007315
 80071f8:	08007315 	.word	0x08007315
 80071fc:	08007293 	.word	0x08007293
 8007200:	08007315 	.word	0x08007315
 8007204:	08007315 	.word	0x08007315
 8007208:	08007315 	.word	0x08007315
 800720c:	080072d3 	.word	0x080072d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f9f6 	bl	8007608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0208 	orr.w	r2, r2, #8
 800722a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0204 	bic.w	r2, r2, #4
 800723a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6999      	ldr	r1, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	619a      	str	r2, [r3, #24]
      break;
 800724e:	e064      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fa46 	bl	80076e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800726a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800727a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6999      	ldr	r1, [r3, #24]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	619a      	str	r2, [r3, #24]
      break;
 8007290:	e043      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fa9b 	bl	80077d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0208 	orr.w	r2, r2, #8
 80072ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0204 	bic.w	r2, r2, #4
 80072bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69d9      	ldr	r1, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	61da      	str	r2, [r3, #28]
      break;
 80072d0:	e023      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 faef 	bl	80078bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69d9      	ldr	r1, [r3, #28]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	021a      	lsls	r2, r3, #8
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	61da      	str	r2, [r3, #28]
      break;
 8007312:	e002      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_TIM_ConfigClockSource+0x1c>
 8007344:	2302      	movs	r3, #2
 8007346:	e0b4      	b.n	80074b2 <HAL_TIM_ConfigClockSource+0x186>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800736e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007380:	d03e      	beq.n	8007400 <HAL_TIM_ConfigClockSource+0xd4>
 8007382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007386:	f200 8087 	bhi.w	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 800738a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800738e:	f000 8086 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x172>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007396:	d87f      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b70      	cmp	r3, #112	@ 0x70
 800739a:	d01a      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0xa6>
 800739c:	2b70      	cmp	r3, #112	@ 0x70
 800739e:	d87b      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b60      	cmp	r3, #96	@ 0x60
 80073a2:	d050      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x11a>
 80073a4:	2b60      	cmp	r3, #96	@ 0x60
 80073a6:	d877      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b50      	cmp	r3, #80	@ 0x50
 80073aa:	d03c      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0xfa>
 80073ac:	2b50      	cmp	r3, #80	@ 0x50
 80073ae:	d873      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b40      	cmp	r3, #64	@ 0x40
 80073b2:	d058      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x13a>
 80073b4:	2b40      	cmp	r3, #64	@ 0x40
 80073b6:	d86f      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b30      	cmp	r3, #48	@ 0x30
 80073ba:	d064      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073bc:	2b30      	cmp	r3, #48	@ 0x30
 80073be:	d86b      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d060      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d867      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d05c      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d05a      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073d0:	e062      	b.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073e2:	f000 fb3b 	bl	8007a5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
      break;
 80073fe:	e04f      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007410:	f000 fb24 	bl	8007a5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007422:	609a      	str	r2, [r3, #8]
      break;
 8007424:	e03c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007432:	461a      	mov	r2, r3
 8007434:	f000 fa98 	bl	8007968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2150      	movs	r1, #80	@ 0x50
 800743e:	4618      	mov	r0, r3
 8007440:	f000 faf1 	bl	8007a26 <TIM_ITRx_SetConfig>
      break;
 8007444:	e02c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007452:	461a      	mov	r2, r3
 8007454:	f000 fab7 	bl	80079c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2160      	movs	r1, #96	@ 0x60
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fae1 	bl	8007a26 <TIM_ITRx_SetConfig>
      break;
 8007464:	e01c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007472:	461a      	mov	r2, r3
 8007474:	f000 fa78 	bl	8007968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2140      	movs	r1, #64	@ 0x40
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fad1 	bl	8007a26 <TIM_ITRx_SetConfig>
      break;
 8007484:	e00c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f000 fac8 	bl	8007a26 <TIM_ITRx_SetConfig>
      break;
 8007496:	e003      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
      break;
 800749c:	e000      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800749e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a43      	ldr	r2, [pc, #268]	@ (80075dc <TIM_Base_SetConfig+0x120>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074da:	d00f      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a40      	ldr	r2, [pc, #256]	@ (80075e0 <TIM_Base_SetConfig+0x124>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00b      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a3f      	ldr	r2, [pc, #252]	@ (80075e4 <TIM_Base_SetConfig+0x128>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d007      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a3e      	ldr	r2, [pc, #248]	@ (80075e8 <TIM_Base_SetConfig+0x12c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a3d      	ldr	r2, [pc, #244]	@ (80075ec <TIM_Base_SetConfig+0x130>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a32      	ldr	r2, [pc, #200]	@ (80075dc <TIM_Base_SetConfig+0x120>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d02b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751c:	d027      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2f      	ldr	r2, [pc, #188]	@ (80075e0 <TIM_Base_SetConfig+0x124>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d023      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2e      	ldr	r2, [pc, #184]	@ (80075e4 <TIM_Base_SetConfig+0x128>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d01f      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a2d      	ldr	r2, [pc, #180]	@ (80075e8 <TIM_Base_SetConfig+0x12c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2c      	ldr	r2, [pc, #176]	@ (80075ec <TIM_Base_SetConfig+0x130>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d017      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2b      	ldr	r2, [pc, #172]	@ (80075f0 <TIM_Base_SetConfig+0x134>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2a      	ldr	r2, [pc, #168]	@ (80075f4 <TIM_Base_SetConfig+0x138>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00f      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a29      	ldr	r2, [pc, #164]	@ (80075f8 <TIM_Base_SetConfig+0x13c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a28      	ldr	r2, [pc, #160]	@ (80075fc <TIM_Base_SetConfig+0x140>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d007      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a27      	ldr	r2, [pc, #156]	@ (8007600 <TIM_Base_SetConfig+0x144>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a26      	ldr	r2, [pc, #152]	@ (8007604 <TIM_Base_SetConfig+0x148>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d108      	bne.n	8007580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a0e      	ldr	r2, [pc, #56]	@ (80075dc <TIM_Base_SetConfig+0x120>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_Base_SetConfig+0xf2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a10      	ldr	r2, [pc, #64]	@ (80075ec <TIM_Base_SetConfig+0x130>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d103      	bne.n	80075b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f043 0204 	orr.w	r2, r3, #4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	601a      	str	r2, [r3, #0]
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40010400 	.word	0x40010400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800
 80075fc:	40001800 	.word	0x40001800
 8007600:	40001c00 	.word	0x40001c00
 8007604:	40002000 	.word	0x40002000

08007608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f023 0201 	bic.w	r2, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0303 	bic.w	r3, r3, #3
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 0302 	bic.w	r3, r3, #2
 8007650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a20      	ldr	r2, [pc, #128]	@ (80076e0 <TIM_OC1_SetConfig+0xd8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_OC1_SetConfig+0x64>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a1f      	ldr	r2, [pc, #124]	@ (80076e4 <TIM_OC1_SetConfig+0xdc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d10c      	bne.n	8007686 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f023 0308 	bic.w	r3, r3, #8
 8007672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f023 0304 	bic.w	r3, r3, #4
 8007684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a15      	ldr	r2, [pc, #84]	@ (80076e0 <TIM_OC1_SetConfig+0xd8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d003      	beq.n	8007696 <TIM_OC1_SetConfig+0x8e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a14      	ldr	r2, [pc, #80]	@ (80076e4 <TIM_OC1_SetConfig+0xdc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d111      	bne.n	80076ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800769c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	621a      	str	r2, [r3, #32]
}
 80076d4:	bf00      	nop
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40010400 	.word	0x40010400

080076e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	f023 0210 	bic.w	r2, r3, #16
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800771e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0320 	bic.w	r3, r3, #32
 8007732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a22      	ldr	r2, [pc, #136]	@ (80077cc <TIM_OC2_SetConfig+0xe4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC2_SetConfig+0x68>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a21      	ldr	r2, [pc, #132]	@ (80077d0 <TIM_OC2_SetConfig+0xe8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d10d      	bne.n	800776c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800776a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a17      	ldr	r2, [pc, #92]	@ (80077cc <TIM_OC2_SetConfig+0xe4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d003      	beq.n	800777c <TIM_OC2_SetConfig+0x94>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a16      	ldr	r2, [pc, #88]	@ (80077d0 <TIM_OC2_SetConfig+0xe8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d113      	bne.n	80077a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800778a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40010400 	.word	0x40010400

080077d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800781c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a21      	ldr	r2, [pc, #132]	@ (80078b4 <TIM_OC3_SetConfig+0xe0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_OC3_SetConfig+0x66>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a20      	ldr	r2, [pc, #128]	@ (80078b8 <TIM_OC3_SetConfig+0xe4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d10d      	bne.n	8007856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a16      	ldr	r2, [pc, #88]	@ (80078b4 <TIM_OC3_SetConfig+0xe0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d003      	beq.n	8007866 <TIM_OC3_SetConfig+0x92>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a15      	ldr	r2, [pc, #84]	@ (80078b8 <TIM_OC3_SetConfig+0xe4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d113      	bne.n	800788e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800786c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	621a      	str	r2, [r3, #32]
}
 80078a8:	bf00      	nop
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	40010000 	.word	0x40010000
 80078b8:	40010400 	.word	0x40010400

080078bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	031b      	lsls	r3, r3, #12
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a12      	ldr	r2, [pc, #72]	@ (8007960 <TIM_OC4_SetConfig+0xa4>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_OC4_SetConfig+0x68>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a11      	ldr	r2, [pc, #68]	@ (8007964 <TIM_OC4_SetConfig+0xa8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d109      	bne.n	8007938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800792a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	019b      	lsls	r3, r3, #6
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40010000 	.word	0x40010000
 8007964:	40010400 	.word	0x40010400

08007968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f023 0201 	bic.w	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f023 030a 	bic.w	r3, r3, #10
 80079a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b087      	sub	sp, #28
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f023 0210 	bic.w	r2, r3, #16
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	031b      	lsls	r3, r3, #12
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	621a      	str	r2, [r3, #32]
}
 8007a1a:	bf00      	nop
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f043 0307 	orr.w	r3, r3, #7
 8007a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	609a      	str	r2, [r3, #8]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	021a      	lsls	r2, r3, #8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	609a      	str	r2, [r3, #8]
}
 8007a90:	bf00      	nop
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	2201      	movs	r2, #1
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	43db      	mvns	r3, r3
 8007abe:	401a      	ands	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e05a      	b.n	8007bb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a21      	ldr	r2, [pc, #132]	@ (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d022      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4c:	d01d      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d018      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1a      	ldr	r2, [pc, #104]	@ (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00e      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a18      	ldr	r2, [pc, #96]	@ (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d009      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a17      	ldr	r2, [pc, #92]	@ (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d004      	beq.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a15      	ldr	r2, [pc, #84]	@ (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d10c      	bne.n	8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40010000 	.word	0x40010000
 8007bc8:	40000400 	.word	0x40000400
 8007bcc:	40000800 	.word	0x40000800
 8007bd0:	40000c00 	.word	0x40000c00
 8007bd4:	40010400 	.word	0x40010400
 8007bd8:	40014000 	.word	0x40014000
 8007bdc:	40001800 	.word	0x40001800

08007be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007be0:	b084      	sub	sp, #16
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	f107 001c 	add.w	r0, r7, #28
 8007bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bf2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d123      	bne.n	8007c42 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d105      	bne.n	8007c36 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f9dc 	bl	8007ff4 <USB_CoreReset>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]
 8007c40:	e01b      	b.n	8007c7a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9d0 	bl	8007ff4 <USB_CoreReset>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d106      	bne.n	8007c6e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c6c:	e005      	b.n	8007c7a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c7a:	7fbb      	ldrb	r3, [r7, #30]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d10b      	bne.n	8007c98 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f043 0206 	orr.w	r2, r3, #6
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ca4:	b004      	add	sp, #16
 8007ca6:	4770      	bx	lr

08007ca8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f043 0201 	orr.w	r2, r3, #1
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f023 0201 	bic.w	r2, r3, #1
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d115      	bne.n	8007d3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d1a:	200a      	movs	r0, #10
 8007d1c:	f7fa f8f6 	bl	8001f0c <HAL_Delay>
      ms += 10U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	330a      	adds	r3, #10
 8007d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f956 	bl	8007fd8 <USB_GetMode>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d01e      	beq.n	8007d70 <USB_SetCurrentMode+0x84>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d36:	d9f0      	bls.n	8007d1a <USB_SetCurrentMode+0x2e>
 8007d38:	e01a      	b.n	8007d70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d115      	bne.n	8007d6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d4c:	200a      	movs	r0, #10
 8007d4e:	f7fa f8dd 	bl	8001f0c <HAL_Delay>
      ms += 10U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	330a      	adds	r3, #10
 8007d56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f93d 	bl	8007fd8 <USB_GetMode>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <USB_SetCurrentMode+0x84>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d68:	d9f0      	bls.n	8007d4c <USB_SetCurrentMode+0x60>
 8007d6a:	e001      	b.n	8007d70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e005      	b.n	8007d7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d74:	d101      	bne.n	8007d7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d9e:	d901      	bls.n	8007da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e01b      	b.n	8007ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	daf2      	bge.n	8007d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	019b      	lsls	r3, r3, #6
 8007db4:	f043 0220 	orr.w	r2, r3, #32
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dc8:	d901      	bls.n	8007dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e006      	b.n	8007ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d0f0      	beq.n	8007dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3301      	adds	r3, #1
 8007df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e00:	d901      	bls.n	8007e06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e018      	b.n	8007e38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	daf2      	bge.n	8007df4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2210      	movs	r2, #16
 8007e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e24:	d901      	bls.n	8007e2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e006      	b.n	8007e38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0310 	and.w	r3, r3, #16
 8007e32:	2b10      	cmp	r3, #16
 8007e34:	d0f0      	beq.n	8007e18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b089      	sub	sp, #36	@ 0x24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4611      	mov	r1, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	460b      	mov	r3, r1
 8007e54:	71fb      	strb	r3, [r7, #7]
 8007e56:	4613      	mov	r3, r2
 8007e58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d123      	bne.n	8007eb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e6a:	88bb      	ldrh	r3, [r7, #4]
 8007e6c:	3303      	adds	r3, #3
 8007e6e:	089b      	lsrs	r3, r3, #2
 8007e70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e72:	2300      	movs	r3, #0
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	e018      	b.n	8007eaa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	031a      	lsls	r2, r3, #12
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e84:	461a      	mov	r2, r3
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	3301      	adds	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d3e2      	bcc.n	8007e78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3724      	adds	r7, #36	@ 0x24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b08b      	sub	sp, #44	@ 0x2c
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	089b      	lsrs	r3, r3, #2
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	e014      	b.n	8007f16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	3301      	adds	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	3301      	adds	r3, #1
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	3301      	adds	r3, #1
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	3301      	adds	r3, #1
 8007f14:	623b      	str	r3, [r7, #32]
 8007f16:	6a3a      	ldr	r2, [r7, #32]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d3e6      	bcc.n	8007eec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f1e:	8bfb      	ldrh	r3, [r7, #30]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01e      	beq.n	8007f62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f107 0310 	add.w	r3, r7, #16
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	fa22 f303 	lsr.w	r3, r2, r3
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	701a      	strb	r2, [r3, #0]
      i++;
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	3301      	adds	r3, #1
 8007f54:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007f56:	8bfb      	ldrh	r3, [r7, #30]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f5c:	8bfb      	ldrh	r3, [r7, #30]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1ea      	bne.n	8007f38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	372c      	adds	r7, #44	@ 0x2c
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4013      	ands	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f88:	68fb      	ldr	r3, [r7, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fca:	68bb      	ldr	r3, [r7, #8]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800800c:	d901      	bls.n	8008012 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e022      	b.n	8008058 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	daf2      	bge.n	8008000 <USB_CoreReset+0xc>

  count = 10U;
 800801a:	230a      	movs	r3, #10
 800801c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800801e:	e002      	b.n	8008026 <USB_CoreReset+0x32>
  {
    count--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3b01      	subs	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f9      	bne.n	8008020 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f043 0201 	orr.w	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008044:	d901      	bls.n	800804a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e006      	b.n	8008058 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b01      	cmp	r3, #1
 8008054:	d0f0      	beq.n	8008038 <USB_CoreReset+0x44>

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008064:	b084      	sub	sp, #16
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008084:	461a      	mov	r2, r3
 8008086:	2300      	movs	r3, #0
 8008088:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d119      	bne.n	80080ee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80080ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d10a      	bne.n	80080d8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080d0:	f043 0304 	orr.w	r3, r3, #4
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	e014      	b.n	8008102 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080e6:	f023 0304 	bic.w	r3, r3, #4
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	e009      	b.n	8008102 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080fc:	f023 0304 	bic.w	r3, r3, #4
 8008100:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008102:	2110      	movs	r1, #16
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff fe3d 	bl	8007d84 <USB_FlushTxFifo>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff fe67 	bl	8007de8 <USB_FlushRxFifo>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008124:	2300      	movs	r3, #0
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	e015      	b.n	8008156 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008136:	461a      	mov	r2, r3
 8008138:	f04f 33ff 	mov.w	r3, #4294967295
 800813c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800814a:	461a      	mov	r2, r3
 800814c:	2300      	movs	r3, #0
 800814e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	3301      	adds	r3, #1
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800815a:	461a      	mov	r2, r3
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	4293      	cmp	r3, r2
 8008160:	d3e3      	bcc.n	800812a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a18      	ldr	r2, [pc, #96]	@ (80081d4 <USB_HostInit+0x170>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d10b      	bne.n	8008190 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800817e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a15      	ldr	r2, [pc, #84]	@ (80081d8 <USB_HostInit+0x174>)
 8008184:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a14      	ldr	r2, [pc, #80]	@ (80081dc <USB_HostInit+0x178>)
 800818a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800818e:	e009      	b.n	80081a4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2280      	movs	r2, #128	@ 0x80
 8008194:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a11      	ldr	r2, [pc, #68]	@ (80081e0 <USB_HostInit+0x17c>)
 800819a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a11      	ldr	r2, [pc, #68]	@ (80081e4 <USB_HostInit+0x180>)
 80081a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d105      	bne.n	80081b8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f043 0210 	orr.w	r2, r3, #16
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <USB_HostInit+0x184>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081d0:	b004      	add	sp, #16
 80081d2:	4770      	bx	lr
 80081d4:	40040000 	.word	0x40040000
 80081d8:	01000200 	.word	0x01000200
 80081dc:	00e00300 	.word	0x00e00300
 80081e0:	00600080 	.word	0x00600080
 80081e4:	004000e0 	.word	0x004000e0
 80081e8:	a3200008 	.word	0xa3200008

080081ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008224:	4313      	orrs	r3, r2
 8008226:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d107      	bne.n	800823e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008234:	461a      	mov	r2, r3
 8008236:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800823a:	6053      	str	r3, [r2, #4]
 800823c:	e00c      	b.n	8008258 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d107      	bne.n	8008254 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800824a:	461a      	mov	r2, r3
 800824c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008250:	6053      	str	r3, [r2, #4]
 8008252:	e001      	b.n	8008258 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008286:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008294:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008296:	2064      	movs	r0, #100	@ 0x64
 8008298:	f7f9 fe38 	bl	8001f0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80082aa:	200a      	movs	r0, #10
 80082ac:	f7f9 fe2e 	bl	8001f0c <HAL_Delay>

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80082de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <USB_DriveVbus+0x44>
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d106      	bne.n	80082fe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082fc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008308:	d109      	bne.n	800831e <USB_DriveVbus+0x64>
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d106      	bne.n	800831e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008318:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800831c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	0c5b      	lsrs	r3, r3, #17
 800834a:	f003 0303 	and.w	r3, r3, #3
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	b29b      	uxth	r3, r3
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	4608      	mov	r0, r1
 8008386:	4611      	mov	r1, r2
 8008388:	461a      	mov	r2, r3
 800838a:	4603      	mov	r3, r0
 800838c:	70fb      	strb	r3, [r7, #3]
 800838e:	460b      	mov	r3, r1
 8008390:	70bb      	strb	r3, [r7, #2]
 8008392:	4613      	mov	r3, r2
 8008394:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083aa:	461a      	mov	r2, r3
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d87c      	bhi.n	80084b4 <USB_HC_Init+0x138>
 80083ba:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <USB_HC_Init+0x44>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	080083d1 	.word	0x080083d1
 80083c4:	08008477 	.word	0x08008477
 80083c8:	080083d1 	.word	0x080083d1
 80083cc:	08008439 	.word	0x08008439
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083dc:	461a      	mov	r2, r3
 80083de:	f240 439d 	movw	r3, #1181	@ 0x49d
 80083e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80083e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	da10      	bge.n	800840e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	440a      	add	r2, r1
 8008402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800840c:	e055      	b.n	80084ba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a6f      	ldr	r2, [pc, #444]	@ (80085d0 <USB_HC_Init+0x254>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d151      	bne.n	80084ba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	4413      	add	r3, r2
 800841e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	440a      	add	r2, r1
 800842c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008430:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008434:	60d3      	str	r3, [r2, #12]
      break;
 8008436:	e040      	b.n	80084ba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	4413      	add	r3, r2
 8008440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008444:	461a      	mov	r2, r3
 8008446:	f240 639d 	movw	r3, #1693	@ 0x69d
 800844a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800844c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008450:	2b00      	cmp	r3, #0
 8008452:	da34      	bge.n	80084be <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	4413      	add	r3, r2
 800845c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	440a      	add	r2, r1
 800846a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800846e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008472:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008474:	e023      	b.n	80084be <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	4413      	add	r3, r2
 800847e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008482:	461a      	mov	r2, r3
 8008484:	f240 2325 	movw	r3, #549	@ 0x225
 8008488:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800848a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800848e:	2b00      	cmp	r3, #0
 8008490:	da17      	bge.n	80084c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	4413      	add	r3, r2
 800849a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084ac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80084b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80084b2:	e006      	b.n	80084c2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	77fb      	strb	r3, [r7, #31]
      break;
 80084b8:	e004      	b.n	80084c4 <USB_HC_Init+0x148>
      break;
 80084ba:	bf00      	nop
 80084bc:	e002      	b.n	80084c4 <USB_HC_Init+0x148>
      break;
 80084be:	bf00      	nop
 80084c0:	e000      	b.n	80084c4 <USB_HC_Init+0x148>
      break;
 80084c2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d0:	461a      	mov	r2, r3
 80084d2:	2300      	movs	r3, #0
 80084d4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084f0:	f043 0302 	orr.w	r3, r3, #2
 80084f4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	2101      	movs	r1, #1
 8008506:	fa01 f303 	lsl.w	r3, r1, r3
 800850a:	6939      	ldr	r1, [r7, #16]
 800850c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008510:	4313      	orrs	r3, r2
 8008512:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008524:	2b00      	cmp	r3, #0
 8008526:	da03      	bge.n	8008530 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	e001      	b.n	8008534 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff fef9 	bl	800832c <USB_GetHostSpeed>
 800853a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800853c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008540:	2b02      	cmp	r3, #2
 8008542:	d106      	bne.n	8008552 <USB_HC_Init+0x1d6>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d003      	beq.n	8008552 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800854a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	e001      	b.n	8008556 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008556:	787b      	ldrb	r3, [r7, #1]
 8008558:	059b      	lsls	r3, r3, #22
 800855a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800855e:	78bb      	ldrb	r3, [r7, #2]
 8008560:	02db      	lsls	r3, r3, #11
 8008562:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008566:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008568:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800856c:	049b      	lsls	r3, r3, #18
 800856e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008572:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008574:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008576:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800857a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	431a      	orrs	r2, r3
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	440a      	add	r2, r1
 800858c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008594:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008596:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800859a:	2b03      	cmp	r3, #3
 800859c:	d003      	beq.n	80085a6 <USB_HC_Init+0x22a>
 800859e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d10f      	bne.n	80085c6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80085c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3720      	adds	r7, #32
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40040000 	.word	0x40040000

080085d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	@ 0x30
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80085ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085f0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4a5d      	ldr	r2, [pc, #372]	@ (800876c <USB_HC_StartXfer+0x198>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d12f      	bne.n	800865a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d11c      	bne.n	800863a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	7c9b      	ldrb	r3, [r3, #18]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <USB_HC_StartXfer+0x3c>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	7c9b      	ldrb	r3, [r3, #18]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d124      	bne.n	800865a <USB_HC_StartXfer+0x86>
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	799b      	ldrb	r3, [r3, #6]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d120      	bne.n	800865a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	4413      	add	r3, r2
 8008620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	0151      	lsls	r1, r2, #5
 800862a:	6a3a      	ldr	r2, [r7, #32]
 800862c:	440a      	add	r2, r1
 800862e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008636:	60d3      	str	r3, [r2, #12]
 8008638:	e00f      	b.n	800865a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	791b      	ldrb	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <USB_HC_StartXfer+0x86>
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	795b      	ldrb	r3, [r3, #5]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d107      	bne.n	800865a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	4619      	mov	r1, r3
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fb6b 	bl	8008d2c <USB_DoPing>
        return HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	e232      	b.n	8008ac0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	799b      	ldrb	r3, [r3, #6]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d158      	bne.n	8008714 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008662:	2301      	movs	r3, #1
 8008664:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	78db      	ldrb	r3, [r3, #3]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800866e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	8a92      	ldrh	r2, [r2, #20]
 8008674:	fb03 f202 	mul.w	r2, r3, r2
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	61da      	str	r2, [r3, #28]
 800867c:	e07c      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	7c9b      	ldrb	r3, [r3, #18]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d130      	bne.n	80086e8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	2bbc      	cmp	r3, #188	@ 0xbc
 800868c:	d918      	bls.n	80086c0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	8a9b      	ldrh	r3, [r3, #20]
 8008692:	461a      	mov	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d003      	beq.n	80086b0 <USB_HC_StartXfer+0xdc>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d103      	bne.n	80086b8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2202      	movs	r2, #2
 80086b4:	60da      	str	r2, [r3, #12]
 80086b6:	e05f      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2201      	movs	r2, #1
 80086bc:	60da      	str	r2, [r3, #12]
 80086be:	e05b      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d007      	beq.n	80086e0 <USB_HC_StartXfer+0x10c>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d003      	beq.n	80086e0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2204      	movs	r2, #4
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	e04b      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2203      	movs	r2, #3
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	e047      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d10d      	bne.n	800870a <USB_HC_StartXfer+0x136>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	8a92      	ldrh	r2, [r2, #20]
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d907      	bls.n	800870a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	8a92      	ldrh	r2, [r2, #20]
 8008700:	fb03 f202 	mul.w	r2, r3, r2
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	61da      	str	r2, [r3, #28]
 8008708:	e036      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6a1a      	ldr	r2, [r3, #32]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	61da      	str	r2, [r3, #28]
 8008712:	e031      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d018      	beq.n	800874e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	8a92      	ldrh	r2, [r2, #20]
 8008724:	4413      	add	r3, r2
 8008726:	3b01      	subs	r3, #1
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	8a92      	ldrh	r2, [r2, #20]
 800872c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008730:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008732:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008734:	8b7b      	ldrh	r3, [r7, #26]
 8008736:	429a      	cmp	r2, r3
 8008738:	d90b      	bls.n	8008752 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800873a:	8b7b      	ldrh	r3, [r7, #26]
 800873c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800873e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	8a92      	ldrh	r2, [r2, #20]
 8008744:	fb03 f202 	mul.w	r2, r3, r2
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	61da      	str	r2, [r3, #28]
 800874c:	e001      	b.n	8008752 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800874e:	2301      	movs	r3, #1
 8008750:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	78db      	ldrb	r3, [r3, #3]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800875a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	8a92      	ldrh	r2, [r2, #20]
 8008760:	fb03 f202 	mul.w	r2, r3, r2
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	61da      	str	r2, [r3, #28]
 8008768:	e006      	b.n	8008778 <USB_HC_StartXfer+0x1a4>
 800876a:	bf00      	nop
 800876c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	6a1a      	ldr	r2, [r3, #32]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008780:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008782:	04d9      	lsls	r1, r3, #19
 8008784:	4ba3      	ldr	r3, [pc, #652]	@ (8008a14 <USB_HC_StartXfer+0x440>)
 8008786:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008788:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	7d9b      	ldrb	r3, [r3, #22]
 800878e:	075b      	lsls	r3, r3, #29
 8008790:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008794:	69f9      	ldr	r1, [r7, #28]
 8008796:	0148      	lsls	r0, r1, #5
 8008798:	6a39      	ldr	r1, [r7, #32]
 800879a:	4401      	add	r1, r0
 800879c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d009      	beq.n	80087be <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6999      	ldr	r1, [r3, #24]
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ba:	460a      	mov	r2, r1
 80087bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bf0c      	ite	eq
 80087ce:	2301      	moveq	r3, #1
 80087d0:	2300      	movne	r3, #0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	6a3a      	ldr	r2, [r7, #32]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	7e7b      	ldrb	r3, [r7, #25]
 8008806:	075b      	lsls	r3, r3, #29
 8008808:	69f9      	ldr	r1, [r7, #28]
 800880a:	0148      	lsls	r0, r1, #5
 800880c:	6a39      	ldr	r1, [r7, #32]
 800880e:	4401      	add	r1, r0
 8008810:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008814:	4313      	orrs	r3, r2
 8008816:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	799b      	ldrb	r3, [r3, #6]
 800881c:	2b01      	cmp	r3, #1
 800881e:	f040 80c3 	bne.w	80089a8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	7c5b      	ldrb	r3, [r3, #17]
 8008826:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800882c:	4313      	orrs	r3, r2
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	440a      	add	r2, r1
 8008836:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800883a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800883e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	4413      	add	r3, r2
 8008848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	69fa      	ldr	r2, [r7, #28]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	6a3a      	ldr	r2, [r7, #32]
 8008854:	440a      	add	r2, r1
 8008856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800885a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800885e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	79db      	ldrb	r3, [r3, #7]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d123      	bne.n	80088b0 <USB_HC_StartXfer+0x2dc>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	78db      	ldrb	r3, [r3, #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d11f      	bne.n	80088b0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	6a3a      	ldr	r2, [r7, #32]
 8008884:	440a      	add	r2, r1
 8008886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800888a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800888e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	4413      	add	r3, r2
 8008898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	7c9b      	ldrb	r3, [r3, #18]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d003      	beq.n	80088c0 <USB_HC_StartXfer+0x2ec>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	7c9b      	ldrb	r3, [r3, #18]
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d117      	bne.n	80088f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d113      	bne.n	80088f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	78db      	ldrb	r3, [r3, #3]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d10f      	bne.n	80088f0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088ee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	7c9b      	ldrb	r3, [r3, #18]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d162      	bne.n	80089be <USB_HC_StartXfer+0x3ea>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	78db      	ldrb	r3, [r3, #3]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d15e      	bne.n	80089be <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	3b01      	subs	r3, #1
 8008906:	2b03      	cmp	r3, #3
 8008908:	d858      	bhi.n	80089bc <USB_HC_StartXfer+0x3e8>
 800890a:	a201      	add	r2, pc, #4	@ (adr r2, 8008910 <USB_HC_StartXfer+0x33c>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008921 	.word	0x08008921
 8008914:	08008943 	.word	0x08008943
 8008918:	08008965 	.word	0x08008965
 800891c:	08008987 	.word	0x08008987
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	4413      	add	r3, r2
 8008928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	69fa      	ldr	r2, [r7, #28]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	440a      	add	r2, r1
 8008936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800893a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893e:	6053      	str	r3, [r2, #4]
          break;
 8008940:	e03d      	b.n	80089be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	6a3a      	ldr	r2, [r7, #32]
 8008956:	440a      	add	r2, r1
 8008958:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800895c:	f043 030e 	orr.w	r3, r3, #14
 8008960:	6053      	str	r3, [r2, #4]
          break;
 8008962:	e02c      	b.n	80089be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	4413      	add	r3, r2
 800896c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	0151      	lsls	r1, r2, #5
 8008976:	6a3a      	ldr	r2, [r7, #32]
 8008978:	440a      	add	r2, r1
 800897a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800897e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008982:	6053      	str	r3, [r2, #4]
          break;
 8008984:	e01b      	b.n	80089be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	4413      	add	r3, r2
 800898e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	69fa      	ldr	r2, [r7, #28]
 8008996:	0151      	lsls	r1, r2, #5
 8008998:	6a3a      	ldr	r2, [r7, #32]
 800899a:	440a      	add	r2, r1
 800899c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089a4:	6053      	str	r3, [r2, #4]
          break;
 80089a6:	e00a      	b.n	80089be <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089b4:	461a      	mov	r2, r3
 80089b6:	2300      	movs	r3, #0
 80089b8:	6053      	str	r3, [r2, #4]
 80089ba:	e000      	b.n	80089be <USB_HC_StartXfer+0x3ea>
          break;
 80089bc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089d4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	78db      	ldrb	r3, [r3, #3]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	e003      	b.n	80089f0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089ee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089f6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a04:	461a      	mov	r2, r3
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	e055      	b.n	8008ac0 <USB_HC_StartXfer+0x4ec>
 8008a14:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	78db      	ldrb	r3, [r3, #3]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d14e      	bne.n	8008abe <USB_HC_StartXfer+0x4ea>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d04a      	beq.n	8008abe <USB_HC_StartXfer+0x4ea>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	79db      	ldrb	r3, [r3, #7]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d146      	bne.n	8008abe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	7c9b      	ldrb	r3, [r3, #18]
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d831      	bhi.n	8008a9c <USB_HC_StartXfer+0x4c8>
 8008a38:	a201      	add	r2, pc, #4	@ (adr r2, 8008a40 <USB_HC_StartXfer+0x46c>)
 8008a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3e:	bf00      	nop
 8008a40:	08008a51 	.word	0x08008a51
 8008a44:	08008a75 	.word	0x08008a75
 8008a48:	08008a51 	.word	0x08008a51
 8008a4c:	08008a75 	.word	0x08008a75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	3303      	adds	r3, #3
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008a5a:	8afa      	ldrh	r2, [r7, #22]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d91c      	bls.n	8008aa0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	f043 0220 	orr.w	r2, r3, #32
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a72:	e015      	b.n	8008aa0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	3303      	adds	r3, #3
 8008a7a:	089b      	lsrs	r3, r3, #2
 8008a7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a7e:	8afa      	ldrh	r2, [r7, #22]
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d90a      	bls.n	8008aa4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a9a:	e003      	b.n	8008aa4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008a9c:	bf00      	nop
 8008a9e:	e002      	b.n	8008aa6 <USB_HC_StartXfer+0x4d2>
        break;
 8008aa0:	bf00      	nop
 8008aa2:	e000      	b.n	8008aa6 <USB_HC_StartXfer+0x4d2>
        break;
 8008aa4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6999      	ldr	r1, [r3, #24]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	785a      	ldrb	r2, [r3, #1]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	9000      	str	r0, [sp, #0]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff f9c3 	bl	8007e44 <USB_WritePacket>
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3728      	adds	r7, #40	@ 0x28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	b29b      	uxth	r3, r3
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b089      	sub	sp, #36	@ 0x24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	0c9b      	lsrs	r3, r3, #18
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	0fdb      	lsrs	r3, r3, #31
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	0fdb      	lsrs	r3, r3, #31
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	d10d      	bne.n	8008b6c <USB_HC_Halt+0x82>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <USB_HC_Halt+0x82>
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d002      	beq.n	8008b68 <USB_HC_Halt+0x7e>
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d101      	bne.n	8008b6c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e0d8      	b.n	8008d1e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <USB_HC_Halt+0x8e>
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d173      	bne.n	8008c60 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	0151      	lsls	r1, r2, #5
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	440a      	add	r2, r1
 8008b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d14a      	bne.n	8008c3a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d133      	bne.n	8008c18 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bfc:	d82e      	bhi.n	8008c5c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c14:	d0ec      	beq.n	8008bf0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c16:	e081      	b.n	8008d1c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c38:	e070      	b.n	8008d1c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	0151      	lsls	r1, r2, #5
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	440a      	add	r2, r1
 8008c50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c5a:	e05f      	b.n	8008d1c <USB_HC_Halt+0x232>
            break;
 8008c5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c5e:	e05d      	b.n	8008d1c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d133      	bne.n	8008cf8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008caa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cdc:	d81d      	bhi.n	8008d1a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cf4:	d0ec      	beq.n	8008cd0 <USB_HC_Halt+0x1e6>
 8008cf6:	e011      	b.n	8008d1c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	69fa      	ldr	r2, [r7, #28]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	e000      	b.n	8008d1c <USB_HC_Halt+0x232>
          break;
 8008d1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3724      	adds	r7, #36	@ 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d40:	2301      	movs	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	04da      	lsls	r2, r3, #19
 8008d48:	4b15      	ldr	r3, [pc, #84]	@ (8008da0 <USB_DoPing+0x74>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	0151      	lsls	r1, r2, #5
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	440a      	add	r2, r1
 8008d54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	1ff80000 	.word	0x1ff80000

08008da4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fe ff86 	bl	8007cca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dbe:	2110      	movs	r1, #16
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7fe ffdf 	bl	8007d84 <USB_FlushTxFifo>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff f809 	bl	8007de8 <USB_FlushRxFifo>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008de0:	2300      	movs	r3, #0
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	e01f      	b.n	8008e26 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dfc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	3301      	adds	r3, #1
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b0f      	cmp	r3, #15
 8008e2a:	d9dc      	bls.n	8008de6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	e034      	b.n	8008e9c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e66:	461a      	mov	r2, r3
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e78:	d80c      	bhi.n	8008e94 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e90:	d0ec      	beq.n	8008e6c <USB_StopHost+0xc8>
 8008e92:	e000      	b.n	8008e96 <USB_StopHost+0xf2>
        break;
 8008e94:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	d9c7      	bls.n	8008e32 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8008eae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7fe fef5 	bl	8007ca8 <USB_EnableGlobalInt>

  return ret;
 8008ebe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ec8:	b590      	push	{r4, r7, lr}
 8008eca:	b089      	sub	sp, #36	@ 0x24
 8008ecc:	af04      	add	r7, sp, #16
 8008ece:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	2102      	movs	r1, #2
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fc83 	bl	80097e2 <USBH_FindInterface>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	2bff      	cmp	r3, #255	@ 0xff
 8008ee4:	d002      	beq.n	8008eec <USBH_CDC_InterfaceInit+0x24>
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d901      	bls.n	8008ef0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008eec:	2302      	movs	r3, #2
 8008eee:	e13d      	b.n	800916c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fc58 	bl	80097aa <USBH_SelectInterface>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f04:	2302      	movs	r3, #2
 8008f06:	e131      	b.n	800916c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008f0e:	2050      	movs	r0, #80	@ 0x50
 8008f10:	f002 fb6a 	bl	800b5e8 <malloc>
 8008f14:	4603      	mov	r3, r0
 8008f16:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	e11f      	b.n	800916c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f2c:	2250      	movs	r2, #80	@ 0x50
 8008f2e:	2100      	movs	r1, #0
 8008f30:	68b8      	ldr	r0, [r7, #8]
 8008f32:	f002 fc17 	bl	800b764 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	211a      	movs	r1, #26
 8008f3c:	fb01 f303 	mul.w	r3, r1, r3
 8008f40:	4413      	add	r3, r2
 8008f42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	b25b      	sxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	da15      	bge.n	8008f7a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	211a      	movs	r1, #26
 8008f54:	fb01 f303 	mul.w	r3, r1, r3
 8008f58:	4413      	add	r3, r2
 8008f5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	211a      	movs	r1, #26
 8008f6a:	fb01 f303 	mul.w	r3, r1, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008f74:	881a      	ldrh	r2, [r3, #0]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 ffc4 	bl	800af0e <USBH_AllocPipe>
 8008f86:	4603      	mov	r3, r0
 8008f88:	461a      	mov	r2, r3
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	7819      	ldrb	r1, [r3, #0]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	7858      	ldrb	r0, [r3, #1]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	8952      	ldrh	r2, [r2, #10]
 8008fa6:	9202      	str	r2, [sp, #8]
 8008fa8:	2203      	movs	r2, #3
 8008faa:	9201      	str	r2, [sp, #4]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4623      	mov	r3, r4
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 ff7c 	bl	800aeb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f002 fa8b 	bl	800b4dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2200      	movs	r2, #0
 8008fca:	210a      	movs	r1, #10
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fc08 	bl	80097e2 <USBH_FindInterface>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	2bff      	cmp	r3, #255	@ 0xff
 8008fda:	d002      	beq.n	8008fe2 <USBH_CDC_InterfaceInit+0x11a>
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d901      	bls.n	8008fe6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	e0c2      	b.n	800916c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	211a      	movs	r1, #26
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b25b      	sxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da16      	bge.n	800902c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	211a      	movs	r1, #26
 8009004:	fb01 f303 	mul.w	r3, r1, r3
 8009008:	4413      	add	r3, r2
 800900a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	211a      	movs	r1, #26
 800901a:	fb01 f303 	mul.w	r3, r1, r3
 800901e:	4413      	add	r3, r2
 8009020:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009024:	881a      	ldrh	r2, [r3, #0]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	835a      	strh	r2, [r3, #26]
 800902a:	e015      	b.n	8009058 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	211a      	movs	r1, #26
 8009032:	fb01 f303 	mul.w	r3, r1, r3
 8009036:	4413      	add	r3, r2
 8009038:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800903c:	781a      	ldrb	r2, [r3, #0]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	211a      	movs	r1, #26
 8009048:	fb01 f303 	mul.w	r3, r1, r3
 800904c:	4413      	add	r3, r2
 800904e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009052:	881a      	ldrh	r2, [r3, #0]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	211a      	movs	r1, #26
 800905e:	fb01 f303 	mul.w	r3, r1, r3
 8009062:	4413      	add	r3, r2
 8009064:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	b25b      	sxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	da16      	bge.n	800909e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	211a      	movs	r1, #26
 8009076:	fb01 f303 	mul.w	r3, r1, r3
 800907a:	4413      	add	r3, r2
 800907c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009080:	781a      	ldrb	r2, [r3, #0]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	211a      	movs	r1, #26
 800908c:	fb01 f303 	mul.w	r3, r1, r3
 8009090:	4413      	add	r3, r2
 8009092:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009096:	881a      	ldrh	r2, [r3, #0]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	835a      	strh	r2, [r3, #26]
 800909c:	e015      	b.n	80090ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	211a      	movs	r1, #26
 80090a4:	fb01 f303 	mul.w	r3, r1, r3
 80090a8:	4413      	add	r3, r2
 80090aa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	211a      	movs	r1, #26
 80090ba:	fb01 f303 	mul.w	r3, r1, r3
 80090be:	4413      	add	r3, r2
 80090c0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80090c4:	881a      	ldrh	r2, [r3, #0]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	7b9b      	ldrb	r3, [r3, #14]
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 ff1c 	bl	800af0e <USBH_AllocPipe>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	7bdb      	ldrb	r3, [r3, #15]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 ff12 	bl	800af0e <USBH_AllocPipe>
 80090ea:	4603      	mov	r3, r0
 80090ec:	461a      	mov	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	7b59      	ldrb	r1, [r3, #13]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	7b98      	ldrb	r0, [r3, #14]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	8b12      	ldrh	r2, [r2, #24]
 800910a:	9202      	str	r2, [sp, #8]
 800910c:	2202      	movs	r2, #2
 800910e:	9201      	str	r2, [sp, #4]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	4623      	mov	r3, r4
 8009114:	4602      	mov	r2, r0
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f001 feca 	bl	800aeb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	7b19      	ldrb	r1, [r3, #12]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	7bd8      	ldrb	r0, [r3, #15]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	8b52      	ldrh	r2, [r2, #26]
 8009134:	9202      	str	r2, [sp, #8]
 8009136:	2202      	movs	r2, #2
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	4623      	mov	r3, r4
 800913e:	4602      	mov	r2, r0
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 feb5 	bl	800aeb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	7b5b      	ldrb	r3, [r3, #13]
 8009152:	2200      	movs	r2, #0
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f002 f9c0 	bl	800b4dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	7b1b      	ldrb	r3, [r3, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f002 f9b9 	bl	800b4dc <USBH_LL_SetToggle>

  return USBH_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	bd90      	pop	{r4, r7, pc}

08009174 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00e      	beq.n	80091ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 feaa 	bl	800aeee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 fed5 	bl	800af50 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	7b1b      	ldrb	r3, [r3, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00e      	beq.n	80091d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	7b1b      	ldrb	r3, [r3, #12]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 fe97 	bl	800aeee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	7b1b      	ldrb	r3, [r3, #12]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 fec2 	bl	800af50 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	7b5b      	ldrb	r3, [r3, #13]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00e      	beq.n	80091f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	7b5b      	ldrb	r3, [r3, #13]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 fe84 	bl	800aeee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	7b5b      	ldrb	r3, [r3, #13]
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 feaf 	bl	800af50 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	4618      	mov	r0, r3
 800920e:	f002 f9f3 	bl	800b5f8 <free>
    phost->pActiveClass->pData = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009218:	2200      	movs	r2, #0
 800921a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3340      	adds	r3, #64	@ 0x40
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f8b1 	bl	80093a6 <GetLineCoding>
 8009244:	4603      	mov	r3, r0
 8009246:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009248:	7afb      	ldrb	r3, [r7, #11]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009254:	2102      	movs	r1, #2
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800925a:	7afb      	ldrb	r3, [r7, #11]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800926c:	2301      	movs	r3, #1
 800926e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009284:	2b04      	cmp	r3, #4
 8009286:	d877      	bhi.n	8009378 <USBH_CDC_Process+0x114>
 8009288:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <USBH_CDC_Process+0x2c>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092a5 	.word	0x080092a5
 8009294:	080092ab 	.word	0x080092ab
 8009298:	080092db 	.word	0x080092db
 800929c:	0800934f 	.word	0x0800934f
 80092a0:	0800935d 	.word	0x0800935d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]
      break;
 80092a8:	e06d      	b.n	8009386 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f897 	bl	80093e4 <SetLineCoding>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d104      	bne.n	80092ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80092c8:	e058      	b.n	800937c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d055      	beq.n	800937c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2204      	movs	r2, #4
 80092d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80092d8:	e050      	b.n	800937c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3340      	adds	r3, #64	@ 0x40
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f860 	bl	80093a6 <GetLineCoding>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d126      	bne.n	800933e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009302:	791b      	ldrb	r3, [r3, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d13b      	bne.n	8009380 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009312:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009314:	429a      	cmp	r2, r3
 8009316:	d133      	bne.n	8009380 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009322:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009324:	429a      	cmp	r2, r3
 8009326:	d12b      	bne.n	8009380 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009330:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009332:	429a      	cmp	r2, r3
 8009334:	d124      	bne.n	8009380 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f958 	bl	80095ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800933c:	e020      	b.n	8009380 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d01d      	beq.n	8009380 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2204      	movs	r2, #4
 8009348:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800934c:	e018      	b.n	8009380 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f867 	bl	8009422 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f8da 	bl	800950e <CDC_ProcessReception>
      break;
 800935a:	e014      	b.n	8009386 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800935c:	2100      	movs	r1, #0
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 f81e 	bl	800a3a0 <USBH_ClrFeature>
 8009364:	4603      	mov	r3, r0
 8009366:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009376:	e005      	b.n	8009384 <USBH_CDC_Process+0x120>

    default:
      break;
 8009378:	bf00      	nop
 800937a:	e004      	b.n	8009386 <USBH_CDC_Process+0x122>
      break;
 800937c:	bf00      	nop
 800937e:	e002      	b.n	8009386 <USBH_CDC_Process+0x122>
      break;
 8009380:	bf00      	nop
 8009382:	e000      	b.n	8009386 <USBH_CDC_Process+0x122>
      break;
 8009384:	bf00      	nop

  }

  return status;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	22a1      	movs	r2, #161	@ 0xa1
 80093b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2221      	movs	r2, #33	@ 0x21
 80093ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2207      	movs	r2, #7
 80093cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2207      	movs	r2, #7
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fb17 	bl	800aa08 <USBH_CtlReq>
 80093da:	4603      	mov	r3, r0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2221      	movs	r2, #33	@ 0x21
 80093f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2220      	movs	r2, #32
 80093f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2207      	movs	r2, #7
 800940a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2207      	movs	r2, #7
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 faf8 	bl	800aa08 <USBH_CtlReq>
 8009418:	4603      	mov	r3, r0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af02      	add	r7, sp, #8
 8009428:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009434:	2300      	movs	r3, #0
 8009436:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800943e:	2b01      	cmp	r3, #1
 8009440:	d002      	beq.n	8009448 <CDC_ProcessTransmission+0x26>
 8009442:	2b02      	cmp	r3, #2
 8009444:	d023      	beq.n	800948e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009446:	e05e      	b.n	8009506 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	8b12      	ldrh	r2, [r2, #24]
 8009450:	4293      	cmp	r3, r2
 8009452:	d90b      	bls.n	800946c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	69d9      	ldr	r1, [r3, #28]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8b1a      	ldrh	r2, [r3, #24]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	7b5b      	ldrb	r3, [r3, #13]
 8009460:	2001      	movs	r0, #1
 8009462:	9000      	str	r0, [sp, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 fce0 	bl	800ae2a <USBH_BulkSendData>
 800946a:	e00b      	b.n	8009484 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	7b5b      	ldrb	r3, [r3, #13]
 800947a:	2001      	movs	r0, #1
 800947c:	9000      	str	r0, [sp, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fcd3 	bl	800ae2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800948c:	e03b      	b.n	8009506 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	7b5b      	ldrb	r3, [r3, #13]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 fff7 	bl	800b488 <USBH_LL_GetURBState>
 800949a:	4603      	mov	r3, r0
 800949c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d128      	bne.n	80094f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	8b12      	ldrh	r2, [r2, #24]
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d90e      	bls.n	80094ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	8b12      	ldrh	r2, [r2, #24]
 80094b8:	1a9a      	subs	r2, r3, r2
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	8b12      	ldrh	r2, [r2, #24]
 80094c6:	441a      	add	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	61da      	str	r2, [r3, #28]
 80094cc:	e002      	b.n	80094d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80094e4:	e00e      	b.n	8009504 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f868 	bl	80095c4 <USBH_CDC_TransmitCallback>
      break;
 80094f4:	e006      	b.n	8009504 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80094f6:	7afb      	ldrb	r3, [r7, #11]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d103      	bne.n	8009504 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009504:	bf00      	nop
  }
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b086      	sub	sp, #24
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009520:	2300      	movs	r3, #0
 8009522:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800952a:	2b03      	cmp	r3, #3
 800952c:	d002      	beq.n	8009534 <CDC_ProcessReception+0x26>
 800952e:	2b04      	cmp	r3, #4
 8009530:	d00e      	beq.n	8009550 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009532:	e043      	b.n	80095bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	6a19      	ldr	r1, [r3, #32]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	8b5a      	ldrh	r2, [r3, #26]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	7b1b      	ldrb	r3, [r3, #12]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 fc97 	bl	800ae74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2204      	movs	r2, #4
 800954a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800954e:	e035      	b.n	80095bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	7b1b      	ldrb	r3, [r3, #12]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 ff96 	bl	800b488 <USBH_LL_GetURBState>
 800955c:	4603      	mov	r3, r0
 800955e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009560:	7cfb      	ldrb	r3, [r7, #19]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d129      	bne.n	80095ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	7b1b      	ldrb	r3, [r3, #12]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 fef9 	bl	800b364 <USBH_LL_GetLastXferSize>
 8009572:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	429a      	cmp	r2, r3
 800957c:	d016      	beq.n	80095ac <CDC_ProcessReception+0x9e>
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	8b5b      	ldrh	r3, [r3, #26]
 8009582:	461a      	mov	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4293      	cmp	r3, r2
 8009588:	d110      	bne.n	80095ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1ad2      	subs	r2, r2, r3
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	6a1a      	ldr	r2, [r3, #32]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	441a      	add	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2203      	movs	r2, #3
 80095a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80095aa:	e006      	b.n	80095ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f80f 	bl	80095d8 <USBH_CDC_ReceiveCallback>
      break;
 80095ba:	bf00      	nop
  }
}
 80095bc:	bf00      	nop
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009614:	2302      	movs	r3, #2
 8009616:	e029      	b.n	800966c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	79fa      	ldrb	r2, [r7, #7]
 800961c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 f81f 	bl	8009674 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f001 fdc9 	bl	800b1fc <USBH_LL_Init>

  return USBH_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	e009      	b.n	8009696 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	33e0      	adds	r3, #224	@ 0xe0
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	2200      	movs	r2, #0
 800968e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b0f      	cmp	r3, #15
 800969a:	d9f2      	bls.n	8009682 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800969c:	2300      	movs	r3, #0
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	e009      	b.n	80096b6 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096bc:	d3f1      	bcc.n	80096a2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2240      	movs	r2, #64	@ 0x40
 80096e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	331c      	adds	r3, #28
 800970e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009712:	2100      	movs	r1, #0
 8009714:	4618      	mov	r0, r3
 8009716:	f002 f825 	bl	800b764 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f002 f81c 	bl	800b764 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009732:	2212      	movs	r2, #18
 8009734:	2100      	movs	r1, #0
 8009736:	4618      	mov	r0, r3
 8009738:	f002 f814 	bl	800b764 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009742:	223e      	movs	r2, #62	@ 0x3e
 8009744:	2100      	movs	r1, #0
 8009746:	4618      	mov	r0, r3
 8009748:	f002 f80c 	bl	800b764 <memset>

  return USBH_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009756:	b480      	push	{r7}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d016      	beq.n	8009798 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10e      	bne.n	8009792 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800977a:	1c59      	adds	r1, r3, #1
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	33de      	adds	r3, #222	@ 0xde
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
 8009790:	e004      	b.n	800979c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009792:	2302      	movs	r3, #2
 8009794:	73fb      	strb	r3, [r7, #15]
 8009796:	e001      	b.n	800979c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009798:	2302      	movs	r3, #2
 800979a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d204      	bcs.n	80097d0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80097ce:	e001      	b.n	80097d4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80097d0:	2302      	movs	r3, #2
 80097d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b087      	sub	sp, #28
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	4608      	mov	r0, r1
 80097ec:	4611      	mov	r1, r2
 80097ee:	461a      	mov	r2, r3
 80097f0:	4603      	mov	r3, r0
 80097f2:	70fb      	strb	r3, [r7, #3]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70bb      	strb	r3, [r7, #2]
 80097f8:	4613      	mov	r3, r2
 80097fa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800980a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800980c:	e025      	b.n	800985a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	221a      	movs	r2, #26
 8009812:	fb02 f303 	mul.w	r3, r2, r3
 8009816:	3308      	adds	r3, #8
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	3302      	adds	r3, #2
 800981e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	795b      	ldrb	r3, [r3, #5]
 8009824:	78fa      	ldrb	r2, [r7, #3]
 8009826:	429a      	cmp	r2, r3
 8009828:	d002      	beq.n	8009830 <USBH_FindInterface+0x4e>
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	2bff      	cmp	r3, #255	@ 0xff
 800982e:	d111      	bne.n	8009854 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009834:	78ba      	ldrb	r2, [r7, #2]
 8009836:	429a      	cmp	r2, r3
 8009838:	d002      	beq.n	8009840 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800983a:	78bb      	ldrb	r3, [r7, #2]
 800983c:	2bff      	cmp	r3, #255	@ 0xff
 800983e:	d109      	bne.n	8009854 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009844:	787a      	ldrb	r2, [r7, #1]
 8009846:	429a      	cmp	r2, r3
 8009848:	d002      	beq.n	8009850 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800984a:	787b      	ldrb	r3, [r7, #1]
 800984c:	2bff      	cmp	r3, #255	@ 0xff
 800984e:	d101      	bne.n	8009854 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	e006      	b.n	8009862 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	3301      	adds	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d9d6      	bls.n	800980e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009860:	23ff      	movs	r3, #255	@ 0xff
}
 8009862:	4618      	mov	r0, r3
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b082      	sub	sp, #8
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 fcfc 	bl	800b274 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800987c:	2101      	movs	r1, #1
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 fe15 	bl	800b4ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af04      	add	r7, sp, #16
 8009896:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009898:	2302      	movs	r3, #2
 800989a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d102      	bne.n	80098b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2203      	movs	r2, #3
 80098b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b0b      	cmp	r3, #11
 80098ba:	f200 81bc 	bhi.w	8009c36 <USBH_Process+0x3a6>
 80098be:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <USBH_Process+0x34>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098f5 	.word	0x080098f5
 80098c8:	08009927 	.word	0x08009927
 80098cc:	08009991 	.word	0x08009991
 80098d0:	08009bd1 	.word	0x08009bd1
 80098d4:	08009c37 	.word	0x08009c37
 80098d8:	08009a31 	.word	0x08009a31
 80098dc:	08009b77 	.word	0x08009b77
 80098e0:	08009a67 	.word	0x08009a67
 80098e4:	08009a87 	.word	0x08009a87
 80098e8:	08009aa5 	.word	0x08009aa5
 80098ec:	08009ae9 	.word	0x08009ae9
 80098f0:	08009bb9 	.word	0x08009bb9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 819c 	beq.w	8009c3a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009908:	20c8      	movs	r0, #200	@ 0xc8
 800990a:	f001 fe1a 	bl	800b542 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 fd0d 	bl	800b32e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009924:	e189      	b.n	8009c3a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b01      	cmp	r3, #1
 8009930:	d107      	bne.n	8009942 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2202      	movs	r2, #2
 800993e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009940:	e18a      	b.n	8009c58 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009948:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800994c:	d914      	bls.n	8009978 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009954:	3301      	adds	r3, #1
 8009956:	b2da      	uxtb	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009964:	2b03      	cmp	r3, #3
 8009966:	d903      	bls.n	8009970 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	220d      	movs	r2, #13
 800996c:	701a      	strb	r2, [r3, #0]
      break;
 800996e:	e173      	b.n	8009c58 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
      break;
 8009976:	e16f      	b.n	8009c58 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800997e:	f103 020a 	add.w	r2, r3, #10
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009988:	200a      	movs	r0, #10
 800998a:	f001 fdda 	bl	800b542 <USBH_Delay>
      break;
 800998e:	e163      	b.n	8009c58 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099a0:	2104      	movs	r1, #4
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80099a6:	2064      	movs	r0, #100	@ 0x64
 80099a8:	f001 fdcb 	bl	800b542 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 fc97 	bl	800b2e0 <USBH_LL_GetSpeed>
 80099b2:	4603      	mov	r3, r0
 80099b4:	461a      	mov	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2205      	movs	r2, #5
 80099c0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80099c2:	2100      	movs	r1, #0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 faa2 	bl	800af0e <USBH_AllocPipe>
 80099ca:	4603      	mov	r3, r0
 80099cc:	461a      	mov	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80099d2:	2180      	movs	r1, #128	@ 0x80
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 fa9a 	bl	800af0e <USBH_AllocPipe>
 80099da:	4603      	mov	r3, r0
 80099dc:	461a      	mov	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	7919      	ldrb	r1, [r3, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099f6:	9202      	str	r2, [sp, #8]
 80099f8:	2200      	movs	r2, #0
 80099fa:	9201      	str	r2, [sp, #4]
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	4603      	mov	r3, r0
 8009a00:	2280      	movs	r2, #128	@ 0x80
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 fa54 	bl	800aeb0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7959      	ldrb	r1, [r3, #5]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a1c:	9202      	str	r2, [sp, #8]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	9201      	str	r2, [sp, #4]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	4603      	mov	r3, r0
 8009a26:	2200      	movs	r2, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 fa41 	bl	800aeb0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009a2e:	e113      	b.n	8009c58 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f917 	bl	8009c64 <USBH_HandleEnum>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f040 80fd 	bne.w	8009c3e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d103      	bne.n	8009a5e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2208      	movs	r2, #8
 8009a5a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009a5c:	e0ef      	b.n	8009c3e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2207      	movs	r2, #7
 8009a62:	701a      	strb	r2, [r3, #0]
      break;
 8009a64:	e0eb      	b.n	8009c3e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 80e8 	beq.w	8009c42 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a78:	2101      	movs	r1, #1
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2208      	movs	r2, #8
 8009a82:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009a84:	e0dd      	b.n	8009c42 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fc3f 	bl	800a312 <USBH_SetCfg>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f040 80d5 	bne.w	8009c46 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2209      	movs	r2, #9
 8009aa0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009aa2:	e0d0      	b.n	8009c46 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d016      	beq.n	8009ae0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fc4f 	bl	800a358 <USBH_SetFeature>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d103      	bne.n	8009ace <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	220a      	movs	r2, #10
 8009aca:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009acc:	e0bd      	b.n	8009c4a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	f040 80b9 	bne.w	8009c4a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	220a      	movs	r2, #10
 8009adc:	701a      	strb	r2, [r3, #0]
      break;
 8009ade:	e0b4      	b.n	8009c4a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	701a      	strb	r2, [r3, #0]
      break;
 8009ae6:	e0b0      	b.n	8009c4a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 80ad 	beq.w	8009c4e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009afc:	2300      	movs	r3, #0
 8009afe:	73fb      	strb	r3, [r7, #15]
 8009b00:	e016      	b.n	8009b30 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b02:	7bfa      	ldrb	r2, [r7, #15]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	32de      	adds	r2, #222	@ 0xde
 8009b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0c:	791a      	ldrb	r2, [r3, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d108      	bne.n	8009b2a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b18:	7bfa      	ldrb	r2, [r7, #15]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	32de      	adds	r2, #222	@ 0xde
 8009b1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009b28:	e005      	b.n	8009b36 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	73fb      	strb	r3, [r7, #15]
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d0e5      	beq.n	8009b02 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d016      	beq.n	8009b6e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	4798      	blx	r3
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2206      	movs	r2, #6
 8009b56:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b5e:	2103      	movs	r1, #3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009b64:	e073      	b.n	8009c4e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	220d      	movs	r2, #13
 8009b6a:	701a      	strb	r2, [r3, #0]
      break;
 8009b6c:	e06f      	b.n	8009c4e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	220d      	movs	r2, #13
 8009b72:	701a      	strb	r2, [r3, #0]
      break;
 8009b74:	e06b      	b.n	8009c4e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d017      	beq.n	8009bb0 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	220b      	movs	r2, #11
 8009b9c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009b9e:	e058      	b.n	8009c52 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d154      	bne.n	8009c52 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	220d      	movs	r2, #13
 8009bac:	701a      	strb	r2, [r3, #0]
      break;
 8009bae:	e050      	b.n	8009c52 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	220d      	movs	r2, #13
 8009bb4:	701a      	strb	r2, [r3, #0]
      break;
 8009bb6:	e04c      	b.n	8009c52 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d049      	beq.n	8009c56 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
      }
      break;
 8009bce:	e042      	b.n	8009c56 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff fd4b 	bl	8009674 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d009      	beq.n	8009bfc <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c0c:	2105      	movs	r1, #5
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d107      	bne.n	8009c2e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff fe21 	bl	800986e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009c2c:	e014      	b.n	8009c58 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 fb20 	bl	800b274 <USBH_LL_Start>
      break;
 8009c34:	e010      	b.n	8009c58 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c36:	bf00      	nop
 8009c38:	e00e      	b.n	8009c58 <USBH_Process+0x3c8>
      break;
 8009c3a:	bf00      	nop
 8009c3c:	e00c      	b.n	8009c58 <USBH_Process+0x3c8>
      break;
 8009c3e:	bf00      	nop
 8009c40:	e00a      	b.n	8009c58 <USBH_Process+0x3c8>
    break;
 8009c42:	bf00      	nop
 8009c44:	e008      	b.n	8009c58 <USBH_Process+0x3c8>
      break;
 8009c46:	bf00      	nop
 8009c48:	e006      	b.n	8009c58 <USBH_Process+0x3c8>
      break;
 8009c4a:	bf00      	nop
 8009c4c:	e004      	b.n	8009c58 <USBH_Process+0x3c8>
      break;
 8009c4e:	bf00      	nop
 8009c50:	e002      	b.n	8009c58 <USBH_Process+0x3c8>
      break;
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <USBH_Process+0x3c8>
      break;
 8009c56:	bf00      	nop
  }
  return USBH_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop

08009c64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af04      	add	r7, sp, #16
 8009c6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009c70:	2301      	movs	r3, #1
 8009c72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	785b      	ldrb	r3, [r3, #1]
 8009c78:	2b07      	cmp	r3, #7
 8009c7a:	f200 81bd 	bhi.w	8009ff8 <USBH_HandleEnum+0x394>
 8009c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c84 <USBH_HandleEnum+0x20>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009ca5 	.word	0x08009ca5
 8009c88:	08009d5f 	.word	0x08009d5f
 8009c8c:	08009dc9 	.word	0x08009dc9
 8009c90:	08009e53 	.word	0x08009e53
 8009c94:	08009ebd 	.word	0x08009ebd
 8009c98:	08009f2d 	.word	0x08009f2d
 8009c9c:	08009f73 	.word	0x08009f73
 8009ca0:	08009fb9 	.word	0x08009fb9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ca4:	2108      	movs	r1, #8
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa50 	bl	800a14c <USBH_Get_DevDesc>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d12e      	bne.n	8009d14 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7919      	ldrb	r1, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009cda:	9202      	str	r2, [sp, #8]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	9201      	str	r2, [sp, #4]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2280      	movs	r2, #128	@ 0x80
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 f8e2 	bl	800aeb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	7959      	ldrb	r1, [r3, #5]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d00:	9202      	str	r2, [sp, #8]
 8009d02:	2200      	movs	r2, #0
 8009d04:	9201      	str	r2, [sp, #4]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 f8cf 	bl	800aeb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d12:	e173      	b.n	8009ffc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	f040 8170 	bne.w	8009ffc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d22:	3301      	adds	r3, #1
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d903      	bls.n	8009d3e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	220d      	movs	r2, #13
 8009d3a:	701a      	strb	r2, [r3, #0]
      break;
 8009d3c:	e15e      	b.n	8009ffc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	795b      	ldrb	r3, [r3, #5]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 f903 	bl	800af50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	791b      	ldrb	r3, [r3, #4]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 f8fd 	bl	800af50 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
      break;
 8009d5c:	e14e      	b.n	8009ffc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009d5e:	2112      	movs	r1, #18
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f9f3 	bl	800a14c <USBH_Get_DevDesc>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d103      	bne.n	8009d78 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d76:	e143      	b.n	800a000 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	f040 8140 	bne.w	800a000 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d86:	3301      	adds	r3, #1
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d903      	bls.n	8009da2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	220d      	movs	r2, #13
 8009d9e:	701a      	strb	r2, [r3, #0]
      break;
 8009da0:	e12e      	b.n	800a000 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	795b      	ldrb	r3, [r3, #5]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f8d1 	bl	800af50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	791b      	ldrb	r3, [r3, #4]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 f8cb 	bl	800af50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	701a      	strb	r2, [r3, #0]
      break;
 8009dc6:	e11b      	b.n	800a000 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009dc8:	2101      	movs	r1, #1
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fa7d 	bl	800a2ca <USBH_SetAddress>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d130      	bne.n	8009e3c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009dda:	2002      	movs	r0, #2
 8009ddc:	f001 fbb1 	bl	800b542 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2203      	movs	r2, #3
 8009dec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7919      	ldrb	r1, [r3, #4]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e02:	9202      	str	r2, [sp, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	9201      	str	r2, [sp, #4]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2280      	movs	r2, #128	@ 0x80
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 f84e 	bl	800aeb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	7959      	ldrb	r1, [r3, #5]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e28:	9202      	str	r2, [sp, #8]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	9201      	str	r2, [sp, #4]
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	4603      	mov	r3, r0
 8009e32:	2200      	movs	r2, #0
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f83b 	bl	800aeb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e3a:	e0e3      	b.n	800a004 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	f040 80e0 	bne.w	800a004 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	220d      	movs	r2, #13
 8009e48:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	705a      	strb	r2, [r3, #1]
      break;
 8009e50:	e0d8      	b.n	800a004 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009e52:	2109      	movs	r1, #9
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f9a5 	bl	800a1a4 <USBH_Get_CfgDesc>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d103      	bne.n	8009e6c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2204      	movs	r2, #4
 8009e68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e6a:	e0cd      	b.n	800a008 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	f040 80ca 	bne.w	800a008 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d903      	bls.n	8009e96 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	220d      	movs	r2, #13
 8009e92:	701a      	strb	r2, [r3, #0]
      break;
 8009e94:	e0b8      	b.n	800a008 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	795b      	ldrb	r3, [r3, #5]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f001 f857 	bl	800af50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	791b      	ldrb	r3, [r3, #4]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 f851 	bl	800af50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
      break;
 8009eba:	e0a5      	b.n	800a008 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f96d 	bl	800a1a4 <USBH_Get_CfgDesc>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d103      	bne.n	8009edc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2205      	movs	r2, #5
 8009ed8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009eda:	e097      	b.n	800a00c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	f040 8094 	bne.w	800a00c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009eea:	3301      	adds	r3, #1
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d903      	bls.n	8009f06 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	220d      	movs	r2, #13
 8009f02:	701a      	strb	r2, [r3, #0]
      break;
 8009f04:	e082      	b.n	800a00c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	795b      	ldrb	r3, [r3, #5]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 f81f 	bl	800af50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	791b      	ldrb	r3, [r3, #4]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f001 f819 	bl	800af50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
      break;
 8009f2a:	e06f      	b.n	800a00c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d019      	beq.n	8009f6a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f42:	23ff      	movs	r3, #255	@ 0xff
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f957 	bl	800a1f8 <USBH_Get_StringDesc>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d103      	bne.n	8009f5c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2206      	movs	r2, #6
 8009f58:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009f5a:	e059      	b.n	800a010 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d156      	bne.n	800a010 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2206      	movs	r2, #6
 8009f66:	705a      	strb	r2, [r3, #1]
      break;
 8009f68:	e052      	b.n	800a010 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2206      	movs	r2, #6
 8009f6e:	705a      	strb	r2, [r3, #1]
      break;
 8009f70:	e04e      	b.n	800a010 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d019      	beq.n	8009fb0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f88:	23ff      	movs	r3, #255	@ 0xff
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f934 	bl	800a1f8 <USBH_Get_StringDesc>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d103      	bne.n	8009fa2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2207      	movs	r2, #7
 8009f9e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009fa0:	e038      	b.n	800a014 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d135      	bne.n	800a014 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2207      	movs	r2, #7
 8009fac:	705a      	strb	r2, [r3, #1]
      break;
 8009fae:	e031      	b.n	800a014 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2207      	movs	r2, #7
 8009fb4:	705a      	strb	r2, [r3, #1]
      break;
 8009fb6:	e02d      	b.n	800a014 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d017      	beq.n	8009ff2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009fce:	23ff      	movs	r3, #255	@ 0xff
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f911 	bl	800a1f8 <USBH_Get_StringDesc>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009fe4:	e018      	b.n	800a018 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d115      	bne.n	800a018 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff0:	e012      	b.n	800a018 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff6:	e00f      	b.n	800a018 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e00e      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 8009ffc:	bf00      	nop
 8009ffe:	e00c      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 800a000:	bf00      	nop
 800a002:	e00a      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 800a004:	bf00      	nop
 800a006:	e008      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 800a008:	bf00      	nop
 800a00a:	e006      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 800a00c:	bf00      	nop
 800a00e:	e004      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 800a010:	bf00      	nop
 800a012:	e002      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <USBH_HandleEnum+0x3b6>
      break;
 800a018:	bf00      	nop
  }
  return Status;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f804 	bl	800a066 <USBH_HandleSof>
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b0b      	cmp	r3, #11
 800a076:	d10a      	bne.n	800a08e <USBH_HandleSof+0x28>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d005      	beq.n	800a08e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	4798      	blx	r3
  }
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a0a6:	bf00      	nop
}
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b083      	sub	sp, #12
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a0ca:	bf00      	nop
}
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 f8c0 	bl	800b2aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	791b      	ldrb	r3, [r3, #4]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 ff0d 	bl	800af50 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	795b      	ldrb	r3, [r3, #5]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 ff07 	bl	800af50 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af02      	add	r7, sp, #8
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a158:	887b      	ldrh	r3, [r7, #2]
 800a15a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a15e:	d901      	bls.n	800a164 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a160:	2303      	movs	r3, #3
 800a162:	e01b      	b.n	800a19c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a16a:	887b      	ldrh	r3, [r7, #2]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	4613      	mov	r3, r2
 800a170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f872 	bl	800a260 <USBH_GetDescriptor>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d109      	bne.n	800a19a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a18c:	887a      	ldrh	r2, [r7, #2]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f929 	bl	800a3e8 <USBH_ParseDevDesc>
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	331c      	adds	r3, #28
 800a1b4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a1b6:	887b      	ldrh	r3, [r7, #2]
 800a1b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1bc:	d901      	bls.n	800a1c2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e016      	b.n	800a1f0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a1c2:	887b      	ldrh	r3, [r7, #2]
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f846 	bl	800a260 <USBH_GetDescriptor>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d107      	bne.n	800a1ee <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a1de:	887b      	ldrh	r3, [r7, #2]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f9af 	bl	800a548 <USBH_ParseCfgDesc>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	461a      	mov	r2, r3
 800a204:	460b      	mov	r3, r1
 800a206:	72fb      	strb	r3, [r7, #11]
 800a208:	4613      	mov	r3, r2
 800a20a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a20c:	893b      	ldrh	r3, [r7, #8]
 800a20e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a212:	d802      	bhi.n	800a21a <USBH_Get_StringDesc+0x22>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e01c      	b.n	800a258 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	b29b      	uxth	r3, r3
 800a222:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a226:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a22e:	893b      	ldrh	r3, [r7, #8]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	460b      	mov	r3, r1
 800a234:	2100      	movs	r1, #0
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 f812 	bl	800a260 <USBH_GetDescriptor>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d107      	bne.n	800a256 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a24c:	893a      	ldrh	r2, [r7, #8]
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fb8c 	bl	800a96e <USBH_ParseStringDesc>
  }

  return status;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	607b      	str	r3, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	72fb      	strb	r3, [r7, #11]
 800a26e:	4613      	mov	r3, r2
 800a270:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	789b      	ldrb	r3, [r3, #2]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d11c      	bne.n	800a2b4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a280:	b2da      	uxtb	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2206      	movs	r2, #6
 800a28a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	893a      	ldrh	r2, [r7, #8]
 800a290:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a292:	893b      	ldrh	r3, [r7, #8]
 800a294:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a29c:	d104      	bne.n	800a2a8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f240 4209 	movw	r2, #1033	@ 0x409
 800a2a4:	829a      	strh	r2, [r3, #20]
 800a2a6:	e002      	b.n	800a2ae <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8b3a      	ldrh	r2, [r7, #24]
 800a2b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a2b4:	8b3b      	ldrh	r3, [r7, #24]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 fba4 	bl	800aa08 <USBH_CtlReq>
 800a2c0:	4603      	mov	r3, r0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	789b      	ldrb	r3, [r3, #2]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d10f      	bne.n	800a2fe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2205      	movs	r2, #5
 800a2e8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2fe:	2200      	movs	r2, #0
 800a300:	2100      	movs	r1, #0
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fb80 	bl	800aa08 <USBH_CtlReq>
 800a308:	4603      	mov	r3, r0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	460b      	mov	r3, r1
 800a31c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	789b      	ldrb	r3, [r3, #2]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d10e      	bne.n	800a344 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2209      	movs	r2, #9
 800a330:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	887a      	ldrh	r2, [r7, #2]
 800a336:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a344:	2200      	movs	r2, #0
 800a346:	2100      	movs	r1, #0
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fb5d 	bl	800aa08 <USBH_CtlReq>
 800a34e:	4603      	mov	r3, r0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	789b      	ldrb	r3, [r3, #2]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d10f      	bne.n	800a38c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2203      	movs	r2, #3
 800a376:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a378:	78fb      	ldrb	r3, [r7, #3]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a38c:	2200      	movs	r2, #0
 800a38e:	2100      	movs	r1, #0
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fb39 	bl	800aa08 <USBH_CtlReq>
 800a396:	4603      	mov	r3, r0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	789b      	ldrb	r3, [r3, #2]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d10f      	bne.n	800a3d4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fb15 	bl	800aa08 <USBH_CtlReq>
 800a3de:	4603      	mov	r3, r0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a3fc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a408:	2302      	movs	r3, #2
 800a40a:	e094      	b.n	800a536 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	785a      	ldrb	r2, [r3, #1]
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3302      	adds	r3, #2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	3303      	adds	r3, #3
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4313      	orrs	r3, r2
 800a430:	b29a      	uxth	r2, r3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	791a      	ldrb	r2, [r3, #4]
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	795a      	ldrb	r2, [r3, #5]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	799a      	ldrb	r2, [r3, #6]
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	79da      	ldrb	r2, [r3, #7]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a466:	2b01      	cmp	r3, #1
 800a468:	d11b      	bne.n	800a4a2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	79db      	ldrb	r3, [r3, #7]
 800a46e:	2b20      	cmp	r3, #32
 800a470:	dc0f      	bgt.n	800a492 <USBH_ParseDevDesc+0xaa>
 800a472:	2b08      	cmp	r3, #8
 800a474:	db0f      	blt.n	800a496 <USBH_ParseDevDesc+0xae>
 800a476:	3b08      	subs	r3, #8
 800a478:	4a32      	ldr	r2, [pc, #200]	@ (800a544 <USBH_ParseDevDesc+0x15c>)
 800a47a:	fa22 f303 	lsr.w	r3, r2, r3
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	bf14      	ite	ne
 800a486:	2301      	movne	r3, #1
 800a488:	2300      	moveq	r3, #0
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d106      	bne.n	800a49e <USBH_ParseDevDesc+0xb6>
 800a490:	e001      	b.n	800a496 <USBH_ParseDevDesc+0xae>
 800a492:	2b40      	cmp	r3, #64	@ 0x40
 800a494:	d003      	beq.n	800a49e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2208      	movs	r2, #8
 800a49a:	71da      	strb	r2, [r3, #7]
        break;
 800a49c:	e000      	b.n	800a4a0 <USBH_ParseDevDesc+0xb8>
        break;
 800a49e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a4a0:	e00e      	b.n	800a4c0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d107      	bne.n	800a4bc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	79db      	ldrb	r3, [r3, #7]
 800a4b0:	2b08      	cmp	r3, #8
 800a4b2:	d005      	beq.n	800a4c0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	71da      	strb	r2, [r3, #7]
 800a4ba:	e001      	b.n	800a4c0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d936      	bls.n	800a534 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	3309      	adds	r3, #9
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	330a      	adds	r3, #10
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	330b      	adds	r3, #11
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	461a      	mov	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	330d      	adds	r3, #13
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	021b      	lsls	r3, r3, #8
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	b29a      	uxth	r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	7b9a      	ldrb	r2, [r3, #14]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	7bda      	ldrb	r2, [r3, #15]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	7c1a      	ldrb	r2, [r3, #16]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	7c5a      	ldrb	r2, [r3, #17]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a534:	7dfb      	ldrb	r3, [r7, #23]
}
 800a536:	4618      	mov	r0, r3
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	01000101 	.word	0x01000101

0800a548 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08c      	sub	sp, #48	@ 0x30
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	4613      	mov	r3, r2
 800a554:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a55c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a576:	2302      	movs	r3, #2
 800a578:	e0de      	b.n	800a738 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b09      	cmp	r3, #9
 800a584:	d002      	beq.n	800a58c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	2209      	movs	r2, #9
 800a58a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	781a      	ldrb	r2, [r3, #0]
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	785a      	ldrb	r2, [r3, #1]
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3302      	adds	r3, #2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3303      	adds	r3, #3
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5b6:	bf28      	it	cs
 800a5b8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	791a      	ldrb	r2, [r3, #4]
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	795a      	ldrb	r2, [r3, #5]
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	799a      	ldrb	r2, [r3, #6]
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	79da      	ldrb	r2, [r3, #7]
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	7a1a      	ldrb	r2, [r3, #8]
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	f240 80a1 	bls.w	800a734 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a5f2:	2309      	movs	r3, #9
 800a5f4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a5fa:	e085      	b.n	800a708 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a5fc:	f107 0316 	add.w	r3, r7, #22
 800a600:	4619      	mov	r1, r3
 800a602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a604:	f000 f9e6 	bl	800a9d4 <USBH_GetNextDesc>
 800a608:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d17a      	bne.n	800a708 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b09      	cmp	r3, #9
 800a618:	d002      	beq.n	800a620 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61c:	2209      	movs	r2, #9
 800a61e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a624:	221a      	movs	r2, #26
 800a626:	fb02 f303 	mul.w	r3, r2, r3
 800a62a:	3308      	adds	r3, #8
 800a62c:	6a3a      	ldr	r2, [r7, #32]
 800a62e:	4413      	add	r3, r2
 800a630:	3302      	adds	r3, #2
 800a632:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a636:	69f8      	ldr	r0, [r7, #28]
 800a638:	f000 f882 	bl	800a740 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a646:	e043      	b.n	800a6d0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a648:	f107 0316 	add.w	r3, r7, #22
 800a64c:	4619      	mov	r1, r3
 800a64e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a650:	f000 f9c0 	bl	800a9d4 <USBH_GetNextDesc>
 800a654:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2b05      	cmp	r3, #5
 800a65c:	d138      	bne.n	800a6d0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	795b      	ldrb	r3, [r3, #5]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d113      	bne.n	800a68e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d003      	beq.n	800a676 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	799b      	ldrb	r3, [r3, #6]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d10b      	bne.n	800a68e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	79db      	ldrb	r3, [r3, #7]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10b      	bne.n	800a696 <USBH_ParseCfgDesc+0x14e>
 800a67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b09      	cmp	r3, #9
 800a684:	d007      	beq.n	800a696 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a688:	2209      	movs	r2, #9
 800a68a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a68c:	e003      	b.n	800a696 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	2207      	movs	r2, #7
 800a692:	701a      	strb	r2, [r3, #0]
 800a694:	e000      	b.n	800a698 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a696:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a69c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	00d2      	lsls	r2, r2, #3
 800a6a4:	211a      	movs	r1, #26
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	6a3a      	ldr	r2, [r7, #32]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a6b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f86f 	bl	800a79e <USBH_ParseEPDesc>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a6c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a6d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d80a      	bhi.n	800a6ee <USBH_ParseCfgDesc+0x1a6>
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	791b      	ldrb	r3, [r3, #4]
 800a6dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d204      	bcs.n	800a6ee <USBH_ParseCfgDesc+0x1a6>
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	885a      	ldrh	r2, [r3, #2]
 800a6e8:	8afb      	ldrh	r3, [r7, #22]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d8ac      	bhi.n	800a648 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	791b      	ldrb	r3, [r3, #4]
 800a6f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d201      	bcs.n	800a6fe <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e01c      	b.n	800a738 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a6fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a702:	3301      	adds	r3, #1
 800a704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d805      	bhi.n	800a71c <USBH_ParseCfgDesc+0x1d4>
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	885a      	ldrh	r2, [r3, #2]
 800a714:	8afb      	ldrh	r3, [r7, #22]
 800a716:	429a      	cmp	r2, r3
 800a718:	f63f af70 	bhi.w	800a5fc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	791b      	ldrb	r3, [r3, #4]
 800a720:	2b02      	cmp	r3, #2
 800a722:	bf28      	it	cs
 800a724:	2302      	movcs	r3, #2
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d201      	bcs.n	800a734 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a730:	2303      	movs	r3, #3
 800a732:	e001      	b.n	800a738 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3730      	adds	r7, #48	@ 0x30
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781a      	ldrb	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	785a      	ldrb	r2, [r3, #1]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	789a      	ldrb	r2, [r3, #2]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	78da      	ldrb	r2, [r3, #3]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	791a      	ldrb	r2, [r3, #4]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	795a      	ldrb	r2, [r3, #5]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	799a      	ldrb	r2, [r3, #6]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	79da      	ldrb	r2, [r3, #7]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	7a1a      	ldrb	r2, [r3, #8]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	721a      	strb	r2, [r3, #8]
}
 800a792:	bf00      	nop
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b087      	sub	sp, #28
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	781a      	ldrb	r2, [r3, #0]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	785a      	ldrb	r2, [r3, #1]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	789a      	ldrb	r2, [r3, #2]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	78da      	ldrb	r2, [r3, #3]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3305      	adds	r3, #5
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	799a      	ldrb	r2, [r3, #6]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	889b      	ldrh	r3, [r3, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d009      	beq.n	800a80c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a7fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a800:	d804      	bhi.n	800a80c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a80a:	d901      	bls.n	800a810 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a80c:	2303      	movs	r3, #3
 800a80e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a816:	2b00      	cmp	r3, #0
 800a818:	d136      	bne.n	800a888 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	78db      	ldrb	r3, [r3, #3]
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d108      	bne.n	800a838 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	889b      	ldrh	r3, [r3, #4]
 800a82a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a82e:	f240 8097 	bls.w	800a960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a832:	2303      	movs	r3, #3
 800a834:	75fb      	strb	r3, [r7, #23]
 800a836:	e093      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	78db      	ldrb	r3, [r3, #3]
 800a83c:	f003 0303 	and.w	r3, r3, #3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d107      	bne.n	800a854 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	889b      	ldrh	r3, [r3, #4]
 800a848:	2b40      	cmp	r3, #64	@ 0x40
 800a84a:	f240 8089 	bls.w	800a960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a84e:	2303      	movs	r3, #3
 800a850:	75fb      	strb	r3, [r7, #23]
 800a852:	e085      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	78db      	ldrb	r3, [r3, #3]
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d005      	beq.n	800a86c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	78db      	ldrb	r3, [r3, #3]
 800a864:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d10a      	bne.n	800a882 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	799b      	ldrb	r3, [r3, #6]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <USBH_ParseEPDesc+0xde>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	799b      	ldrb	r3, [r3, #6]
 800a878:	2b10      	cmp	r3, #16
 800a87a:	d970      	bls.n	800a95e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a87c:	2303      	movs	r3, #3
 800a87e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a880:	e06d      	b.n	800a95e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a882:	2303      	movs	r3, #3
 800a884:	75fb      	strb	r3, [r7, #23]
 800a886:	e06b      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d13c      	bne.n	800a90c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	78db      	ldrb	r3, [r3, #3]
 800a896:	f003 0303 	and.w	r3, r3, #3
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d005      	beq.n	800a8aa <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	78db      	ldrb	r3, [r3, #3]
 800a8a2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d106      	bne.n	800a8b8 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	889b      	ldrh	r3, [r3, #4]
 800a8ae:	2b40      	cmp	r3, #64	@ 0x40
 800a8b0:	d956      	bls.n	800a960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8b6:	e053      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	78db      	ldrb	r3, [r3, #3]
 800a8bc:	f003 0303 	and.w	r3, r3, #3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d10e      	bne.n	800a8e2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	799b      	ldrb	r3, [r3, #6]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d007      	beq.n	800a8dc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a8d0:	2b10      	cmp	r3, #16
 800a8d2:	d803      	bhi.n	800a8dc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a8d8:	2b40      	cmp	r3, #64	@ 0x40
 800a8da:	d941      	bls.n	800a960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	75fb      	strb	r3, [r7, #23]
 800a8e0:	e03e      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	78db      	ldrb	r3, [r3, #3]
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d10b      	bne.n	800a906 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	799b      	ldrb	r3, [r3, #6]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d004      	beq.n	800a900 <USBH_ParseEPDesc+0x162>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	889b      	ldrh	r3, [r3, #4]
 800a8fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8fe:	d32f      	bcc.n	800a960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a900:	2303      	movs	r3, #3
 800a902:	75fb      	strb	r3, [r7, #23]
 800a904:	e02c      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a906:	2303      	movs	r3, #3
 800a908:	75fb      	strb	r3, [r7, #23]
 800a90a:	e029      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a912:	2b02      	cmp	r3, #2
 800a914:	d120      	bne.n	800a958 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	78db      	ldrb	r3, [r3, #3]
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d106      	bne.n	800a930 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	889b      	ldrh	r3, [r3, #4]
 800a926:	2b08      	cmp	r3, #8
 800a928:	d01a      	beq.n	800a960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a92a:	2303      	movs	r3, #3
 800a92c:	75fb      	strb	r3, [r7, #23]
 800a92e:	e017      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	78db      	ldrb	r3, [r3, #3]
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d10a      	bne.n	800a952 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	799b      	ldrb	r3, [r3, #6]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d003      	beq.n	800a94c <USBH_ParseEPDesc+0x1ae>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	889b      	ldrh	r3, [r3, #4]
 800a948:	2b08      	cmp	r3, #8
 800a94a:	d909      	bls.n	800a960 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a94c:	2303      	movs	r3, #3
 800a94e:	75fb      	strb	r3, [r7, #23]
 800a950:	e006      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a952:	2303      	movs	r3, #3
 800a954:	75fb      	strb	r3, [r7, #23]
 800a956:	e003      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a958:	2303      	movs	r3, #3
 800a95a:	75fb      	strb	r3, [r7, #23]
 800a95c:	e000      	b.n	800a960 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a95e:	bf00      	nop
  }

  return status;
 800a960:	7dfb      	ldrb	r3, [r7, #23]
}
 800a962:	4618      	mov	r0, r3
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a96e:	b480      	push	{r7}
 800a970:	b087      	sub	sp, #28
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	4613      	mov	r3, r2
 800a97a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3301      	adds	r3, #1
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	2b03      	cmp	r3, #3
 800a984:	d120      	bne.n	800a9c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	1e9a      	subs	r2, r3, #2
 800a98c:	88fb      	ldrh	r3, [r7, #6]
 800a98e:	4293      	cmp	r3, r2
 800a990:	bf28      	it	cs
 800a992:	4613      	movcs	r3, r2
 800a994:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3302      	adds	r3, #2
 800a99a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a99c:	2300      	movs	r3, #0
 800a99e:	82fb      	strh	r3, [r7, #22]
 800a9a0:	e00b      	b.n	800a9ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9a2:	8afb      	ldrh	r3, [r7, #22]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	781a      	ldrb	r2, [r3, #0]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9b4:	8afb      	ldrh	r3, [r7, #22]
 800a9b6:	3302      	adds	r3, #2
 800a9b8:	82fb      	strh	r3, [r7, #22]
 800a9ba:	8afa      	ldrh	r2, [r7, #22]
 800a9bc:	8abb      	ldrh	r3, [r7, #20]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d3ef      	bcc.n	800a9a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	701a      	strb	r2, [r3, #0]
  }
}
 800a9c8:	bf00      	nop
 800a9ca:	371c      	adds	r7, #28
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	4613      	mov	r3, r2
 800aa14:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa16:	2301      	movs	r3, #1
 800aa18:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	789b      	ldrb	r3, [r3, #2]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d002      	beq.n	800aa28 <USBH_CtlReq+0x20>
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d00f      	beq.n	800aa46 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800aa26:	e027      	b.n	800aa78 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	88fa      	ldrh	r2, [r7, #6]
 800aa32:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2201      	movs	r2, #1
 800aa38:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa40:	2301      	movs	r3, #1
 800aa42:	75fb      	strb	r3, [r7, #23]
      break;
 800aa44:	e018      	b.n	800aa78 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 f81c 	bl	800aa84 <USBH_HandleControl>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <USBH_CtlReq+0x54>
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d106      	bne.n	800aa6a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	761a      	strb	r2, [r3, #24]
      break;
 800aa68:	e005      	b.n	800aa76 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d102      	bne.n	800aa76 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2201      	movs	r2, #1
 800aa74:	709a      	strb	r2, [r3, #2]
      break;
 800aa76:	bf00      	nop
  }
  return status;
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7e1b      	ldrb	r3, [r3, #24]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	2b0a      	cmp	r3, #10
 800aa9c:	f200 8157 	bhi.w	800ad4e <USBH_HandleControl+0x2ca>
 800aaa0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa8 <USBH_HandleControl+0x24>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	0800aaef 	.word	0x0800aaef
 800aab0:	0800ab59 	.word	0x0800ab59
 800aab4:	0800ab7f 	.word	0x0800ab7f
 800aab8:	0800abb9 	.word	0x0800abb9
 800aabc:	0800abe3 	.word	0x0800abe3
 800aac0:	0800ac35 	.word	0x0800ac35
 800aac4:	0800ac57 	.word	0x0800ac57
 800aac8:	0800ac93 	.word	0x0800ac93
 800aacc:	0800acb9 	.word	0x0800acb9
 800aad0:	0800acf7 	.word	0x0800acf7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f103 0110 	add.w	r1, r3, #16
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	795b      	ldrb	r3, [r3, #5]
 800aade:	461a      	mov	r2, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f945 	bl	800ad70 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	761a      	strb	r2, [r3, #24]
      break;
 800aaec:	e13a      	b.n	800ad64 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	795b      	ldrb	r3, [r3, #5]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fcc7 	bl	800b488 <USBH_LL_GetURBState>
 800aafa:	4603      	mov	r3, r0
 800aafc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d11e      	bne.n	800ab42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7c1b      	ldrb	r3, [r3, #16]
 800ab08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8adb      	ldrh	r3, [r3, #22]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab16:	7b7b      	ldrb	r3, [r7, #13]
 800ab18:	2b80      	cmp	r3, #128	@ 0x80
 800ab1a:	d103      	bne.n	800ab24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2203      	movs	r2, #3
 800ab20:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ab22:	e116      	b.n	800ad52 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2205      	movs	r2, #5
 800ab28:	761a      	strb	r2, [r3, #24]
      break;
 800ab2a:	e112      	b.n	800ad52 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800ab2c:	7b7b      	ldrb	r3, [r7, #13]
 800ab2e:	2b80      	cmp	r3, #128	@ 0x80
 800ab30:	d103      	bne.n	800ab3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2209      	movs	r2, #9
 800ab36:	761a      	strb	r2, [r3, #24]
      break;
 800ab38:	e10b      	b.n	800ad52 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2207      	movs	r2, #7
 800ab3e:	761a      	strb	r2, [r3, #24]
      break;
 800ab40:	e107      	b.n	800ad52 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	d003      	beq.n	800ab50 <USBH_HandleControl+0xcc>
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	f040 8101 	bne.w	800ad52 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	220b      	movs	r2, #11
 800ab54:	761a      	strb	r2, [r3, #24]
      break;
 800ab56:	e0fc      	b.n	800ad52 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6899      	ldr	r1, [r3, #8]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	899a      	ldrh	r2, [r3, #12]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	791b      	ldrb	r3, [r3, #4]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f93c 	bl	800adee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2204      	movs	r2, #4
 800ab7a:	761a      	strb	r2, [r3, #24]
      break;
 800ab7c:	e0f2      	b.n	800ad64 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	791b      	ldrb	r3, [r3, #4]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fc7f 	bl	800b488 <USBH_LL_GetURBState>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d103      	bne.n	800ab9c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2209      	movs	r2, #9
 800ab98:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ab9a:	e0dc      	b.n	800ad56 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	2b05      	cmp	r3, #5
 800aba0:	d102      	bne.n	800aba8 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800aba2:	2303      	movs	r3, #3
 800aba4:	73fb      	strb	r3, [r7, #15]
      break;
 800aba6:	e0d6      	b.n	800ad56 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	2b04      	cmp	r3, #4
 800abac:	f040 80d3 	bne.w	800ad56 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	220b      	movs	r2, #11
 800abb4:	761a      	strb	r2, [r3, #24]
      break;
 800abb6:	e0ce      	b.n	800ad56 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6899      	ldr	r1, [r3, #8]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	899a      	ldrh	r2, [r3, #12]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	795b      	ldrb	r3, [r3, #5]
 800abc4:	2001      	movs	r0, #1
 800abc6:	9000      	str	r0, [sp, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f8eb 	bl	800ada4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2206      	movs	r2, #6
 800abde:	761a      	strb	r2, [r3, #24]
      break;
 800abe0:	e0c0      	b.n	800ad64 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	795b      	ldrb	r3, [r3, #5]
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fc4d 	bl	800b488 <USBH_LL_GetURBState>
 800abee:	4603      	mov	r3, r0
 800abf0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d103      	bne.n	800ac00 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2207      	movs	r2, #7
 800abfc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800abfe:	e0ac      	b.n	800ad5a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	2b05      	cmp	r3, #5
 800ac04:	d105      	bne.n	800ac12 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	220c      	movs	r2, #12
 800ac0a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac10:	e0a3      	b.n	800ad5a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac12:	7bbb      	ldrb	r3, [r7, #14]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d103      	bne.n	800ac20 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2205      	movs	r2, #5
 800ac1c:	761a      	strb	r2, [r3, #24]
      break;
 800ac1e:	e09c      	b.n	800ad5a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	f040 8099 	bne.w	800ad5a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	220b      	movs	r2, #11
 800ac2c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac2e:	2302      	movs	r3, #2
 800ac30:	73fb      	strb	r3, [r7, #15]
      break;
 800ac32:	e092      	b.n	800ad5a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	791b      	ldrb	r3, [r3, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f8d6 	bl	800adee <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2208      	movs	r2, #8
 800ac52:	761a      	strb	r2, [r3, #24]

      break;
 800ac54:	e086      	b.n	800ad64 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	791b      	ldrb	r3, [r3, #4]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fc13 	bl	800b488 <USBH_LL_GetURBState>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d105      	bne.n	800ac78 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	220d      	movs	r2, #13
 800ac70:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ac76:	e072      	b.n	800ad5e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	2b04      	cmp	r3, #4
 800ac7c:	d103      	bne.n	800ac86 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	220b      	movs	r2, #11
 800ac82:	761a      	strb	r2, [r3, #24]
      break;
 800ac84:	e06b      	b.n	800ad5e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
 800ac88:	2b05      	cmp	r3, #5
 800ac8a:	d168      	bne.n	800ad5e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac90:	e065      	b.n	800ad5e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	795b      	ldrb	r3, [r3, #5]
 800ac96:	2201      	movs	r2, #1
 800ac98:	9200      	str	r2, [sp, #0]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f880 	bl	800ada4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800acaa:	b29a      	uxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	220a      	movs	r2, #10
 800acb4:	761a      	strb	r2, [r3, #24]
      break;
 800acb6:	e055      	b.n	800ad64 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	795b      	ldrb	r3, [r3, #5]
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fbe2 	bl	800b488 <USBH_LL_GetURBState>
 800acc4:	4603      	mov	r3, r0
 800acc6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d105      	bne.n	800acda <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	220d      	movs	r2, #13
 800acd6:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800acd8:	e043      	b.n	800ad62 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800acda:	7bbb      	ldrb	r3, [r7, #14]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d103      	bne.n	800ace8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2209      	movs	r2, #9
 800ace4:	761a      	strb	r2, [r3, #24]
      break;
 800ace6:	e03c      	b.n	800ad62 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	2b04      	cmp	r3, #4
 800acec:	d139      	bne.n	800ad62 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	220b      	movs	r2, #11
 800acf2:	761a      	strb	r2, [r3, #24]
      break;
 800acf4:	e035      	b.n	800ad62 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	7e5b      	ldrb	r3, [r3, #25]
 800acfa:	3301      	adds	r3, #1
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	765a      	strb	r2, [r3, #25]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	7e5b      	ldrb	r3, [r3, #25]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d806      	bhi.n	800ad18 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad16:	e025      	b.n	800ad64 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad1e:	2106      	movs	r1, #6
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	795b      	ldrb	r3, [r3, #5]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f90d 	bl	800af50 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f907 	bl	800af50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4c:	e00a      	b.n	800ad64 <USBH_HandleControl+0x2e0>

    default:
      break;
 800ad4e:	bf00      	nop
 800ad50:	e008      	b.n	800ad64 <USBH_HandleControl+0x2e0>
      break;
 800ad52:	bf00      	nop
 800ad54:	e006      	b.n	800ad64 <USBH_HandleControl+0x2e0>
      break;
 800ad56:	bf00      	nop
 800ad58:	e004      	b.n	800ad64 <USBH_HandleControl+0x2e0>
      break;
 800ad5a:	bf00      	nop
 800ad5c:	e002      	b.n	800ad64 <USBH_HandleControl+0x2e0>
      break;
 800ad5e:	bf00      	nop
 800ad60:	e000      	b.n	800ad64 <USBH_HandleControl+0x2e0>
      break;
 800ad62:	bf00      	nop
  }

  return status;
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop

0800ad70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad7e:	79f9      	ldrb	r1, [r7, #7]
 800ad80:	2300      	movs	r3, #0
 800ad82:	9303      	str	r3, [sp, #12]
 800ad84:	2308      	movs	r3, #8
 800ad86:	9302      	str	r3, [sp, #8]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	2300      	movs	r3, #0
 800ad92:	2200      	movs	r2, #0
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 fb46 	bl	800b426 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af04      	add	r7, sp, #16
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	4611      	mov	r1, r2
 800adb0:	461a      	mov	r2, r3
 800adb2:	460b      	mov	r3, r1
 800adb4:	80fb      	strh	r3, [r7, #6]
 800adb6:	4613      	mov	r3, r2
 800adb8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adc8:	7979      	ldrb	r1, [r7, #5]
 800adca:	7e3b      	ldrb	r3, [r7, #24]
 800adcc:	9303      	str	r3, [sp, #12]
 800adce:	88fb      	ldrh	r3, [r7, #6]
 800add0:	9302      	str	r3, [sp, #8]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	2301      	movs	r3, #1
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	2300      	movs	r3, #0
 800addc:	2200      	movs	r2, #0
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 fb21 	bl	800b426 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b088      	sub	sp, #32
 800adf2:	af04      	add	r7, sp, #16
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	4611      	mov	r1, r2
 800adfa:	461a      	mov	r2, r3
 800adfc:	460b      	mov	r3, r1
 800adfe:	80fb      	strh	r3, [r7, #6]
 800ae00:	4613      	mov	r3, r2
 800ae02:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae04:	7979      	ldrb	r1, [r7, #5]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9303      	str	r3, [sp, #12]
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	2301      	movs	r3, #1
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	2300      	movs	r3, #0
 800ae18:	2201      	movs	r2, #1
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 fb03 	bl	800b426 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae20:	2300      	movs	r3, #0

}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b088      	sub	sp, #32
 800ae2e:	af04      	add	r7, sp, #16
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	4611      	mov	r1, r2
 800ae36:	461a      	mov	r2, r3
 800ae38:	460b      	mov	r3, r1
 800ae3a:	80fb      	strh	r3, [r7, #6]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae4e:	7979      	ldrb	r1, [r7, #5]
 800ae50:	7e3b      	ldrb	r3, [r7, #24]
 800ae52:	9303      	str	r3, [sp, #12]
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	9302      	str	r3, [sp, #8]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	9301      	str	r3, [sp, #4]
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	2302      	movs	r3, #2
 800ae62:	2200      	movs	r2, #0
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 fade 	bl	800b426 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af04      	add	r7, sp, #16
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4611      	mov	r1, r2
 800ae80:	461a      	mov	r2, r3
 800ae82:	460b      	mov	r3, r1
 800ae84:	80fb      	strh	r3, [r7, #6]
 800ae86:	4613      	mov	r3, r2
 800ae88:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae8a:	7979      	ldrb	r1, [r7, #5]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	9303      	str	r3, [sp, #12]
 800ae90:	88fb      	ldrh	r3, [r7, #6]
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	2301      	movs	r3, #1
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	2201      	movs	r2, #1
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 fac0 	bl	800b426 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af04      	add	r7, sp, #16
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	4608      	mov	r0, r1
 800aeba:	4611      	mov	r1, r2
 800aebc:	461a      	mov	r2, r3
 800aebe:	4603      	mov	r3, r0
 800aec0:	70fb      	strb	r3, [r7, #3]
 800aec2:	460b      	mov	r3, r1
 800aec4:	70bb      	strb	r3, [r7, #2]
 800aec6:	4613      	mov	r3, r2
 800aec8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aeca:	7878      	ldrb	r0, [r7, #1]
 800aecc:	78ba      	ldrb	r2, [r7, #2]
 800aece:	78f9      	ldrb	r1, [r7, #3]
 800aed0:	8b3b      	ldrh	r3, [r7, #24]
 800aed2:	9302      	str	r3, [sp, #8]
 800aed4:	7d3b      	ldrb	r3, [r7, #20]
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	7c3b      	ldrb	r3, [r7, #16]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	4603      	mov	r3, r0
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fa53 	bl	800b38a <USBH_LL_OpenPipe>

  return USBH_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	460b      	mov	r3, r1
 800aef8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aefa:	78fb      	ldrb	r3, [r7, #3]
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fa72 	bl	800b3e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f836 	bl	800af8c <USBH_GetFreePipe>
 800af20:	4603      	mov	r3, r0
 800af22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af24:	89fb      	ldrh	r3, [r7, #14]
 800af26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00a      	beq.n	800af44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af2e:	78fa      	ldrb	r2, [r7, #3]
 800af30:	89fb      	ldrh	r3, [r7, #14]
 800af32:	f003 030f 	and.w	r3, r3, #15
 800af36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	33e0      	adds	r3, #224	@ 0xe0
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	440b      	add	r3, r1
 800af42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af44:	89fb      	ldrh	r3, [r7, #14]
 800af46:	b2db      	uxtb	r3, r3
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800af5c:	78fb      	ldrb	r3, [r7, #3]
 800af5e:	2b0f      	cmp	r3, #15
 800af60:	d80d      	bhi.n	800af7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	33e0      	adds	r3, #224	@ 0xe0
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	33e0      	adds	r3, #224	@ 0xe0
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	440b      	add	r3, r1
 800af7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af94:	2300      	movs	r3, #0
 800af96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af98:	2300      	movs	r3, #0
 800af9a:	73fb      	strb	r3, [r7, #15]
 800af9c:	e00f      	b.n	800afbe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	33e0      	adds	r3, #224	@ 0xe0
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d102      	bne.n	800afb8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	e007      	b.n	800afc8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	3301      	adds	r3, #1
 800afbc:	73fb      	strb	r3, [r7, #15]
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	2b0f      	cmp	r3, #15
 800afc2:	d9ec      	bls.n	800af9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800afc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800afd8:	2201      	movs	r2, #1
 800afda:	490e      	ldr	r1, [pc, #56]	@ (800b014 <MX_USB_HOST_Init+0x40>)
 800afdc:	480e      	ldr	r0, [pc, #56]	@ (800b018 <MX_USB_HOST_Init+0x44>)
 800afde:	f7fe fb0f 	bl	8009600 <USBH_Init>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800afe8:	f7f6 fbc6 	bl	8001778 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800afec:	490b      	ldr	r1, [pc, #44]	@ (800b01c <MX_USB_HOST_Init+0x48>)
 800afee:	480a      	ldr	r0, [pc, #40]	@ (800b018 <MX_USB_HOST_Init+0x44>)
 800aff0:	f7fe fbb1 	bl	8009756 <USBH_RegisterClass>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800affa:	f7f6 fbbd 	bl	8001778 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800affe:	4806      	ldr	r0, [pc, #24]	@ (800b018 <MX_USB_HOST_Init+0x44>)
 800b000:	f7fe fc35 	bl	800986e <USBH_Start>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b00a:	f7f6 fbb5 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b00e:	bf00      	nop
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	0800b035 	.word	0x0800b035
 800b018:	200004c8 	.word	0x200004c8
 800b01c:	20000020 	.word	0x20000020

0800b020 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b024:	4802      	ldr	r0, [pc, #8]	@ (800b030 <MX_USB_HOST_Process+0x10>)
 800b026:	f7fe fc33 	bl	8009890 <USBH_Process>
}
 800b02a:	bf00      	nop
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	200004c8 	.word	0x200004c8

0800b034 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	3b01      	subs	r3, #1
 800b044:	2b04      	cmp	r3, #4
 800b046:	d819      	bhi.n	800b07c <USBH_UserProcess+0x48>
 800b048:	a201      	add	r2, pc, #4	@ (adr r2, 800b050 <USBH_UserProcess+0x1c>)
 800b04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04e:	bf00      	nop
 800b050:	0800b07d 	.word	0x0800b07d
 800b054:	0800b06d 	.word	0x0800b06d
 800b058:	0800b07d 	.word	0x0800b07d
 800b05c:	0800b075 	.word	0x0800b075
 800b060:	0800b065 	.word	0x0800b065
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b064:	4b09      	ldr	r3, [pc, #36]	@ (800b08c <USBH_UserProcess+0x58>)
 800b066:	2203      	movs	r2, #3
 800b068:	701a      	strb	r2, [r3, #0]
  break;
 800b06a:	e008      	b.n	800b07e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b06c:	4b07      	ldr	r3, [pc, #28]	@ (800b08c <USBH_UserProcess+0x58>)
 800b06e:	2202      	movs	r2, #2
 800b070:	701a      	strb	r2, [r3, #0]
  break;
 800b072:	e004      	b.n	800b07e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b074:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <USBH_UserProcess+0x58>)
 800b076:	2201      	movs	r2, #1
 800b078:	701a      	strb	r2, [r3, #0]
  break;
 800b07a:	e000      	b.n	800b07e <USBH_UserProcess+0x4a>

  default:
  break;
 800b07c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b07e:	bf00      	nop
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	200008a0 	.word	0x200008a0

0800b090 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	@ 0x28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b098:	f107 0314 	add.w	r3, r7, #20
 800b09c:	2200      	movs	r2, #0
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	605a      	str	r2, [r3, #4]
 800b0a2:	609a      	str	r2, [r3, #8]
 800b0a4:	60da      	str	r2, [r3, #12]
 800b0a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0b0:	d147      	bne.n	800b142 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	613b      	str	r3, [r7, #16]
 800b0b6:	4b25      	ldr	r3, [pc, #148]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ba:	4a24      	ldr	r2, [pc, #144]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b0bc:	f043 0301 	orr.w	r3, r3, #1
 800b0c0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0c2:	4b22      	ldr	r3, [pc, #136]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c6:	f003 0301 	and.w	r3, r3, #1
 800b0ca:	613b      	str	r3, [r7, #16]
 800b0cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b0ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	481b      	ldr	r0, [pc, #108]	@ (800b150 <HAL_HCD_MspInit+0xc0>)
 800b0e4:	f7f7 ffba 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b0e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b0ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b0fa:	230a      	movs	r3, #10
 800b0fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0fe:	f107 0314 	add.w	r3, r7, #20
 800b102:	4619      	mov	r1, r3
 800b104:	4812      	ldr	r0, [pc, #72]	@ (800b150 <HAL_HCD_MspInit+0xc0>)
 800b106:	f7f7 ffa9 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b10a:	4b10      	ldr	r3, [pc, #64]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b10c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b10e:	4a0f      	ldr	r2, [pc, #60]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b114:	6353      	str	r3, [r2, #52]	@ 0x34
 800b116:	2300      	movs	r3, #0
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	4b0c      	ldr	r3, [pc, #48]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b11c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b11e:	4a0b      	ldr	r2, [pc, #44]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b124:	6453      	str	r3, [r2, #68]	@ 0x44
 800b126:	4b09      	ldr	r3, [pc, #36]	@ (800b14c <HAL_HCD_MspInit+0xbc>)
 800b128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b12a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b132:	2200      	movs	r2, #0
 800b134:	2100      	movs	r1, #0
 800b136:	2043      	movs	r0, #67	@ 0x43
 800b138:	f7f7 fbe9 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b13c:	2043      	movs	r0, #67	@ 0x43
 800b13e:	f7f7 fc02 	bl	8002946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b142:	bf00      	nop
 800b144:	3728      	adds	r7, #40	@ 0x28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	40023800 	.word	0x40023800
 800b150:	40020000 	.word	0x40020000

0800b154 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe ff6d 	bl	800a042 <USBH_LL_IncTimer>
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe ffa9 	bl	800a0d6 <USBH_LL_Connect>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe ffb2 	bl	800a104 <USBH_LL_Disconnect>
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe ff5f 	bl	800a096 <USBH_LL_PortEnabled>
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe ff5f 	bl	800a0b2 <USBH_LL_PortDisabled>
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d12a      	bne.n	800b264 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b20e:	4a18      	ldr	r2, [pc, #96]	@ (800b270 <USBH_LL_Init+0x74>)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a15      	ldr	r2, [pc, #84]	@ (800b270 <USBH_LL_Init+0x74>)
 800b21a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b21e:	4b14      	ldr	r3, [pc, #80]	@ (800b270 <USBH_LL_Init+0x74>)
 800b220:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b224:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b226:	4b12      	ldr	r3, [pc, #72]	@ (800b270 <USBH_LL_Init+0x74>)
 800b228:	2208      	movs	r2, #8
 800b22a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b22c:	4b10      	ldr	r3, [pc, #64]	@ (800b270 <USBH_LL_Init+0x74>)
 800b22e:	2201      	movs	r2, #1
 800b230:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b232:	4b0f      	ldr	r3, [pc, #60]	@ (800b270 <USBH_LL_Init+0x74>)
 800b234:	2200      	movs	r2, #0
 800b236:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b238:	4b0d      	ldr	r3, [pc, #52]	@ (800b270 <USBH_LL_Init+0x74>)
 800b23a:	2202      	movs	r2, #2
 800b23c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b23e:	4b0c      	ldr	r3, [pc, #48]	@ (800b270 <USBH_LL_Init+0x74>)
 800b240:	2200      	movs	r2, #0
 800b242:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b244:	480a      	ldr	r0, [pc, #40]	@ (800b270 <USBH_LL_Init+0x74>)
 800b246:	f7f8 f8d6 	bl	80033f6 <HAL_HCD_Init>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b250:	f7f6 fa92 	bl	8001778 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b254:	4806      	ldr	r0, [pc, #24]	@ (800b270 <USBH_LL_Init+0x74>)
 800b256:	f7f8 fd37 	bl	8003cc8 <HAL_HCD_GetCurrentFrame>
 800b25a:	4603      	mov	r3, r0
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7fe fee0 	bl	800a024 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	200008a4 	.word	0x200008a4

0800b274 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f8 fca4 	bl	8003bd8 <HAL_HCD_Start>
 800b290:	4603      	mov	r3, r0
 800b292:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	4618      	mov	r0, r3
 800b298:	f000 f95e 	bl	800b558 <USBH_Get_USB_Status>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7f8 fcac 	bl	8003c1e <HAL_HCD_Stop>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 f943 	bl	800b558 <USBH_Get_USB_Status>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f8 fcf6 	bl	8003ce4 <HAL_HCD_GetCurrentSpeed>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d00c      	beq.n	800b318 <USBH_LL_GetSpeed+0x38>
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d80d      	bhi.n	800b31e <USBH_LL_GetSpeed+0x3e>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <USBH_LL_GetSpeed+0x2c>
 800b306:	2b01      	cmp	r3, #1
 800b308:	d003      	beq.n	800b312 <USBH_LL_GetSpeed+0x32>
 800b30a:	e008      	b.n	800b31e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73fb      	strb	r3, [r7, #15]
    break;
 800b310:	e008      	b.n	800b324 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b312:	2301      	movs	r3, #1
 800b314:	73fb      	strb	r3, [r7, #15]
    break;
 800b316:	e005      	b.n	800b324 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b318:	2302      	movs	r3, #2
 800b31a:	73fb      	strb	r3, [r7, #15]
    break;
 800b31c:	e002      	b.n	800b324 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b31e:	2301      	movs	r3, #1
 800b320:	73fb      	strb	r3, [r7, #15]
    break;
 800b322:	bf00      	nop
  }
  return  speed;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b084      	sub	sp, #16
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b344:	4618      	mov	r0, r3
 800b346:	f7f8 fc87 	bl	8003c58 <HAL_HCD_ResetPort>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	4618      	mov	r0, r3
 800b352:	f000 f901 	bl	800b558 <USBH_Get_USB_Status>
 800b356:	4603      	mov	r3, r0
 800b358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b376:	78fa      	ldrb	r2, [r7, #3]
 800b378:	4611      	mov	r1, r2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7f8 fc8f 	bl	8003c9e <HAL_HCD_HC_GetXferCount>
 800b380:	4603      	mov	r3, r0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b38a:	b590      	push	{r4, r7, lr}
 800b38c:	b089      	sub	sp, #36	@ 0x24
 800b38e:	af04      	add	r7, sp, #16
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	4608      	mov	r0, r1
 800b394:	4611      	mov	r1, r2
 800b396:	461a      	mov	r2, r3
 800b398:	4603      	mov	r3, r0
 800b39a:	70fb      	strb	r3, [r7, #3]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70bb      	strb	r3, [r7, #2]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b3b2:	787c      	ldrb	r4, [r7, #1]
 800b3b4:	78ba      	ldrb	r2, [r7, #2]
 800b3b6:	78f9      	ldrb	r1, [r7, #3]
 800b3b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3ba:	9302      	str	r3, [sp, #8]
 800b3bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	4623      	mov	r3, r4
 800b3ca:	f7f8 f87b 	bl	80034c4 <HAL_HCD_HC_Init>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f8bf 	bl	800b558 <USBH_Get_USB_Status>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}

0800b3e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b402:	78fa      	ldrb	r2, [r7, #3]
 800b404:	4611      	mov	r1, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f7f8 f914 	bl	8003634 <HAL_HCD_HC_Halt>
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	4618      	mov	r0, r3
 800b414:	f000 f8a0 	bl	800b558 <USBH_Get_USB_Status>
 800b418:	4603      	mov	r3, r0
 800b41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b426:	b590      	push	{r4, r7, lr}
 800b428:	b089      	sub	sp, #36	@ 0x24
 800b42a:	af04      	add	r7, sp, #16
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	4608      	mov	r0, r1
 800b430:	4611      	mov	r1, r2
 800b432:	461a      	mov	r2, r3
 800b434:	4603      	mov	r3, r0
 800b436:	70fb      	strb	r3, [r7, #3]
 800b438:	460b      	mov	r3, r1
 800b43a:	70bb      	strb	r3, [r7, #2]
 800b43c:	4613      	mov	r3, r2
 800b43e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b44e:	787c      	ldrb	r4, [r7, #1]
 800b450:	78ba      	ldrb	r2, [r7, #2]
 800b452:	78f9      	ldrb	r1, [r7, #3]
 800b454:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b458:	9303      	str	r3, [sp, #12]
 800b45a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b45c:	9302      	str	r3, [sp, #8]
 800b45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b460:	9301      	str	r3, [sp, #4]
 800b462:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	4623      	mov	r3, r4
 800b46a:	f7f8 f907 	bl	800367c <HAL_HCD_HC_SubmitRequest>
 800b46e:	4603      	mov	r3, r0
 800b470:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f86f 	bl	800b558 <USBH_Get_USB_Status>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	bd90      	pop	{r4, r7, pc}

0800b488 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b49a:	78fa      	ldrb	r2, [r7, #3]
 800b49c:	4611      	mov	r1, r2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7f8 fbe8 	bl	8003c74 <HAL_HCD_HC_GetURBState>
 800b4a4:	4603      	mov	r3, r0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d103      	bne.n	800b4cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 f872 	bl	800b5b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b4cc:	20c8      	movs	r0, #200	@ 0xc8
 800b4ce:	f7f6 fd1d 	bl	8001f0c <HAL_Delay>
  return USBH_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	70fb      	strb	r3, [r7, #3]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b4f4:	78fa      	ldrb	r2, [r7, #3]
 800b4f6:	68f9      	ldr	r1, [r7, #12]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	011b      	lsls	r3, r3, #4
 800b4fc:	1a9b      	subs	r3, r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	440b      	add	r3, r1
 800b502:	3317      	adds	r3, #23
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00a      	beq.n	800b520 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	68f9      	ldr	r1, [r7, #12]
 800b50e:	4613      	mov	r3, r2
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	440b      	add	r3, r1
 800b518:	333c      	adds	r3, #60	@ 0x3c
 800b51a:	78ba      	ldrb	r2, [r7, #2]
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	e009      	b.n	800b534 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b520:	78fa      	ldrb	r2, [r7, #3]
 800b522:	68f9      	ldr	r1, [r7, #12]
 800b524:	4613      	mov	r3, r2
 800b526:	011b      	lsls	r3, r3, #4
 800b528:	1a9b      	subs	r3, r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	440b      	add	r3, r1
 800b52e:	333d      	adds	r3, #61	@ 0x3d
 800b530:	78ba      	ldrb	r2, [r7, #2]
 800b532:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7f6 fcde 	bl	8001f0c <HAL_Delay>
}
 800b550:	bf00      	nop
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d817      	bhi.n	800b59c <USBH_Get_USB_Status+0x44>
 800b56c:	a201      	add	r2, pc, #4	@ (adr r2, 800b574 <USBH_Get_USB_Status+0x1c>)
 800b56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b572:	bf00      	nop
 800b574:	0800b585 	.word	0x0800b585
 800b578:	0800b58b 	.word	0x0800b58b
 800b57c:	0800b591 	.word	0x0800b591
 800b580:	0800b597 	.word	0x0800b597
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	73fb      	strb	r3, [r7, #15]
    break;
 800b588:	e00b      	b.n	800b5a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b58a:	2302      	movs	r3, #2
 800b58c:	73fb      	strb	r3, [r7, #15]
    break;
 800b58e:	e008      	b.n	800b5a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b590:	2301      	movs	r3, #1
 800b592:	73fb      	strb	r3, [r7, #15]
    break;
 800b594:	e005      	b.n	800b5a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b596:	2302      	movs	r3, #2
 800b598:	73fb      	strb	r3, [r7, #15]
    break;
 800b59a:	e002      	b.n	800b5a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b59c:	2302      	movs	r3, #2
 800b59e:	73fb      	strb	r3, [r7, #15]
    break;
 800b5a0:	bf00      	nop
  }
  return usb_status;
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]
 800b5c8:	e001      	b.n	800b5ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	4803      	ldr	r0, [pc, #12]	@ (800b5e4 <MX_DriverVbusFS+0x34>)
 800b5d6:	f7f7 fef5 	bl	80033c4 <HAL_GPIO_WritePin>
}
 800b5da:	bf00      	nop
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	40020800 	.word	0x40020800

0800b5e8 <malloc>:
 800b5e8:	4b02      	ldr	r3, [pc, #8]	@ (800b5f4 <malloc+0xc>)
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	6818      	ldr	r0, [r3, #0]
 800b5ee:	f000 b82d 	b.w	800b64c <_malloc_r>
 800b5f2:	bf00      	nop
 800b5f4:	20000040 	.word	0x20000040

0800b5f8 <free>:
 800b5f8:	4b02      	ldr	r3, [pc, #8]	@ (800b604 <free+0xc>)
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	f000 b8f5 	b.w	800b7ec <_free_r>
 800b602:	bf00      	nop
 800b604:	20000040 	.word	0x20000040

0800b608 <sbrk_aligned>:
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	4e0f      	ldr	r6, [pc, #60]	@ (800b648 <sbrk_aligned+0x40>)
 800b60c:	460c      	mov	r4, r1
 800b60e:	6831      	ldr	r1, [r6, #0]
 800b610:	4605      	mov	r5, r0
 800b612:	b911      	cbnz	r1, 800b61a <sbrk_aligned+0x12>
 800b614:	f000 f8ae 	bl	800b774 <_sbrk_r>
 800b618:	6030      	str	r0, [r6, #0]
 800b61a:	4621      	mov	r1, r4
 800b61c:	4628      	mov	r0, r5
 800b61e:	f000 f8a9 	bl	800b774 <_sbrk_r>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	d103      	bne.n	800b62e <sbrk_aligned+0x26>
 800b626:	f04f 34ff 	mov.w	r4, #4294967295
 800b62a:	4620      	mov	r0, r4
 800b62c:	bd70      	pop	{r4, r5, r6, pc}
 800b62e:	1cc4      	adds	r4, r0, #3
 800b630:	f024 0403 	bic.w	r4, r4, #3
 800b634:	42a0      	cmp	r0, r4
 800b636:	d0f8      	beq.n	800b62a <sbrk_aligned+0x22>
 800b638:	1a21      	subs	r1, r4, r0
 800b63a:	4628      	mov	r0, r5
 800b63c:	f000 f89a 	bl	800b774 <_sbrk_r>
 800b640:	3001      	adds	r0, #1
 800b642:	d1f2      	bne.n	800b62a <sbrk_aligned+0x22>
 800b644:	e7ef      	b.n	800b626 <sbrk_aligned+0x1e>
 800b646:	bf00      	nop
 800b648:	20000c84 	.word	0x20000c84

0800b64c <_malloc_r>:
 800b64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b650:	1ccd      	adds	r5, r1, #3
 800b652:	f025 0503 	bic.w	r5, r5, #3
 800b656:	3508      	adds	r5, #8
 800b658:	2d0c      	cmp	r5, #12
 800b65a:	bf38      	it	cc
 800b65c:	250c      	movcc	r5, #12
 800b65e:	2d00      	cmp	r5, #0
 800b660:	4606      	mov	r6, r0
 800b662:	db01      	blt.n	800b668 <_malloc_r+0x1c>
 800b664:	42a9      	cmp	r1, r5
 800b666:	d904      	bls.n	800b672 <_malloc_r+0x26>
 800b668:	230c      	movs	r3, #12
 800b66a:	6033      	str	r3, [r6, #0]
 800b66c:	2000      	movs	r0, #0
 800b66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b748 <_malloc_r+0xfc>
 800b676:	f000 f869 	bl	800b74c <__malloc_lock>
 800b67a:	f8d8 3000 	ldr.w	r3, [r8]
 800b67e:	461c      	mov	r4, r3
 800b680:	bb44      	cbnz	r4, 800b6d4 <_malloc_r+0x88>
 800b682:	4629      	mov	r1, r5
 800b684:	4630      	mov	r0, r6
 800b686:	f7ff ffbf 	bl	800b608 <sbrk_aligned>
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	4604      	mov	r4, r0
 800b68e:	d158      	bne.n	800b742 <_malloc_r+0xf6>
 800b690:	f8d8 4000 	ldr.w	r4, [r8]
 800b694:	4627      	mov	r7, r4
 800b696:	2f00      	cmp	r7, #0
 800b698:	d143      	bne.n	800b722 <_malloc_r+0xd6>
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	d04b      	beq.n	800b736 <_malloc_r+0xea>
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	eb04 0903 	add.w	r9, r4, r3
 800b6a8:	f000 f864 	bl	800b774 <_sbrk_r>
 800b6ac:	4581      	cmp	r9, r0
 800b6ae:	d142      	bne.n	800b736 <_malloc_r+0xea>
 800b6b0:	6821      	ldr	r1, [r4, #0]
 800b6b2:	1a6d      	subs	r5, r5, r1
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f7ff ffa6 	bl	800b608 <sbrk_aligned>
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d03a      	beq.n	800b736 <_malloc_r+0xea>
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	442b      	add	r3, r5
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	bb62      	cbnz	r2, 800b728 <_malloc_r+0xdc>
 800b6ce:	f8c8 7000 	str.w	r7, [r8]
 800b6d2:	e00f      	b.n	800b6f4 <_malloc_r+0xa8>
 800b6d4:	6822      	ldr	r2, [r4, #0]
 800b6d6:	1b52      	subs	r2, r2, r5
 800b6d8:	d420      	bmi.n	800b71c <_malloc_r+0xd0>
 800b6da:	2a0b      	cmp	r2, #11
 800b6dc:	d917      	bls.n	800b70e <_malloc_r+0xc2>
 800b6de:	1961      	adds	r1, r4, r5
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	6025      	str	r5, [r4, #0]
 800b6e4:	bf18      	it	ne
 800b6e6:	6059      	strne	r1, [r3, #4]
 800b6e8:	6863      	ldr	r3, [r4, #4]
 800b6ea:	bf08      	it	eq
 800b6ec:	f8c8 1000 	streq.w	r1, [r8]
 800b6f0:	5162      	str	r2, [r4, r5]
 800b6f2:	604b      	str	r3, [r1, #4]
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f000 f82f 	bl	800b758 <__malloc_unlock>
 800b6fa:	f104 000b 	add.w	r0, r4, #11
 800b6fe:	1d23      	adds	r3, r4, #4
 800b700:	f020 0007 	bic.w	r0, r0, #7
 800b704:	1ac2      	subs	r2, r0, r3
 800b706:	bf1c      	itt	ne
 800b708:	1a1b      	subne	r3, r3, r0
 800b70a:	50a3      	strne	r3, [r4, r2]
 800b70c:	e7af      	b.n	800b66e <_malloc_r+0x22>
 800b70e:	6862      	ldr	r2, [r4, #4]
 800b710:	42a3      	cmp	r3, r4
 800b712:	bf0c      	ite	eq
 800b714:	f8c8 2000 	streq.w	r2, [r8]
 800b718:	605a      	strne	r2, [r3, #4]
 800b71a:	e7eb      	b.n	800b6f4 <_malloc_r+0xa8>
 800b71c:	4623      	mov	r3, r4
 800b71e:	6864      	ldr	r4, [r4, #4]
 800b720:	e7ae      	b.n	800b680 <_malloc_r+0x34>
 800b722:	463c      	mov	r4, r7
 800b724:	687f      	ldr	r7, [r7, #4]
 800b726:	e7b6      	b.n	800b696 <_malloc_r+0x4a>
 800b728:	461a      	mov	r2, r3
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	d1fb      	bne.n	800b728 <_malloc_r+0xdc>
 800b730:	2300      	movs	r3, #0
 800b732:	6053      	str	r3, [r2, #4]
 800b734:	e7de      	b.n	800b6f4 <_malloc_r+0xa8>
 800b736:	230c      	movs	r3, #12
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	4630      	mov	r0, r6
 800b73c:	f000 f80c 	bl	800b758 <__malloc_unlock>
 800b740:	e794      	b.n	800b66c <_malloc_r+0x20>
 800b742:	6005      	str	r5, [r0, #0]
 800b744:	e7d6      	b.n	800b6f4 <_malloc_r+0xa8>
 800b746:	bf00      	nop
 800b748:	20000c88 	.word	0x20000c88

0800b74c <__malloc_lock>:
 800b74c:	4801      	ldr	r0, [pc, #4]	@ (800b754 <__malloc_lock+0x8>)
 800b74e:	f000 b84b 	b.w	800b7e8 <__retarget_lock_acquire_recursive>
 800b752:	bf00      	nop
 800b754:	20000dc8 	.word	0x20000dc8

0800b758 <__malloc_unlock>:
 800b758:	4801      	ldr	r0, [pc, #4]	@ (800b760 <__malloc_unlock+0x8>)
 800b75a:	f000 b846 	b.w	800b7ea <__retarget_lock_release_recursive>
 800b75e:	bf00      	nop
 800b760:	20000dc8 	.word	0x20000dc8

0800b764 <memset>:
 800b764:	4402      	add	r2, r0
 800b766:	4603      	mov	r3, r0
 800b768:	4293      	cmp	r3, r2
 800b76a:	d100      	bne.n	800b76e <memset+0xa>
 800b76c:	4770      	bx	lr
 800b76e:	f803 1b01 	strb.w	r1, [r3], #1
 800b772:	e7f9      	b.n	800b768 <memset+0x4>

0800b774 <_sbrk_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d06      	ldr	r5, [pc, #24]	@ (800b790 <_sbrk_r+0x1c>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	602b      	str	r3, [r5, #0]
 800b780:	f7f6 fae0 	bl	8001d44 <_sbrk>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_sbrk_r+0x1a>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_sbrk_r+0x1a>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20000dc4 	.word	0x20000dc4

0800b794 <__errno>:
 800b794:	4b01      	ldr	r3, [pc, #4]	@ (800b79c <__errno+0x8>)
 800b796:	6818      	ldr	r0, [r3, #0]
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	20000040 	.word	0x20000040

0800b7a0 <__libc_init_array>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	4d0d      	ldr	r5, [pc, #52]	@ (800b7d8 <__libc_init_array+0x38>)
 800b7a4:	4c0d      	ldr	r4, [pc, #52]	@ (800b7dc <__libc_init_array+0x3c>)
 800b7a6:	1b64      	subs	r4, r4, r5
 800b7a8:	10a4      	asrs	r4, r4, #2
 800b7aa:	2600      	movs	r6, #0
 800b7ac:	42a6      	cmp	r6, r4
 800b7ae:	d109      	bne.n	800b7c4 <__libc_init_array+0x24>
 800b7b0:	4d0b      	ldr	r5, [pc, #44]	@ (800b7e0 <__libc_init_array+0x40>)
 800b7b2:	4c0c      	ldr	r4, [pc, #48]	@ (800b7e4 <__libc_init_array+0x44>)
 800b7b4:	f000 f864 	bl	800b880 <_init>
 800b7b8:	1b64      	subs	r4, r4, r5
 800b7ba:	10a4      	asrs	r4, r4, #2
 800b7bc:	2600      	movs	r6, #0
 800b7be:	42a6      	cmp	r6, r4
 800b7c0:	d105      	bne.n	800b7ce <__libc_init_array+0x2e>
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7c8:	4798      	blx	r3
 800b7ca:	3601      	adds	r6, #1
 800b7cc:	e7ee      	b.n	800b7ac <__libc_init_array+0xc>
 800b7ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d2:	4798      	blx	r3
 800b7d4:	3601      	adds	r6, #1
 800b7d6:	e7f2      	b.n	800b7be <__libc_init_array+0x1e>
 800b7d8:	0800b8c4 	.word	0x0800b8c4
 800b7dc:	0800b8c4 	.word	0x0800b8c4
 800b7e0:	0800b8c4 	.word	0x0800b8c4
 800b7e4:	0800b8c8 	.word	0x0800b8c8

0800b7e8 <__retarget_lock_acquire_recursive>:
 800b7e8:	4770      	bx	lr

0800b7ea <__retarget_lock_release_recursive>:
 800b7ea:	4770      	bx	lr

0800b7ec <_free_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4605      	mov	r5, r0
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	d041      	beq.n	800b878 <_free_r+0x8c>
 800b7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f8:	1f0c      	subs	r4, r1, #4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bfb8      	it	lt
 800b7fe:	18e4      	addlt	r4, r4, r3
 800b800:	f7ff ffa4 	bl	800b74c <__malloc_lock>
 800b804:	4a1d      	ldr	r2, [pc, #116]	@ (800b87c <_free_r+0x90>)
 800b806:	6813      	ldr	r3, [r2, #0]
 800b808:	b933      	cbnz	r3, 800b818 <_free_r+0x2c>
 800b80a:	6063      	str	r3, [r4, #4]
 800b80c:	6014      	str	r4, [r2, #0]
 800b80e:	4628      	mov	r0, r5
 800b810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b814:	f7ff bfa0 	b.w	800b758 <__malloc_unlock>
 800b818:	42a3      	cmp	r3, r4
 800b81a:	d908      	bls.n	800b82e <_free_r+0x42>
 800b81c:	6820      	ldr	r0, [r4, #0]
 800b81e:	1821      	adds	r1, r4, r0
 800b820:	428b      	cmp	r3, r1
 800b822:	bf01      	itttt	eq
 800b824:	6819      	ldreq	r1, [r3, #0]
 800b826:	685b      	ldreq	r3, [r3, #4]
 800b828:	1809      	addeq	r1, r1, r0
 800b82a:	6021      	streq	r1, [r4, #0]
 800b82c:	e7ed      	b.n	800b80a <_free_r+0x1e>
 800b82e:	461a      	mov	r2, r3
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	b10b      	cbz	r3, 800b838 <_free_r+0x4c>
 800b834:	42a3      	cmp	r3, r4
 800b836:	d9fa      	bls.n	800b82e <_free_r+0x42>
 800b838:	6811      	ldr	r1, [r2, #0]
 800b83a:	1850      	adds	r0, r2, r1
 800b83c:	42a0      	cmp	r0, r4
 800b83e:	d10b      	bne.n	800b858 <_free_r+0x6c>
 800b840:	6820      	ldr	r0, [r4, #0]
 800b842:	4401      	add	r1, r0
 800b844:	1850      	adds	r0, r2, r1
 800b846:	4283      	cmp	r3, r0
 800b848:	6011      	str	r1, [r2, #0]
 800b84a:	d1e0      	bne.n	800b80e <_free_r+0x22>
 800b84c:	6818      	ldr	r0, [r3, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	6053      	str	r3, [r2, #4]
 800b852:	4408      	add	r0, r1
 800b854:	6010      	str	r0, [r2, #0]
 800b856:	e7da      	b.n	800b80e <_free_r+0x22>
 800b858:	d902      	bls.n	800b860 <_free_r+0x74>
 800b85a:	230c      	movs	r3, #12
 800b85c:	602b      	str	r3, [r5, #0]
 800b85e:	e7d6      	b.n	800b80e <_free_r+0x22>
 800b860:	6820      	ldr	r0, [r4, #0]
 800b862:	1821      	adds	r1, r4, r0
 800b864:	428b      	cmp	r3, r1
 800b866:	bf04      	itt	eq
 800b868:	6819      	ldreq	r1, [r3, #0]
 800b86a:	685b      	ldreq	r3, [r3, #4]
 800b86c:	6063      	str	r3, [r4, #4]
 800b86e:	bf04      	itt	eq
 800b870:	1809      	addeq	r1, r1, r0
 800b872:	6021      	streq	r1, [r4, #0]
 800b874:	6054      	str	r4, [r2, #4]
 800b876:	e7ca      	b.n	800b80e <_free_r+0x22>
 800b878:	bd38      	pop	{r3, r4, r5, pc}
 800b87a:	bf00      	nop
 800b87c:	20000c88 	.word	0x20000c88

0800b880 <_init>:
 800b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b882:	bf00      	nop
 800b884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b886:	bc08      	pop	{r3}
 800b888:	469e      	mov	lr, r3
 800b88a:	4770      	bx	lr

0800b88c <_fini>:
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88e:	bf00      	nop
 800b890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b892:	bc08      	pop	{r3}
 800b894:	469e      	mov	lr, r3
 800b896:	4770      	bx	lr
