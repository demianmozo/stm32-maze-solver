
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a88c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800aa14  0800aa14  0000ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa38  0800aa38  0000c080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa38  0800aa38  0000ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa40  0800aa40  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa40  0800aa40  0000ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa44  0800aa44  0000ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800aa48  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00000b10  20000080  20000080  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b90  20000b90  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bdd5  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004540  00000000  00000000  00027e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131b  00000000  00000000  0002dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005ad1  00000000  00000000  0002ef9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203b0  00000000  00000000  00034a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1311  00000000  00000000  00054e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013612d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c14  00000000  00000000  00136170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0013cd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a9fc 	.word	0x0800a9fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800a9fc 	.word	0x0800a9fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80004f8:	2108      	movs	r1, #8
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <control_motor_init+0x1c>)
 80004fc:	f005 fe4a 	bl	8006194 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000500:	210c      	movs	r1, #12
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <control_motor_init+0x1c>)
 8000504:	f005 fe46 	bl	8006194 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000508:	f000 f88c 	bl	8000624 <avanza>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000238 	.word	0x20000238

08000514 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <set_motor_izq+0x1c>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d00d      	beq.n	800054a <set_motor_izq+0x36>
 800052e:	e019      	b.n	8000564 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000536:	4817      	ldr	r0, [pc, #92]	@ (8000594 <set_motor_izq+0x80>)
 8000538:	f002 f802 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000542:	4814      	ldr	r0, [pc, #80]	@ (8000594 <set_motor_izq+0x80>)
 8000544:	f001 fffc 	bl	8002540 <HAL_GPIO_WritePin>
        break;
 8000548:	e01b      	b.n	8000582 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000550:	4810      	ldr	r0, [pc, #64]	@ (8000594 <set_motor_izq+0x80>)
 8000552:	f001 fff5 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <set_motor_izq+0x80>)
 800055e:	f001 ffef 	bl	8002540 <HAL_GPIO_WritePin>
        break;
 8000562:	e00e      	b.n	8000582 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056a:	480a      	ldr	r0, [pc, #40]	@ (8000594 <set_motor_izq+0x80>)
 800056c:	f001 ffe8 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000576:	4807      	ldr	r0, [pc, #28]	@ (8000594 <set_motor_izq+0x80>)
 8000578:	f001 ffe2 	bl	8002540 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800057c:	2300      	movs	r3, #0
 800057e:	80bb      	strh	r3, [r7, #4]
        break;
 8000580:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <set_motor_izq+0x84>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	88ba      	ldrh	r2, [r7, #4]
 8000588:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020400 	.word	0x40020400
 8000598:	20000238 	.word	0x20000238

0800059c <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <set_motor_der+0x1c>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00d      	beq.n	80005d2 <set_motor_der+0x36>
 80005b6:	e019      	b.n	80005ec <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	4817      	ldr	r0, [pc, #92]	@ (800061c <set_motor_der+0x80>)
 80005c0:	f001 ffbe 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ca:	4814      	ldr	r0, [pc, #80]	@ (800061c <set_motor_der+0x80>)
 80005cc:	f001 ffb8 	bl	8002540 <HAL_GPIO_WritePin>
        break;
 80005d0:	e01b      	b.n	800060a <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d8:	4810      	ldr	r0, [pc, #64]	@ (800061c <set_motor_der+0x80>)
 80005da:	f001 ffb1 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <set_motor_der+0x80>)
 80005e6:	f001 ffab 	bl	8002540 <HAL_GPIO_WritePin>
        break;
 80005ea:	e00e      	b.n	800060a <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f2:	480a      	ldr	r0, [pc, #40]	@ (800061c <set_motor_der+0x80>)
 80005f4:	f001 ffa4 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4807      	ldr	r0, [pc, #28]	@ (800061c <set_motor_der+0x80>)
 8000600:	f001 ff9e 	bl	8002540 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000604:	2300      	movs	r3, #0
 8000606:	80bb      	strh	r3, [r7, #4]
        break;
 8000608:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <set_motor_der+0x84>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020400 	.word	0x40020400
 8000620:	20000238 	.word	0x20000238

08000624 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <avanza+0x20>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff70 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <avanza+0x20>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff ffae 	bl	800059c <set_motor_der>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000

08000648 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 8000652:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff ff5c 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_GIRO);
 800065c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff ff9b 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 8000666:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800066a:	f000 ff4b 	bl	8001504 <HAL_Delay>
    switch (sentido)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d817      	bhi.n	80006a4 <gira90izq+0x5c>
 8000674:	a201      	add	r2, pc, #4	@ (adr r2, 800067c <gira90izq+0x34>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	0800068d 	.word	0x0800068d
 8000680:	08000693 	.word	0x08000693
 8000684:	08000699 	.word	0x08000699
 8000688:	0800069f 	.word	0x0800069f
    {
    case norte:
        sentido = oeste;
 800068c:	2303      	movs	r3, #3
 800068e:	71fb      	strb	r3, [r7, #7]
        break;
 8000690:	e008      	b.n	80006a4 <gira90izq+0x5c>

    case este:
        sentido = norte;
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]
        break;
 8000696:	e005      	b.n	80006a4 <gira90izq+0x5c>

    case sur:
        sentido = este;
 8000698:	2301      	movs	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
        break;
 800069c:	e002      	b.n	80006a4 <gira90izq+0x5c>

    case oeste:
        sentido = sur;
 800069e:	2302      	movs	r3, #2
 80006a0:	71fb      	strb	r3, [r7, #7]
        break;
 80006a2:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 80006a4:	f7ff ffbe 	bl	8000624 <avanza>
    return sentido;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop

080006b4 <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 80006be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff ff26 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 80006c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff65 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80006d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d6:	f000 ff15 	bl	8001504 <HAL_Delay>
    switch (sentido)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d817      	bhi.n	8000710 <gira90der+0x5c>
 80006e0:	a201      	add	r2, pc, #4	@ (adr r2, 80006e8 <gira90der+0x34>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	080006f9 	.word	0x080006f9
 80006ec:	080006ff 	.word	0x080006ff
 80006f0:	08000705 	.word	0x08000705
 80006f4:	0800070b 	.word	0x0800070b
    {
    case norte:
        sentido = este;
 80006f8:	2301      	movs	r3, #1
 80006fa:	71fb      	strb	r3, [r7, #7]
        break;
 80006fc:	e008      	b.n	8000710 <gira90der+0x5c>

    case este:
        sentido = sur;
 80006fe:	2302      	movs	r3, #2
 8000700:	71fb      	strb	r3, [r7, #7]
        break;
 8000702:	e005      	b.n	8000710 <gira90der+0x5c>

    case sur:
        sentido = oeste;
 8000704:	2303      	movs	r3, #3
 8000706:	71fb      	strb	r3, [r7, #7]
        break;
 8000708:	e002      	b.n	8000710 <gira90der+0x5c>

    case oeste:
        sentido = norte;
 800070a:	2300      	movs	r3, #0
 800070c:	71fb      	strb	r3, [r7, #7]
        break;
 800070e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000710:	f7ff ff88 	bl	8000624 <avanza>
    return sentido;
 8000714:	79fb      	ldrb	r3, [r7, #7]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop

08000720 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 800072a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff fef0 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 8000734:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff2f 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 800073e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000742:	f000 fedf 	bl	8001504 <HAL_Delay>
    switch (sentido)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d817      	bhi.n	800077c <gira180+0x5c>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <gira180+0x34>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000765 	.word	0x08000765
 8000758:	0800076b 	.word	0x0800076b
 800075c:	08000771 	.word	0x08000771
 8000760:	08000777 	.word	0x08000777
    {
    case norte:
        sentido = sur;
 8000764:	2302      	movs	r3, #2
 8000766:	71fb      	strb	r3, [r7, #7]
        break;
 8000768:	e008      	b.n	800077c <gira180+0x5c>

    case este:
        sentido = oeste;
 800076a:	2303      	movs	r3, #3
 800076c:	71fb      	strb	r3, [r7, #7]
        break;
 800076e:	e005      	b.n	800077c <gira180+0x5c>

    case sur:
        sentido = norte;
 8000770:	2300      	movs	r3, #0
 8000772:	71fb      	strb	r3, [r7, #7]
        break;
 8000774:	e002      	b.n	800077c <gira180+0x5c>

    case oeste:
        sentido = este;
 8000776:	2301      	movs	r3, #1
 8000778:	71fb      	strb	r3, [r7, #7]
        break;
 800077a:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 800077c:	f7ff ff52 	bl	8000624 <avanza>
    return sentido;
 8000780:	79fb      	ldrb	r3, [r7, #7]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop

0800078c <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff febe 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000798:	2100      	movs	r1, #0
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff fefe 	bl	800059c <set_motor_der>
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fe3a 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f854 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 fa50 	bl	8000c54 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b4:	f000 fa2e 	bl	8000c14 <MX_DMA_Init>
  MX_I2C1_Init();
 80007b8:	f000 f918 	bl	80009ec <MX_I2C1_Init>
  MX_I2S3_Init();
 80007bc:	f000 f944 	bl	8000a48 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007c0:	f000 f970 	bl	8000aa4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007c4:	f009 fcc4 	bl	800a150 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80007c8:	f000 f8b0 	bl	800092c <MX_ADC1_Init>
  MX_TIM3_Init();
 80007cc:	f000 f9a0 	bl	8000b10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Inicializar el módulo de motores
  control_motor_init();
 80007d0:	f7ff fe90 	bl	80004f4 <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007d4:	f009 fce2 	bl	800a19c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado) // Solo ejecutar si no ha terminado
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <main+0xac>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f083 0301 	eor.w	r3, r3, #1
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f6      	beq.n	80007d4 <main+0x30>
            chequeomuro();
            chequeolinearecta();
            reset_posicion_pushbutton(); // ⚡ I AM SPEED button */

      // OJO SOLO PARA PROBAR EL LUNES LOS TIEMPOS DE LOS GIROS
      avanza(); // Comenzar avanzando 1 SEGUNDO
 80007e6:	f7ff ff1d 	bl	8000624 <avanza>
      HAL_Delay(1000);
 80007ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ee:	f000 fe89 	bl	8001504 <HAL_Delay>

      // Simular detección de pared - girar a la derecha
      sentido_actual = gira90der(sentido_actual); // Gira Y SIGUE AVANZANDO POR 2 SEGUNDOS
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <main+0xb0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff5c 	bl	80006b4 <gira90der>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <main+0xb0>)
 8000802:	701a      	strb	r2, [r3, #0]
      HAL_Delay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000808:	f000 fe7c 	bl	8001504 <HAL_Delay>

      // Otro obstáculo - girar a la izquierda
      sentido_actual = gira90izq(sentido_actual); // Gira Y SIGUE AVANZANDO
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <main+0xb0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff19 	bl	8000648 <gira90izq>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <main+0xb0>)
 800081c:	701a      	strb	r2, [r3, #0]
      HAL_Delay(2000);
 800081e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000822:	f000 fe6f 	bl	8001504 <HAL_Delay>

      // Callejón sin salida - dar media vuelta
      sentido_actual = gira180(sentido_actual); // Gira Y SIGUE AVANZANDO POR 3 SEGUNDOS
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <main+0xb0>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff78 	bl	8000720 <gira180>
 8000830:	4603      	mov	r3, r0
 8000832:	461a      	mov	r2, r3
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <main+0xb0>)
 8000836:	701a      	strb	r2, [r3, #0]
      HAL_Delay(3000);
 8000838:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800083c:	f000 fe62 	bl	8001504 <HAL_Delay>

      // SIMULA QUE TERMINÓ
      termino();       // Usando tu función
 8000840:	f7ff ffa4 	bl	800078c <termino>
      HAL_Delay(5000); // Pausa antes de reiniciar
 8000844:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000848:	f000 fe5c 	bl	8001504 <HAL_Delay>
    MX_USB_HOST_Process();
 800084c:	e7c2      	b.n	80007d4 <main+0x30>
 800084e:	bf00      	nop
 8000850:	20000281 	.word	0x20000281
 8000854:	20000280 	.word	0x20000280

08000858 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	@ 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	@ 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f00a f83a 	bl	800a8e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	@ (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	@ 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d6:	2307      	movs	r3, #7
 80008d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 fd60 	bl	80053a4 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ea:	f000 fad1 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008ee:	230f      	movs	r3, #15
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2105      	movs	r1, #5
 800090c:	4618      	mov	r0, r3
 800090e:	f004 ffc1 	bl	8005894 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000918:	f000 faba 	bl	8000e90 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800093e:	4b28      	ldr	r3, [pc, #160]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000940:	4a28      	ldr	r2, [pc, #160]	@ (80009e4 <MX_ADC1_Init+0xb8>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000944:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000946:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094c:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000954:	2201      	movs	r2, #1
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 800095a:	2201      	movs	r2, #1
 800095c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 800096e:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <MX_ADC1_Init+0xbc>)
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 800097a:	2202      	movs	r2, #2
 800097c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 800098e:	f000 fddd 	bl	800154c <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 fa7a 	bl	8000e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 800099c:	2308      	movs	r3, #8
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80009a4:	2305      	movs	r3, #5
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 80009ae:	f000 fe11 	bl	80015d4 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b8:	f000 fa6a 	bl	8000e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80009bc:	2309      	movs	r3, #9
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_ADC1_Init+0xb4>)
 80009ca:	f000 fe03 	bl	80015d4 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009d4:	f000 fa5c 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000009c 	.word	0x2000009c
 80009e4:	40012000 	.word	0x40012000
 80009e8:	0f000001 	.word	0x0f000001

080009ec <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_I2C1_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <MX_I2C1_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_I2C1_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_I2C1_Init+0x58>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_I2C1_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_I2C1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_I2C1_Init+0x50>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_I2C1_Init+0x50>)
 8000a2a:	f003 fed7 	bl	80047dc <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f000 fa2c 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000144 	.word	0x20000144
 8000a40:	40005400 	.word	0x40005400
 8000a44:	000186a0 	.word	0x000186a0

08000a48 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a4e:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <MX_I2S3_Init+0x58>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a58:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a6e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000a72:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_I2S3_Init+0x54>)
 8000a88:	f003 ffec 	bl	8004a64 <HAL_I2S_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a92:	f000 f9fd 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000198 	.word	0x20000198
 8000aa0:	40003c00 	.word	0x40003c00

08000aa4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	@ (8000b0c <MX_SPI1_Init+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <MX_SPI1_Init+0x64>)
 8000af6:	f005 fa1b 	bl	8005f30 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b00:	f000 f9c6 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001e0 	.word	0x200001e0
 8000b0c:	40013000 	.word	0x40013000

08000b10 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	@ 0x38
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b40:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b42:	4a33      	ldr	r2, [pc, #204]	@ (8000c10 <MX_TIM3_Init+0x100>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000b46:	4b31      	ldr	r3, [pc, #196]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b48:	2253      	movs	r2, #83	@ 0x53
 8000b4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b66:	4829      	ldr	r0, [pc, #164]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b68:	f005 fa6b 	bl	8006042 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b72:	f000 f98d 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4822      	ldr	r0, [pc, #136]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b84:	f005 fc90 	bl	80064a8 <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b8e:	f000 f97f 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b92:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b94:	f005 faa4 	bl	80060e0 <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b9e:	f000 f977 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4816      	ldr	r0, [pc, #88]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000bb2:	f006 f857 	bl	8006c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bbc:	f000 f968 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000bd8:	f005 fba4 	bl	8006324 <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000be2:	f000 f955 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	220c      	movs	r2, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000bee:	f005 fb99 	bl	8006324 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000bf8:	f000 f94a 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bfc:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000bfe:	f000 fb1f 	bl	8001240 <HAL_TIM_MspPostInit>
}
 8000c02:	bf00      	nop
 8000c04:	3738      	adds	r7, #56	@ 0x38
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000238 	.word	0x20000238
 8000c10:	40000400 	.word	0x40000400

08000c14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_DMA_Init+0x3c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <MX_DMA_Init+0x3c>)
 8000c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_DMA_Init+0x3c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2038      	movs	r0, #56	@ 0x38
 8000c3c:	f000 ffc3 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c40:	2038      	movs	r0, #56	@ 0x38
 8000c42:	f000 ffdc 	bl	8001bfe <HAL_NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	4b82      	ldr	r3, [pc, #520]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a81      	ldr	r2, [pc, #516]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a7a      	ldr	r2, [pc, #488]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b78      	ldr	r3, [pc, #480]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b74      	ldr	r3, [pc, #464]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a73      	ldr	r2, [pc, #460]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b71      	ldr	r3, [pc, #452]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a6c      	ldr	r2, [pc, #432]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b6a      	ldr	r3, [pc, #424]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b66      	ldr	r3, [pc, #408]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a65      	ldr	r2, [pc, #404]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b63      	ldr	r3, [pc, #396]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a5e      	ldr	r2, [pc, #376]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b5c      	ldr	r3, [pc, #368]	@ (8000e78 <MX_GPIO_Init+0x224>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2108      	movs	r1, #8
 8000d16:	4859      	ldr	r0, [pc, #356]	@ (8000e7c <MX_GPIO_Init+0x228>)
 8000d18:	f001 fc12 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4857      	ldr	r0, [pc, #348]	@ (8000e80 <MX_GPIO_Init+0x22c>)
 8000d22:	f001 fc0d 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000d2c:	4855      	ldr	r0, [pc, #340]	@ (8000e84 <MX_GPIO_Init+0x230>)
 8000d2e:	f001 fc07 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d38:	4853      	ldr	r0, [pc, #332]	@ (8000e88 <MX_GPIO_Init+0x234>)
 8000d3a:	f001 fc01 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4849      	ldr	r0, [pc, #292]	@ (8000e7c <MX_GPIO_Init+0x228>)
 8000d56:	f001 fa57 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4843      	ldr	r0, [pc, #268]	@ (8000e80 <MX_GPIO_Init+0x22c>)
 8000d72:	f001 fa49 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d76:	2308      	movs	r3, #8
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d86:	2305      	movs	r3, #5
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	483b      	ldr	r0, [pc, #236]	@ (8000e80 <MX_GPIO_Init+0x22c>)
 8000d92:	f001 fa39 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4838      	ldr	r0, [pc, #224]	@ (8000e8c <MX_GPIO_Init+0x238>)
 8000daa:	f001 fa2d 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dae:	2304      	movs	r3, #4
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4830      	ldr	r0, [pc, #192]	@ (8000e84 <MX_GPIO_Init+0x230>)
 8000dc2:	f001 fa21 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4828      	ldr	r0, [pc, #160]	@ (8000e84 <MX_GPIO_Init+0x230>)
 8000de4:	f001 fa10 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8000de8:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4820      	ldr	r0, [pc, #128]	@ (8000e84 <MX_GPIO_Init+0x230>)
 8000e02:	f001 fa01 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000e06:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481a      	ldr	r0, [pc, #104]	@ (8000e88 <MX_GPIO_Init+0x234>)
 8000e20:	f001 f9f2 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 8000e24:	23c0      	movs	r3, #192	@ 0xc0
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <MX_GPIO_Init+0x22c>)
 8000e38:	f001 f9e6 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <MX_GPIO_Init+0x234>)
 8000e50:	f001 f9da 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e58:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_GPIO_Init+0x228>)
 8000e6a:	f001 f9cd 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e6e:	bf00      	nop
 8000e70:	3730      	adds	r7, #48	@ 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40020000 	.word	0x40020000

08000e90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eda:	2007      	movs	r0, #7
 8000edc:	f000 fe68 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc8 <HAL_ADC_MspInit+0xdc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d157      	bne.n	8000fbe <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <HAL_ADC_MspInit+0xe0>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a2d      	ldr	r2, [pc, #180]	@ (8000fcc <HAL_ADC_MspInit+0xe0>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <HAL_ADC_MspInit+0xe0>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <HAL_ADC_MspInit+0xe0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a26      	ldr	r2, [pc, #152]	@ (8000fcc <HAL_ADC_MspInit+0xe0>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <HAL_ADC_MspInit+0xe0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481d      	ldr	r0, [pc, #116]	@ (8000fd0 <HAL_ADC_MspInit+0xe4>)
 8000f5a:	f001 f955 	bl	8002208 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f60:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa2:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000fa4:	f000 fe46 	bl	8001c34 <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fae:	f7ff ff6f 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000fb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	200000e4 	.word	0x200000e4
 8000fd8:	40026410 	.word	0x40026410

08000fdc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	@ (8001060 <HAL_I2C_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12c      	bne.n	8001058 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <HAL_I2C_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <HAL_I2C_MspInit+0x88>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800101a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102c:	2304      	movs	r3, #4
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	@ (8001068 <HAL_I2C_MspInit+0x8c>)
 8001038:	f001 f8e6 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_I2C_MspInit+0x88>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_I2C_MspInit+0x88>)
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <HAL_I2C_MspInit+0x88>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	@ 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40005400 	.word	0x40005400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020400 	.word	0x40020400

0800106c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a31      	ldr	r2, [pc, #196]	@ (800115c <HAL_I2S_MspInit+0xf0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d15a      	bne.n	8001152 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010a0:	23c0      	movs	r3, #192	@ 0xc0
 80010a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fdfd 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80010b8:	f7ff feea 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a26      	ldr	r2, [pc, #152]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a18      	ldr	r2, [pc, #96]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30
 8001104:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <HAL_I2S_MspInit+0xf4>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001110:	2310      	movs	r3, #16
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001120:	2306      	movs	r3, #6
 8001122:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	480e      	ldr	r0, [pc, #56]	@ (8001164 <HAL_I2S_MspInit+0xf8>)
 800112c:	f001 f86c 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001130:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001142:	2306      	movs	r3, #6
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4806      	ldr	r0, [pc, #24]	@ (8001168 <HAL_I2S_MspInit+0xfc>)
 800114e:	f001 f85b 	bl	8002208 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	@ 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40003c00 	.word	0x40003c00
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020800 	.word	0x40020800

0800116c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <HAL_SPI_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 8001198:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011c6:	23e0      	movs	r3, #224	@ 0xe0
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d6:	2305      	movs	r3, #5
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011e2:	f001 f811 	bl	8002208 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0b      	ldr	r2, [pc, #44]	@ (8001238 <HAL_TIM_Base_MspInit+0x3c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10d      	bne.n	800122a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_TIM_Base_MspInit+0x40>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	4a09      	ldr	r2, [pc, #36]	@ (800123c <HAL_TIM_Base_MspInit+0x40>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6413      	str	r3, [r2, #64]	@ 0x40
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_TIM_Base_MspInit+0x40>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40000400 	.word	0x40000400
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <HAL_TIM_MspPostInit+0x68>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11e      	bne.n	80012a0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_TIM_MspPostInit+0x6c>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 800127e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_TIM_MspPostInit+0x70>)
 800129c:	f000 ffb4 	bl	8002208 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40000400 	.word	0x40000400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020800 	.word	0x40020800

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <NMI_Handler+0x4>

080012bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <MemManage_Handler+0x4>

080012cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <UsageFault_Handler+0x4>

080012dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f8db 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <DMA2_Stream0_IRQHandler+0x10>)
 800131a:	f000 fd39 	bl	8001d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000e4 	.word	0x200000e4

08001328 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <OTG_FS_IRQHandler+0x10>)
 800132e:	f001 fc01 	bl	8002b34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000668 	.word	0x20000668

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f009 fad0 	bl	800a910 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20020000 	.word	0x20020000
 800139c:	00000400 	.word	0x00000400
 80013a0:	20000284 	.word	0x20000284
 80013a4:	20000b90 	.word	0x20000b90

080013a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001404 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f009 fa8f 	bl	800a91c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff f9d1 	bl	80007a4 <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001410:	0800aa48 	.word	0x0800aa48
  ldr r2, =_sbss
 8001414:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001418:	20000b90 	.word	0x20000b90

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001424:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <HAL_Init+0x40>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_Init+0x40>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800143a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <HAL_Init+0x40>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 fbb1 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fd22 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fbc9 	bl	8001c1a <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014a0:	f000 fb91 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000004 	.word	0x20000004
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	20000008 	.word	0x20000008

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	20000288 	.word	0x20000288

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000288 	.word	0x20000288

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000000c 	.word	0x2000000c

0800154c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e033      	b.n	80015ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fcbe 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001592:	f023 0302 	bic.w	r3, r3, #2
 8001596:	f043 0202 	orr.w	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f93a 	bl	8001818 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ba:	e001      	b.n	80015c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1c>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e105      	b.n	80017fc <HAL_ADC_ConfigChannel+0x228>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	d925      	bls.n	800164c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68d9      	ldr	r1, [r3, #12]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	3b1e      	subs	r3, #30
 8001616:	2207      	movs	r2, #7
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43da      	mvns	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68d9      	ldr	r1, [r3, #12]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	4603      	mov	r3, r0
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4403      	add	r3, r0
 800163e:	3b1e      	subs	r3, #30
 8001640:	409a      	lsls	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	e022      	b.n	8001692 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6919      	ldr	r1, [r3, #16]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	2207      	movs	r2, #7
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6919      	ldr	r1, [r3, #16]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	4603      	mov	r3, r0
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4403      	add	r3, r0
 8001688:	409a      	lsls	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d824      	bhi.n	80016e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3b05      	subs	r3, #5
 80016ac:	221f      	movs	r2, #31
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	400a      	ands	r2, r1
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b05      	subs	r3, #5
 80016d6:	fa00 f203 	lsl.w	r2, r0, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e2:	e04c      	b.n	800177e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d824      	bhi.n	8001736 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	3b23      	subs	r3, #35	@ 0x23
 80016fe:	221f      	movs	r2, #31
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43da      	mvns	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	400a      	ands	r2, r1
 800170c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b23      	subs	r3, #35	@ 0x23
 8001728:	fa00 f203 	lsl.w	r2, r0, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	631a      	str	r2, [r3, #48]	@ 0x30
 8001734:	e023      	b.n	800177e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b41      	subs	r3, #65	@ 0x41
 8001748:	221f      	movs	r2, #31
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	400a      	ands	r2, r1
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3b41      	subs	r3, #65	@ 0x41
 8001772:	fa00 f203 	lsl.w	r2, r0, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <HAL_ADC_ConfigChannel+0x234>)
 8001780:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a21      	ldr	r2, [pc, #132]	@ (800180c <HAL_ADC_ConfigChannel+0x238>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d109      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1cc>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b12      	cmp	r3, #18
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	@ (800180c <HAL_ADC_ConfigChannel+0x238>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d123      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x21e>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d003      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x1e6>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b11      	cmp	r3, #17
 80017b8:	d11b      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d111      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_ADC_ConfigChannel+0x23c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_ADC_ConfigChannel+0x240>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	0c9a      	lsrs	r2, r3, #18
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017e4:	e002      	b.n	80017ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f9      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40012300 	.word	0x40012300
 800180c:	40012000 	.word	0x40012000
 8001810:	20000004 	.word	0x20000004
 8001814:	431bde83 	.word	0x431bde83

08001818 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001820:	4b79      	ldr	r3, [pc, #484]	@ (8001a08 <ADC_Init+0x1f0>)
 8001822:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	431a      	orrs	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800184c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	021a      	lsls	r2, r3, #8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6899      	ldr	r1, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	4a58      	ldr	r2, [pc, #352]	@ (8001a0c <ADC_Init+0x1f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6899      	ldr	r1, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	e00f      	b.n	8001916 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001914:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0202 	bic.w	r2, r2, #2
 8001924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6899      	ldr	r1, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7e1b      	ldrb	r3, [r3, #24]
 8001930:	005a      	lsls	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01b      	beq.n	800197c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001952:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001962:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	3b01      	subs	r3, #1
 8001970:	035a      	lsls	r2, r3, #13
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	e007      	b.n	800198c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800199a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	051a      	lsls	r2, r3, #20
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6899      	ldr	r1, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019ce:	025a      	lsls	r2, r3, #9
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6899      	ldr	r1, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	029a      	lsls	r2, r3, #10
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40012300 	.word	0x40012300
 8001a0c:	0f000001 	.word	0x0f000001

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	@ (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	@ (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff3e 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff31 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff fc54 	bl	80014ec <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e099      	b.n	8001d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c70:	e00f      	b.n	8001c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c72:	f7ff fc3b 	bl	80014ec <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d908      	bls.n	8001c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e078      	b.n	8001d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e8      	bne.n	8001c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <HAL_DMA_Init+0x158>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d117      	bne.n	8001d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f9e9 	bl	8002110 <DMA_CheckFifoParam>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d52:	2301      	movs	r3, #1
 8001d54:	e016      	b.n	8001d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f9a0 	bl	80020a4 <DMA_CalcBaseAndBitshift>
 8001d64:	4603      	mov	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6c:	223f      	movs	r2, #63	@ 0x3f
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	f010803f 	.word	0xf010803f

08001d90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd8 <HAL_DMA_IRQHandler+0x248>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a8e      	ldr	r2, [pc, #568]	@ (8001fdc <HAL_DMA_IRQHandler+0x24c>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0a9b      	lsrs	r3, r3, #10
 8001da8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	2208      	movs	r2, #8
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0204 	bic.w	r2, r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	2208      	movs	r2, #8
 8001dea:	409a      	lsls	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e00:	2201      	movs	r2, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d012      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	2201      	movs	r2, #1
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2a:	f043 0202 	orr.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	2204      	movs	r2, #4
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	2204      	movs	r2, #4
 8001e56:	409a      	lsls	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d043      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03c      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d108      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d024      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
 8001ebe:	e01f      	b.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
 8001ed0:	e016      	b.n	8001f00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0208 	bic.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	2220      	movs	r2, #32
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 808f 	beq.w	8002030 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8087 	beq.w	8002030 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	2220      	movs	r2, #32
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d136      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0216 	bic.w	r2, r2, #22
 8001f48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_DMA_IRQHandler+0x1da>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0208 	bic.w	r2, r2, #8
 8001f78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7e:	223f      	movs	r2, #63	@ 0x3f
 8001f80:	409a      	lsls	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d07e      	beq.n	800209c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
        }
        return;
 8001fa6:	e079      	b.n	800209c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01d      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e02c      	b.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
 8001fd6:	bf00      	nop
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d023      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e01e      	b.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10f      	bne.n	8002020 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0210 	bic.w	r2, r2, #16
 800200e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	2b00      	cmp	r3, #0
 8002036:	d032      	beq.n	800209e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d022      	beq.n	800208a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2205      	movs	r2, #5
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	3301      	adds	r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d307      	bcc.n	8002078 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f2      	bne.n	800205c <HAL_DMA_IRQHandler+0x2cc>
 8002076:	e000      	b.n	800207a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002078:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
 800209a:	e000      	b.n	800209e <HAL_DMA_IRQHandler+0x30e>
        return;
 800209c:	bf00      	nop
    }
  }
}
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3b10      	subs	r3, #16
 80020b4:	4a14      	ldr	r2, [pc, #80]	@ (8002108 <DMA_CalcBaseAndBitshift+0x64>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020be:	4a13      	ldr	r2, [pc, #76]	@ (800210c <DMA_CalcBaseAndBitshift+0x68>)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d909      	bls.n	80020e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020e4:	e007      	b.n	80020f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	aaaaaaab 	.word	0xaaaaaaab
 800210c:	0800aa30 	.word	0x0800aa30

08002110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d856      	bhi.n	80021de <DMA_CheckFifoParam+0xce>
 8002130:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <DMA_CheckFifoParam+0x28>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002149 	.word	0x08002149
 800213c:	0800215b 	.word	0x0800215b
 8002140:	08002149 	.word	0x08002149
 8002144:	080021df 	.word	0x080021df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d046      	beq.n	80021e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e043      	b.n	80021e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002162:	d140      	bne.n	80021e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002168:	e03d      	b.n	80021e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002172:	d121      	bne.n	80021b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d837      	bhi.n	80021ea <DMA_CheckFifoParam+0xda>
 800217a:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <DMA_CheckFifoParam+0x70>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002191 	.word	0x08002191
 8002184:	08002197 	.word	0x08002197
 8002188:	08002191 	.word	0x08002191
 800218c:	080021a9 	.word	0x080021a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e030      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d025      	beq.n	80021ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a6:	e022      	b.n	80021ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021b0:	d11f      	bne.n	80021f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021b6:	e01c      	b.n	80021f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d903      	bls.n	80021c6 <DMA_CheckFifoParam+0xb6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c4:	e018      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ca:	e015      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e00b      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021de:	bf00      	nop
 80021e0:	e00a      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e008      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e006      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e004      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
    }
  } 
  
  return status; 
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e16b      	b.n	80024fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 815a 	bne.w	80024f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b4 	beq.w	80024f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a5f      	ldr	r2, [pc, #380]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002518 <HAL_GPIO_Init+0x310>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_GPIO_Init+0x314>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_GPIO_Init+0x226>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	@ (8002520 <HAL_GPIO_Init+0x318>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x222>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002528 <HAL_GPIO_Init+0x320>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x21a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	@ (800252c <HAL_GPIO_Init+0x324>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x216>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002530 <HAL_GPIO_Init+0x328>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4c      	ldr	r2, [pc, #304]	@ (8002534 <HAL_GPIO_Init+0x32c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4b      	ldr	r2, [pc, #300]	@ (8002538 <HAL_GPIO_Init+0x330>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x20a>
 800240e:	2307      	movs	r3, #7
 8002410:	e00e      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002412:	2308      	movs	r3, #8
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002416:	2306      	movs	r3, #6
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	@ (8002518 <HAL_GPIO_Init+0x310>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a32      	ldr	r2, [pc, #200]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b30      	ldr	r3, [pc, #192]	@ (800253c <HAL_GPIO_Init+0x334>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_GPIO_Init+0x334>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a12      	ldr	r2, [pc, #72]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f ae90 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800
 8002538:	40021c00 	.word	0x40021c00
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af02      	add	r7, sp, #8
 8002578:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e059      	b.n	8002638 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f007 fe34 	bl	800a20c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b2:	d102      	bne.n	80025ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 fc41 	bl	8006e46 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7c1a      	ldrb	r2, [r3, #16]
 80025cc:	f88d 2000 	strb.w	r2, [sp]
 80025d0:	3304      	adds	r3, #4
 80025d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d4:	f004 fbc2 	bl	8006d5c <USB_CoreInit>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e026      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fc39 	bl	8006e68 <USB_SetCurrentMode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e017      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7c1a      	ldrb	r2, [r3, #16]
 8002610:	f88d 2000 	strb.w	r2, [sp]
 8002614:	3304      	adds	r3, #4
 8002616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002618:	f004 fde2 	bl	80071e0 <USB_HostInit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e004      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08b      	sub	sp, #44	@ 0x2c
 8002644:	af04      	add	r7, sp, #16
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	70fb      	strb	r3, [r7, #3]
 8002652:	460b      	mov	r3, r1
 8002654:	70bb      	strb	r3, [r7, #2]
 8002656:	4613      	mov	r3, r2
 8002658:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800265a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800265c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_HCD_HC_Init+0x2c>
 8002668:	2302      	movs	r3, #2
 800266a:	e09d      	b.n	80027a8 <HAL_HCD_HC_Init+0x168>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3319      	adds	r3, #25
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3314      	adds	r3, #20
 8002698:	787a      	ldrb	r2, [r7, #1]
 800269a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3315      	adds	r3, #21
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3326      	adds	r3, #38	@ 0x26
 80026c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	78bb      	ldrb	r3, [r7, #2]
 80026ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ce:	b2d8      	uxtb	r0, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3316      	adds	r3, #22
 80026de:	4602      	mov	r2, r0
 80026e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fbc8 	bl	8002e7c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da0a      	bge.n	800270a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3317      	adds	r3, #23
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e009      	b.n	800271e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3317      	adds	r3, #23
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 fec0 	bl	80074a8 <USB_GetHostSpeed>
 8002728:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800272a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10b      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002732:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2bbc      	cmp	r3, #188	@ 0xbc
 8002744:	d901      	bls.n	800274a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002746:	23bc      	movs	r3, #188	@ 0xbc
 8002748:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3318      	adds	r3, #24
 800275a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800275e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	b298      	uxth	r0, r3
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3328      	adds	r3, #40	@ 0x28
 8002774:	4602      	mov	r2, r0
 8002776:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	b29b      	uxth	r3, r3
 8002780:	787c      	ldrb	r4, [r7, #1]
 8002782:	78ba      	ldrb	r2, [r7, #2]
 8002784:	78f9      	ldrb	r1, [r7, #3]
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4623      	mov	r3, r4
 8002796:	f004 feaf 	bl	80074f8 <USB_HC_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_HCD_HC_Halt+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00f      	b.n	80027ee <HAL_HCD_HC_Halt+0x3e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f005 fa41 	bl	8007c66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4603      	mov	r3, r0
 8002808:	70fb      	strb	r3, [r7, #3]
 800280a:	460b      	mov	r3, r1
 800280c:	70bb      	strb	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3317      	adds	r3, #23
 8002822:	78ba      	ldrb	r2, [r7, #2]
 8002824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	@ 0x26
 8002836:	787a      	ldrb	r2, [r7, #1]
 8002838:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800283a:	7c3b      	ldrb	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d114      	bne.n	800286a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	332a      	adds	r3, #42	@ 0x2a
 8002850:	2203      	movs	r2, #3
 8002852:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3319      	adds	r3, #25
 8002864:	7f3a      	ldrb	r2, [r7, #28]
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e009      	b.n	800287e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	332a      	adds	r3, #42	@ 0x2a
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800287e:	787b      	ldrb	r3, [r7, #1]
 8002880:	2b03      	cmp	r3, #3
 8002882:	f200 8102 	bhi.w	8002a8a <HAL_HCD_HC_SubmitRequest+0x292>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	0800289d 	.word	0x0800289d
 8002890:	08002a75 	.word	0x08002a75
 8002894:	08002961 	.word	0x08002961
 8002898:	080029eb 	.word	0x080029eb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800289c:	7c3b      	ldrb	r3, [r7, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80f5 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12d      	bne.n	8002906 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80028aa:	8b3b      	ldrh	r3, [r7, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	333d      	adds	r3, #61	@ 0x3d
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	333d      	adds	r3, #61	@ 0x3d
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	332a      	adds	r3, #42	@ 0x2a
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028ee:	e0ce      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	332a      	adds	r3, #42	@ 0x2a
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
      break;
 8002904:	e0c3      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	331a      	adds	r3, #26
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 80b8 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	333c      	adds	r3, #60	@ 0x3c
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	332a      	adds	r3, #42	@ 0x2a
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
      break;
 8002948:	e0a1      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	332a      	adds	r3, #42	@ 0x2a
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e096      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002960:	78bb      	ldrb	r3, [r7, #2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d120      	bne.n	80029a8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	333d      	adds	r3, #61	@ 0x3d
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	332a      	adds	r3, #42	@ 0x2a
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002990:	e07e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	332a      	adds	r3, #42	@ 0x2a
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	e073      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	333c      	adds	r3, #60	@ 0x3c
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	332a      	adds	r3, #42	@ 0x2a
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
      break;
 80029d2:	e05d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	332a      	adds	r3, #42	@ 0x2a
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e052      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029ea:	78bb      	ldrb	r3, [r7, #2]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d120      	bne.n	8002a32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	333d      	adds	r3, #61	@ 0x3d
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	332a      	adds	r3, #42	@ 0x2a
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a1a:	e039      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	332a      	adds	r3, #42	@ 0x2a
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]
      break;
 8002a30:	e02e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	333c      	adds	r3, #60	@ 0x3c
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	332a      	adds	r3, #42	@ 0x2a
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
      break;
 8002a5c:	e018      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	332a      	adds	r3, #42	@ 0x2a
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
      break;
 8002a72:	e00d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	332a      	adds	r3, #42	@ 0x2a
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
      break;
 8002a88:	e002      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e000      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	332c      	adds	r3, #44	@ 0x2c
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	8b39      	ldrh	r1, [r7, #24]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3334      	adds	r3, #52	@ 0x34
 8002ab6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	@ 0x4c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3338      	adds	r3, #56	@ 0x38
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3315      	adds	r3, #21
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	@ 0x4d
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3310      	adds	r3, #16
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	799b      	ldrb	r3, [r3, #6]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f004 fe14 	bl	8007750 <USB_HC_StartXfer>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 fb02 	bl	8007154 <USB_GetMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 80fb 	bne.w	8002d4e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fac5 	bl	80070ec <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80f1 	beq.w	8002d4c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 fabc 	bl	80070ec <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b7e:	d104      	bne.n	8002b8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 faac 	bl	80070ec <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9e:	d104      	bne.n	8002baa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 fa9c 	bl	80070ec <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bbe:	d104      	bne.n	8002bca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fa8c 	bl	80070ec <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fa7e 	bl	80070ec <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfa:	d120      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002c04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c16:	2110      	movs	r1, #16
 8002c18:	6938      	ldr	r0, [r7, #16]
 8002c1a:	f004 f971 	bl	8006f00 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c1e:	6938      	ldr	r0, [r7, #16]
 8002c20:	f004 f9a0 	bl	8006f64 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7a5b      	ldrb	r3, [r3, #9]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d105      	bne.n	8002c38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fb98 	bl	8007368 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f007 fb65 	bl	800a308 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fa52 	bl	80070ec <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c52:	d102      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 fd4d 	bl	80046f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fa44 	bl	80070ec <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d106      	bne.n	8002c7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f007 fb2e 	bl	800a2d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fa33 	bl	80070ec <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c90:	d139      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 ffd4 	bl	8007c44 <USB_HC_ReadInterrupt>
 8002c9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e025      	b.n	8002cf0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cce:	d106      	bne.n	8002cde <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f905 	bl	8002ee6 <HCD_HC_IN_IRQHandler>
 8002cdc:	e005      	b.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 ff67 	bl	8003bb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d3d3      	bcc.n	8002ca4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 f9ee 	bl	80070ec <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d101      	bne.n	8002d1e <HAL_HCD_IRQHandler+0x1ea>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_HCD_IRQHandler+0x1ec>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0210 	bic.w	r2, r2, #16
 8002d32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 fbfe 	bl	8004536 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0210 	orr.w	r2, r2, #16
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e000      	b.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_HCD_Start+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e013      	b.n	8002d92 <HAL_HCD_Start+0x3e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fb5c 	bl	8007436 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f84e 	bl	8006e24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_HCD_Stop+0x16>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00d      	b.n	8002dcc <HAL_HCD_Stop+0x32>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f005 f8af 	bl	8007f20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 fafe 	bl	80073e2 <USB_ResetPort>
 8002de6:	4603      	mov	r3, r0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334c      	adds	r3, #76	@ 0x4c
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3338      	adds	r3, #56	@ 0x38
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fb40 	bl	80074d6 <USB_GetCurrentFrame>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f004 fb1b 	bl	80074a8 <USB_GetHostSpeed>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331a      	adds	r3, #26
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	331b      	adds	r3, #27
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3325      	adds	r3, #37	@ 0x25
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3324      	adds	r3, #36	@ 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 f904 	bl	8007112 <USB_ReadChInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11a      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2304      	movs	r3, #4
 8002f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334d      	adds	r3, #77	@ 0x4d
 8002f36:	2207      	movs	r2, #7
 8002f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fe8f 	bl	8007c66 <USB_HC_Halt>
 8002f48:	e09e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 f8dd 	bl	8007112 <USB_ReadChInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f62:	d11b      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2208      	movs	r2, #8
 8002f8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f004 fe66 	bl	8007c66 <USB_HC_Halt>
 8002f9a:	e075      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 f8b4 	bl	8007112 <USB_ReadChInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d11a      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334d      	adds	r3, #77	@ 0x4d
 8002fd6:	2206      	movs	r2, #6
 8002fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f004 fe3f 	bl	8007c66 <USB_HC_Halt>
 8002fe8:	e04e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 f88d 	bl	8007112 <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003002:	d11b      	bne.n	800303c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003016:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334d      	adds	r3, #77	@ 0x4d
 8003028:	2209      	movs	r2, #9
 800302a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f004 fe16 	bl	8007c66 <USB_HC_Halt>
 800303a:	e025      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f004 f864 	bl	8007112 <USB_ReadChInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003050:	2b80      	cmp	r3, #128	@ 0x80
 8003052:	d119      	bne.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334d      	adds	r3, #77	@ 0x4d
 8003076:	2207      	movs	r2, #7
 8003078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f004 fdef 	bl	8007c66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f004 f83e 	bl	8007112 <USB_ReadChInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a0:	d112      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 fddb 	bl	8007c66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	f000 bd75 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 f81e 	bl	8007112 <USB_ReadChInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 8128 	bne.w	8003332 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	2320      	movs	r3, #32
 80030f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	331b      	adds	r3, #27
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d119      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	331b      	adds	r3, #27
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	440a      	add	r2, r1
 8003134:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3330      	adds	r3, #48	@ 0x30
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	1ac9      	subs	r1, r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4403      	add	r3, r0
 800317a:	3338      	adds	r3, #56	@ 0x38
 800317c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334d      	adds	r3, #77	@ 0x4d
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3344      	adds	r3, #68	@ 0x44
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	2301      	movs	r3, #1
 80031b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3326      	adds	r3, #38	@ 0x26
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3326      	adds	r3, #38	@ 0x26
 80031de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d110      	bne.n	8003206 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f004 fd3a 	bl	8007c66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fe:	461a      	mov	r2, r3
 8003200:	2310      	movs	r3, #16
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	e03d      	b.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3326      	adds	r3, #38	@ 0x26
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d00a      	beq.n	8003232 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3326      	adds	r3, #38	@ 0x26
 800322c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800322e:	2b01      	cmp	r3, #1
 8003230:	d127      	bne.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	440a      	add	r2, r1
 8003248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800324c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003250:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334c      	adds	r3, #76	@ 0x4c
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334c      	adds	r3, #76	@ 0x4c
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f007 f851 	bl	800a324 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	799b      	ldrb	r3, [r3, #6]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d13b      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3338      	adds	r3, #56	@ 0x38
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4403      	add	r3, r0
 80032aa:	3328      	adds	r3, #40	@ 0x28
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	440b      	add	r3, r1
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	3328      	adds	r3, #40	@ 0x28
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8470 	beq.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	333c      	adds	r3, #60	@ 0x3c
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2d8      	uxtb	r0, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	333c      	adds	r3, #60	@ 0x3c
 80032fa:	4602      	mov	r2, r0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	f000 bc58 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	333c      	adds	r3, #60	@ 0x3c
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	333c      	adds	r3, #60	@ 0x3c
 800332a:	4602      	mov	r2, r0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	f000 bc40 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fee9 	bl	8007112 <USB_ReadChInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d131      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	2320      	movs	r3, #32
 800335a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	331a      	adds	r3, #26
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 841f 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331b      	adds	r3, #27
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334d      	adds	r3, #77	@ 0x4d
 8003398:	2203      	movs	r2, #3
 800339a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f004 fc5e 	bl	8007c66 <USB_HC_Halt>
 80033aa:	f000 bc02 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 feab 	bl	8007112 <USB_ReadChInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f040 8305 	bne.w	80039d2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	461a      	mov	r2, r3
 80033d6:	2302      	movs	r3, #2
 80033d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334d      	adds	r3, #77	@ 0x4d
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d114      	bne.n	800341a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	334d      	adds	r3, #77	@ 0x4d
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e2cc      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	334d      	adds	r3, #77	@ 0x4d
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b06      	cmp	r3, #6
 800342e:	d114      	bne.n	800345a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	334c      	adds	r3, #76	@ 0x4c
 8003454:	2205      	movs	r2, #5
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e2ac      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334d      	adds	r3, #77	@ 0x4d
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b07      	cmp	r3, #7
 800346e:	d00b      	beq.n	8003488 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003482:	2b09      	cmp	r3, #9
 8003484:	f040 80a6 	bne.w	80035d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3344      	adds	r3, #68	@ 0x44
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	3344      	adds	r3, #68	@ 0x44
 80034be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	@ 0x44
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d943      	bls.n	800355e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3344      	adds	r3, #68	@ 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	331a      	adds	r3, #26
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d123      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	331b      	adds	r3, #27
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	331c      	adds	r3, #28
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	440a      	add	r2, r1
 800353e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003546:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334c      	adds	r3, #76	@ 0x4c
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800355c:	e229      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334c      	adds	r3, #76	@ 0x4c
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3326      	adds	r3, #38	@ 0x26
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3326      	adds	r3, #38	@ 0x26
 8003598:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 8209 	bne.w	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035d2:	e1ee      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334d      	adds	r3, #77	@ 0x4d
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	f040 80c8 	bne.w	800377c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	@ 0x4d
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	331b      	adds	r3, #27
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 81ce 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3326      	adds	r3, #38	@ 0x26
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d16b      	bne.n	8003706 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3348      	adds	r3, #72	@ 0x48
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	3348      	adds	r3, #72	@ 0x48
 8003650:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3348      	adds	r3, #72	@ 0x48
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d943      	bls.n	80036f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3348      	adds	r3, #72	@ 0x48
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	331b      	adds	r3, #27
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3344      	adds	r3, #68	@ 0x44
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d809      	bhi.n	80036ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	331c      	adds	r3, #28
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334c      	adds	r3, #76	@ 0x4c
 80036ea:	2204      	movs	r2, #4
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e014      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	334c      	adds	r3, #76	@ 0x4c
 8003700:	2202      	movs	r2, #2
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e009      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	2202      	movs	r2, #2
 8003718:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3326      	adds	r3, #38	@ 0x26
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3326      	adds	r3, #38	@ 0x26
 8003740:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003742:	2b02      	cmp	r3, #2
 8003744:	f040 8136 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800375e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e11b      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	334d      	adds	r3, #77	@ 0x4d
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b03      	cmp	r3, #3
 8003790:	f040 8081 	bne.w	8003896 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	331b      	adds	r3, #27
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	f040 80fa 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800380e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003812:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	440a      	add	r2, r1
 800382a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800382e:	f023 0320 	bic.w	r3, r3, #32
 8003832:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3326      	adds	r3, #38	@ 0x26
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3326      	adds	r3, #38	@ 0x26
 800385a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800385c:	2b02      	cmp	r3, #2
 800385e:	f040 80a9 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003878:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003880:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e08e      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334d      	adds	r3, #77	@ 0x4d
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d143      	bne.n	8003934 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334d      	adds	r3, #77	@ 0x4d
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334c      	adds	r3, #76	@ 0x4c
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3326      	adds	r3, #38	@ 0x26
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3326      	adds	r3, #38	@ 0x26
 80038fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d159      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003916:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800391e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e03f      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b08      	cmp	r3, #8
 8003948:	d126      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	@ 0x4d
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3344      	adds	r3, #68	@ 0x44
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4403      	add	r3, r0
 800397e:	3344      	adds	r3, #68	@ 0x44
 8003980:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	334c      	adds	r3, #76	@ 0x4c
 8003992:	2204      	movs	r2, #4
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e00d      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334d      	adds	r3, #77	@ 0x4d
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	f000 8100 	beq.w	8003bb0 <HCD_HC_IN_IRQHandler+0xcca>
 80039b0:	e000      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334c      	adds	r3, #76	@ 0x4c
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f006 fcaa 	bl	800a324 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039d0:	e0ef      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fb99 	bl	8007112 <USB_ReadChInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d12f      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2340      	movs	r3, #64	@ 0x40
 80039fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	331a      	adds	r3, #26
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3344      	adds	r3, #68	@ 0x44
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 f90f 	bl	8007c66 <USB_HC_Halt>
 8003a48:	e0b3      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fb5d 	bl	8007112 <USB_ReadChInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	f040 80a7 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3326      	adds	r3, #38	@ 0x26
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d11b      	bne.n	8003ab2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3344      	adds	r3, #68	@ 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 f8db 	bl	8007c66 <USB_HC_Halt>
 8003ab0:	e03f      	b.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3326      	adds	r3, #38	@ 0x26
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3326      	adds	r3, #38	@ 0x26
 8003ad8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d129      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	799b      	ldrb	r3, [r3, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HCD_HC_IN_IRQHandler+0xc2a>
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	331b      	adds	r3, #27
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d110      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334d      	adds	r3, #77	@ 0x4d
 8003b20:	2204      	movs	r2, #4
 8003b22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f004 f89a 	bl	8007c66 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	331b      	adds	r3, #27
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d129      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	331b      	adds	r3, #27
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b96:	f043 0320 	orr.w	r3, r3, #32
 8003b9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2310      	movs	r3, #16
 8003bac:	6093      	str	r3, [r2, #8]
 8003bae:	e000      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003bb0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fa9b 	bl	8007112 <USB_ReadChInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d11b      	bne.n	8003c1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2207      	movs	r2, #7
 8003c0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 f826 	bl	8007c66 <USB_HC_Halt>
 8003c1a:	f000 bc89 	b.w	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 fa73 	bl	8007112 <USB_ReadChInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 8082 	bne.w	8003d3c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2320      	movs	r3, #32
 8003c48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3319      	adds	r3, #25
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d124      	bne.n	8003caa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3319      	adds	r3, #25
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334c      	adds	r3, #76	@ 0x4c
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	334d      	adds	r3, #77	@ 0x4d
 8003c98:	2203      	movs	r2, #3
 8003c9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 ffde 	bl	8007c66 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	331a      	adds	r3, #26
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 8437 	bne.w	8004530 <HCD_HC_OUT_IRQHandler+0x978>
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	331b      	adds	r3, #27
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 842b 	bne.w	8004530 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3326      	adds	r3, #38	@ 0x26
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d009      	beq.n	8003d04 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	331b      	adds	r3, #27
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	334d      	adds	r3, #77	@ 0x4d
 8003d14:	2203      	movs	r2, #3
 8003d16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 ffa0 	bl	8007c66 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3344      	adds	r3, #68	@ 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e3f9      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 f9e4 	bl	8007112 <USB_ReadChInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d54:	d111      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d62:	461a      	mov	r2, r3
 8003d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 ff77 	bl	8007c66 <USB_HC_Halt>
 8003d78:	e3da      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 f9c5 	bl	8007112 <USB_ReadChInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d168      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3344      	adds	r3, #68	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 f9af 	bl	8007112 <USB_ReadChInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d112      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3319      	adds	r3, #25
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dde:	461a      	mov	r2, r3
 8003de0:	2340      	movs	r3, #64	@ 0x40
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	331b      	adds	r3, #27
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	331b      	adds	r3, #27
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334d      	adds	r3, #77	@ 0x4d
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 ff02 	bl	8007c66 <USB_HC_Halt>
 8003e62:	e365      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 f950 	bl	8007112 <USB_ReadChInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b40      	cmp	r3, #64	@ 0x40
 8003e7a:	d139      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334d      	adds	r3, #77	@ 0x4d
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	331a      	adds	r3, #26
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3319      	adds	r3, #25
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3344      	adds	r3, #68	@ 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 fec5 	bl	8007c66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2340      	movs	r3, #64	@ 0x40
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e31f      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 f90a 	bl	8007112 <USB_ReadChInterrupts>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11a      	bne.n	8003f3e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f14:	461a      	mov	r2, r3
 8003f16:	2308      	movs	r3, #8
 8003f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fe95 	bl	8007c66 <USB_HC_Halt>
 8003f3c:	e2f8      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 f8e3 	bl	8007112 <USB_ReadChInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d144      	bne.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3344      	adds	r3, #68	@ 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	334d      	adds	r3, #77	@ 0x4d
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3319      	adds	r3, #25
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d114      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3319      	adds	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f003 fe4d 	bl	8007c66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2310      	movs	r3, #16
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	e2a7      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 f892 	bl	8007112 <USB_ReadChInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b80      	cmp	r3, #128	@ 0x80
 8003ff6:	f040 8083 	bne.w	8004100 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	799b      	ldrb	r3, [r3, #6]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d111      	bne.n	8004026 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334d      	adds	r3, #77	@ 0x4d
 8004012:	2207      	movs	r2, #7
 8004014:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f003 fe21 	bl	8007c66 <USB_HC_Halt>
 8004024:	e062      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3344      	adds	r3, #68	@ 0x44
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4403      	add	r3, r0
 8004046:	3344      	adds	r3, #68	@ 0x44
 8004048:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	3344      	adds	r3, #68	@ 0x44
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d922      	bls.n	80040a6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3344      	adds	r3, #68	@ 0x44
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	334c      	adds	r3, #76	@ 0x4c
 8004084:	2204      	movs	r2, #4
 8004086:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	334c      	adds	r3, #76	@ 0x4c
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f006 f940 	bl	800a324 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040a4:	e022      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	334c      	adds	r3, #76	@ 0x4c
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040d0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040d8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	e217      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f003 f802 	bl	8007112 <USB_ReadChInterrupts>
 800410e:	4603      	mov	r3, r0
 8004110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004118:	d11b      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	334d      	adds	r3, #77	@ 0x4d
 800412a:	2209      	movs	r2, #9
 800412c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f003 fd95 	bl	8007c66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004148:	461a      	mov	r2, r3
 800414a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	e1ee      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f002 ffd9 	bl	8007112 <USB_ReadChInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	f040 81df 	bne.w	800452a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	2302      	movs	r3, #2
 800417c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	334d      	adds	r3, #77	@ 0x4d
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 8093 	bne.w	80042bc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	334d      	adds	r3, #77	@ 0x4d
 80041a6:	2202      	movs	r2, #2
 80041a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	334c      	adds	r3, #76	@ 0x4c
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3326      	adds	r3, #38	@ 0x26
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d00b      	beq.n	80041ec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3326      	adds	r3, #38	@ 0x26
 80041e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	f040 8190 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	799b      	ldrb	r3, [r3, #6]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d115      	bne.n	8004220 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	333d      	adds	r3, #61	@ 0x3d
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	f083 0301 	eor.w	r3, r3, #1
 800420c:	b2d8      	uxtb	r0, r3
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	333d      	adds	r3, #61	@ 0x3d
 800421c:	4602      	mov	r2, r0
 800421e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	799b      	ldrb	r3, [r3, #6]
 8004224:	2b01      	cmp	r3, #1
 8004226:	f040 8171 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	3334      	adds	r3, #52	@ 0x34
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8165 	beq.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3334      	adds	r3, #52	@ 0x34
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4403      	add	r3, r0
 8004262:	3328      	adds	r3, #40	@ 0x28
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	440b      	add	r3, r1
 8004268:	1e59      	subs	r1, r3, #1
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4403      	add	r3, r0
 8004278:	3328      	adds	r3, #40	@ 0x28
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004280:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 813f 	beq.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	333d      	adds	r3, #61	@ 0x3d
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	f083 0301 	eor.w	r3, r3, #1
 80042a6:	b2d8      	uxtb	r0, r3
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	333d      	adds	r3, #61	@ 0x3d
 80042b6:	4602      	mov	r2, r0
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e127      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d120      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	334d      	adds	r3, #77	@ 0x4d
 80042e2:	2202      	movs	r2, #2
 80042e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	331b      	adds	r3, #27
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 8107 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	334c      	adds	r3, #76	@ 0x4c
 800430e:	2202      	movs	r2, #2
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e0fb      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	334d      	adds	r3, #77	@ 0x4d
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d13a      	bne.n	80043a0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	334d      	adds	r3, #77	@ 0x4d
 800433a:	2202      	movs	r2, #2
 800433c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	334c      	adds	r3, #76	@ 0x4c
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	331b      	adds	r3, #27
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 80d1 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	331b      	adds	r3, #27
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	440a      	add	r2, r1
 8004394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439c:	6053      	str	r3, [r2, #4]
 800439e:	e0b5      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	334d      	adds	r3, #77	@ 0x4d
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d114      	bne.n	80043e0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	334d      	adds	r3, #77	@ 0x4d
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	334c      	adds	r3, #76	@ 0x4c
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e095      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	334d      	adds	r3, #77	@ 0x4d
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d114      	bne.n	8004420 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	334d      	adds	r3, #77	@ 0x4d
 8004406:	2202      	movs	r2, #2
 8004408:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	334c      	adds	r3, #76	@ 0x4c
 800441a:	2205      	movs	r2, #5
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e075      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	334d      	adds	r3, #77	@ 0x4d
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b07      	cmp	r3, #7
 8004434:	d00a      	beq.n	800444c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	334d      	adds	r3, #77	@ 0x4d
 8004446:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004448:	2b09      	cmp	r3, #9
 800444a:	d170      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	334d      	adds	r3, #77	@ 0x4d
 800445c:	2202      	movs	r2, #2
 800445e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	3344      	adds	r3, #68	@ 0x44
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4403      	add	r3, r0
 8004480:	3344      	adds	r3, #68	@ 0x44
 8004482:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3344      	adds	r3, #68	@ 0x44
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d914      	bls.n	80044c4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3344      	adds	r3, #68	@ 0x44
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	334c      	adds	r3, #76	@ 0x4c
 80044be:	2204      	movs	r2, #4
 80044c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044c2:	e022      	b.n	800450a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	334c      	adds	r3, #76	@ 0x4c
 80044d4:	2202      	movs	r2, #2
 80044d6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004504:	461a      	mov	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800450a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	334c      	adds	r3, #76	@ 0x4c
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f005 fefe 	bl	800a324 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004528:	e002      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800452e:	bf00      	nop
  }
}
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b08a      	sub	sp, #40	@ 0x28
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	0c5b      	lsrs	r3, r3, #17
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800456a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d004      	beq.n	800457c <HCD_RXQLVL_IRQHandler+0x46>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b05      	cmp	r3, #5
 8004576:	f000 80b6 	beq.w	80046e6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800457a:	e0b7      	b.n	80046ec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80b3 	beq.w	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	332c      	adds	r3, #44	@ 0x2c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80a7 	beq.w	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3338      	adds	r3, #56	@ 0x38
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	18d1      	adds	r1, r2, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	3334      	adds	r3, #52	@ 0x34
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4299      	cmp	r1, r3
 80045c6:	f200 8083 	bhi.w	80046d0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	332c      	adds	r3, #44	@ 0x2c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	b292      	uxth	r2, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	f002 fd29 	bl	800703c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4613      	mov	r3, r2
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	332c      	adds	r3, #44	@ 0x2c
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	18d1      	adds	r1, r2, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4403      	add	r3, r0
 800460e:	332c      	adds	r3, #44	@ 0x2c
 8004610:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3338      	adds	r3, #56	@ 0x38
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	18d1      	adds	r1, r2, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4403      	add	r3, r0
 8004636:	3338      	adds	r3, #56	@ 0x38
 8004638:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	0cdb      	lsrs	r3, r3, #19
 800464a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800464e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3328      	adds	r3, #40	@ 0x28
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4293      	cmp	r3, r2
 8004668:	d13f      	bne.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d03c      	beq.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004686:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800468e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	333c      	adds	r3, #60	@ 0x3c
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f083 0301 	eor.w	r3, r3, #1
 80046b8:	b2d8      	uxtb	r0, r3
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4613      	mov	r3, r2
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	333c      	adds	r3, #60	@ 0x3c
 80046ca:	4602      	mov	r2, r0
 80046cc:	701a      	strb	r2, [r3, #0]
      break;
 80046ce:	e00c      	b.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4613      	mov	r3, r2
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	334c      	adds	r3, #76	@ 0x4c
 80046e0:	2204      	movs	r2, #4
 80046e2:	701a      	strb	r2, [r3, #0]
      break;
 80046e4:	e001      	b.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046ea:	bf00      	nop
  }
}
 80046ec:	bf00      	nop
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004720:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b02      	cmp	r3, #2
 800472a:	d10b      	bne.n	8004744 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f005 fdd8 	bl	800a2ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f043 0302 	orr.w	r3, r3, #2
 8004742:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d132      	bne.n	80047b4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f043 0308 	orr.w	r3, r3, #8
 8004754:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d126      	bne.n	80047ae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7a5b      	ldrb	r3, [r3, #9]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d113      	bne.n	8004790 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800476e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004772:	d106      	bne.n	8004782 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f002 fdf4 	bl	8007368 <USB_InitFSLSPClkSel>
 8004780:	e011      	b.n	80047a6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f002 fded 	bl	8007368 <USB_InitFSLSPClkSel>
 800478e:	e00a      	b.n	80047a6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	79db      	ldrb	r3, [r3, #7]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d106      	bne.n	80047a6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800479e:	461a      	mov	r2, r3
 80047a0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80047a4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f005 fdca 	bl	800a340 <HAL_HCD_PortEnabled_Callback>
 80047ac:	e002      	b.n	80047b4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f005 fdd4 	bl	800a35c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d103      	bne.n	80047c6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f043 0320 	orr.w	r3, r3, #32
 80047c4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6013      	str	r3, [r2, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e12b      	b.n	8004a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fc fbea 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800482e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800483e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004840:	f001 fa20 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8004844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4a81      	ldr	r2, [pc, #516]	@ (8004a50 <HAL_I2C_Init+0x274>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d807      	bhi.n	8004860 <HAL_I2C_Init+0x84>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a80      	ldr	r2, [pc, #512]	@ (8004a54 <HAL_I2C_Init+0x278>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e006      	b.n	800486e <HAL_I2C_Init+0x92>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a7d      	ldr	r2, [pc, #500]	@ (8004a58 <HAL_I2C_Init+0x27c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	bf94      	ite	ls
 8004868:	2301      	movls	r3, #1
 800486a:	2300      	movhi	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0e7      	b.n	8004a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a78      	ldr	r2, [pc, #480]	@ (8004a5c <HAL_I2C_Init+0x280>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	0c9b      	lsrs	r3, r3, #18
 8004880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004a50 <HAL_I2C_Init+0x274>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d802      	bhi.n	80048b0 <HAL_I2C_Init+0xd4>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3301      	adds	r3, #1
 80048ae:	e009      	b.n	80048c4 <HAL_I2C_Init+0xe8>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	4a69      	ldr	r2, [pc, #420]	@ (8004a60 <HAL_I2C_Init+0x284>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	3301      	adds	r3, #1
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	495c      	ldr	r1, [pc, #368]	@ (8004a50 <HAL_I2C_Init+0x274>)
 80048e0:	428b      	cmp	r3, r1
 80048e2:	d819      	bhi.n	8004918 <HAL_I2C_Init+0x13c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1e59      	subs	r1, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f2:	1c59      	adds	r1, r3, #1
 80048f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048f8:	400b      	ands	r3, r1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_I2C_Init+0x138>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1e59      	subs	r1, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	fbb1 f3f3 	udiv	r3, r1, r3
 800490c:	3301      	adds	r3, #1
 800490e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004912:	e051      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004914:	2304      	movs	r3, #4
 8004916:	e04f      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d111      	bne.n	8004944 <HAL_I2C_Init+0x168>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1e58      	subs	r0, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	440b      	add	r3, r1
 800492e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004932:	3301      	adds	r3, #1
 8004934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e012      	b.n	800496a <HAL_I2C_Init+0x18e>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e58      	subs	r0, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	0099      	lsls	r1, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Init+0x196>
 800496e:	2301      	movs	r3, #1
 8004970:	e022      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10e      	bne.n	8004998 <HAL_I2C_Init+0x1bc>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1e58      	subs	r0, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	440b      	add	r3, r1
 8004988:	fbb0 f3f3 	udiv	r3, r0, r3
 800498c:	3301      	adds	r3, #1
 800498e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004996:	e00f      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1e58      	subs	r0, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	0099      	lsls	r1, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	6809      	ldr	r1, [r1, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6911      	ldr	r1, [r2, #16]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68d2      	ldr	r2, [r2, #12]
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	000186a0 	.word	0x000186a0
 8004a54:	001e847f 	.word	0x001e847f
 8004a58:	003d08ff 	.word	0x003d08ff
 8004a5c:	431bde83 	.word	0x431bde83
 8004a60:	10624dd3 	.word	0x10624dd3

08004a64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e128      	b.n	8004cc8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a90      	ldr	r2, [pc, #576]	@ (8004cd0 <HAL_I2S_Init+0x26c>)
 8004a8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7fc faeb 	bl	800106c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004aac:	f023 030f 	bic.w	r3, r3, #15
 8004ab0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d060      	beq.n	8004b84 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004aca:	2310      	movs	r3, #16
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e001      	b.n	8004ad4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d802      	bhi.n	8004ae2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f001 f9c4 	bl	8005e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af2:	d125      	bne.n	8004b40 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	461a      	mov	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	3305      	adds	r3, #5
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	e01f      	b.n	8004b5e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	461a      	mov	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	3305      	adds	r3, #5
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e00e      	b.n	8004b5e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	3305      	adds	r3, #5
 8004b5c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <HAL_I2S_Init+0x270>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	08db      	lsrs	r3, r3, #3
 8004b68:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e003      	b.n	8004b8c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b84:	2302      	movs	r3, #2
 8004b86:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d902      	bls.n	8004b98 <HAL_I2S_Init+0x134>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2bff      	cmp	r3, #255	@ 0xff
 8004b96:	d907      	bls.n	8004ba8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	f043 0210 	orr.w	r2, r3, #16
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e08f      	b.n	8004cc8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	ea42 0103 	orr.w	r1, r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bc6:	f023 030f 	bic.w	r3, r3, #15
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6851      	ldr	r1, [r2, #4]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6892      	ldr	r2, [r2, #8]
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68d2      	ldr	r2, [r2, #12]
 8004bd8:	4311      	orrs	r1, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6992      	ldr	r2, [r2, #24]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d161      	bne.n	8004cb8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a38      	ldr	r2, [pc, #224]	@ (8004cd8 <HAL_I2S_Init+0x274>)
 8004bf8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a37      	ldr	r2, [pc, #220]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_I2S_Init+0x1a4>
 8004c04:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c06:	e001      	b.n	8004c0c <HAL_I2S_Init+0x1a8>
 8004c08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	4932      	ldr	r1, [pc, #200]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c14:	428a      	cmp	r2, r1
 8004c16:	d101      	bne.n	8004c1c <HAL_I2S_Init+0x1b8>
 8004c18:	4a31      	ldr	r2, [pc, #196]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c1a:	e001      	b.n	8004c20 <HAL_I2S_Init+0x1bc>
 8004c1c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c20:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c24:	f023 030f 	bic.w	r3, r3, #15
 8004c28:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_I2S_Init+0x1d4>
 8004c34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c36:	e001      	b.n	8004c3c <HAL_I2S_Init+0x1d8>
 8004c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a25      	ldr	r2, [pc, #148]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d101      	bne.n	8004c4e <HAL_I2S_Init+0x1ea>
 8004c4a:	4b25      	ldr	r3, [pc, #148]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c4c:	e001      	b.n	8004c52 <HAL_I2S_Init+0x1ee>
 8004c4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5e:	d003      	beq.n	8004c68 <HAL_I2S_Init+0x204>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e001      	b.n	8004c74 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	897b      	ldrh	r3, [r7, #10]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ca0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_I2S_Init+0x24c>
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004cae:	e001      	b.n	8004cb4 <HAL_I2S_Init+0x250>
 8004cb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cb4:	897a      	ldrh	r2, [r7, #10]
 8004cb6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08004ddb 	.word	0x08004ddb
 8004cd4:	cccccccd 	.word	0xcccccccd
 8004cd8:	08004ef1 	.word	0x08004ef1
 8004cdc:	40003800 	.word	0x40003800
 8004ce0:	40003400 	.word	0x40003400

08004ce4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10e      	bne.n	8004d74 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d64:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ffb8 	bl	8004ce4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10e      	bne.n	8004dd2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dc2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff93 	bl	8004cf8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d13a      	bne.n	8004e6c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d109      	bne.n	8004e14 <I2S_IRQHandler+0x3a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0a:	2b40      	cmp	r3, #64	@ 0x40
 8004e0c:	d102      	bne.n	8004e14 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff ffb4 	bl	8004d7c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b40      	cmp	r3, #64	@ 0x40
 8004e1c:	d126      	bne.n	8004e6c <I2S_IRQHandler+0x92>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d11f      	bne.n	8004e6c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f043 0202 	orr.w	r2, r3, #2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ff50 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d136      	bne.n	8004ee6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d109      	bne.n	8004e96 <I2S_IRQHandler+0xbc>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8c:	2b80      	cmp	r3, #128	@ 0x80
 8004e8e:	d102      	bne.n	8004e96 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff ff45 	bl	8004d20 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d122      	bne.n	8004ee6 <I2S_IRQHandler+0x10c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d11b      	bne.n	8004ee6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ebc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed8:	f043 0204 	orr.w	r2, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff13 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a92      	ldr	r2, [pc, #584]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f0a:	4b92      	ldr	r3, [pc, #584]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f0c:	e001      	b.n	8004f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a8b      	ldr	r2, [pc, #556]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d101      	bne.n	8004f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f28:	4b8a      	ldr	r3, [pc, #552]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f2a:	e001      	b.n	8004f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f3c:	d004      	beq.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 8099 	bne.w	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d107      	bne.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f925 	bl	80051ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9c8 	bl	800530c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b40      	cmp	r3, #64	@ 0x40
 8004f84:	d13a      	bne.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d035      	beq.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6e      	ldr	r2, [pc, #440]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f9c:	e001      	b.n	8004fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4969      	ldr	r1, [pc, #420]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004faa:	428b      	cmp	r3, r1
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004fae:	4b69      	ldr	r3, [pc, #420]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fb0:	e001      	b.n	8004fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fe88 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b08      	cmp	r3, #8
 8005004:	f040 80c3 	bne.w	800518e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80bd 	beq.w	800518e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005022:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a49      	ldr	r2, [pc, #292]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d101      	bne.n	8005032 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800502e:	4b49      	ldr	r3, [pc, #292]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005030:	e001      	b.n	8005036 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005032:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4944      	ldr	r1, [pc, #272]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800503e:	428b      	cmp	r3, r1
 8005040:	d101      	bne.n	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005042:	4b44      	ldr	r3, [pc, #272]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005044:	e001      	b.n	800504a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005046:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800504a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800504e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff fe4a 	bl	8004d0c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005078:	e089      	b.n	800518e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d107      	bne.n	8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f8be 	bl	8005210 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d107      	bne.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f8fd 	bl	80052a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d12f      	bne.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02a      	beq.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d101      	bne.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050de:	e001      	b.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4919      	ldr	r1, [pc, #100]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ec:	428b      	cmp	r3, r1
 80050ee:	d101      	bne.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050f0:	4b18      	ldr	r3, [pc, #96]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f2:	e001      	b.n	80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	f043 0202 	orr.w	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fdfa 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b08      	cmp	r3, #8
 8005120:	d136      	bne.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d031      	beq.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a07      	ldr	r2, [pc, #28]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005136:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005138:	e001      	b.n	800513e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800513a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4902      	ldr	r1, [pc, #8]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005146:	428b      	cmp	r3, r1
 8005148:	d106      	bne.n	8005158 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800514a:	4b02      	ldr	r3, [pc, #8]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800514c:	e006      	b.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800514e:	bf00      	nop
 8005150:	40003800 	.word	0x40003800
 8005154:	40003400 	.word	0x40003400
 8005158:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800515c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005160:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005170:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fdc0 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800518c:	e000      	b.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800518e:	bf00      	nop
}
 8005190:	bf00      	nop
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	1c99      	adds	r1, r3, #2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6251      	str	r1, [r2, #36]	@ 0x24
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d113      	bne.n	8005206 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ffc9 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	1c99      	adds	r1, r3, #2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6251      	str	r1, [r2, #36]	@ 0x24
 8005222:	8819      	ldrh	r1, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <I2SEx_TxISR_I2SExt+0x90>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <I2SEx_TxISR_I2SExt+0x22>
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <I2SEx_TxISR_I2SExt+0x94>)
 8005230:	e001      	b.n	8005236 <I2SEx_TxISR_I2SExt+0x26>
 8005232:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005236:	460a      	mov	r2, r1
 8005238:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d121      	bne.n	8005296 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a12      	ldr	r2, [pc, #72]	@ (80052a0 <I2SEx_TxISR_I2SExt+0x90>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d101      	bne.n	8005260 <I2SEx_TxISR_I2SExt+0x50>
 800525c:	4b11      	ldr	r3, [pc, #68]	@ (80052a4 <I2SEx_TxISR_I2SExt+0x94>)
 800525e:	e001      	b.n	8005264 <I2SEx_TxISR_I2SExt+0x54>
 8005260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	490d      	ldr	r1, [pc, #52]	@ (80052a0 <I2SEx_TxISR_I2SExt+0x90>)
 800526c:	428b      	cmp	r3, r1
 800526e:	d101      	bne.n	8005274 <I2SEx_TxISR_I2SExt+0x64>
 8005270:	4b0c      	ldr	r3, [pc, #48]	@ (80052a4 <I2SEx_TxISR_I2SExt+0x94>)
 8005272:	e001      	b.n	8005278 <I2SEx_TxISR_I2SExt+0x68>
 8005274:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005278:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800527c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff81 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40003800 	.word	0x40003800
 80052a4:	40003400 	.word	0x40003400

080052a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68d8      	ldr	r0, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	1c99      	adds	r1, r3, #2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80052c0:	b282      	uxth	r2, r0
 80052c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d113      	bne.n	8005304 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff4a 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a20      	ldr	r2, [pc, #128]	@ (800539c <I2SEx_RxISR_I2SExt+0x90>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <I2SEx_RxISR_I2SExt+0x16>
 800531e:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <I2SEx_RxISR_I2SExt+0x94>)
 8005320:	e001      	b.n	8005326 <I2SEx_RxISR_I2SExt+0x1a>
 8005322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005326:	68d8      	ldr	r0, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	1c99      	adds	r1, r3, #2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005332:	b282      	uxth	r2, r0
 8005334:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d121      	bne.n	8005392 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a12      	ldr	r2, [pc, #72]	@ (800539c <I2SEx_RxISR_I2SExt+0x90>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d101      	bne.n	800535c <I2SEx_RxISR_I2SExt+0x50>
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <I2SEx_RxISR_I2SExt+0x94>)
 800535a:	e001      	b.n	8005360 <I2SEx_RxISR_I2SExt+0x54>
 800535c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	490d      	ldr	r1, [pc, #52]	@ (800539c <I2SEx_RxISR_I2SExt+0x90>)
 8005368:	428b      	cmp	r3, r1
 800536a:	d101      	bne.n	8005370 <I2SEx_RxISR_I2SExt+0x64>
 800536c:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <I2SEx_RxISR_I2SExt+0x94>)
 800536e:	e001      	b.n	8005374 <I2SEx_RxISR_I2SExt+0x68>
 8005370:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005374:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005378:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ff03 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40003800 	.word	0x40003800
 80053a0:	40003400 	.word	0x40003400

080053a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e267      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d075      	beq.n	80054ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053c2:	4b88      	ldr	r3, [pc, #544]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d00c      	beq.n	80053e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ce:	4b85      	ldr	r3, [pc, #532]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d112      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053da:	4b82      	ldr	r3, [pc, #520]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053e6:	d10b      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e8:	4b7e      	ldr	r3, [pc, #504]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05b      	beq.n	80054ac <HAL_RCC_OscConfig+0x108>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d157      	bne.n	80054ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e242      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005408:	d106      	bne.n	8005418 <HAL_RCC_OscConfig+0x74>
 800540a:	4b76      	ldr	r3, [pc, #472]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a75      	ldr	r2, [pc, #468]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e01d      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x98>
 8005422:	4b70      	ldr	r3, [pc, #448]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6f      	ldr	r2, [pc, #444]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b6d      	ldr	r3, [pc, #436]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a6c      	ldr	r2, [pc, #432]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e00b      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 800543c:	4b69      	ldr	r3, [pc, #420]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a68      	ldr	r2, [pc, #416]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	4b66      	ldr	r3, [pc, #408]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a65      	ldr	r2, [pc, #404]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800544e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d013      	beq.n	8005484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545c:	f7fc f846 	bl	80014ec <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005464:	f7fc f842 	bl	80014ec <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	@ 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e207      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	4b5b      	ldr	r3, [pc, #364]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0xc0>
 8005482:	e014      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fc f832 	bl	80014ec <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7fc f82e 	bl	80014ec <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	@ 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e1f3      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549e:	4b51      	ldr	r3, [pc, #324]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0xe8>
 80054aa:	e000      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d063      	beq.n	8005582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ba:	4b4a      	ldr	r3, [pc, #296]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d11c      	bne.n	800550c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d2:	4b44      	ldr	r3, [pc, #272]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	4b41      	ldr	r3, [pc, #260]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_RCC_OscConfig+0x152>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e1c7      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f6:	4b3b      	ldr	r3, [pc, #236]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4937      	ldr	r1, [pc, #220]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550a:	e03a      	b.n	8005582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005514:	4b34      	ldr	r3, [pc, #208]	@ (80055e8 <HAL_RCC_OscConfig+0x244>)
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fb ffe7 	bl	80014ec <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005522:	f7fb ffe3 	bl	80014ec <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e1a8      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005534:	4b2b      	ldr	r3, [pc, #172]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005540:	4b28      	ldr	r3, [pc, #160]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4925      	ldr	r1, [pc, #148]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]
 8005554:	e015      	b.n	8005582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005556:	4b24      	ldr	r3, [pc, #144]	@ (80055e8 <HAL_RCC_OscConfig+0x244>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fb ffc6 	bl	80014ec <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005564:	f7fb ffc2 	bl	80014ec <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e187      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005576:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d036      	beq.n	80055fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005596:	4b15      	ldr	r3, [pc, #84]	@ (80055ec <HAL_RCC_OscConfig+0x248>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fb ffa6 	bl	80014ec <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a4:	f7fb ffa2 	bl	80014ec <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e167      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b6:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80055b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0x200>
 80055c2:	e01b      	b.n	80055fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c4:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <HAL_RCC_OscConfig+0x248>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ca:	f7fb ff8f 	bl	80014ec <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d0:	e00e      	b.n	80055f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d2:	f7fb ff8b 	bl	80014ec <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d907      	bls.n	80055f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e150      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
 80055e4:	40023800 	.word	0x40023800
 80055e8:	42470000 	.word	0x42470000
 80055ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	4b88      	ldr	r3, [pc, #544]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ea      	bne.n	80055d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8097 	beq.w	8005738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560e:	4b81      	ldr	r3, [pc, #516]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	4b7d      	ldr	r3, [pc, #500]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	4a7c      	ldr	r2, [pc, #496]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	@ 0x40
 800562a:	4b7a      	ldr	r3, [pc, #488]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4b77      	ldr	r3, [pc, #476]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d118      	bne.n	8005678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005646:	4b74      	ldr	r3, [pc, #464]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a73      	ldr	r2, [pc, #460]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005652:	f7fb ff4b 	bl	80014ec <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fb ff47 	bl	80014ec <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e10c      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	4b6a      	ldr	r3, [pc, #424]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d106      	bne.n	800568e <HAL_RCC_OscConfig+0x2ea>
 8005680:	4b64      	ldr	r3, [pc, #400]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	4a63      	ldr	r2, [pc, #396]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6713      	str	r3, [r2, #112]	@ 0x70
 800568c:	e01c      	b.n	80056c8 <HAL_RCC_OscConfig+0x324>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x30c>
 8005696:	4b5f      	ldr	r3, [pc, #380]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	4a5e      	ldr	r2, [pc, #376]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0x324>
 80056b0:	4b58      	ldr	r3, [pc, #352]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	4a57      	ldr	r2, [pc, #348]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80056bc:	4b55      	ldr	r3, [pc, #340]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c0:	4a54      	ldr	r2, [pc, #336]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056c2:	f023 0304 	bic.w	r3, r3, #4
 80056c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fb ff0c 	bl	80014ec <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fb ff08 	bl	80014ec <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0cb      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	4b49      	ldr	r3, [pc, #292]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ee      	beq.n	80056d8 <HAL_RCC_OscConfig+0x334>
 80056fa:	e014      	b.n	8005726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fc:	f7fb fef6 	bl	80014ec <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fb fef2 	bl	80014ec <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0b5      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571a:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ee      	bne.n	8005704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572c:	4b39      	ldr	r3, [pc, #228]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	4a38      	ldr	r2, [pc, #224]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005736:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80a1 	beq.w	8005884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005742:	4b34      	ldr	r3, [pc, #208]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b08      	cmp	r3, #8
 800574c:	d05c      	beq.n	8005808 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d141      	bne.n	80057da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b31      	ldr	r3, [pc, #196]	@ (800581c <HAL_RCC_OscConfig+0x478>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fb fec6 	bl	80014ec <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005764:	f7fb fec2 	bl	80014ec <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e087      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b27      	ldr	r3, [pc, #156]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	3b01      	subs	r3, #1
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	491b      	ldr	r1, [pc, #108]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ac:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <HAL_RCC_OscConfig+0x478>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fb fe9b 	bl	80014ec <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fb fe97 	bl	80014ec <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e05c      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057cc:	4b11      	ldr	r3, [pc, #68]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x416>
 80057d8:	e054      	b.n	8005884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057da:	4b10      	ldr	r3, [pc, #64]	@ (800581c <HAL_RCC_OscConfig+0x478>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fb fe84 	bl	80014ec <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fb fe80 	bl	80014ec <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e045      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	4b06      	ldr	r3, [pc, #24]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x444>
 8005806:	e03d      	b.n	8005884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e038      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
 8005814:	40023800 	.word	0x40023800
 8005818:	40007000 	.word	0x40007000
 800581c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005820:	4b1b      	ldr	r3, [pc, #108]	@ (8005890 <HAL_RCC_OscConfig+0x4ec>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d028      	beq.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d121      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d11a      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005850:	4013      	ands	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005858:	4293      	cmp	r3, r2
 800585a:	d111      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	3b01      	subs	r3, #1
 800586a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d107      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800

08005894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0cc      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a8:	4b68      	ldr	r3, [pc, #416]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d90c      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b65      	ldr	r3, [pc, #404]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b63      	ldr	r3, [pc, #396]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0b8      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e8:	4b59      	ldr	r3, [pc, #356]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a58      	ldr	r2, [pc, #352]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005900:	4b53      	ldr	r3, [pc, #332]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a52      	ldr	r2, [pc, #328]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800590a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590c:	4b50      	ldr	r3, [pc, #320]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	494d      	ldr	r1, [pc, #308]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d044      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b47      	ldr	r3, [pc, #284]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d119      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e07f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d003      	beq.n	8005952 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800594e:	2b03      	cmp	r3, #3
 8005950:	d107      	bne.n	8005962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	4b3f      	ldr	r3, [pc, #252]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e06f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005962:	4b3b      	ldr	r3, [pc, #236]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e067      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005972:	4b37      	ldr	r3, [pc, #220]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 0203 	bic.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4934      	ldr	r1, [pc, #208]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005984:	f7fb fdb2 	bl	80014ec <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598c:	f7fb fdae 	bl	80014ec <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e04f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 020c 	and.w	r2, r3, #12
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d1eb      	bne.n	800598c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059b4:	4b25      	ldr	r3, [pc, #148]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d20c      	bcs.n	80059dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b22      	ldr	r3, [pc, #136]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e032      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e8:	4b19      	ldr	r3, [pc, #100]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4916      	ldr	r1, [pc, #88]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a06:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	490e      	ldr	r1, [pc, #56]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a1a:	f000 f821 	bl	8005a60 <HAL_RCC_GetSysClockFreq>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	490a      	ldr	r1, [pc, #40]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	5ccb      	ldrb	r3, [r1, r3]
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	4a09      	ldr	r2, [pc, #36]	@ (8005a58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a36:	4b09      	ldr	r3, [pc, #36]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fb fd12 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023c00 	.word	0x40023c00
 8005a50:	40023800 	.word	0x40023800
 8005a54:	0800aa18 	.word	0x0800aa18
 8005a58:	20000004 	.word	0x20000004
 8005a5c:	20000008 	.word	0x20000008

08005a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a64:	b094      	sub	sp, #80	@ 0x50
 8005a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a78:	4b79      	ldr	r3, [pc, #484]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d00d      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	f200 80e1 	bhi.w	8005c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x34>
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d003      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a92:	e0db      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a94:	4b73      	ldr	r3, [pc, #460]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a98:	e0db      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a9a:	4b73      	ldr	r3, [pc, #460]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a9e:	e0d8      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aa8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d063      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	099b      	lsrs	r3, r3, #6
 8005abc:	2200      	movs	r2, #0
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aca:	2300      	movs	r3, #0
 8005acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	f04f 0000 	mov.w	r0, #0
 8005ada:	f04f 0100 	mov.w	r1, #0
 8005ade:	0159      	lsls	r1, r3, #5
 8005ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae4:	0150      	lsls	r0, r2, #5
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4621      	mov	r1, r4
 8005aec:	1a51      	subs	r1, r2, r1
 8005aee:	6139      	str	r1, [r7, #16]
 8005af0:	4629      	mov	r1, r5
 8005af2:	eb63 0301 	sbc.w	r3, r3, r1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b04:	4659      	mov	r1, fp
 8005b06:	018b      	lsls	r3, r1, #6
 8005b08:	4651      	mov	r1, sl
 8005b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b0e:	4651      	mov	r1, sl
 8005b10:	018a      	lsls	r2, r1, #6
 8005b12:	4651      	mov	r1, sl
 8005b14:	ebb2 0801 	subs.w	r8, r2, r1
 8005b18:	4659      	mov	r1, fp
 8005b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b32:	4690      	mov	r8, r2
 8005b34:	4699      	mov	r9, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	eb18 0303 	adds.w	r3, r8, r3
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	462b      	mov	r3, r5
 8005b40:	eb49 0303 	adc.w	r3, r9, r3
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b52:	4629      	mov	r1, r5
 8005b54:	024b      	lsls	r3, r1, #9
 8005b56:	4621      	mov	r1, r4
 8005b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	024a      	lsls	r2, r1, #9
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b66:	2200      	movs	r2, #0
 8005b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b70:	f7fa fb2a 	bl	80001c8 <__aeabi_uldivmod>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4613      	mov	r3, r2
 8005b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b7c:	e058      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7e:	4b38      	ldr	r3, [pc, #224]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	099b      	lsrs	r3, r3, #6
 8005b84:	2200      	movs	r2, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	4611      	mov	r1, r2
 8005b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	2300      	movs	r3, #0
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	f04f 0000 	mov.w	r0, #0
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	0159      	lsls	r1, r3, #5
 8005ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005baa:	0150      	lsls	r0, r2, #5
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8005bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	00eb      	lsls	r3, r5, #3
 8005be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be6:	00e2      	lsls	r2, r4, #3
 8005be8:	4614      	mov	r4, r2
 8005bea:	461d      	mov	r5, r3
 8005bec:	4643      	mov	r3, r8
 8005bee:	18e3      	adds	r3, r4, r3
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	eb45 0303 	adc.w	r3, r5, r3
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c06:	4629      	mov	r1, r5
 8005c08:	028b      	lsls	r3, r1, #10
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c10:	4621      	mov	r1, r4
 8005c12:	028a      	lsls	r2, r1, #10
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	61fa      	str	r2, [r7, #28]
 8005c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c24:	f7fa fad0 	bl	80001c8 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3750      	adds	r7, #80	@ 0x50
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	007a1200 	.word	0x007a1200

08005c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c70:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000004 	.word	0x20000004

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c88:	f7ff fff0 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0a9b      	lsrs	r3, r3, #10
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4903      	ldr	r1, [pc, #12]	@ (8005ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	0800aa28 	.word	0x0800aa28

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d035      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cd4:	4b62      	ldr	r3, [pc, #392]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cda:	f7fb fc07 	bl	80014ec <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ce2:	f7fb fc03 	bl	80014ec <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0b0      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f0      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	019a      	lsls	r2, r3, #6
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	071b      	lsls	r3, r3, #28
 8005d0c:	4955      	ldr	r1, [pc, #340]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d14:	4b52      	ldr	r3, [pc, #328]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1a:	f7fb fbe7 	bl	80014ec <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d20:	e008      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d22:	f7fb fbe3 	bl	80014ec <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e090      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d34:	4b4b      	ldr	r3, [pc, #300]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f0      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8083 	beq.w	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	4b44      	ldr	r3, [pc, #272]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	4a43      	ldr	r2, [pc, #268]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d5e:	4b41      	ldr	r3, [pc, #260]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d76:	f7fb fbb9 	bl	80014ec <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7e:	f7fb fbb5 	bl	80014ec <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e062      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d90:	4b35      	ldr	r3, [pc, #212]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d9c:	4b31      	ldr	r3, [pc, #196]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d02f      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d028      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dba:	4b2a      	ldr	r3, [pc, #168]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dc4:	4b29      	ldr	r3, [pc, #164]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dca:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dd0:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dd6:	4b23      	ldr	r3, [pc, #140]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d114      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005de2:	f7fb fb83 	bl	80014ec <HAL_GetTick>
 8005de6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de8:	e00a      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dea:	f7fb fb7f 	bl	80014ec <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e02a      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	4b18      	ldr	r3, [pc, #96]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0ee      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e18:	d10d      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e1a:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2e:	490d      	ldr	r1, [pc, #52]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]
 8005e34:	e005      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e36:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e40:	6093      	str	r3, [r2, #8]
 8005e42:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e4e:	4905      	ldr	r1, [pc, #20]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	42470068 	.word	0x42470068
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40007000 	.word	0x40007000
 8005e6c:	42470e40 	.word	0x42470e40

08005e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d13f      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e8e:	4b24      	ldr	r3, [pc, #144]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e96:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d006      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ea4:	d12f      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ea8:	617b      	str	r3, [r7, #20]
          break;
 8005eaa:	e02f      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005eac:	4b1c      	ldr	r3, [pc, #112]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eb8:	d108      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eba:	4b19      	ldr	r3, [pc, #100]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec2:	4a19      	ldr	r2, [pc, #100]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e007      	b.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ecc:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed4:	4a15      	ldr	r2, [pc, #84]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005edc:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee2:	099b      	lsrs	r3, r3, #6
 8005ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ef6:	0f1b      	lsrs	r3, r3, #28
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f02:	617b      	str	r3, [r7, #20]
          break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
          break;
 8005f0a:	bf00      	nop
        }
      }
      break;
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005f0e:	bf00      	nop
    }
  }
  return frequency;
 8005f10:	697b      	ldr	r3, [r7, #20]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800
 8005f24:	00bb8000 	.word	0x00bb8000
 8005f28:	007a1200 	.word	0x007a1200
 8005f2c:	00f42400 	.word	0x00f42400

08005f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e07b      	b.n	800603a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f52:	d009      	beq.n	8005f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	61da      	str	r2, [r3, #28]
 8005f5a:	e005      	b.n	8005f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb f8f2 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fec:	ea42 0103 	orr.w	r1, r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	f003 0104 	and.w	r1, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600e:	f003 0210 	and.w	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e041      	b.n	80060d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d106      	bne.n	800606e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7fb f8c7 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 fad9 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e041      	b.n	8006176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f839 	bl	800617e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f000 fa8a 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d109      	bne.n	80061b8 <HAL_TIM_PWM_Start+0x24>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e022      	b.n	80061fe <HAL_TIM_PWM_Start+0x6a>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d109      	bne.n	80061d2 <HAL_TIM_PWM_Start+0x3e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	bf14      	ite	ne
 80061ca:	2301      	movne	r3, #1
 80061cc:	2300      	moveq	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	e015      	b.n	80061fe <HAL_TIM_PWM_Start+0x6a>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d109      	bne.n	80061ec <HAL_TIM_PWM_Start+0x58>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	bf14      	ite	ne
 80061e4:	2301      	movne	r3, #1
 80061e6:	2300      	moveq	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	e008      	b.n	80061fe <HAL_TIM_PWM_Start+0x6a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	bf14      	ite	ne
 80061f8:	2301      	movne	r3, #1
 80061fa:	2300      	moveq	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e07c      	b.n	8006300 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <HAL_TIM_PWM_Start+0x82>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006214:	e013      	b.n	800623e <HAL_TIM_PWM_Start+0xaa>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b04      	cmp	r3, #4
 800621a:	d104      	bne.n	8006226 <HAL_TIM_PWM_Start+0x92>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006224:	e00b      	b.n	800623e <HAL_TIM_PWM_Start+0xaa>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b08      	cmp	r3, #8
 800622a:	d104      	bne.n	8006236 <HAL_TIM_PWM_Start+0xa2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006234:	e003      	b.n	800623e <HAL_TIM_PWM_Start+0xaa>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fce6 	bl	8006c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2d      	ldr	r2, [pc, #180]	@ (8006308 <HAL_TIM_PWM_Start+0x174>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_PWM_Start+0xcc>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2c      	ldr	r2, [pc, #176]	@ (800630c <HAL_TIM_PWM_Start+0x178>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d101      	bne.n	8006264 <HAL_TIM_PWM_Start+0xd0>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <HAL_TIM_PWM_Start+0xd2>
 8006264:	2300      	movs	r3, #0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a22      	ldr	r2, [pc, #136]	@ (8006308 <HAL_TIM_PWM_Start+0x174>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d022      	beq.n	80062ca <HAL_TIM_PWM_Start+0x136>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628c:	d01d      	beq.n	80062ca <HAL_TIM_PWM_Start+0x136>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1f      	ldr	r2, [pc, #124]	@ (8006310 <HAL_TIM_PWM_Start+0x17c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d018      	beq.n	80062ca <HAL_TIM_PWM_Start+0x136>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1d      	ldr	r2, [pc, #116]	@ (8006314 <HAL_TIM_PWM_Start+0x180>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <HAL_TIM_PWM_Start+0x136>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <HAL_TIM_PWM_Start+0x184>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00e      	beq.n	80062ca <HAL_TIM_PWM_Start+0x136>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a16      	ldr	r2, [pc, #88]	@ (800630c <HAL_TIM_PWM_Start+0x178>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_TIM_PWM_Start+0x136>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a18      	ldr	r2, [pc, #96]	@ (800631c <HAL_TIM_PWM_Start+0x188>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d004      	beq.n	80062ca <HAL_TIM_PWM_Start+0x136>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a16      	ldr	r2, [pc, #88]	@ (8006320 <HAL_TIM_PWM_Start+0x18c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d111      	bne.n	80062ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d010      	beq.n	80062fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ec:	e007      	b.n	80062fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0201 	orr.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40014000 	.word	0x40014000
 8006320:	40001800 	.word	0x40001800

08006324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800633e:	2302      	movs	r3, #2
 8006340:	e0ae      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b0c      	cmp	r3, #12
 800634e:	f200 809f 	bhi.w	8006490 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006352:	a201      	add	r2, pc, #4	@ (adr r2, 8006358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	0800638d 	.word	0x0800638d
 800635c:	08006491 	.word	0x08006491
 8006360:	08006491 	.word	0x08006491
 8006364:	08006491 	.word	0x08006491
 8006368:	080063cd 	.word	0x080063cd
 800636c:	08006491 	.word	0x08006491
 8006370:	08006491 	.word	0x08006491
 8006374:	08006491 	.word	0x08006491
 8006378:	0800640f 	.word	0x0800640f
 800637c:	08006491 	.word	0x08006491
 8006380:	08006491 	.word	0x08006491
 8006384:	08006491 	.word	0x08006491
 8006388:	0800644f 	.word	0x0800644f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 f9f6 	bl	8006784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0208 	orr.w	r2, r2, #8
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0204 	bic.w	r2, r2, #4
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	619a      	str	r2, [r3, #24]
      break;
 80063ca:	e064      	b.n	8006496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fa46 	bl	8006864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6999      	ldr	r1, [r3, #24]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	619a      	str	r2, [r3, #24]
      break;
 800640c:	e043      	b.n	8006496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fa9b 	bl	8006950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0208 	orr.w	r2, r2, #8
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0204 	bic.w	r2, r2, #4
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	61da      	str	r2, [r3, #28]
      break;
 800644c:	e023      	b.n	8006496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 faef 	bl	8006a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69d9      	ldr	r1, [r3, #28]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	021a      	lsls	r2, r3, #8
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	61da      	str	r2, [r3, #28]
      break;
 800648e:	e002      	b.n	8006496 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
      break;
 8006494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_TIM_ConfigClockSource+0x1c>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e0b4      	b.n	800662e <HAL_TIM_ConfigClockSource+0x186>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064fc:	d03e      	beq.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
 80064fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006502:	f200 8087 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800650a:	f000 8086 	beq.w	800661a <HAL_TIM_ConfigClockSource+0x172>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006512:	d87f      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006514:	2b70      	cmp	r3, #112	@ 0x70
 8006516:	d01a      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xa6>
 8006518:	2b70      	cmp	r3, #112	@ 0x70
 800651a:	d87b      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 800651c:	2b60      	cmp	r3, #96	@ 0x60
 800651e:	d050      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006520:	2b60      	cmp	r3, #96	@ 0x60
 8006522:	d877      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006524:	2b50      	cmp	r3, #80	@ 0x50
 8006526:	d03c      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006528:	2b50      	cmp	r3, #80	@ 0x50
 800652a:	d873      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b40      	cmp	r3, #64	@ 0x40
 800652e:	d058      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006530:	2b40      	cmp	r3, #64	@ 0x40
 8006532:	d86f      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b30      	cmp	r3, #48	@ 0x30
 8006536:	d064      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 8006538:	2b30      	cmp	r3, #48	@ 0x30
 800653a:	d86b      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b20      	cmp	r3, #32
 800653e:	d060      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d867      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d05c      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 8006548:	2b10      	cmp	r3, #16
 800654a:	d05a      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	e062      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800655e:	f000 fb3b 	bl	8006bd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	609a      	str	r2, [r3, #8]
      break;
 800657a:	e04f      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800658c:	f000 fb24 	bl	8006bd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800659e:	609a      	str	r2, [r3, #8]
      break;
 80065a0:	e03c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 fa98 	bl	8006ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2150      	movs	r1, #80	@ 0x50
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 faf1 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e02c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 fab7 	bl	8006b42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2160      	movs	r1, #96	@ 0x60
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fae1 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 80065e0:	e01c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ee:	461a      	mov	r2, r3
 80065f0:	f000 fa78 	bl	8006ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2140      	movs	r1, #64	@ 0x40
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fad1 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 8006600:	e00c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f000 fac8 	bl	8006ba2 <TIM_ITRx_SetConfig>
      break;
 8006612:	e003      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e000      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800661a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a43      	ldr	r2, [pc, #268]	@ (8006758 <TIM_Base_SetConfig+0x120>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006656:	d00f      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a40      	ldr	r2, [pc, #256]	@ (800675c <TIM_Base_SetConfig+0x124>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3f      	ldr	r2, [pc, #252]	@ (8006760 <TIM_Base_SetConfig+0x128>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3e      	ldr	r2, [pc, #248]	@ (8006764 <TIM_Base_SetConfig+0x12c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3d      	ldr	r2, [pc, #244]	@ (8006768 <TIM_Base_SetConfig+0x130>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d108      	bne.n	800668a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a32      	ldr	r2, [pc, #200]	@ (8006758 <TIM_Base_SetConfig+0x120>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d02b      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006698:	d027      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2f      	ldr	r2, [pc, #188]	@ (800675c <TIM_Base_SetConfig+0x124>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d023      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006760 <TIM_Base_SetConfig+0x128>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01f      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006764 <TIM_Base_SetConfig+0x12c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01b      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006768 <TIM_Base_SetConfig+0x130>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d017      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2b      	ldr	r2, [pc, #172]	@ (800676c <TIM_Base_SetConfig+0x134>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006770 <TIM_Base_SetConfig+0x138>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00f      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a29      	ldr	r2, [pc, #164]	@ (8006774 <TIM_Base_SetConfig+0x13c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00b      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a28      	ldr	r2, [pc, #160]	@ (8006778 <TIM_Base_SetConfig+0x140>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a27      	ldr	r2, [pc, #156]	@ (800677c <TIM_Base_SetConfig+0x144>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a26      	ldr	r2, [pc, #152]	@ (8006780 <TIM_Base_SetConfig+0x148>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a0e      	ldr	r2, [pc, #56]	@ (8006758 <TIM_Base_SetConfig+0x120>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_Base_SetConfig+0xf2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a10      	ldr	r2, [pc, #64]	@ (8006768 <TIM_Base_SetConfig+0x130>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d103      	bne.n	8006732 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f043 0204 	orr.w	r2, r3, #4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40010000 	.word	0x40010000
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40010400 	.word	0x40010400
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800
 8006778:	40001800 	.word	0x40001800
 800677c:	40001c00 	.word	0x40001c00
 8006780:	40002000 	.word	0x40002000

08006784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f023 0201 	bic.w	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 0302 	bic.w	r3, r3, #2
 80067cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a20      	ldr	r2, [pc, #128]	@ (800685c <TIM_OC1_SetConfig+0xd8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_OC1_SetConfig+0x64>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006860 <TIM_OC1_SetConfig+0xdc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d10c      	bne.n	8006802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0308 	bic.w	r3, r3, #8
 80067ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 0304 	bic.w	r3, r3, #4
 8006800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a15      	ldr	r2, [pc, #84]	@ (800685c <TIM_OC1_SetConfig+0xd8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_OC1_SetConfig+0x8e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a14      	ldr	r2, [pc, #80]	@ (8006860 <TIM_OC1_SetConfig+0xdc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d111      	bne.n	8006836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40010000 	.word	0x40010000
 8006860:	40010400 	.word	0x40010400

08006864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f023 0210 	bic.w	r2, r3, #16
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f023 0320 	bic.w	r3, r3, #32
 80068ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a22      	ldr	r2, [pc, #136]	@ (8006948 <TIM_OC2_SetConfig+0xe4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC2_SetConfig+0x68>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a21      	ldr	r2, [pc, #132]	@ (800694c <TIM_OC2_SetConfig+0xe8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d10d      	bne.n	80068e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a17      	ldr	r2, [pc, #92]	@ (8006948 <TIM_OC2_SetConfig+0xe4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_OC2_SetConfig+0x94>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a16      	ldr	r2, [pc, #88]	@ (800694c <TIM_OC2_SetConfig+0xe8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d113      	bne.n	8006920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40010000 	.word	0x40010000
 800694c:	40010400 	.word	0x40010400

08006950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0303 	bic.w	r3, r3, #3
 8006986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a21      	ldr	r2, [pc, #132]	@ (8006a30 <TIM_OC3_SetConfig+0xe0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_OC3_SetConfig+0x66>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a20      	ldr	r2, [pc, #128]	@ (8006a34 <TIM_OC3_SetConfig+0xe4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d10d      	bne.n	80069d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a16      	ldr	r2, [pc, #88]	@ (8006a30 <TIM_OC3_SetConfig+0xe0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_OC3_SetConfig+0x92>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a15      	ldr	r2, [pc, #84]	@ (8006a34 <TIM_OC3_SetConfig+0xe4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d113      	bne.n	8006a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	621a      	str	r2, [r3, #32]
}
 8006a24:	bf00      	nop
 8006a26:	371c      	adds	r7, #28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40010400 	.word	0x40010400

08006a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	031b      	lsls	r3, r3, #12
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a12      	ldr	r2, [pc, #72]	@ (8006adc <TIM_OC4_SetConfig+0xa4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC4_SetConfig+0x68>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a11      	ldr	r2, [pc, #68]	@ (8006ae0 <TIM_OC4_SetConfig+0xa8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d109      	bne.n	8006ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	019b      	lsls	r3, r3, #6
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40010000 	.word	0x40010000
 8006ae0:	40010400 	.word	0x40010400

08006ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0201 	bic.w	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 030a 	bic.w	r3, r3, #10
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b087      	sub	sp, #28
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f023 0210 	bic.w	r2, r3, #16
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	031b      	lsls	r3, r3, #12
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f043 0307 	orr.w	r3, r3, #7
 8006bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	609a      	str	r2, [r3, #8]
}
 8006bcc:	bf00      	nop
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	021a      	lsls	r2, r3, #8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	621a      	str	r2, [r3, #32]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e05a      	b.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a21      	ldr	r2, [pc, #132]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc8:	d01d      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a18      	ldr	r2, [pc, #96]	@ (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a17      	ldr	r2, [pc, #92]	@ (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a15      	ldr	r2, [pc, #84]	@ (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d10c      	bne.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40000400 	.word	0x40000400
 8006d48:	40000800 	.word	0x40000800
 8006d4c:	40000c00 	.word	0x40000c00
 8006d50:	40010400 	.word	0x40010400
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40001800 	.word	0x40001800

08006d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	f107 001c 	add.w	r0, r7, #28
 8006d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d123      	bne.n	8006dbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d105      	bne.n	8006db2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f9dc 	bl	8007170 <USB_CoreReset>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e01b      	b.n	8006df6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9d0 	bl	8007170 <USB_CoreReset>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d106      	bne.n	8006dea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006de8:	e005      	b.n	8006df6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006df6:	7fbb      	ldrb	r3, [r7, #30]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10b      	bne.n	8006e14 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f043 0206 	orr.w	r2, r3, #6
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f043 0220 	orr.w	r2, r3, #32
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e20:	b004      	add	sp, #16
 8006e22:	4770      	bx	lr

08006e24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f043 0201 	orr.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d115      	bne.n	8006eb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e96:	200a      	movs	r0, #10
 8006e98:	f7fa fb34 	bl	8001504 <HAL_Delay>
      ms += 10U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	330a      	adds	r3, #10
 8006ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f956 	bl	8007154 <USB_GetMode>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d01e      	beq.n	8006eec <USB_SetCurrentMode+0x84>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006eb2:	d9f0      	bls.n	8006e96 <USB_SetCurrentMode+0x2e>
 8006eb4:	e01a      	b.n	8006eec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d115      	bne.n	8006ee8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ec8:	200a      	movs	r0, #10
 8006eca:	f7fa fb1b 	bl	8001504 <HAL_Delay>
      ms += 10U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	330a      	adds	r3, #10
 8006ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f93d 	bl	8007154 <USB_GetMode>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <USB_SetCurrentMode+0x84>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ee4:	d9f0      	bls.n	8006ec8 <USB_SetCurrentMode+0x60>
 8006ee6:	e001      	b.n	8006eec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e005      	b.n	8006ef8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ef0:	d101      	bne.n	8006ef6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f1a:	d901      	bls.n	8006f20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e01b      	b.n	8006f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	daf2      	bge.n	8006f0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	019b      	lsls	r3, r3, #6
 8006f30:	f043 0220 	orr.w	r2, r3, #32
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f44:	d901      	bls.n	8006f4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e006      	b.n	8006f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d0f0      	beq.n	8006f38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f7c:	d901      	bls.n	8006f82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e018      	b.n	8006fb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	daf2      	bge.n	8006f70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2210      	movs	r2, #16
 8006f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fa0:	d901      	bls.n	8006fa6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e006      	b.n	8006fb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d0f0      	beq.n	8006f94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	@ 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4611      	mov	r1, r2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	460b      	mov	r3, r1
 8006fd0:	71fb      	strb	r3, [r7, #7]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d123      	bne.n	800702e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fe6:	88bb      	ldrh	r3, [r7, #4]
 8006fe8:	3303      	adds	r3, #3
 8006fea:	089b      	lsrs	r3, r3, #2
 8006fec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e018      	b.n	8007026 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	031a      	lsls	r2, r3, #12
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007000:	461a      	mov	r2, r3
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	3301      	adds	r3, #1
 800700c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	3301      	adds	r3, #1
 8007012:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	3301      	adds	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	3301      	adds	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3e2      	bcc.n	8006ff4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3724      	adds	r7, #36	@ 0x24
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800703c:	b480      	push	{r7}
 800703e:	b08b      	sub	sp, #44	@ 0x2c
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	089b      	lsrs	r3, r3, #2
 8007056:	b29b      	uxth	r3, r3
 8007058:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007062:	2300      	movs	r3, #0
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	e014      	b.n	8007092 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	601a      	str	r2, [r3, #0]
    pDest++;
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	3301      	adds	r3, #1
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	3301      	adds	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	3301      	adds	r3, #1
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	3301      	adds	r3, #1
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	3301      	adds	r3, #1
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	6a3a      	ldr	r2, [r7, #32]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	429a      	cmp	r2, r3
 8007098:	d3e6      	bcc.n	8007068 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800709a:	8bfb      	ldrh	r3, [r7, #30]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01e      	beq.n	80070de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070aa:	461a      	mov	r2, r3
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	701a      	strb	r2, [r3, #0]
      i++;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	3301      	adds	r3, #1
 80070ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	3301      	adds	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80070d2:	8bfb      	ldrh	r3, [r7, #30]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070d8:	8bfb      	ldrh	r3, [r7, #30]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1ea      	bne.n	80070b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	372c      	adds	r7, #44	@ 0x2c
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4013      	ands	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007104:	68fb      	ldr	r3, [r7, #12]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	4013      	ands	r3, r2
 8007144:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007146:	68bb      	ldr	r3, [r7, #8]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0301 	and.w	r3, r3, #1
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007188:	d901      	bls.n	800718e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e022      	b.n	80071d4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	daf2      	bge.n	800717c <USB_CoreReset+0xc>

  count = 10U;
 8007196:	230a      	movs	r3, #10
 8007198:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800719a:	e002      	b.n	80071a2 <USB_CoreReset+0x32>
  {
    count--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3b01      	subs	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f9      	bne.n	800719c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f043 0201 	orr.w	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071c0:	d901      	bls.n	80071c6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e006      	b.n	80071d4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d0f0      	beq.n	80071b4 <USB_CoreReset+0x44>

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071e0:	b084      	sub	sp, #16
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007200:	461a      	mov	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d119      	bne.n	800726a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800723a:	2b01      	cmp	r3, #1
 800723c:	d10a      	bne.n	8007254 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800724c:	f043 0304 	orr.w	r3, r3, #4
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e014      	b.n	800727e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007262:	f023 0304 	bic.w	r3, r3, #4
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	e009      	b.n	800727e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007278:	f023 0304 	bic.w	r3, r3, #4
 800727c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800727e:	2110      	movs	r1, #16
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fe3d 	bl	8006f00 <USB_FlushTxFifo>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fe67 	bl	8006f64 <USB_FlushRxFifo>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	e015      	b.n	80072d2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072b2:	461a      	mov	r2, r3
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c6:	461a      	mov	r2, r3
 80072c8:	2300      	movs	r3, #0
 80072ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3301      	adds	r3, #1
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072d6:	461a      	mov	r2, r3
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4293      	cmp	r3, r2
 80072dc:	d3e3      	bcc.n	80072a6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072ea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a18      	ldr	r2, [pc, #96]	@ (8007350 <USB_HostInit+0x170>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d10b      	bne.n	800730c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072fa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a15      	ldr	r2, [pc, #84]	@ (8007354 <USB_HostInit+0x174>)
 8007300:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a14      	ldr	r2, [pc, #80]	@ (8007358 <USB_HostInit+0x178>)
 8007306:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800730a:	e009      	b.n	8007320 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2280      	movs	r2, #128	@ 0x80
 8007310:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a11      	ldr	r2, [pc, #68]	@ (800735c <USB_HostInit+0x17c>)
 8007316:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a11      	ldr	r2, [pc, #68]	@ (8007360 <USB_HostInit+0x180>)
 800731c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007320:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	f043 0210 	orr.w	r2, r3, #16
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <USB_HostInit+0x184>)
 800733a:	4313      	orrs	r3, r2
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800734c:	b004      	add	sp, #16
 800734e:	4770      	bx	lr
 8007350:	40040000 	.word	0x40040000
 8007354:	01000200 	.word	0x01000200
 8007358:	00e00300 	.word	0x00e00300
 800735c:	00600080 	.word	0x00600080
 8007360:	004000e0 	.word	0x004000e0
 8007364:	a3200008 	.word	0xa3200008

08007368 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007386:	f023 0303 	bic.w	r3, r3, #3
 800738a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80073a0:	4313      	orrs	r3, r2
 80073a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073b0:	461a      	mov	r2, r3
 80073b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073b6:	6053      	str	r3, [r2, #4]
 80073b8:	e00c      	b.n	80073d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d107      	bne.n	80073d0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073c6:	461a      	mov	r2, r3
 80073c8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80073cc:	6053      	str	r3, [r2, #4]
 80073ce:	e001      	b.n	80073d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007402:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800740c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007410:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007412:	2064      	movs	r0, #100	@ 0x64
 8007414:	f7fa f876 	bl	8001504 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007424:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007426:	200a      	movs	r0, #10
 8007428:	f7fa f86c 	bl	8001504 <HAL_Delay>

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800745a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <USB_DriveVbus+0x44>
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d106      	bne.n	800747a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007474:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007478:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007484:	d109      	bne.n	800749a <USB_DriveVbus+0x64>
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007498:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	0c5b      	lsrs	r3, r3, #17
 80074c6:	f003 0303 	and.w	r3, r3, #3
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	b29b      	uxth	r3, r3
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	4608      	mov	r0, r1
 8007502:	4611      	mov	r1, r2
 8007504:	461a      	mov	r2, r3
 8007506:	4603      	mov	r3, r0
 8007508:	70fb      	strb	r3, [r7, #3]
 800750a:	460b      	mov	r3, r1
 800750c:	70bb      	strb	r3, [r7, #2]
 800750e:	4613      	mov	r3, r2
 8007510:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007526:	461a      	mov	r2, r3
 8007528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800752c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800752e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007532:	2b03      	cmp	r3, #3
 8007534:	d87c      	bhi.n	8007630 <USB_HC_Init+0x138>
 8007536:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <USB_HC_Init+0x44>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	0800754d 	.word	0x0800754d
 8007540:	080075f3 	.word	0x080075f3
 8007544:	0800754d 	.word	0x0800754d
 8007548:	080075b5 	.word	0x080075b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	4413      	add	r3, r2
 8007554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007558:	461a      	mov	r2, r3
 800755a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800755e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007560:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007564:	2b00      	cmp	r3, #0
 8007566:	da10      	bge.n	800758a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	4413      	add	r3, r2
 8007570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	440a      	add	r2, r1
 800757e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007586:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007588:	e055      	b.n	8007636 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a6f      	ldr	r2, [pc, #444]	@ (800774c <USB_HC_Init+0x254>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d151      	bne.n	8007636 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	4413      	add	r3, r2
 800759a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	78fa      	ldrb	r2, [r7, #3]
 80075a2:	0151      	lsls	r1, r2, #5
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	440a      	add	r2, r1
 80075a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075b0:	60d3      	str	r3, [r2, #12]
      break;
 80075b2:	e040      	b.n	8007636 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075c0:	461a      	mov	r2, r3
 80075c2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80075c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	da34      	bge.n	800763a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80075f0:	e023      	b.n	800763a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075fe:	461a      	mov	r2, r3
 8007600:	f240 2325 	movw	r3, #549	@ 0x225
 8007604:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007606:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800760a:	2b00      	cmp	r3, #0
 800760c:	da17      	bge.n	800763e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4413      	add	r3, r2
 8007616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	78fa      	ldrb	r2, [r7, #3]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	440a      	add	r2, r1
 8007624:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007628:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800762c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800762e:	e006      	b.n	800763e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	77fb      	strb	r3, [r7, #31]
      break;
 8007634:	e004      	b.n	8007640 <USB_HC_Init+0x148>
      break;
 8007636:	bf00      	nop
 8007638:	e002      	b.n	8007640 <USB_HC_Init+0x148>
      break;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <USB_HC_Init+0x148>
      break;
 800763e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4413      	add	r3, r2
 8007648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764c:	461a      	mov	r2, r3
 800764e:	2300      	movs	r3, #0
 8007650:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	440a      	add	r2, r1
 8007668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800766c:	f043 0302 	orr.w	r3, r3, #2
 8007670:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007678:	699a      	ldr	r2, [r3, #24]
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	2101      	movs	r1, #1
 8007682:	fa01 f303 	lsl.w	r3, r1, r3
 8007686:	6939      	ldr	r1, [r7, #16]
 8007688:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800768c:	4313      	orrs	r3, r2
 800768e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800769c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	da03      	bge.n	80076ac <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80076a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e001      	b.n	80076b0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fef9 	bl	80074a8 <USB_GetHostSpeed>
 80076b6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80076b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d106      	bne.n	80076ce <USB_HC_Init+0x1d6>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d003      	beq.n	80076ce <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80076c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e001      	b.n	80076d2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076d2:	787b      	ldrb	r3, [r7, #1]
 80076d4:	059b      	lsls	r3, r3, #22
 80076d6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076da:	78bb      	ldrb	r3, [r7, #2]
 80076dc:	02db      	lsls	r3, r3, #11
 80076de:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076e8:	049b      	lsls	r3, r3, #18
 80076ea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80076f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80076f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076f6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	440a      	add	r2, r1
 8007708:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800770c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007710:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007712:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007716:	2b03      	cmp	r3, #3
 8007718:	d003      	beq.n	8007722 <USB_HC_Init+0x22a>
 800771a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d10f      	bne.n	8007742 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	4413      	add	r3, r2
 800772a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	440a      	add	r2, r1
 8007738:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800773c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007740:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007742:	7ffb      	ldrb	r3, [r7, #31]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40040000 	.word	0x40040000

08007750 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	@ 0x30
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	4613      	mov	r3, r2
 800775c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800776c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4a5d      	ldr	r2, [pc, #372]	@ (80078e8 <USB_HC_StartXfer+0x198>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d12f      	bne.n	80077d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d11c      	bne.n	80077b6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7c9b      	ldrb	r3, [r3, #18]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <USB_HC_StartXfer+0x3c>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	7c9b      	ldrb	r3, [r3, #18]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d124      	bne.n	80077d6 <USB_HC_StartXfer+0x86>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	799b      	ldrb	r3, [r3, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d120      	bne.n	80077d6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	6a3a      	ldr	r2, [r7, #32]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b2:	60d3      	str	r3, [r2, #12]
 80077b4:	e00f      	b.n	80077d6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	791b      	ldrb	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10b      	bne.n	80077d6 <USB_HC_StartXfer+0x86>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	795b      	ldrb	r3, [r3, #5]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d107      	bne.n	80077d6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	4619      	mov	r1, r3
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fb6b 	bl	8007ea8 <USB_DoPing>
        return HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e232      	b.n	8007c3c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	799b      	ldrb	r3, [r3, #6]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d158      	bne.n	8007890 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80077de:	2301      	movs	r3, #1
 80077e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	78db      	ldrb	r3, [r3, #3]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	8a92      	ldrh	r2, [r2, #20]
 80077f0:	fb03 f202 	mul.w	r2, r3, r2
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	61da      	str	r2, [r3, #28]
 80077f8:	e07c      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	7c9b      	ldrb	r3, [r3, #18]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d130      	bne.n	8007864 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	2bbc      	cmp	r3, #188	@ 0xbc
 8007808:	d918      	bls.n	800783c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	8a9b      	ldrh	r3, [r3, #20]
 800780e:	461a      	mov	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d003      	beq.n	800782c <USB_HC_StartXfer+0xdc>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d103      	bne.n	8007834 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2202      	movs	r2, #2
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	e05f      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2201      	movs	r2, #1
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	e05b      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6a1a      	ldr	r2, [r3, #32]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d007      	beq.n	800785c <USB_HC_StartXfer+0x10c>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d003      	beq.n	800785c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2204      	movs	r2, #4
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	e04b      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2203      	movs	r2, #3
 8007860:	60da      	str	r2, [r3, #12]
 8007862:	e047      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d10d      	bne.n	8007886 <USB_HC_StartXfer+0x136>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	8a92      	ldrh	r2, [r2, #20]
 8007872:	4293      	cmp	r3, r2
 8007874:	d907      	bls.n	8007886 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007876:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	8a92      	ldrh	r2, [r2, #20]
 800787c:	fb03 f202 	mul.w	r2, r3, r2
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	61da      	str	r2, [r3, #28]
 8007884:	e036      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	61da      	str	r2, [r3, #28]
 800788e:	e031      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d018      	beq.n	80078ca <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	8a92      	ldrh	r2, [r2, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	3b01      	subs	r3, #1
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	8a92      	ldrh	r2, [r2, #20]
 80078a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80078ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80078b0:	8b7b      	ldrh	r3, [r7, #26]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d90b      	bls.n	80078ce <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80078b6:	8b7b      	ldrh	r3, [r7, #26]
 80078b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	8a92      	ldrh	r2, [r2, #20]
 80078c0:	fb03 f202 	mul.w	r2, r3, r2
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	61da      	str	r2, [r3, #28]
 80078c8:	e001      	b.n	80078ce <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80078ca:	2301      	movs	r3, #1
 80078cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	78db      	ldrb	r3, [r3, #3]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	8a92      	ldrh	r2, [r2, #20]
 80078dc:	fb03 f202 	mul.w	r2, r3, r2
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	61da      	str	r2, [r3, #28]
 80078e4:	e006      	b.n	80078f4 <USB_HC_StartXfer+0x1a4>
 80078e6:	bf00      	nop
 80078e8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6a1a      	ldr	r2, [r3, #32]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078fe:	04d9      	lsls	r1, r3, #19
 8007900:	4ba3      	ldr	r3, [pc, #652]	@ (8007b90 <USB_HC_StartXfer+0x440>)
 8007902:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007904:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	7d9b      	ldrb	r3, [r3, #22]
 800790a:	075b      	lsls	r3, r3, #29
 800790c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	0148      	lsls	r0, r1, #5
 8007914:	6a39      	ldr	r1, [r7, #32]
 8007916:	4401      	add	r1, r0
 8007918:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800791c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800791e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6999      	ldr	r1, [r3, #24]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	4413      	add	r3, r2
 8007932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007936:	460a      	mov	r2, r1
 8007938:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	bf0c      	ite	eq
 800794a:	2301      	moveq	r3, #1
 800794c:	2300      	movne	r3, #0
 800794e:	b2db      	uxtb	r3, r3
 8007950:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	4413      	add	r3, r2
 800795a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	6a3a      	ldr	r2, [r7, #32]
 8007966:	440a      	add	r2, r1
 8007968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800796c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007970:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	4413      	add	r3, r2
 800797a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	7e7b      	ldrb	r3, [r7, #25]
 8007982:	075b      	lsls	r3, r3, #29
 8007984:	69f9      	ldr	r1, [r7, #28]
 8007986:	0148      	lsls	r0, r1, #5
 8007988:	6a39      	ldr	r1, [r7, #32]
 800798a:	4401      	add	r1, r0
 800798c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007990:	4313      	orrs	r3, r2
 8007992:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	799b      	ldrb	r3, [r3, #6]
 8007998:	2b01      	cmp	r3, #1
 800799a:	f040 80c3 	bne.w	8007b24 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	7c5b      	ldrb	r3, [r3, #17]
 80079a2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079a8:	4313      	orrs	r3, r2
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80079b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079ba:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	6a3a      	ldr	r2, [r7, #32]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80079da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	79db      	ldrb	r3, [r3, #7]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d123      	bne.n	8007a2c <USB_HC_StartXfer+0x2dc>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	78db      	ldrb	r3, [r3, #3]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d11f      	bne.n	8007a2c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a0a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a2a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	7c9b      	ldrb	r3, [r3, #18]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d003      	beq.n	8007a3c <USB_HC_StartXfer+0x2ec>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	7c9b      	ldrb	r3, [r3, #18]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d117      	bne.n	8007a6c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d113      	bne.n	8007a6c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	78db      	ldrb	r3, [r3, #3]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d10f      	bne.n	8007a6c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a6a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	7c9b      	ldrb	r3, [r3, #18]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d162      	bne.n	8007b3a <USB_HC_StartXfer+0x3ea>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	78db      	ldrb	r3, [r3, #3]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d15e      	bne.n	8007b3a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d858      	bhi.n	8007b38 <USB_HC_StartXfer+0x3e8>
 8007a86:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <USB_HC_StartXfer+0x33c>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007abf 	.word	0x08007abf
 8007a94:	08007ae1 	.word	0x08007ae1
 8007a98:	08007b03 	.word	0x08007b03
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	6a3a      	ldr	r2, [r7, #32]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aba:	6053      	str	r3, [r2, #4]
          break;
 8007abc:	e03d      	b.n	8007b3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	6a3a      	ldr	r2, [r7, #32]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ad8:	f043 030e 	orr.w	r3, r3, #14
 8007adc:	6053      	str	r3, [r2, #4]
          break;
 8007ade:	e02c      	b.n	8007b3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	6a3a      	ldr	r2, [r7, #32]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007afe:	6053      	str	r3, [r2, #4]
          break;
 8007b00:	e01b      	b.n	8007b3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	6a3a      	ldr	r2, [r7, #32]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b20:	6053      	str	r3, [r2, #4]
          break;
 8007b22:	e00a      	b.n	8007b3a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b30:	461a      	mov	r2, r3
 8007b32:	2300      	movs	r3, #0
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	e000      	b.n	8007b3a <USB_HC_StartXfer+0x3ea>
          break;
 8007b38:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b50:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	78db      	ldrb	r3, [r3, #3]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	e003      	b.n	8007b6c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b6a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b72:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b80:	461a      	mov	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e055      	b.n	8007c3c <USB_HC_StartXfer+0x4ec>
 8007b90:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	78db      	ldrb	r3, [r3, #3]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d14e      	bne.n	8007c3a <USB_HC_StartXfer+0x4ea>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d04a      	beq.n	8007c3a <USB_HC_StartXfer+0x4ea>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	79db      	ldrb	r3, [r3, #7]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d146      	bne.n	8007c3a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	7c9b      	ldrb	r3, [r3, #18]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d831      	bhi.n	8007c18 <USB_HC_StartXfer+0x4c8>
 8007bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bbc <USB_HC_StartXfer+0x46c>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bf1 	.word	0x08007bf1
 8007bc4:	08007bcd 	.word	0x08007bcd
 8007bc8:	08007bf1 	.word	0x08007bf1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	3303      	adds	r3, #3
 8007bd2:	089b      	lsrs	r3, r3, #2
 8007bd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007bd6:	8afa      	ldrh	r2, [r7, #22]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d91c      	bls.n	8007c1c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	f043 0220 	orr.w	r2, r3, #32
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	619a      	str	r2, [r3, #24]
        }
        break;
 8007bee:	e015      	b.n	8007c1c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	3303      	adds	r3, #3
 8007bf6:	089b      	lsrs	r3, r3, #2
 8007bf8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007bfa:	8afa      	ldrh	r2, [r7, #22]
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d90a      	bls.n	8007c20 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c16:	e003      	b.n	8007c20 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007c18:	bf00      	nop
 8007c1a:	e002      	b.n	8007c22 <USB_HC_StartXfer+0x4d2>
        break;
 8007c1c:	bf00      	nop
 8007c1e:	e000      	b.n	8007c22 <USB_HC_StartXfer+0x4d2>
        break;
 8007c20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6999      	ldr	r1, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	785a      	ldrb	r2, [r3, #1]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2000      	movs	r0, #0
 8007c32:	9000      	str	r0, [sp, #0]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff f9c3 	bl	8006fc0 <USB_WritePacket>
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3728      	adds	r7, #40	@ 0x28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	b29b      	uxth	r3, r3
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b089      	sub	sp, #36	@ 0x24
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	0c9b      	lsrs	r3, r3, #18
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	0fdb      	lsrs	r3, r3, #31
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	0fdb      	lsrs	r3, r3, #31
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d10d      	bne.n	8007ce8 <USB_HC_Halt+0x82>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <USB_HC_Halt+0x82>
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d002      	beq.n	8007ce4 <USB_HC_Halt+0x7e>
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d101      	bne.n	8007ce8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e0d8      	b.n	8007e9a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <USB_HC_Halt+0x8e>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d173      	bne.n	8007ddc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d14a      	bne.n	8007db6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d133      	bne.n	8007d94 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	0151      	lsls	r1, r2, #5
 8007d3e:	69fa      	ldr	r2, [r7, #28]
 8007d40:	440a      	add	r2, r1
 8007d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d4a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d6a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d78:	d82e      	bhi.n	8007dd8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d90:	d0ec      	beq.n	8007d6c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d92:	e081      	b.n	8007e98 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007db2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007db4:	e070      	b.n	8007e98 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dd4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dd6:	e05f      	b.n	8007e98 <USB_HC_Halt+0x232>
            break;
 8007dd8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dda:	e05d      	b.n	8007e98 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	0151      	lsls	r1, r2, #5
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	440a      	add	r2, r1
 8007df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007df6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dfa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d133      	bne.n	8007e74 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	0151      	lsls	r1, r2, #5
 8007e1e:	69fa      	ldr	r2, [r7, #28]
 8007e20:	440a      	add	r2, r1
 8007e22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e58:	d81d      	bhi.n	8007e96 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e70:	d0ec      	beq.n	8007e4c <USB_HC_Halt+0x1e6>
 8007e72:	e011      	b.n	8007e98 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	e000      	b.n	8007e98 <USB_HC_Halt+0x232>
          break;
 8007e96:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3724      	adds	r7, #36	@ 0x24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	04da      	lsls	r2, r3, #19
 8007ec4:	4b15      	ldr	r3, [pc, #84]	@ (8007f1c <USB_DoPing+0x74>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ed4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ed8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ef0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ef8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f06:	461a      	mov	r2, r3
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	1ff80000 	.word	0x1ff80000

08007f20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fe ff86 	bl	8006e46 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f3a:	2110      	movs	r1, #16
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7fe ffdf 	bl	8006f00 <USB_FlushTxFifo>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff f809 	bl	8006f64 <USB_FlushRxFifo>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	e01f      	b.n	8007fa2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f96:	461a      	mov	r2, r3
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b0f      	cmp	r3, #15
 8007fa6:	d9dc      	bls.n	8007f62 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61bb      	str	r3, [r7, #24]
 8007fac:	e034      	b.n	8008018 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fd4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ff4:	d80c      	bhi.n	8008010 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800800c:	d0ec      	beq.n	8007fe8 <USB_StopHost+0xc8>
 800800e:	e000      	b.n	8008012 <USB_StopHost+0xf2>
        break;
 8008010:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	3301      	adds	r3, #1
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d9c7      	bls.n	8007fae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008024:	461a      	mov	r2, r3
 8008026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800802a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008032:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fe fef5 	bl	8006e24 <USB_EnableGlobalInt>

  return ret;
 800803a:	7ffb      	ldrb	r3, [r7, #31]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b089      	sub	sp, #36	@ 0x24
 8008048:	af04      	add	r7, sp, #16
 800804a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800804c:	2301      	movs	r3, #1
 800804e:	2202      	movs	r2, #2
 8008050:	2102      	movs	r1, #2
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fc83 	bl	800895e <USBH_FindInterface>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2bff      	cmp	r3, #255	@ 0xff
 8008060:	d002      	beq.n	8008068 <USBH_CDC_InterfaceInit+0x24>
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d901      	bls.n	800806c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008068:	2302      	movs	r3, #2
 800806a:	e13d      	b.n	80082e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc58 	bl	8008926 <USBH_SelectInterface>
 8008076:	4603      	mov	r3, r0
 8008078:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008080:	2302      	movs	r3, #2
 8008082:	e131      	b.n	80082e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800808a:	2050      	movs	r0, #80	@ 0x50
 800808c:	f002 fb6a 	bl	800a764 <malloc>
 8008090:	4603      	mov	r3, r0
 8008092:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80080a4:	2302      	movs	r3, #2
 80080a6:	e11f      	b.n	80082e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80080a8:	2250      	movs	r2, #80	@ 0x50
 80080aa:	2100      	movs	r1, #0
 80080ac:	68b8      	ldr	r0, [r7, #8]
 80080ae:	f002 fc17 	bl	800a8e0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	211a      	movs	r1, #26
 80080b8:	fb01 f303 	mul.w	r3, r1, r3
 80080bc:	4413      	add	r3, r2
 80080be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	da15      	bge.n	80080f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	211a      	movs	r1, #26
 80080d0:	fb01 f303 	mul.w	r3, r1, r3
 80080d4:	4413      	add	r3, r2
 80080d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	211a      	movs	r1, #26
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80080f0:	881a      	ldrh	r2, [r3, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 ffc4 	bl	800a08a <USBH_AllocPipe>
 8008102:	4603      	mov	r3, r0
 8008104:	461a      	mov	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	7819      	ldrb	r1, [r3, #0]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	7858      	ldrb	r0, [r3, #1]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	8952      	ldrh	r2, [r2, #10]
 8008122:	9202      	str	r2, [sp, #8]
 8008124:	2203      	movs	r2, #3
 8008126:	9201      	str	r2, [sp, #4]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	4623      	mov	r3, r4
 800812c:	4602      	mov	r2, r0
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 ff7c 	bl	800a02c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2200      	movs	r2, #0
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f002 fa8b 	bl	800a658 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008142:	2300      	movs	r3, #0
 8008144:	2200      	movs	r2, #0
 8008146:	210a      	movs	r1, #10
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fc08 	bl	800895e <USBH_FindInterface>
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2bff      	cmp	r3, #255	@ 0xff
 8008156:	d002      	beq.n	800815e <USBH_CDC_InterfaceInit+0x11a>
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d901      	bls.n	8008162 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	e0c2      	b.n	80082e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	211a      	movs	r1, #26
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	4413      	add	r3, r2
 800816e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b25b      	sxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	da16      	bge.n	80081a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	211a      	movs	r1, #26
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	4413      	add	r3, r2
 8008186:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	211a      	movs	r1, #26
 8008196:	fb01 f303 	mul.w	r3, r1, r3
 800819a:	4413      	add	r3, r2
 800819c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081a0:	881a      	ldrh	r2, [r3, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	835a      	strh	r2, [r3, #26]
 80081a6:	e015      	b.n	80081d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	211a      	movs	r1, #26
 80081ae:	fb01 f303 	mul.w	r3, r1, r3
 80081b2:	4413      	add	r3, r2
 80081b4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	211a      	movs	r1, #26
 80081c4:	fb01 f303 	mul.w	r3, r1, r3
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081ce:	881a      	ldrh	r2, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	211a      	movs	r1, #26
 80081da:	fb01 f303 	mul.w	r3, r1, r3
 80081de:	4413      	add	r3, r2
 80081e0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b25b      	sxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	da16      	bge.n	800821a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	211a      	movs	r1, #26
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	211a      	movs	r1, #26
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	4413      	add	r3, r2
 800820e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008212:	881a      	ldrh	r2, [r3, #0]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	835a      	strh	r2, [r3, #26]
 8008218:	e015      	b.n	8008246 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	211a      	movs	r1, #26
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	4413      	add	r3, r2
 8008226:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800822a:	781a      	ldrb	r2, [r3, #0]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	211a      	movs	r1, #26
 8008236:	fb01 f303 	mul.w	r3, r1, r3
 800823a:	4413      	add	r3, r2
 800823c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008240:	881a      	ldrh	r2, [r3, #0]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	7b9b      	ldrb	r3, [r3, #14]
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 ff1c 	bl	800a08a <USBH_AllocPipe>
 8008252:	4603      	mov	r3, r0
 8008254:	461a      	mov	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	7bdb      	ldrb	r3, [r3, #15]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 ff12 	bl	800a08a <USBH_AllocPipe>
 8008266:	4603      	mov	r3, r0
 8008268:	461a      	mov	r2, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	7b59      	ldrb	r1, [r3, #13]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	7b98      	ldrb	r0, [r3, #14]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	8b12      	ldrh	r2, [r2, #24]
 8008286:	9202      	str	r2, [sp, #8]
 8008288:	2202      	movs	r2, #2
 800828a:	9201      	str	r2, [sp, #4]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	4623      	mov	r3, r4
 8008290:	4602      	mov	r2, r0
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 feca 	bl	800a02c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	7b19      	ldrb	r1, [r3, #12]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	7bd8      	ldrb	r0, [r3, #15]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	8b52      	ldrh	r2, [r2, #26]
 80082b0:	9202      	str	r2, [sp, #8]
 80082b2:	2202      	movs	r2, #2
 80082b4:	9201      	str	r2, [sp, #4]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	4623      	mov	r3, r4
 80082ba:	4602      	mov	r2, r0
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 feb5 	bl	800a02c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	7b5b      	ldrb	r3, [r3, #13]
 80082ce:	2200      	movs	r2, #0
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f002 f9c0 	bl	800a658 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	7b1b      	ldrb	r3, [r3, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f002 f9b9 	bl	800a658 <USBH_LL_SetToggle>

  return USBH_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd90      	pop	{r4, r7, pc}

080082f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00e      	beq.n	8008328 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 feaa 	bl	800a06a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fed5 	bl	800a0cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	7b1b      	ldrb	r3, [r3, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00e      	beq.n	800834e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	7b1b      	ldrb	r3, [r3, #12]
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fe97 	bl	800a06a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	7b1b      	ldrb	r3, [r3, #12]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fec2 	bl	800a0cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	7b5b      	ldrb	r3, [r3, #13]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00e      	beq.n	8008374 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	7b5b      	ldrb	r3, [r3, #13]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fe84 	bl	800a06a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	7b5b      	ldrb	r3, [r3, #13]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 feaf 	bl	800a0cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	4618      	mov	r0, r3
 800838a:	f002 f9f3 	bl	800a774 <free>
    phost->pActiveClass->pData = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008394:	2200      	movs	r2, #0
 8008396:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3340      	adds	r3, #64	@ 0x40
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8b1 	bl	8008522 <GetLineCoding>
 80083c0:	4603      	mov	r3, r0
 80083c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80083d0:	2102      	movs	r1, #2
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80083d6:	7afb      	ldrb	r3, [r7, #11]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008400:	2b04      	cmp	r3, #4
 8008402:	d877      	bhi.n	80084f4 <USBH_CDC_Process+0x114>
 8008404:	a201      	add	r2, pc, #4	@ (adr r2, 800840c <USBH_CDC_Process+0x2c>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	08008421 	.word	0x08008421
 8008410:	08008427 	.word	0x08008427
 8008414:	08008457 	.word	0x08008457
 8008418:	080084cb 	.word	0x080084cb
 800841c:	080084d9 	.word	0x080084d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]
      break;
 8008424:	e06d      	b.n	8008502 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f897 	bl	8008560 <SetLineCoding>
 8008432:	4603      	mov	r3, r0
 8008434:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008444:	e058      	b.n	80084f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d055      	beq.n	80084f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2204      	movs	r2, #4
 8008450:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008454:	e050      	b.n	80084f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	3340      	adds	r3, #64	@ 0x40
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f860 	bl	8008522 <GetLineCoding>
 8008462:	4603      	mov	r3, r0
 8008464:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d126      	bne.n	80084ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d13b      	bne.n	80084fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800848e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008490:	429a      	cmp	r2, r3
 8008492:	d133      	bne.n	80084fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800849e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d12b      	bne.n	80084fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d124      	bne.n	80084fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f958 	bl	8008768 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084b8:	e020      	b.n	80084fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d01d      	beq.n	80084fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2204      	movs	r2, #4
 80084c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80084c8:	e018      	b.n	80084fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f867 	bl	800859e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f8da 	bl	800868a <CDC_ProcessReception>
      break;
 80084d6:	e014      	b.n	8008502 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80084d8:	2100      	movs	r1, #0
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 f81e 	bl	800951c <USBH_ClrFeature>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80084f2:	e005      	b.n	8008500 <USBH_CDC_Process+0x120>

    default:
      break;
 80084f4:	bf00      	nop
 80084f6:	e004      	b.n	8008502 <USBH_CDC_Process+0x122>
      break;
 80084f8:	bf00      	nop
 80084fa:	e002      	b.n	8008502 <USBH_CDC_Process+0x122>
      break;
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <USBH_CDC_Process+0x122>
      break;
 8008500:	bf00      	nop

  }

  return status;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	22a1      	movs	r2, #161	@ 0xa1
 8008530:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2221      	movs	r2, #33	@ 0x21
 8008536:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2207      	movs	r2, #7
 8008548:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2207      	movs	r2, #7
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 fb17 	bl	8009b84 <USBH_CtlReq>
 8008556:	4603      	mov	r3, r0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2221      	movs	r2, #33	@ 0x21
 800856e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2220      	movs	r2, #32
 8008574:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2207      	movs	r2, #7
 8008586:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2207      	movs	r2, #7
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 faf8 	bl	8009b84 <USBH_CtlReq>
 8008594:	4603      	mov	r3, r0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b086      	sub	sp, #24
 80085a2:	af02      	add	r7, sp, #8
 80085a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d002      	beq.n	80085c4 <CDC_ProcessTransmission+0x26>
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d023      	beq.n	800860a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80085c2:	e05e      	b.n	8008682 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	8b12      	ldrh	r2, [r2, #24]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d90b      	bls.n	80085e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	69d9      	ldr	r1, [r3, #28]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8b1a      	ldrh	r2, [r3, #24]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	7b5b      	ldrb	r3, [r3, #13]
 80085dc:	2001      	movs	r0, #1
 80085de:	9000      	str	r0, [sp, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fce0 	bl	8009fa6 <USBH_BulkSendData>
 80085e6:	e00b      	b.n	8008600 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	7b5b      	ldrb	r3, [r3, #13]
 80085f6:	2001      	movs	r0, #1
 80085f8:	9000      	str	r0, [sp, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 fcd3 	bl	8009fa6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008608:	e03b      	b.n	8008682 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	7b5b      	ldrb	r3, [r3, #13]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fff7 	bl	800a604 <USBH_LL_GetURBState>
 8008616:	4603      	mov	r3, r0
 8008618:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800861a:	7afb      	ldrb	r3, [r7, #11]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d128      	bne.n	8008672 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	8b12      	ldrh	r2, [r2, #24]
 8008628:	4293      	cmp	r3, r2
 800862a:	d90e      	bls.n	800864a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	8b12      	ldrh	r2, [r2, #24]
 8008634:	1a9a      	subs	r2, r3, r2
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	8b12      	ldrh	r2, [r2, #24]
 8008642:	441a      	add	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	61da      	str	r2, [r3, #28]
 8008648:	e002      	b.n	8008650 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008660:	e00e      	b.n	8008680 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f868 	bl	8008740 <USBH_CDC_TransmitCallback>
      break;
 8008670:	e006      	b.n	8008680 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008672:	7afb      	ldrb	r3, [r7, #11]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d103      	bne.n	8008680 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008680:	bf00      	nop
  }
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b086      	sub	sp, #24
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800869c:	2300      	movs	r3, #0
 800869e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d002      	beq.n	80086b0 <CDC_ProcessReception+0x26>
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d00e      	beq.n	80086cc <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80086ae:	e043      	b.n	8008738 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	6a19      	ldr	r1, [r3, #32]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	8b5a      	ldrh	r2, [r3, #26]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	7b1b      	ldrb	r3, [r3, #12]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fc97 	bl	8009ff0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2204      	movs	r2, #4
 80086c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80086ca:	e035      	b.n	8008738 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	7b1b      	ldrb	r3, [r3, #12]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 ff96 	bl	800a604 <USBH_LL_GetURBState>
 80086d8:	4603      	mov	r3, r0
 80086da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80086dc:	7cfb      	ldrb	r3, [r7, #19]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d129      	bne.n	8008736 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	7b1b      	ldrb	r3, [r3, #12]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 fef9 	bl	800a4e0 <USBH_LL_GetLastXferSize>
 80086ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d016      	beq.n	8008728 <CDC_ProcessReception+0x9e>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	8b5b      	ldrh	r3, [r3, #26]
 80086fe:	461a      	mov	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4293      	cmp	r3, r2
 8008704:	d110      	bne.n	8008728 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	441a      	add	r2, r3
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2203      	movs	r2, #3
 8008722:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008726:	e006      	b.n	8008736 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f80f 	bl	8008754 <USBH_CDC_ReceiveCallback>
      break;
 8008736:	bf00      	nop
  }
}
 8008738:	bf00      	nop
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008790:	2302      	movs	r3, #2
 8008792:	e029      	b.n	80087e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	79fa      	ldrb	r2, [r7, #7]
 8008798:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 f81f 	bl	80087f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f001 fdc9 	bl	800a378 <USBH_LL_Init>

  return USBH_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e009      	b.n	8008812 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	33e0      	adds	r3, #224	@ 0xe0
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	2200      	movs	r2, #0
 800880a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b0f      	cmp	r3, #15
 8008816:	d9f2      	bls.n	80087fe <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e009      	b.n	8008832 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008828:	2200      	movs	r2, #0
 800882a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008838:	d3f1      	bcc.n	800881e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2240      	movs	r2, #64	@ 0x40
 800885e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	331c      	adds	r3, #28
 800888a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800888e:	2100      	movs	r1, #0
 8008890:	4618      	mov	r0, r3
 8008892:	f002 f825 	bl	800a8e0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800889c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088a0:	2100      	movs	r1, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f002 f81c 	bl	800a8e0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80088ae:	2212      	movs	r2, #18
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f002 f814 	bl	800a8e0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088be:	223e      	movs	r2, #62	@ 0x3e
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f002 f80c 	bl	800a8e0 <memset>

  return USBH_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d016      	beq.n	8008914 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10e      	bne.n	800890e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80088f6:	1c59      	adds	r1, r3, #1
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	33de      	adds	r3, #222	@ 0xde
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e004      	b.n	8008918 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800890e:	2302      	movs	r3, #2
 8008910:	73fb      	strb	r3, [r7, #15]
 8008912:	e001      	b.n	8008918 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008914:	2302      	movs	r3, #2
 8008916:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	429a      	cmp	r2, r3
 8008940:	d204      	bcs.n	800894c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800894a:	e001      	b.n	8008950 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800894c:	2302      	movs	r3, #2
 800894e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800895e:	b480      	push	{r7}
 8008960:	b087      	sub	sp, #28
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	4608      	mov	r0, r1
 8008968:	4611      	mov	r1, r2
 800896a:	461a      	mov	r2, r3
 800896c:	4603      	mov	r3, r0
 800896e:	70fb      	strb	r3, [r7, #3]
 8008970:	460b      	mov	r3, r1
 8008972:	70bb      	strb	r3, [r7, #2]
 8008974:	4613      	mov	r3, r2
 8008976:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008986:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008988:	e025      	b.n	80089d6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	221a      	movs	r2, #26
 800898e:	fb02 f303 	mul.w	r3, r2, r3
 8008992:	3308      	adds	r3, #8
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	3302      	adds	r3, #2
 800899a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	795b      	ldrb	r3, [r3, #5]
 80089a0:	78fa      	ldrb	r2, [r7, #3]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d002      	beq.n	80089ac <USBH_FindInterface+0x4e>
 80089a6:	78fb      	ldrb	r3, [r7, #3]
 80089a8:	2bff      	cmp	r3, #255	@ 0xff
 80089aa:	d111      	bne.n	80089d0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089b0:	78ba      	ldrb	r2, [r7, #2]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d002      	beq.n	80089bc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089b6:	78bb      	ldrb	r3, [r7, #2]
 80089b8:	2bff      	cmp	r3, #255	@ 0xff
 80089ba:	d109      	bne.n	80089d0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089c0:	787a      	ldrb	r2, [r7, #1]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d002      	beq.n	80089cc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089c6:	787b      	ldrb	r3, [r7, #1]
 80089c8:	2bff      	cmp	r3, #255	@ 0xff
 80089ca:	d101      	bne.n	80089d0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	e006      	b.n	80089de <USBH_FindInterface+0x80>
    }
    if_ix++;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	3301      	adds	r3, #1
 80089d4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d9d6      	bls.n	800898a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80089dc:	23ff      	movs	r3, #255	@ 0xff
}
 80089de:	4618      	mov	r0, r3
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fcfc 	bl	800a3f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80089f8:	2101      	movs	r1, #1
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 fe15 	bl	800a62a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008a14:	2302      	movs	r3, #2
 8008a16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d102      	bne.n	8008a2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b0b      	cmp	r3, #11
 8008a36:	f200 81bc 	bhi.w	8008db2 <USBH_Process+0x3a6>
 8008a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a40 <USBH_Process+0x34>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a71 	.word	0x08008a71
 8008a44:	08008aa3 	.word	0x08008aa3
 8008a48:	08008b0d 	.word	0x08008b0d
 8008a4c:	08008d4d 	.word	0x08008d4d
 8008a50:	08008db3 	.word	0x08008db3
 8008a54:	08008bad 	.word	0x08008bad
 8008a58:	08008cf3 	.word	0x08008cf3
 8008a5c:	08008be3 	.word	0x08008be3
 8008a60:	08008c03 	.word	0x08008c03
 8008a64:	08008c21 	.word	0x08008c21
 8008a68:	08008c65 	.word	0x08008c65
 8008a6c:	08008d35 	.word	0x08008d35
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 819c 	beq.w	8008db6 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008a84:	20c8      	movs	r0, #200	@ 0xc8
 8008a86:	f001 fe1a 	bl	800a6be <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f001 fd0d 	bl	800a4aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008aa0:	e189      	b.n	8008db6 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d107      	bne.n	8008abe <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008abc:	e18a      	b.n	8008dd4 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ac8:	d914      	bls.n	8008af4 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d903      	bls.n	8008aec <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	220d      	movs	r2, #13
 8008ae8:	701a      	strb	r2, [r3, #0]
      break;
 8008aea:	e173      	b.n	8008dd4 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	701a      	strb	r2, [r3, #0]
      break;
 8008af2:	e16f      	b.n	8008dd4 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008afa:	f103 020a 	add.w	r2, r3, #10
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008b04:	200a      	movs	r0, #10
 8008b06:	f001 fdda 	bl	800a6be <USBH_Delay>
      break;
 8008b0a:	e163      	b.n	8008dd4 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008b22:	2064      	movs	r0, #100	@ 0x64
 8008b24:	f001 fdcb 	bl	800a6be <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fc97 	bl	800a45c <USBH_LL_GetSpeed>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	461a      	mov	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2205      	movs	r2, #5
 8008b3c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008b3e:	2100      	movs	r1, #0
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 faa2 	bl	800a08a <USBH_AllocPipe>
 8008b46:	4603      	mov	r3, r0
 8008b48:	461a      	mov	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008b4e:	2180      	movs	r1, #128	@ 0x80
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 fa9a 	bl	800a08a <USBH_AllocPipe>
 8008b56:	4603      	mov	r3, r0
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7919      	ldrb	r1, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b72:	9202      	str	r2, [sp, #8]
 8008b74:	2200      	movs	r2, #0
 8008b76:	9201      	str	r2, [sp, #4]
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2280      	movs	r2, #128	@ 0x80
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 fa54 	bl	800a02c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7959      	ldrb	r1, [r3, #5]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b98:	9202      	str	r2, [sp, #8]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	9201      	str	r2, [sp, #4]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 fa41 	bl	800a02c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008baa:	e113      	b.n	8008dd4 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f917 	bl	8008de0 <USBH_HandleEnum>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f040 80fd 	bne.w	8008dba <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d103      	bne.n	8008bda <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2208      	movs	r2, #8
 8008bd6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008bd8:	e0ef      	b.n	8008dba <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2207      	movs	r2, #7
 8008bde:	701a      	strb	r2, [r3, #0]
      break;
 8008be0:	e0eb      	b.n	8008dba <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 80e8 	beq.w	8008dbe <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8008c00:	e0dd      	b.n	8008dbe <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fc3f 	bl	800948e <USBH_SetCfg>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f040 80d5 	bne.w	8008dc2 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2209      	movs	r2, #9
 8008c1c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008c1e:	e0d0      	b.n	8008dc2 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d016      	beq.n	8008c5c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c2e:	2101      	movs	r1, #1
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fc4f 	bl	80094d4 <USBH_SetFeature>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d103      	bne.n	8008c4a <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	220a      	movs	r2, #10
 8008c46:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008c48:	e0bd      	b.n	8008dc6 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	f040 80b9 	bne.w	8008dc6 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	220a      	movs	r2, #10
 8008c58:	701a      	strb	r2, [r3, #0]
      break;
 8008c5a:	e0b4      	b.n	8008dc6 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	220a      	movs	r2, #10
 8008c60:	701a      	strb	r2, [r3, #0]
      break;
 8008c62:	e0b0      	b.n	8008dc6 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80ad 	beq.w	8008dca <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
 8008c7c:	e016      	b.n	8008cac <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c7e:	7bfa      	ldrb	r2, [r7, #15]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	32de      	adds	r2, #222	@ 0xde
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	791a      	ldrb	r2, [r3, #4]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d108      	bne.n	8008ca6 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008c94:	7bfa      	ldrb	r2, [r7, #15]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	32de      	adds	r2, #222	@ 0xde
 8008c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008ca4:	e005      	b.n	8008cb2 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0e5      	beq.n	8008c7e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d016      	beq.n	8008cea <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2206      	movs	r2, #6
 8008cd2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cda:	2103      	movs	r1, #3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008ce0:	e073      	b.n	8008dca <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	220d      	movs	r2, #13
 8008ce6:	701a      	strb	r2, [r3, #0]
      break;
 8008ce8:	e06f      	b.n	8008dca <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	220d      	movs	r2, #13
 8008cee:	701a      	strb	r2, [r3, #0]
      break;
 8008cf0:	e06b      	b.n	8008dca <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d017      	beq.n	8008d2c <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d103      	bne.n	8008d1c <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	220b      	movs	r2, #11
 8008d18:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008d1a:	e058      	b.n	8008dce <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d154      	bne.n	8008dce <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	220d      	movs	r2, #13
 8008d28:	701a      	strb	r2, [r3, #0]
      break;
 8008d2a:	e050      	b.n	8008dce <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	220d      	movs	r2, #13
 8008d30:	701a      	strb	r2, [r3, #0]
      break;
 8008d32:	e04c      	b.n	8008dce <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d049      	beq.n	8008dd2 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	4798      	blx	r3
      }
      break;
 8008d4a:	e042      	b.n	8008dd2 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fd4b 	bl	80087f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d005      	beq.n	8008d8e <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d88:	2105      	movs	r1, #5
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d107      	bne.n	8008daa <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff fe21 	bl	80089ea <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008da8:	e014      	b.n	8008dd4 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 fb20 	bl	800a3f0 <USBH_LL_Start>
      break;
 8008db0:	e010      	b.n	8008dd4 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008db2:	bf00      	nop
 8008db4:	e00e      	b.n	8008dd4 <USBH_Process+0x3c8>
      break;
 8008db6:	bf00      	nop
 8008db8:	e00c      	b.n	8008dd4 <USBH_Process+0x3c8>
      break;
 8008dba:	bf00      	nop
 8008dbc:	e00a      	b.n	8008dd4 <USBH_Process+0x3c8>
    break;
 8008dbe:	bf00      	nop
 8008dc0:	e008      	b.n	8008dd4 <USBH_Process+0x3c8>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e006      	b.n	8008dd4 <USBH_Process+0x3c8>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e004      	b.n	8008dd4 <USBH_Process+0x3c8>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e002      	b.n	8008dd4 <USBH_Process+0x3c8>
      break;
 8008dce:	bf00      	nop
 8008dd0:	e000      	b.n	8008dd4 <USBH_Process+0x3c8>
      break;
 8008dd2:	bf00      	nop
  }
  return USBH_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af04      	add	r7, sp, #16
 8008de6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008de8:	2301      	movs	r3, #1
 8008dea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	2b07      	cmp	r3, #7
 8008df6:	f200 81bd 	bhi.w	8009174 <USBH_HandleEnum+0x394>
 8008dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008e00 <USBH_HandleEnum+0x20>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e21 	.word	0x08008e21
 8008e04:	08008edb 	.word	0x08008edb
 8008e08:	08008f45 	.word	0x08008f45
 8008e0c:	08008fcf 	.word	0x08008fcf
 8008e10:	08009039 	.word	0x08009039
 8008e14:	080090a9 	.word	0x080090a9
 8008e18:	080090ef 	.word	0x080090ef
 8008e1c:	08009135 	.word	0x08009135
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e20:	2108      	movs	r1, #8
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fa50 	bl	80092c8 <USBH_Get_DevDesc>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d12e      	bne.n	8008e90 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	7919      	ldrb	r1, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e56:	9202      	str	r2, [sp, #8]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	9201      	str	r2, [sp, #4]
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2280      	movs	r2, #128	@ 0x80
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 f8e2 	bl	800a02c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7959      	ldrb	r1, [r3, #5]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e7c:	9202      	str	r2, [sp, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	9201      	str	r2, [sp, #4]
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	4603      	mov	r3, r0
 8008e86:	2200      	movs	r2, #0
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f8cf 	bl	800a02c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e8e:	e173      	b.n	8009178 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	f040 8170 	bne.w	8009178 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d903      	bls.n	8008eba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	220d      	movs	r2, #13
 8008eb6:	701a      	strb	r2, [r3, #0]
      break;
 8008eb8:	e15e      	b.n	8009178 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	795b      	ldrb	r3, [r3, #5]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 f903 	bl	800a0cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	791b      	ldrb	r3, [r3, #4]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 f8fd 	bl	800a0cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	701a      	strb	r2, [r3, #0]
      break;
 8008ed8:	e14e      	b.n	8009178 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008eda:	2112      	movs	r1, #18
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f9f3 	bl	80092c8 <USBH_Get_DevDesc>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d103      	bne.n	8008ef4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ef2:	e143      	b.n	800917c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	f040 8140 	bne.w	800917c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f02:	3301      	adds	r3, #1
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d903      	bls.n	8008f1e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	220d      	movs	r2, #13
 8008f1a:	701a      	strb	r2, [r3, #0]
      break;
 8008f1c:	e12e      	b.n	800917c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	795b      	ldrb	r3, [r3, #5]
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 f8d1 	bl	800a0cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	791b      	ldrb	r3, [r3, #4]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f8cb 	bl	800a0cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
      break;
 8008f42:	e11b      	b.n	800917c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008f44:	2101      	movs	r1, #1
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa7d 	bl	8009446 <USBH_SetAddress>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d130      	bne.n	8008fb8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008f56:	2002      	movs	r0, #2
 8008f58:	f001 fbb1 	bl	800a6be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2203      	movs	r2, #3
 8008f68:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7919      	ldrb	r1, [r3, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f7e:	9202      	str	r2, [sp, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	9201      	str	r2, [sp, #4]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4603      	mov	r3, r0
 8008f88:	2280      	movs	r2, #128	@ 0x80
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f84e 	bl	800a02c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7959      	ldrb	r1, [r3, #5]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fa4:	9202      	str	r2, [sp, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	9201      	str	r2, [sp, #4]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	4603      	mov	r3, r0
 8008fae:	2200      	movs	r2, #0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f83b 	bl	800a02c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fb6:	e0e3      	b.n	8009180 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	f040 80e0 	bne.w	8009180 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	220d      	movs	r2, #13
 8008fc4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	705a      	strb	r2, [r3, #1]
      break;
 8008fcc:	e0d8      	b.n	8009180 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008fce:	2109      	movs	r1, #9
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f9a5 	bl	8009320 <USBH_Get_CfgDesc>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d103      	bne.n	8008fe8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fe6:	e0cd      	b.n	8009184 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	f040 80ca 	bne.w	8009184 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009006:	2b03      	cmp	r3, #3
 8009008:	d903      	bls.n	8009012 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	220d      	movs	r2, #13
 800900e:	701a      	strb	r2, [r3, #0]
      break;
 8009010:	e0b8      	b.n	8009184 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	795b      	ldrb	r3, [r3, #5]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 f857 	bl	800a0cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	791b      	ldrb	r3, [r3, #4]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 f851 	bl	800a0cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	701a      	strb	r2, [r3, #0]
      break;
 8009036:	e0a5      	b.n	8009184 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f96d 	bl	8009320 <USBH_Get_CfgDesc>
 8009046:	4603      	mov	r3, r0
 8009048:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2205      	movs	r2, #5
 8009054:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009056:	e097      	b.n	8009188 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	2b03      	cmp	r3, #3
 800905c:	f040 8094 	bne.w	8009188 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009066:	3301      	adds	r3, #1
 8009068:	b2da      	uxtb	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009076:	2b03      	cmp	r3, #3
 8009078:	d903      	bls.n	8009082 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	220d      	movs	r2, #13
 800907e:	701a      	strb	r2, [r3, #0]
      break;
 8009080:	e082      	b.n	8009188 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	795b      	ldrb	r3, [r3, #5]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f81f 	bl	800a0cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	791b      	ldrb	r3, [r3, #4]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 f819 	bl	800a0cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	701a      	strb	r2, [r3, #0]
      break;
 80090a6:	e06f      	b.n	8009188 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d019      	beq.n	80090e6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090be:	23ff      	movs	r3, #255	@ 0xff
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f957 	bl	8009374 <USBH_Get_StringDesc>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2206      	movs	r2, #6
 80090d4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80090d6:	e059      	b.n	800918c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d156      	bne.n	800918c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2206      	movs	r2, #6
 80090e2:	705a      	strb	r2, [r3, #1]
      break;
 80090e4:	e052      	b.n	800918c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2206      	movs	r2, #6
 80090ea:	705a      	strb	r2, [r3, #1]
      break;
 80090ec:	e04e      	b.n	800918c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d019      	beq.n	800912c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009104:	23ff      	movs	r3, #255	@ 0xff
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f934 	bl	8009374 <USBH_Get_StringDesc>
 800910c:	4603      	mov	r3, r0
 800910e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2207      	movs	r2, #7
 800911a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800911c:	e038      	b.n	8009190 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b03      	cmp	r3, #3
 8009122:	d135      	bne.n	8009190 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2207      	movs	r2, #7
 8009128:	705a      	strb	r2, [r3, #1]
      break;
 800912a:	e031      	b.n	8009190 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2207      	movs	r2, #7
 8009130:	705a      	strb	r2, [r3, #1]
      break;
 8009132:	e02d      	b.n	8009190 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800913a:	2b00      	cmp	r3, #0
 800913c:	d017      	beq.n	800916e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800914a:	23ff      	movs	r3, #255	@ 0xff
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f911 	bl	8009374 <USBH_Get_StringDesc>
 8009152:	4603      	mov	r3, r0
 8009154:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009160:	e018      	b.n	8009194 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d115      	bne.n	8009194 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
      break;
 800916c:	e012      	b.n	8009194 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
      break;
 8009172:	e00f      	b.n	8009194 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009174:	bf00      	nop
 8009176:	e00e      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 8009178:	bf00      	nop
 800917a:	e00c      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 800917c:	bf00      	nop
 800917e:	e00a      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 8009180:	bf00      	nop
 8009182:	e008      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 8009184:	bf00      	nop
 8009186:	e006      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 8009188:	bf00      	nop
 800918a:	e004      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 800918c:	bf00      	nop
 800918e:	e002      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 8009190:	bf00      	nop
 8009192:	e000      	b.n	8009196 <USBH_HandleEnum+0x3b6>
      break;
 8009194:	bf00      	nop
  }
  return Status;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f804 	bl	80091e2 <USBH_HandleSof>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b0b      	cmp	r3, #11
 80091f2:	d10a      	bne.n	800920a <USBH_HandleSof+0x28>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	4798      	blx	r3
  }
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8009222:	bf00      	nop
}
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8009246:	bf00      	nop
}
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 f8c0 	bl	800a426 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	791b      	ldrb	r3, [r3, #4]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 ff0d 	bl	800a0cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	795b      	ldrb	r3, [r3, #5]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 ff07 	bl	800a0cc <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80092d4:	887b      	ldrh	r3, [r7, #2]
 80092d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092da:	d901      	bls.n	80092e0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80092dc:	2303      	movs	r3, #3
 80092de:	e01b      	b.n	8009318 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80092e6:	887b      	ldrh	r3, [r7, #2]
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4613      	mov	r3, r2
 80092ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092f0:	2100      	movs	r1, #0
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f872 	bl	80093dc <USBH_GetDescriptor>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009308:	887a      	ldrh	r2, [r7, #2]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f929 	bl	8009564 <USBH_ParseDevDesc>
 8009312:	4603      	mov	r3, r0
 8009314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af02      	add	r7, sp, #8
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	331c      	adds	r3, #28
 8009330:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009332:	887b      	ldrh	r3, [r7, #2]
 8009334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009338:	d901      	bls.n	800933e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800933a:	2303      	movs	r3, #3
 800933c:	e016      	b.n	800936c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800933e:	887b      	ldrh	r3, [r7, #2]
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009348:	2100      	movs	r1, #0
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f846 	bl	80093dc <USBH_GetDescriptor>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d107      	bne.n	800936a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800935a:	887b      	ldrh	r3, [r7, #2]
 800935c:	461a      	mov	r2, r3
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f9af 	bl	80096c4 <USBH_ParseCfgDesc>
 8009366:	4603      	mov	r3, r0
 8009368:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af02      	add	r7, sp, #8
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	607a      	str	r2, [r7, #4]
 800937e:	461a      	mov	r2, r3
 8009380:	460b      	mov	r3, r1
 8009382:	72fb      	strb	r3, [r7, #11]
 8009384:	4613      	mov	r3, r2
 8009386:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009388:	893b      	ldrh	r3, [r7, #8]
 800938a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800938e:	d802      	bhi.n	8009396 <USBH_Get_StringDesc+0x22>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009396:	2303      	movs	r3, #3
 8009398:	e01c      	b.n	80093d4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	b29b      	uxth	r3, r3
 800939e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80093a2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80093aa:	893b      	ldrh	r3, [r7, #8]
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	460b      	mov	r3, r1
 80093b0:	2100      	movs	r1, #0
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 f812 	bl	80093dc <USBH_GetDescriptor>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d107      	bne.n	80093d2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093c8:	893a      	ldrh	r2, [r7, #8]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fb8c 	bl	8009aea <USBH_ParseStringDesc>
  }

  return status;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	72fb      	strb	r3, [r7, #11]
 80093ea:	4613      	mov	r3, r2
 80093ec:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	789b      	ldrb	r3, [r3, #2]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d11c      	bne.n	8009430 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2206      	movs	r2, #6
 8009406:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	893a      	ldrh	r2, [r7, #8]
 800940c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800940e:	893b      	ldrh	r3, [r7, #8]
 8009410:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009418:	d104      	bne.n	8009424 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009420:	829a      	strh	r2, [r3, #20]
 8009422:	e002      	b.n	800942a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8b3a      	ldrh	r2, [r7, #24]
 800942e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009430:	8b3b      	ldrh	r3, [r7, #24]
 8009432:	461a      	mov	r2, r3
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 fba4 	bl	8009b84 <USBH_CtlReq>
 800943c:	4603      	mov	r3, r0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	789b      	ldrb	r3, [r3, #2]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d10f      	bne.n	800947a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2205      	movs	r2, #5
 8009464:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	b29a      	uxth	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800947a:	2200      	movs	r2, #0
 800947c:	2100      	movs	r1, #0
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fb80 	bl	8009b84 <USBH_CtlReq>
 8009484:	4603      	mov	r3, r0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	789b      	ldrb	r3, [r3, #2]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d10e      	bne.n	80094c0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2209      	movs	r2, #9
 80094ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	887a      	ldrh	r2, [r7, #2]
 80094b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80094c0:	2200      	movs	r2, #0
 80094c2:	2100      	movs	r1, #0
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fb5d 	bl	8009b84 <USBH_CtlReq>
 80094ca:	4603      	mov	r3, r0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	789b      	ldrb	r3, [r3, #2]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d10f      	bne.n	8009508 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2203      	movs	r2, #3
 80094f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009508:	2200      	movs	r2, #0
 800950a:	2100      	movs	r1, #0
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fb39 	bl	8009b84 <USBH_CtlReq>
 8009512:	4603      	mov	r3, r0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	789b      	ldrb	r3, [r3, #2]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d10f      	bne.n	8009550 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2202      	movs	r2, #2
 8009534:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	b29a      	uxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009550:	2200      	movs	r2, #0
 8009552:	2100      	movs	r1, #0
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fb15 	bl	8009b84 <USBH_CtlReq>
 800955a:	4603      	mov	r3, r0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009578:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009584:	2302      	movs	r3, #2
 8009586:	e094      	b.n	80096b2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	785a      	ldrb	r2, [r3, #1]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	3302      	adds	r3, #2
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	3303      	adds	r3, #3
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	4313      	orrs	r3, r2
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	791a      	ldrb	r2, [r3, #4]
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	795a      	ldrb	r2, [r3, #5]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	799a      	ldrb	r2, [r3, #6]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	79da      	ldrb	r2, [r3, #7]
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d11b      	bne.n	800961e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	79db      	ldrb	r3, [r3, #7]
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	dc0f      	bgt.n	800960e <USBH_ParseDevDesc+0xaa>
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	db0f      	blt.n	8009612 <USBH_ParseDevDesc+0xae>
 80095f2:	3b08      	subs	r3, #8
 80095f4:	4a32      	ldr	r2, [pc, #200]	@ (80096c0 <USBH_ParseDevDesc+0x15c>)
 80095f6:	fa22 f303 	lsr.w	r3, r2, r3
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	bf14      	ite	ne
 8009602:	2301      	movne	r3, #1
 8009604:	2300      	moveq	r3, #0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <USBH_ParseDevDesc+0xb6>
 800960c:	e001      	b.n	8009612 <USBH_ParseDevDesc+0xae>
 800960e:	2b40      	cmp	r3, #64	@ 0x40
 8009610:	d003      	beq.n	800961a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	2208      	movs	r2, #8
 8009616:	71da      	strb	r2, [r3, #7]
        break;
 8009618:	e000      	b.n	800961c <USBH_ParseDevDesc+0xb8>
        break;
 800961a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800961c:	e00e      	b.n	800963c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009624:	2b02      	cmp	r3, #2
 8009626:	d107      	bne.n	8009638 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	79db      	ldrb	r3, [r3, #7]
 800962c:	2b08      	cmp	r3, #8
 800962e:	d005      	beq.n	800963c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2208      	movs	r2, #8
 8009634:	71da      	strb	r2, [r3, #7]
 8009636:	e001      	b.n	800963c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009638:	2303      	movs	r3, #3
 800963a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	2b08      	cmp	r3, #8
 8009640:	d936      	bls.n	80096b0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	3308      	adds	r3, #8
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	3309      	adds	r3, #9
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	b29b      	uxth	r3, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	b29a      	uxth	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	330a      	adds	r3, #10
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	330b      	adds	r3, #11
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	b29b      	uxth	r3, r3
 800966e:	4313      	orrs	r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	330c      	adds	r3, #12
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	330d      	adds	r3, #13
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	021b      	lsls	r3, r3, #8
 8009686:	b29b      	uxth	r3, r3
 8009688:	4313      	orrs	r3, r2
 800968a:	b29a      	uxth	r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	7b9a      	ldrb	r2, [r3, #14]
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	7bda      	ldrb	r2, [r3, #15]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	7c1a      	ldrb	r2, [r3, #16]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	7c5a      	ldrb	r2, [r3, #17]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	01000101 	.word	0x01000101

080096c4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08c      	sub	sp, #48	@ 0x30
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80096d8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80096f2:	2302      	movs	r3, #2
 80096f4:	e0de      	b.n	80098b4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80096fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b09      	cmp	r3, #9
 8009700:	d002      	beq.n	8009708 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009704:	2209      	movs	r2, #9
 8009706:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	781a      	ldrb	r2, [r3, #0]
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	785a      	ldrb	r2, [r3, #1]
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	3302      	adds	r3, #2
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	3303      	adds	r3, #3
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	021b      	lsls	r3, r3, #8
 8009728:	b29b      	uxth	r3, r3
 800972a:	4313      	orrs	r3, r2
 800972c:	b29b      	uxth	r3, r3
 800972e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009732:	bf28      	it	cs
 8009734:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009738:	b29a      	uxth	r2, r3
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	791a      	ldrb	r2, [r3, #4]
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	795a      	ldrb	r2, [r3, #5]
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	799a      	ldrb	r2, [r3, #6]
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	79da      	ldrb	r2, [r3, #7]
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	7a1a      	ldrb	r2, [r3, #8]
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	2b09      	cmp	r3, #9
 800976a:	f240 80a1 	bls.w	80098b0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800976e:	2309      	movs	r3, #9
 8009770:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009776:	e085      	b.n	8009884 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009778:	f107 0316 	add.w	r3, r7, #22
 800977c:	4619      	mov	r1, r3
 800977e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009780:	f000 f9e6 	bl	8009b50 <USBH_GetNextDesc>
 8009784:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	785b      	ldrb	r3, [r3, #1]
 800978a:	2b04      	cmp	r3, #4
 800978c:	d17a      	bne.n	8009884 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800978e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	2b09      	cmp	r3, #9
 8009794:	d002      	beq.n	800979c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	2209      	movs	r2, #9
 800979a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800979c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097a0:	221a      	movs	r2, #26
 80097a2:	fb02 f303 	mul.w	r3, r2, r3
 80097a6:	3308      	adds	r3, #8
 80097a8:	6a3a      	ldr	r2, [r7, #32]
 80097aa:	4413      	add	r3, r2
 80097ac:	3302      	adds	r3, #2
 80097ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80097b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097b2:	69f8      	ldr	r0, [r7, #28]
 80097b4:	f000 f882 	bl	80098bc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80097c2:	e043      	b.n	800984c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097c4:	f107 0316 	add.w	r3, r7, #22
 80097c8:	4619      	mov	r1, r3
 80097ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097cc:	f000 f9c0 	bl	8009b50 <USBH_GetNextDesc>
 80097d0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	d138      	bne.n	800984c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	795b      	ldrb	r3, [r3, #5]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d113      	bne.n	800980a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d003      	beq.n	80097f2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	799b      	ldrb	r3, [r3, #6]
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d10b      	bne.n	800980a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	79db      	ldrb	r3, [r3, #7]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10b      	bne.n	8009812 <USBH_ParseCfgDesc+0x14e>
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b09      	cmp	r3, #9
 8009800:	d007      	beq.n	8009812 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009804:	2209      	movs	r2, #9
 8009806:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009808:	e003      	b.n	8009812 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	2207      	movs	r2, #7
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	e000      	b.n	8009814 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009812:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009818:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800981c:	3201      	adds	r2, #1
 800981e:	00d2      	lsls	r2, r2, #3
 8009820:	211a      	movs	r1, #26
 8009822:	fb01 f303 	mul.w	r3, r1, r3
 8009826:	4413      	add	r3, r2
 8009828:	3308      	adds	r3, #8
 800982a:	6a3a      	ldr	r2, [r7, #32]
 800982c:	4413      	add	r3, r2
 800982e:	3304      	adds	r3, #4
 8009830:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009834:	69b9      	ldr	r1, [r7, #24]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 f86f 	bl	800991a <USBH_ParseEPDesc>
 800983c:	4603      	mov	r3, r0
 800983e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009842:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009846:	3301      	adds	r3, #1
 8009848:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800984c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009850:	2b01      	cmp	r3, #1
 8009852:	d80a      	bhi.n	800986a <USBH_ParseCfgDesc+0x1a6>
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	791b      	ldrb	r3, [r3, #4]
 8009858:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800985c:	429a      	cmp	r2, r3
 800985e:	d204      	bcs.n	800986a <USBH_ParseCfgDesc+0x1a6>
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	885a      	ldrh	r2, [r3, #2]
 8009864:	8afb      	ldrh	r3, [r7, #22]
 8009866:	429a      	cmp	r2, r3
 8009868:	d8ac      	bhi.n	80097c4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	791b      	ldrb	r3, [r3, #4]
 800986e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009872:	429a      	cmp	r2, r3
 8009874:	d201      	bcs.n	800987a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8009876:	2303      	movs	r3, #3
 8009878:	e01c      	b.n	80098b4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800987a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800987e:	3301      	adds	r3, #1
 8009880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009888:	2b01      	cmp	r3, #1
 800988a:	d805      	bhi.n	8009898 <USBH_ParseCfgDesc+0x1d4>
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	885a      	ldrh	r2, [r3, #2]
 8009890:	8afb      	ldrh	r3, [r7, #22]
 8009892:	429a      	cmp	r2, r3
 8009894:	f63f af70 	bhi.w	8009778 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	791b      	ldrb	r3, [r3, #4]
 800989c:	2b02      	cmp	r3, #2
 800989e:	bf28      	it	cs
 80098a0:	2302      	movcs	r3, #2
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d201      	bcs.n	80098b0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e001      	b.n	80098b4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80098b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3730      	adds	r7, #48	@ 0x30
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	785a      	ldrb	r2, [r3, #1]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	789a      	ldrb	r2, [r3, #2]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	78da      	ldrb	r2, [r3, #3]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	791a      	ldrb	r2, [r3, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	795a      	ldrb	r2, [r3, #5]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	799a      	ldrb	r2, [r3, #6]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	79da      	ldrb	r2, [r3, #7]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	7a1a      	ldrb	r2, [r3, #8]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	721a      	strb	r2, [r3, #8]
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800991a:	b480      	push	{r7}
 800991c:	b087      	sub	sp, #28
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	785a      	ldrb	r2, [r3, #1]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	789a      	ldrb	r2, [r3, #2]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	78da      	ldrb	r2, [r3, #3]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3304      	adds	r3, #4
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3305      	adds	r3, #5
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	b29b      	uxth	r3, r3
 800995c:	4313      	orrs	r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	799a      	ldrb	r2, [r3, #6]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	889b      	ldrh	r3, [r3, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d009      	beq.n	8009988 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800997c:	d804      	bhi.n	8009988 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009986:	d901      	bls.n	800998c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009988:	2303      	movs	r3, #3
 800998a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009992:	2b00      	cmp	r3, #0
 8009994:	d136      	bne.n	8009a04 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	78db      	ldrb	r3, [r3, #3]
 800999a:	f003 0303 	and.w	r3, r3, #3
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d108      	bne.n	80099b4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	889b      	ldrh	r3, [r3, #4]
 80099a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099aa:	f240 8097 	bls.w	8009adc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099ae:	2303      	movs	r3, #3
 80099b0:	75fb      	strb	r3, [r7, #23]
 80099b2:	e093      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	78db      	ldrb	r3, [r3, #3]
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d107      	bne.n	80099d0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	889b      	ldrh	r3, [r3, #4]
 80099c4:	2b40      	cmp	r3, #64	@ 0x40
 80099c6:	f240 8089 	bls.w	8009adc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099ca:	2303      	movs	r3, #3
 80099cc:	75fb      	strb	r3, [r7, #23]
 80099ce:	e085      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	78db      	ldrb	r3, [r3, #3]
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d005      	beq.n	80099e8 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	78db      	ldrb	r3, [r3, #3]
 80099e0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d10a      	bne.n	80099fe <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	799b      	ldrb	r3, [r3, #6]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <USBH_ParseEPDesc+0xde>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	799b      	ldrb	r3, [r3, #6]
 80099f4:	2b10      	cmp	r3, #16
 80099f6:	d970      	bls.n	8009ada <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80099f8:	2303      	movs	r3, #3
 80099fa:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80099fc:	e06d      	b.n	8009ada <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80099fe:	2303      	movs	r3, #3
 8009a00:	75fb      	strb	r3, [r7, #23]
 8009a02:	e06b      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d13c      	bne.n	8009a88 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	78db      	ldrb	r3, [r3, #3]
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d005      	beq.n	8009a26 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	78db      	ldrb	r3, [r3, #3]
 8009a1e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d106      	bne.n	8009a34 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	889b      	ldrh	r3, [r3, #4]
 8009a2a:	2b40      	cmp	r3, #64	@ 0x40
 8009a2c:	d956      	bls.n	8009adc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a32:	e053      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	78db      	ldrb	r3, [r3, #3]
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d10e      	bne.n	8009a5e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	799b      	ldrb	r3, [r3, #6]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d007      	beq.n	8009a58 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d803      	bhi.n	8009a58 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009a54:	2b40      	cmp	r3, #64	@ 0x40
 8009a56:	d941      	bls.n	8009adc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	75fb      	strb	r3, [r7, #23]
 8009a5c:	e03e      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	78db      	ldrb	r3, [r3, #3]
 8009a62:	f003 0303 	and.w	r3, r3, #3
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d10b      	bne.n	8009a82 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	799b      	ldrb	r3, [r3, #6]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <USBH_ParseEPDesc+0x162>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	889b      	ldrh	r3, [r3, #4]
 8009a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a7a:	d32f      	bcc.n	8009adc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	75fb      	strb	r3, [r7, #23]
 8009a80:	e02c      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009a82:	2303      	movs	r3, #3
 8009a84:	75fb      	strb	r3, [r7, #23]
 8009a86:	e029      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d120      	bne.n	8009ad4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	78db      	ldrb	r3, [r3, #3]
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d106      	bne.n	8009aac <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	889b      	ldrh	r3, [r3, #4]
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d01a      	beq.n	8009adc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	75fb      	strb	r3, [r7, #23]
 8009aaa:	e017      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	78db      	ldrb	r3, [r3, #3]
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	d10a      	bne.n	8009ace <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	799b      	ldrb	r3, [r3, #6]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <USBH_ParseEPDesc+0x1ae>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	889b      	ldrh	r3, [r3, #4]
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	d909      	bls.n	8009adc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	75fb      	strb	r3, [r7, #23]
 8009acc:	e006      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	75fb      	strb	r3, [r7, #23]
 8009ad2:	e003      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	75fb      	strb	r3, [r7, #23]
 8009ad8:	e000      	b.n	8009adc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ada:	bf00      	nop
  }

  return status;
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b087      	sub	sp, #28
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	4613      	mov	r3, r2
 8009af6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3301      	adds	r3, #1
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d120      	bne.n	8009b44 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	1e9a      	subs	r2, r3, #2
 8009b08:	88fb      	ldrh	r3, [r7, #6]
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	bf28      	it	cs
 8009b0e:	4613      	movcs	r3, r2
 8009b10:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3302      	adds	r3, #2
 8009b16:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	82fb      	strh	r3, [r7, #22]
 8009b1c:	e00b      	b.n	8009b36 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b1e:	8afb      	ldrh	r3, [r7, #22]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	781a      	ldrb	r2, [r3, #0]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009b30:	8afb      	ldrh	r3, [r7, #22]
 8009b32:	3302      	adds	r3, #2
 8009b34:	82fb      	strh	r3, [r7, #22]
 8009b36:	8afa      	ldrh	r2, [r7, #22]
 8009b38:	8abb      	ldrh	r3, [r7, #20]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d3ef      	bcc.n	8009b1e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2200      	movs	r2, #0
 8009b42:	701a      	strb	r2, [r3, #0]
  }
}
 8009b44:	bf00      	nop
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	7812      	ldrb	r2, [r2, #0]
 8009b62:	4413      	add	r3, r2
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4413      	add	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b76:	68fb      	ldr	r3, [r7, #12]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009b92:	2301      	movs	r3, #1
 8009b94:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	789b      	ldrb	r3, [r3, #2]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d002      	beq.n	8009ba4 <USBH_CtlReq+0x20>
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d00f      	beq.n	8009bc2 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8009ba2:	e027      	b.n	8009bf4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	88fa      	ldrh	r2, [r7, #6]
 8009bae:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2202      	movs	r2, #2
 8009bba:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc0:	e018      	b.n	8009bf4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 f81c 	bl	8009c00 <USBH_HandleControl>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <USBH_CtlReq+0x54>
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d106      	bne.n	8009be6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	761a      	strb	r2, [r3, #24]
      break;
 8009be4:	e005      	b.n	8009bf2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d102      	bne.n	8009bf2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	709a      	strb	r2, [r3, #2]
      break;
 8009bf2:	bf00      	nop
  }
  return status;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	7e1b      	ldrb	r3, [r3, #24]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	2b0a      	cmp	r3, #10
 8009c18:	f200 8157 	bhi.w	8009eca <USBH_HandleControl+0x2ca>
 8009c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <USBH_HandleControl+0x24>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	08009c6b 	.word	0x08009c6b
 8009c2c:	08009cd5 	.word	0x08009cd5
 8009c30:	08009cfb 	.word	0x08009cfb
 8009c34:	08009d35 	.word	0x08009d35
 8009c38:	08009d5f 	.word	0x08009d5f
 8009c3c:	08009db1 	.word	0x08009db1
 8009c40:	08009dd3 	.word	0x08009dd3
 8009c44:	08009e0f 	.word	0x08009e0f
 8009c48:	08009e35 	.word	0x08009e35
 8009c4c:	08009e73 	.word	0x08009e73
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f103 0110 	add.w	r1, r3, #16
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	795b      	ldrb	r3, [r3, #5]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f945 	bl	8009eec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2202      	movs	r2, #2
 8009c66:	761a      	strb	r2, [r3, #24]
      break;
 8009c68:	e13a      	b.n	8009ee0 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	795b      	ldrb	r3, [r3, #5]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fcc7 	bl	800a604 <USBH_LL_GetURBState>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d11e      	bne.n	8009cbe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7c1b      	ldrb	r3, [r3, #16]
 8009c84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c88:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	8adb      	ldrh	r3, [r3, #22]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00a      	beq.n	8009ca8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009c92:	7b7b      	ldrb	r3, [r7, #13]
 8009c94:	2b80      	cmp	r3, #128	@ 0x80
 8009c96:	d103      	bne.n	8009ca0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2203      	movs	r2, #3
 8009c9c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009c9e:	e116      	b.n	8009ece <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2205      	movs	r2, #5
 8009ca4:	761a      	strb	r2, [r3, #24]
      break;
 8009ca6:	e112      	b.n	8009ece <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8009ca8:	7b7b      	ldrb	r3, [r7, #13]
 8009caa:	2b80      	cmp	r3, #128	@ 0x80
 8009cac:	d103      	bne.n	8009cb6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2209      	movs	r2, #9
 8009cb2:	761a      	strb	r2, [r3, #24]
      break;
 8009cb4:	e10b      	b.n	8009ece <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2207      	movs	r2, #7
 8009cba:	761a      	strb	r2, [r3, #24]
      break;
 8009cbc:	e107      	b.n	8009ece <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d003      	beq.n	8009ccc <USBH_HandleControl+0xcc>
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	f040 8101 	bne.w	8009ece <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	220b      	movs	r2, #11
 8009cd0:	761a      	strb	r2, [r3, #24]
      break;
 8009cd2:	e0fc      	b.n	8009ece <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6899      	ldr	r1, [r3, #8]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	899a      	ldrh	r2, [r3, #12]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	791b      	ldrb	r3, [r3, #4]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f93c 	bl	8009f6a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2204      	movs	r2, #4
 8009cf6:	761a      	strb	r2, [r3, #24]
      break;
 8009cf8:	e0f2      	b.n	8009ee0 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	791b      	ldrb	r3, [r3, #4]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fc7f 	bl	800a604 <USBH_LL_GetURBState>
 8009d06:	4603      	mov	r3, r0
 8009d08:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d103      	bne.n	8009d18 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2209      	movs	r2, #9
 8009d14:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009d16:	e0dc      	b.n	8009ed2 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	d102      	bne.n	8009d24 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	73fb      	strb	r3, [r7, #15]
      break;
 8009d22:	e0d6      	b.n	8009ed2 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	f040 80d3 	bne.w	8009ed2 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	220b      	movs	r2, #11
 8009d30:	761a      	strb	r2, [r3, #24]
      break;
 8009d32:	e0ce      	b.n	8009ed2 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6899      	ldr	r1, [r3, #8]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	899a      	ldrh	r2, [r3, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	795b      	ldrb	r3, [r3, #5]
 8009d40:	2001      	movs	r0, #1
 8009d42:	9000      	str	r0, [sp, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f8eb 	bl	8009f20 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2206      	movs	r2, #6
 8009d5a:	761a      	strb	r2, [r3, #24]
      break;
 8009d5c:	e0c0      	b.n	8009ee0 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	795b      	ldrb	r3, [r3, #5]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fc4d 	bl	800a604 <USBH_LL_GetURBState>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d103      	bne.n	8009d7c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2207      	movs	r2, #7
 8009d78:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009d7a:	e0ac      	b.n	8009ed6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d105      	bne.n	8009d8e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	220c      	movs	r2, #12
 8009d86:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d8c:	e0a3      	b.n	8009ed6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d103      	bne.n	8009d9c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2205      	movs	r2, #5
 8009d98:	761a      	strb	r2, [r3, #24]
      break;
 8009d9a:	e09c      	b.n	8009ed6 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	f040 8099 	bne.w	8009ed6 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	220b      	movs	r2, #11
 8009da8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009daa:	2302      	movs	r3, #2
 8009dac:	73fb      	strb	r3, [r7, #15]
      break;
 8009dae:	e092      	b.n	8009ed6 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	791b      	ldrb	r3, [r3, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f8d6 	bl	8009f6a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2208      	movs	r2, #8
 8009dce:	761a      	strb	r2, [r3, #24]

      break;
 8009dd0:	e086      	b.n	8009ee0 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	791b      	ldrb	r3, [r3, #4]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fc13 	bl	800a604 <USBH_LL_GetURBState>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d105      	bne.n	8009df4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	220d      	movs	r2, #13
 8009dec:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009df2:	e072      	b.n	8009eda <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d103      	bne.n	8009e02 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	220b      	movs	r2, #11
 8009dfe:	761a      	strb	r2, [r3, #24]
      break;
 8009e00:	e06b      	b.n	8009eda <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b05      	cmp	r3, #5
 8009e06:	d168      	bne.n	8009eda <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0c:	e065      	b.n	8009eda <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	795b      	ldrb	r3, [r3, #5]
 8009e12:	2201      	movs	r2, #1
 8009e14:	9200      	str	r2, [sp, #0]
 8009e16:	2200      	movs	r2, #0
 8009e18:	2100      	movs	r1, #0
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f880 	bl	8009f20 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	220a      	movs	r2, #10
 8009e30:	761a      	strb	r2, [r3, #24]
      break;
 8009e32:	e055      	b.n	8009ee0 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	795b      	ldrb	r3, [r3, #5]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fbe2 	bl	800a604 <USBH_LL_GetURBState>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d105      	bne.n	8009e56 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	220d      	movs	r2, #13
 8009e52:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009e54:	e043      	b.n	8009ede <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d103      	bne.n	8009e64 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2209      	movs	r2, #9
 8009e60:	761a      	strb	r2, [r3, #24]
      break;
 8009e62:	e03c      	b.n	8009ede <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	d139      	bne.n	8009ede <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	220b      	movs	r2, #11
 8009e6e:	761a      	strb	r2, [r3, #24]
      break;
 8009e70:	e035      	b.n	8009ede <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	7e5b      	ldrb	r3, [r3, #25]
 8009e76:	3301      	adds	r3, #1
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	765a      	strb	r2, [r3, #25]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7e5b      	ldrb	r3, [r3, #25]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d806      	bhi.n	8009e94 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009e92:	e025      	b.n	8009ee0 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e9a:	2106      	movs	r1, #6
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	795b      	ldrb	r3, [r3, #5]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f90d 	bl	800a0cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	791b      	ldrb	r3, [r3, #4]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f907 	bl	800a0cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec8:	e00a      	b.n	8009ee0 <USBH_HandleControl+0x2e0>

    default:
      break;
 8009eca:	bf00      	nop
 8009ecc:	e008      	b.n	8009ee0 <USBH_HandleControl+0x2e0>
      break;
 8009ece:	bf00      	nop
 8009ed0:	e006      	b.n	8009ee0 <USBH_HandleControl+0x2e0>
      break;
 8009ed2:	bf00      	nop
 8009ed4:	e004      	b.n	8009ee0 <USBH_HandleControl+0x2e0>
      break;
 8009ed6:	bf00      	nop
 8009ed8:	e002      	b.n	8009ee0 <USBH_HandleControl+0x2e0>
      break;
 8009eda:	bf00      	nop
 8009edc:	e000      	b.n	8009ee0 <USBH_HandleControl+0x2e0>
      break;
 8009ede:	bf00      	nop
  }

  return status;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop

08009eec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af04      	add	r7, sp, #16
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009efa:	79f9      	ldrb	r1, [r7, #7]
 8009efc:	2300      	movs	r3, #0
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	2308      	movs	r3, #8
 8009f02:	9302      	str	r3, [sp, #8]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2200      	movs	r2, #0
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fb46 	bl	800a5a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af04      	add	r7, sp, #16
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	460b      	mov	r3, r1
 8009f30:	80fb      	strh	r3, [r7, #6]
 8009f32:	4613      	mov	r3, r2
 8009f34:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f44:	7979      	ldrb	r1, [r7, #5]
 8009f46:	7e3b      	ldrb	r3, [r7, #24]
 8009f48:	9303      	str	r3, [sp, #12]
 8009f4a:	88fb      	ldrh	r3, [r7, #6]
 8009f4c:	9302      	str	r3, [sp, #8]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	2301      	movs	r3, #1
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	2300      	movs	r3, #0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 fb21 	bl	800a5a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b088      	sub	sp, #32
 8009f6e:	af04      	add	r7, sp, #16
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	4611      	mov	r1, r2
 8009f76:	461a      	mov	r2, r3
 8009f78:	460b      	mov	r3, r1
 8009f7a:	80fb      	strh	r3, [r7, #6]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f80:	7979      	ldrb	r1, [r7, #5]
 8009f82:	2300      	movs	r3, #0
 8009f84:	9303      	str	r3, [sp, #12]
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	9302      	str	r3, [sp, #8]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	2301      	movs	r3, #1
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	2300      	movs	r3, #0
 8009f94:	2201      	movs	r2, #1
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 fb03 	bl	800a5a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009f9c:	2300      	movs	r3, #0

}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b088      	sub	sp, #32
 8009faa:	af04      	add	r7, sp, #16
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	80fb      	strh	r3, [r7, #6]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fca:	7979      	ldrb	r1, [r7, #5]
 8009fcc:	7e3b      	ldrb	r3, [r7, #24]
 8009fce:	9303      	str	r3, [sp, #12]
 8009fd0:	88fb      	ldrh	r3, [r7, #6]
 8009fd2:	9302      	str	r3, [sp, #8]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	2301      	movs	r3, #1
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	2302      	movs	r3, #2
 8009fde:	2200      	movs	r2, #0
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fade 	bl	800a5a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af04      	add	r7, sp, #16
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	460b      	mov	r3, r1
 800a000:	80fb      	strh	r3, [r7, #6]
 800a002:	4613      	mov	r3, r2
 800a004:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a006:	7979      	ldrb	r1, [r7, #5]
 800a008:	2300      	movs	r3, #0
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	88fb      	ldrh	r3, [r7, #6]
 800a00e:	9302      	str	r3, [sp, #8]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	2301      	movs	r3, #1
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	2302      	movs	r3, #2
 800a01a:	2201      	movs	r2, #1
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fac0 	bl	800a5a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af04      	add	r7, sp, #16
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	4608      	mov	r0, r1
 800a036:	4611      	mov	r1, r2
 800a038:	461a      	mov	r2, r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	70fb      	strb	r3, [r7, #3]
 800a03e:	460b      	mov	r3, r1
 800a040:	70bb      	strb	r3, [r7, #2]
 800a042:	4613      	mov	r3, r2
 800a044:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a046:	7878      	ldrb	r0, [r7, #1]
 800a048:	78ba      	ldrb	r2, [r7, #2]
 800a04a:	78f9      	ldrb	r1, [r7, #3]
 800a04c:	8b3b      	ldrh	r3, [r7, #24]
 800a04e:	9302      	str	r3, [sp, #8]
 800a050:	7d3b      	ldrb	r3, [r7, #20]
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	7c3b      	ldrb	r3, [r7, #16]
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	4603      	mov	r3, r0
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fa53 	bl	800a506 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a076:	78fb      	ldrb	r3, [r7, #3]
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa72 	bl	800a564 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f836 	bl	800a108 <USBH_GetFreePipe>
 800a09c:	4603      	mov	r3, r0
 800a09e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a0a0:	89fb      	ldrh	r3, [r7, #14]
 800a0a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00a      	beq.n	800a0c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	89fb      	ldrh	r3, [r7, #14]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	33e0      	adds	r3, #224	@ 0xe0
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a0c0:	89fb      	ldrh	r3, [r7, #14]
 800a0c2:	b2db      	uxtb	r3, r3
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d80d      	bhi.n	800a0fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	33e0      	adds	r3, #224	@ 0xe0
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	33e0      	adds	r3, #224	@ 0xe0
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
 800a118:	e00f      	b.n	800a13a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	33e0      	adds	r3, #224	@ 0xe0
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	b29b      	uxth	r3, r3
 800a132:	e007      	b.n	800a144 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	3301      	adds	r3, #1
 800a138:	73fb      	strb	r3, [r7, #15]
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	2b0f      	cmp	r3, #15
 800a13e:	d9ec      	bls.n	800a11a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a140:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a154:	2201      	movs	r2, #1
 800a156:	490e      	ldr	r1, [pc, #56]	@ (800a190 <MX_USB_HOST_Init+0x40>)
 800a158:	480e      	ldr	r0, [pc, #56]	@ (800a194 <MX_USB_HOST_Init+0x44>)
 800a15a:	f7fe fb0f 	bl	800877c <USBH_Init>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a164:	f7f6 fe94 	bl	8000e90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a168:	490b      	ldr	r1, [pc, #44]	@ (800a198 <MX_USB_HOST_Init+0x48>)
 800a16a:	480a      	ldr	r0, [pc, #40]	@ (800a194 <MX_USB_HOST_Init+0x44>)
 800a16c:	f7fe fbb1 	bl	80088d2 <USBH_RegisterClass>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a176:	f7f6 fe8b 	bl	8000e90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a17a:	4806      	ldr	r0, [pc, #24]	@ (800a194 <MX_USB_HOST_Init+0x44>)
 800a17c:	f7fe fc35 	bl	80089ea <USBH_Start>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a186:	f7f6 fe83 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a18a:	bf00      	nop
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	0800a1b1 	.word	0x0800a1b1
 800a194:	2000028c 	.word	0x2000028c
 800a198:	20000010 	.word	0x20000010

0800a19c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a1a0:	4802      	ldr	r0, [pc, #8]	@ (800a1ac <MX_USB_HOST_Process+0x10>)
 800a1a2:	f7fe fc33 	bl	8008a0c <USBH_Process>
}
 800a1a6:	bf00      	nop
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	2000028c 	.word	0x2000028c

0800a1b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d819      	bhi.n	800a1f8 <USBH_UserProcess+0x48>
 800a1c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1cc <USBH_UserProcess+0x1c>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a1f9 	.word	0x0800a1f9
 800a1d0:	0800a1e9 	.word	0x0800a1e9
 800a1d4:	0800a1f9 	.word	0x0800a1f9
 800a1d8:	0800a1f1 	.word	0x0800a1f1
 800a1dc:	0800a1e1 	.word	0x0800a1e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a1e0:	4b09      	ldr	r3, [pc, #36]	@ (800a208 <USBH_UserProcess+0x58>)
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	701a      	strb	r2, [r3, #0]
  break;
 800a1e6:	e008      	b.n	800a1fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a1e8:	4b07      	ldr	r3, [pc, #28]	@ (800a208 <USBH_UserProcess+0x58>)
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	701a      	strb	r2, [r3, #0]
  break;
 800a1ee:	e004      	b.n	800a1fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a1f0:	4b05      	ldr	r3, [pc, #20]	@ (800a208 <USBH_UserProcess+0x58>)
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	701a      	strb	r2, [r3, #0]
  break;
 800a1f6:	e000      	b.n	800a1fa <USBH_UserProcess+0x4a>

  default:
  break;
 800a1f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	20000664 	.word	0x20000664

0800a20c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	@ 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a214:	f107 0314 	add.w	r3, r7, #20
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	609a      	str	r2, [r3, #8]
 800a220:	60da      	str	r2, [r3, #12]
 800a222:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a22c:	d147      	bne.n	800a2be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a22e:	2300      	movs	r3, #0
 800a230:	613b      	str	r3, [r7, #16]
 800a232:	4b25      	ldr	r3, [pc, #148]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a236:	4a24      	ldr	r2, [pc, #144]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a238:	f043 0301 	orr.w	r3, r3, #1
 800a23c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a23e:	4b22      	ldr	r3, [pc, #136]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	613b      	str	r3, [r7, #16]
 800a248:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a24a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a24e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a250:	2300      	movs	r3, #0
 800a252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	4619      	mov	r1, r3
 800a25e:	481b      	ldr	r0, [pc, #108]	@ (800a2cc <HAL_HCD_MspInit+0xc0>)
 800a260:	f7f7 ffd2 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a264:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a26a:	2302      	movs	r3, #2
 800a26c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a272:	2300      	movs	r3, #0
 800a274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a276:	230a      	movs	r3, #10
 800a278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a27a:	f107 0314 	add.w	r3, r7, #20
 800a27e:	4619      	mov	r1, r3
 800a280:	4812      	ldr	r0, [pc, #72]	@ (800a2cc <HAL_HCD_MspInit+0xc0>)
 800a282:	f7f7 ffc1 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a286:	4b10      	ldr	r3, [pc, #64]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a28a:	4a0f      	ldr	r2, [pc, #60]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a28c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a290:	6353      	str	r3, [r2, #52]	@ 0x34
 800a292:	2300      	movs	r3, #0
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a29a:	4a0b      	ldr	r2, [pc, #44]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a29c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2a0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a2a2:	4b09      	ldr	r3, [pc, #36]	@ (800a2c8 <HAL_HCD_MspInit+0xbc>)
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	2043      	movs	r0, #67	@ 0x43
 800a2b4:	f7f7 fc87 	bl	8001bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2b8:	2043      	movs	r0, #67	@ 0x43
 800a2ba:	f7f7 fca0 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2be:	bf00      	nop
 800a2c0:	3728      	adds	r7, #40	@ 0x28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	40023800 	.word	0x40023800
 800a2cc:	40020000 	.word	0x40020000

0800a2d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe ff6d 	bl	80091be <USBH_LL_IncTimer>
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe ffa9 	bl	8009252 <USBH_LL_Connect>
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe ffb2 	bl	8009280 <USBH_LL_Disconnect>
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	70fb      	strb	r3, [r7, #3]
 800a330:	4613      	mov	r3, r2
 800a332:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe ff5f 	bl	8009212 <USBH_LL_PortEnabled>
}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe ff5f 	bl	800922e <USBH_LL_PortDisabled>
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a386:	2b01      	cmp	r3, #1
 800a388:	d12a      	bne.n	800a3e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a38a:	4a18      	ldr	r2, [pc, #96]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a15      	ldr	r2, [pc, #84]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a396:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a39a:	4b14      	ldr	r3, [pc, #80]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a39c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a3a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a3a2:	4b12      	ldr	r3, [pc, #72]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a3a4:	2208      	movs	r2, #8
 800a3a6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a3a8:	4b10      	ldr	r3, [pc, #64]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a3b4:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a3c0:	480a      	ldr	r0, [pc, #40]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a3c2:	f7f8 f8d6 	bl	8002572 <HAL_HCD_Init>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a3cc:	f7f6 fd60 	bl	8000e90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a3d0:	4806      	ldr	r0, [pc, #24]	@ (800a3ec <USBH_LL_Init+0x74>)
 800a3d2:	f7f8 fd37 	bl	8002e44 <HAL_HCD_GetCurrentFrame>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7fe fee0 	bl	80091a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000668 	.word	0x20000668

0800a3f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a406:	4618      	mov	r0, r3
 800a408:	f7f8 fca4 	bl	8002d54 <HAL_HCD_Start>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	4618      	mov	r0, r3
 800a414:	f000 f95e 	bl	800a6d4 <USBH_Get_USB_Status>
 800a418:	4603      	mov	r3, r0
 800a41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7f8 fcac 	bl	8002d9a <HAL_HCD_Stop>
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f943 	bl	800a6d4 <USBH_Get_USB_Status>
 800a44e:	4603      	mov	r3, r0
 800a450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a452:	7bbb      	ldrb	r3, [r7, #14]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a464:	2301      	movs	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a46e:	4618      	mov	r0, r3
 800a470:	f7f8 fcf6 	bl	8002e60 <HAL_HCD_GetCurrentSpeed>
 800a474:	4603      	mov	r3, r0
 800a476:	2b02      	cmp	r3, #2
 800a478:	d00c      	beq.n	800a494 <USBH_LL_GetSpeed+0x38>
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d80d      	bhi.n	800a49a <USBH_LL_GetSpeed+0x3e>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <USBH_LL_GetSpeed+0x2c>
 800a482:	2b01      	cmp	r3, #1
 800a484:	d003      	beq.n	800a48e <USBH_LL_GetSpeed+0x32>
 800a486:	e008      	b.n	800a49a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]
    break;
 800a48c:	e008      	b.n	800a4a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a48e:	2301      	movs	r3, #1
 800a490:	73fb      	strb	r3, [r7, #15]
    break;
 800a492:	e005      	b.n	800a4a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a494:	2302      	movs	r3, #2
 800a496:	73fb      	strb	r3, [r7, #15]
    break;
 800a498:	e002      	b.n	800a4a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a49a:	2301      	movs	r3, #1
 800a49c:	73fb      	strb	r3, [r7, #15]
    break;
 800a49e:	bf00      	nop
  }
  return  speed;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7f8 fc87 	bl	8002dd4 <HAL_HCD_ResetPort>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f901 	bl	800a6d4 <USBH_Get_USB_Status>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4f2:	78fa      	ldrb	r2, [r7, #3]
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f8 fc8f 	bl	8002e1a <HAL_HCD_HC_GetXferCount>
 800a4fc:	4603      	mov	r3, r0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a506:	b590      	push	{r4, r7, lr}
 800a508:	b089      	sub	sp, #36	@ 0x24
 800a50a:	af04      	add	r7, sp, #16
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	4608      	mov	r0, r1
 800a510:	4611      	mov	r1, r2
 800a512:	461a      	mov	r2, r3
 800a514:	4603      	mov	r3, r0
 800a516:	70fb      	strb	r3, [r7, #3]
 800a518:	460b      	mov	r3, r1
 800a51a:	70bb      	strb	r3, [r7, #2]
 800a51c:	4613      	mov	r3, r2
 800a51e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a52e:	787c      	ldrb	r4, [r7, #1]
 800a530:	78ba      	ldrb	r2, [r7, #2]
 800a532:	78f9      	ldrb	r1, [r7, #3]
 800a534:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a536:	9302      	str	r3, [sp, #8]
 800a538:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	4623      	mov	r3, r4
 800a546:	f7f8 f87b 	bl	8002640 <HAL_HCD_HC_Init>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 f8bf 	bl	800a6d4 <USBH_Get_USB_Status>
 800a556:	4603      	mov	r3, r0
 800a558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	bd90      	pop	{r4, r7, pc}

0800a564 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f7f8 f914 	bl	80027b0 <HAL_HCD_HC_Halt>
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 f8a0 	bl	800a6d4 <USBH_Get_USB_Status>
 800a594:	4603      	mov	r3, r0
 800a596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a598:	7bbb      	ldrb	r3, [r7, #14]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a5a2:	b590      	push	{r4, r7, lr}
 800a5a4:	b089      	sub	sp, #36	@ 0x24
 800a5a6:	af04      	add	r7, sp, #16
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	70fb      	strb	r3, [r7, #3]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70bb      	strb	r3, [r7, #2]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a5ca:	787c      	ldrb	r4, [r7, #1]
 800a5cc:	78ba      	ldrb	r2, [r7, #2]
 800a5ce:	78f9      	ldrb	r1, [r7, #3]
 800a5d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5d8:	9302      	str	r3, [sp, #8]
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	4623      	mov	r3, r4
 800a5e6:	f7f8 f907 	bl	80027f8 <HAL_HCD_HC_SubmitRequest>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 f86f 	bl	800a6d4 <USBH_Get_USB_Status>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	bd90      	pop	{r4, r7, pc}

0800a604 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a616:	78fa      	ldrb	r2, [r7, #3]
 800a618:	4611      	mov	r1, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7f8 fbe8 	bl	8002df0 <HAL_HCD_HC_GetURBState>
 800a620:	4603      	mov	r3, r0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d103      	bne.n	800a648 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 f872 	bl	800a72c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a648:	20c8      	movs	r0, #200	@ 0xc8
 800a64a:	f7f6 ff5b 	bl	8001504 <HAL_Delay>
  return USBH_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
 800a664:	4613      	mov	r3, r2
 800a666:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a66e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a670:	78fa      	ldrb	r2, [r7, #3]
 800a672:	68f9      	ldr	r1, [r7, #12]
 800a674:	4613      	mov	r3, r2
 800a676:	011b      	lsls	r3, r3, #4
 800a678:	1a9b      	subs	r3, r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	440b      	add	r3, r1
 800a67e:	3317      	adds	r3, #23
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a686:	78fa      	ldrb	r2, [r7, #3]
 800a688:	68f9      	ldr	r1, [r7, #12]
 800a68a:	4613      	mov	r3, r2
 800a68c:	011b      	lsls	r3, r3, #4
 800a68e:	1a9b      	subs	r3, r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	440b      	add	r3, r1
 800a694:	333c      	adds	r3, #60	@ 0x3c
 800a696:	78ba      	ldrb	r2, [r7, #2]
 800a698:	701a      	strb	r2, [r3, #0]
 800a69a:	e009      	b.n	800a6b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a69c:	78fa      	ldrb	r2, [r7, #3]
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	011b      	lsls	r3, r3, #4
 800a6a4:	1a9b      	subs	r3, r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	440b      	add	r3, r1
 800a6aa:	333d      	adds	r3, #61	@ 0x3d
 800a6ac:	78ba      	ldrb	r2, [r7, #2]
 800a6ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7f6 ff1c 	bl	8001504 <HAL_Delay>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d817      	bhi.n	800a718 <USBH_Get_USB_Status+0x44>
 800a6e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f0 <USBH_Get_USB_Status+0x1c>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a701 	.word	0x0800a701
 800a6f4:	0800a707 	.word	0x0800a707
 800a6f8:	0800a70d 	.word	0x0800a70d
 800a6fc:	0800a713 	.word	0x0800a713
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
    break;
 800a704:	e00b      	b.n	800a71e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a706:	2302      	movs	r3, #2
 800a708:	73fb      	strb	r3, [r7, #15]
    break;
 800a70a:	e008      	b.n	800a71e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a70c:	2301      	movs	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]
    break;
 800a710:	e005      	b.n	800a71e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a712:	2302      	movs	r3, #2
 800a714:	73fb      	strb	r3, [r7, #15]
    break;
 800a716:	e002      	b.n	800a71e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a718:	2302      	movs	r3, #2
 800a71a:	73fb      	strb	r3, [r7, #15]
    break;
 800a71c:	bf00      	nop
  }
  return usb_status;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a736:	79fb      	ldrb	r3, [r7, #7]
 800a738:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]
 800a744:	e001      	b.n	800a74a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a746:	2301      	movs	r3, #1
 800a748:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	461a      	mov	r2, r3
 800a74e:	2101      	movs	r1, #1
 800a750:	4803      	ldr	r0, [pc, #12]	@ (800a760 <MX_DriverVbusFS+0x34>)
 800a752:	f7f7 fef5 	bl	8002540 <HAL_GPIO_WritePin>
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	40020800 	.word	0x40020800

0800a764 <malloc>:
 800a764:	4b02      	ldr	r3, [pc, #8]	@ (800a770 <malloc+0xc>)
 800a766:	4601      	mov	r1, r0
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	f000 b82d 	b.w	800a7c8 <_malloc_r>
 800a76e:	bf00      	nop
 800a770:	20000030 	.word	0x20000030

0800a774 <free>:
 800a774:	4b02      	ldr	r3, [pc, #8]	@ (800a780 <free+0xc>)
 800a776:	4601      	mov	r1, r0
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	f000 b8f5 	b.w	800a968 <_free_r>
 800a77e:	bf00      	nop
 800a780:	20000030 	.word	0x20000030

0800a784 <sbrk_aligned>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4e0f      	ldr	r6, [pc, #60]	@ (800a7c4 <sbrk_aligned+0x40>)
 800a788:	460c      	mov	r4, r1
 800a78a:	6831      	ldr	r1, [r6, #0]
 800a78c:	4605      	mov	r5, r0
 800a78e:	b911      	cbnz	r1, 800a796 <sbrk_aligned+0x12>
 800a790:	f000 f8ae 	bl	800a8f0 <_sbrk_r>
 800a794:	6030      	str	r0, [r6, #0]
 800a796:	4621      	mov	r1, r4
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 f8a9 	bl	800a8f0 <_sbrk_r>
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	d103      	bne.n	800a7aa <sbrk_aligned+0x26>
 800a7a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	bd70      	pop	{r4, r5, r6, pc}
 800a7aa:	1cc4      	adds	r4, r0, #3
 800a7ac:	f024 0403 	bic.w	r4, r4, #3
 800a7b0:	42a0      	cmp	r0, r4
 800a7b2:	d0f8      	beq.n	800a7a6 <sbrk_aligned+0x22>
 800a7b4:	1a21      	subs	r1, r4, r0
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 f89a 	bl	800a8f0 <_sbrk_r>
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d1f2      	bne.n	800a7a6 <sbrk_aligned+0x22>
 800a7c0:	e7ef      	b.n	800a7a2 <sbrk_aligned+0x1e>
 800a7c2:	bf00      	nop
 800a7c4:	20000a48 	.word	0x20000a48

0800a7c8 <_malloc_r>:
 800a7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7cc:	1ccd      	adds	r5, r1, #3
 800a7ce:	f025 0503 	bic.w	r5, r5, #3
 800a7d2:	3508      	adds	r5, #8
 800a7d4:	2d0c      	cmp	r5, #12
 800a7d6:	bf38      	it	cc
 800a7d8:	250c      	movcc	r5, #12
 800a7da:	2d00      	cmp	r5, #0
 800a7dc:	4606      	mov	r6, r0
 800a7de:	db01      	blt.n	800a7e4 <_malloc_r+0x1c>
 800a7e0:	42a9      	cmp	r1, r5
 800a7e2:	d904      	bls.n	800a7ee <_malloc_r+0x26>
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	6033      	str	r3, [r6, #0]
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8c4 <_malloc_r+0xfc>
 800a7f2:	f000 f869 	bl	800a8c8 <__malloc_lock>
 800a7f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7fa:	461c      	mov	r4, r3
 800a7fc:	bb44      	cbnz	r4, 800a850 <_malloc_r+0x88>
 800a7fe:	4629      	mov	r1, r5
 800a800:	4630      	mov	r0, r6
 800a802:	f7ff ffbf 	bl	800a784 <sbrk_aligned>
 800a806:	1c43      	adds	r3, r0, #1
 800a808:	4604      	mov	r4, r0
 800a80a:	d158      	bne.n	800a8be <_malloc_r+0xf6>
 800a80c:	f8d8 4000 	ldr.w	r4, [r8]
 800a810:	4627      	mov	r7, r4
 800a812:	2f00      	cmp	r7, #0
 800a814:	d143      	bne.n	800a89e <_malloc_r+0xd6>
 800a816:	2c00      	cmp	r4, #0
 800a818:	d04b      	beq.n	800a8b2 <_malloc_r+0xea>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	4639      	mov	r1, r7
 800a81e:	4630      	mov	r0, r6
 800a820:	eb04 0903 	add.w	r9, r4, r3
 800a824:	f000 f864 	bl	800a8f0 <_sbrk_r>
 800a828:	4581      	cmp	r9, r0
 800a82a:	d142      	bne.n	800a8b2 <_malloc_r+0xea>
 800a82c:	6821      	ldr	r1, [r4, #0]
 800a82e:	1a6d      	subs	r5, r5, r1
 800a830:	4629      	mov	r1, r5
 800a832:	4630      	mov	r0, r6
 800a834:	f7ff ffa6 	bl	800a784 <sbrk_aligned>
 800a838:	3001      	adds	r0, #1
 800a83a:	d03a      	beq.n	800a8b2 <_malloc_r+0xea>
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	442b      	add	r3, r5
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	f8d8 3000 	ldr.w	r3, [r8]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	bb62      	cbnz	r2, 800a8a4 <_malloc_r+0xdc>
 800a84a:	f8c8 7000 	str.w	r7, [r8]
 800a84e:	e00f      	b.n	800a870 <_malloc_r+0xa8>
 800a850:	6822      	ldr	r2, [r4, #0]
 800a852:	1b52      	subs	r2, r2, r5
 800a854:	d420      	bmi.n	800a898 <_malloc_r+0xd0>
 800a856:	2a0b      	cmp	r2, #11
 800a858:	d917      	bls.n	800a88a <_malloc_r+0xc2>
 800a85a:	1961      	adds	r1, r4, r5
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	6025      	str	r5, [r4, #0]
 800a860:	bf18      	it	ne
 800a862:	6059      	strne	r1, [r3, #4]
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	bf08      	it	eq
 800a868:	f8c8 1000 	streq.w	r1, [r8]
 800a86c:	5162      	str	r2, [r4, r5]
 800a86e:	604b      	str	r3, [r1, #4]
 800a870:	4630      	mov	r0, r6
 800a872:	f000 f82f 	bl	800a8d4 <__malloc_unlock>
 800a876:	f104 000b 	add.w	r0, r4, #11
 800a87a:	1d23      	adds	r3, r4, #4
 800a87c:	f020 0007 	bic.w	r0, r0, #7
 800a880:	1ac2      	subs	r2, r0, r3
 800a882:	bf1c      	itt	ne
 800a884:	1a1b      	subne	r3, r3, r0
 800a886:	50a3      	strne	r3, [r4, r2]
 800a888:	e7af      	b.n	800a7ea <_malloc_r+0x22>
 800a88a:	6862      	ldr	r2, [r4, #4]
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	bf0c      	ite	eq
 800a890:	f8c8 2000 	streq.w	r2, [r8]
 800a894:	605a      	strne	r2, [r3, #4]
 800a896:	e7eb      	b.n	800a870 <_malloc_r+0xa8>
 800a898:	4623      	mov	r3, r4
 800a89a:	6864      	ldr	r4, [r4, #4]
 800a89c:	e7ae      	b.n	800a7fc <_malloc_r+0x34>
 800a89e:	463c      	mov	r4, r7
 800a8a0:	687f      	ldr	r7, [r7, #4]
 800a8a2:	e7b6      	b.n	800a812 <_malloc_r+0x4a>
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	d1fb      	bne.n	800a8a4 <_malloc_r+0xdc>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	6053      	str	r3, [r2, #4]
 800a8b0:	e7de      	b.n	800a870 <_malloc_r+0xa8>
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	6033      	str	r3, [r6, #0]
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f000 f80c 	bl	800a8d4 <__malloc_unlock>
 800a8bc:	e794      	b.n	800a7e8 <_malloc_r+0x20>
 800a8be:	6005      	str	r5, [r0, #0]
 800a8c0:	e7d6      	b.n	800a870 <_malloc_r+0xa8>
 800a8c2:	bf00      	nop
 800a8c4:	20000a4c 	.word	0x20000a4c

0800a8c8 <__malloc_lock>:
 800a8c8:	4801      	ldr	r0, [pc, #4]	@ (800a8d0 <__malloc_lock+0x8>)
 800a8ca:	f000 b84b 	b.w	800a964 <__retarget_lock_acquire_recursive>
 800a8ce:	bf00      	nop
 800a8d0:	20000b88 	.word	0x20000b88

0800a8d4 <__malloc_unlock>:
 800a8d4:	4801      	ldr	r0, [pc, #4]	@ (800a8dc <__malloc_unlock+0x8>)
 800a8d6:	f000 b846 	b.w	800a966 <__retarget_lock_release_recursive>
 800a8da:	bf00      	nop
 800a8dc:	20000b88 	.word	0x20000b88

0800a8e0 <memset>:
 800a8e0:	4402      	add	r2, r0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d100      	bne.n	800a8ea <memset+0xa>
 800a8e8:	4770      	bx	lr
 800a8ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ee:	e7f9      	b.n	800a8e4 <memset+0x4>

0800a8f0 <_sbrk_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d06      	ldr	r5, [pc, #24]	@ (800a90c <_sbrk_r+0x1c>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f6 fd1e 	bl	800133c <_sbrk>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <_sbrk_r+0x1a>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b103      	cbz	r3, 800a90a <_sbrk_r+0x1a>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	20000b8c 	.word	0x20000b8c

0800a910 <__errno>:
 800a910:	4b01      	ldr	r3, [pc, #4]	@ (800a918 <__errno+0x8>)
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	20000030 	.word	0x20000030

0800a91c <__libc_init_array>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	4d0d      	ldr	r5, [pc, #52]	@ (800a954 <__libc_init_array+0x38>)
 800a920:	4c0d      	ldr	r4, [pc, #52]	@ (800a958 <__libc_init_array+0x3c>)
 800a922:	1b64      	subs	r4, r4, r5
 800a924:	10a4      	asrs	r4, r4, #2
 800a926:	2600      	movs	r6, #0
 800a928:	42a6      	cmp	r6, r4
 800a92a:	d109      	bne.n	800a940 <__libc_init_array+0x24>
 800a92c:	4d0b      	ldr	r5, [pc, #44]	@ (800a95c <__libc_init_array+0x40>)
 800a92e:	4c0c      	ldr	r4, [pc, #48]	@ (800a960 <__libc_init_array+0x44>)
 800a930:	f000 f864 	bl	800a9fc <_init>
 800a934:	1b64      	subs	r4, r4, r5
 800a936:	10a4      	asrs	r4, r4, #2
 800a938:	2600      	movs	r6, #0
 800a93a:	42a6      	cmp	r6, r4
 800a93c:	d105      	bne.n	800a94a <__libc_init_array+0x2e>
 800a93e:	bd70      	pop	{r4, r5, r6, pc}
 800a940:	f855 3b04 	ldr.w	r3, [r5], #4
 800a944:	4798      	blx	r3
 800a946:	3601      	adds	r6, #1
 800a948:	e7ee      	b.n	800a928 <__libc_init_array+0xc>
 800a94a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a94e:	4798      	blx	r3
 800a950:	3601      	adds	r6, #1
 800a952:	e7f2      	b.n	800a93a <__libc_init_array+0x1e>
 800a954:	0800aa40 	.word	0x0800aa40
 800a958:	0800aa40 	.word	0x0800aa40
 800a95c:	0800aa40 	.word	0x0800aa40
 800a960:	0800aa44 	.word	0x0800aa44

0800a964 <__retarget_lock_acquire_recursive>:
 800a964:	4770      	bx	lr

0800a966 <__retarget_lock_release_recursive>:
 800a966:	4770      	bx	lr

0800a968 <_free_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4605      	mov	r5, r0
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d041      	beq.n	800a9f4 <_free_r+0x8c>
 800a970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a974:	1f0c      	subs	r4, r1, #4
 800a976:	2b00      	cmp	r3, #0
 800a978:	bfb8      	it	lt
 800a97a:	18e4      	addlt	r4, r4, r3
 800a97c:	f7ff ffa4 	bl	800a8c8 <__malloc_lock>
 800a980:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f8 <_free_r+0x90>)
 800a982:	6813      	ldr	r3, [r2, #0]
 800a984:	b933      	cbnz	r3, 800a994 <_free_r+0x2c>
 800a986:	6063      	str	r3, [r4, #4]
 800a988:	6014      	str	r4, [r2, #0]
 800a98a:	4628      	mov	r0, r5
 800a98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a990:	f7ff bfa0 	b.w	800a8d4 <__malloc_unlock>
 800a994:	42a3      	cmp	r3, r4
 800a996:	d908      	bls.n	800a9aa <_free_r+0x42>
 800a998:	6820      	ldr	r0, [r4, #0]
 800a99a:	1821      	adds	r1, r4, r0
 800a99c:	428b      	cmp	r3, r1
 800a99e:	bf01      	itttt	eq
 800a9a0:	6819      	ldreq	r1, [r3, #0]
 800a9a2:	685b      	ldreq	r3, [r3, #4]
 800a9a4:	1809      	addeq	r1, r1, r0
 800a9a6:	6021      	streq	r1, [r4, #0]
 800a9a8:	e7ed      	b.n	800a986 <_free_r+0x1e>
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	b10b      	cbz	r3, 800a9b4 <_free_r+0x4c>
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	d9fa      	bls.n	800a9aa <_free_r+0x42>
 800a9b4:	6811      	ldr	r1, [r2, #0]
 800a9b6:	1850      	adds	r0, r2, r1
 800a9b8:	42a0      	cmp	r0, r4
 800a9ba:	d10b      	bne.n	800a9d4 <_free_r+0x6c>
 800a9bc:	6820      	ldr	r0, [r4, #0]
 800a9be:	4401      	add	r1, r0
 800a9c0:	1850      	adds	r0, r2, r1
 800a9c2:	4283      	cmp	r3, r0
 800a9c4:	6011      	str	r1, [r2, #0]
 800a9c6:	d1e0      	bne.n	800a98a <_free_r+0x22>
 800a9c8:	6818      	ldr	r0, [r3, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	6053      	str	r3, [r2, #4]
 800a9ce:	4408      	add	r0, r1
 800a9d0:	6010      	str	r0, [r2, #0]
 800a9d2:	e7da      	b.n	800a98a <_free_r+0x22>
 800a9d4:	d902      	bls.n	800a9dc <_free_r+0x74>
 800a9d6:	230c      	movs	r3, #12
 800a9d8:	602b      	str	r3, [r5, #0]
 800a9da:	e7d6      	b.n	800a98a <_free_r+0x22>
 800a9dc:	6820      	ldr	r0, [r4, #0]
 800a9de:	1821      	adds	r1, r4, r0
 800a9e0:	428b      	cmp	r3, r1
 800a9e2:	bf04      	itt	eq
 800a9e4:	6819      	ldreq	r1, [r3, #0]
 800a9e6:	685b      	ldreq	r3, [r3, #4]
 800a9e8:	6063      	str	r3, [r4, #4]
 800a9ea:	bf04      	itt	eq
 800a9ec:	1809      	addeq	r1, r1, r0
 800a9ee:	6021      	streq	r1, [r4, #0]
 800a9f0:	6054      	str	r4, [r2, #4]
 800a9f2:	e7ca      	b.n	800a98a <_free_r+0x22>
 800a9f4:	bd38      	pop	{r3, r4, r5, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20000a4c 	.word	0x20000a4c

0800a9fc <_init>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	bf00      	nop
 800aa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa02:	bc08      	pop	{r3}
 800aa04:	469e      	mov	lr, r3
 800aa06:	4770      	bx	lr

0800aa08 <_fini>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	bf00      	nop
 800aa0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0e:	bc08      	pop	{r3}
 800aa10:	469e      	mov	lr, r3
 800aa12:	4770      	bx	lr
