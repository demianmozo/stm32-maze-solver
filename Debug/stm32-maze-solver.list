
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b760  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800b8e8  0800b8e8  0000c8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b910  0800b910  0000d08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b910  0800b910  0000c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b918  0800b918  0000d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b918  0800b918  0000c918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b91c  0800b91c  0000c91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800b920  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d08c  2**0
                  CONTENTS
 10 .bss          00000d38  2000008c  2000008c  0000d08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dc4  20000dc4  0000d08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d158  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b5e  00000000  00000000  0002a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ca  00000000  00000000  00030728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c17  00000000  00000000  00031af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002292f  00000000  00000000  00058709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e17cc  00000000  00000000  0007b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015c804  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f10  00000000  00000000  0015c848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00163758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b8d0 	.word	0x0800b8d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800b8d0 	.word	0x0800b8d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 8000508:	e005      	b.n	8000516 <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 800050a:	89bb      	ldrh	r3, [r7, #12]
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 8000516:	89bb      	ldrh	r3, [r7, #12]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d8f6      	bhi.n	800050a <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f002 ff45 	bl	80033b4 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <antirebote+0x9c>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d109      	bne.n	800054c <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	4916      	ldr	r1, [pc, #88]	@ (8000594 <antirebote+0xa0>)
 800053c:	7aba      	ldrb	r2, [r7, #10]
 800053e:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <antirebote+0x9c>)
 8000544:	2101      	movs	r1, #1
 8000546:	54d1      	strb	r1, [r2, r3]
        return false;
 8000548:	2300      	movs	r3, #0
 800054a:	e01d      	b.n	8000588 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <antirebote+0xa0>)
 8000550:	5cd3      	ldrb	r3, [r2, r3]
 8000552:	7aba      	ldrb	r2, [r7, #10]
 8000554:	429a      	cmp	r2, r3
 8000556:	d016      	beq.n	8000586 <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000558:	2032      	movs	r0, #50	@ 0x32
 800055a:	f001 fcb5 	bl	8001ec8 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f002 ff26 	bl	80033b4 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 800056c:	7aba      	ldrb	r2, [r7, #10]
 800056e:	7a7b      	ldrb	r3, [r7, #9]
 8000570:	429a      	cmp	r2, r3
 8000572:	d108      	bne.n	8000586 <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4907      	ldr	r1, [pc, #28]	@ (8000594 <antirebote+0xa0>)
 8000578:	7a7a      	ldrb	r2, [r7, #9]
 800057a:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 800057c:	7a7b      	ldrb	r3, [r7, #9]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <antirebote+0x92>
            {
                pulsado = true;
 8000582:	2301      	movs	r3, #1
 8000584:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000a8 	.word	0x200000a8
 8000594:	200000b8 	.word	0x200000b8

08000598 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80005a2:	f000 f815 	bl	80005d0 <promediar_sensores>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000324 	.word	0x20000324

080005b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <HAL_ADC_ConvCpltCallback+0x18>)
 80005be:	f000 f807 	bl	80005d0 <promediar_sensores>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200003ec 	.word	0x200003ec

080005d0 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e012      	b.n	800060c <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4413      	add	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3302      	adds	r3, #2
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3304      	adds	r3, #4
 8000604:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b09      	cmp	r3, #9
 8000610:	dde9      	ble.n	80005e6 <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <promediar_sensores+0x70>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <promediar_sensores+0x74>)
 8000620:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <promediar_sensores+0x70>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <promediar_sensores+0x78>)
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	cccccccd 	.word	0xcccccccd
 8000644:	200000ca 	.word	0x200000ca
 8000648:	200000c8 	.word	0x200000c8

0800064c <activar_modo_sprint>:
uint16_t velocidad_actual_der = VELOCIDAD_AVANCE_DER;
uint16_t velocidad_giro_actual_izq = VELOCIDAD_GIRO_IZQ;
uint16_t velocidad_giro_actual_der = VELOCIDAD_GIRO_DER;

void activar_modo_sprint(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
    velocidad_actual_izq = VELOCIDAD_SPRINT_IZQ;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <activar_modo_sprint+0x20>)
 8000652:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000656:	801a      	strh	r2, [r3, #0]
    velocidad_actual_der = VELOCIDAD_SPRINT_DER;
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <activar_modo_sprint+0x24>)
 800065a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800065e:	801a      	strh	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	20000002 	.word	0x20000002

08000674 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 8000678:	2108      	movs	r1, #8
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <control_motor_init+0x1c>)
 800067c:	f006 fcf4 	bl	8007068 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000680:	210c      	movs	r1, #12
 8000682:	4803      	ldr	r0, [pc, #12]	@ (8000690 <control_motor_init+0x1c>)
 8000684:	f006 fcf0 	bl	8007068 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000688:	f000 f88c 	bl	80007a4 <avanza>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200002d8 	.word	0x200002d8

08000694 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <set_motor_izq+0x1c>
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d00d      	beq.n	80006ca <set_motor_izq+0x36>
 80006ae:	e019      	b.n	80006e4 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006b6:	4817      	ldr	r0, [pc, #92]	@ (8000714 <set_motor_izq+0x80>)
 80006b8:	f002 fe94 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c2:	4814      	ldr	r0, [pc, #80]	@ (8000714 <set_motor_izq+0x80>)
 80006c4:	f002 fe8e 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80006c8:	e01b      	b.n	8000702 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d0:	4810      	ldr	r0, [pc, #64]	@ (8000714 <set_motor_izq+0x80>)
 80006d2:	f002 fe87 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006dc:	480d      	ldr	r0, [pc, #52]	@ (8000714 <set_motor_izq+0x80>)
 80006de:	f002 fe81 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80006e2:	e00e      	b.n	8000702 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ea:	480a      	ldr	r0, [pc, #40]	@ (8000714 <set_motor_izq+0x80>)
 80006ec:	f002 fe7a 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <set_motor_izq+0x80>)
 80006f8:	f002 fe74 	bl	80033e4 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80006fc:	2300      	movs	r3, #0
 80006fe:	80bb      	strh	r3, [r7, #4]
        break;
 8000700:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000702:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <set_motor_izq+0x84>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	88ba      	ldrh	r2, [r7, #4]
 8000708:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40020400 	.word	0x40020400
 8000718:	200002d8 	.word	0x200002d8

0800071c <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <set_motor_der+0x1c>
 8000732:	2b01      	cmp	r3, #1
 8000734:	d00d      	beq.n	8000752 <set_motor_der+0x36>
 8000736:	e019      	b.n	800076c <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	4817      	ldr	r0, [pc, #92]	@ (800079c <set_motor_der+0x80>)
 8000740:	f002 fe50 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800074a:	4814      	ldr	r0, [pc, #80]	@ (800079c <set_motor_der+0x80>)
 800074c:	f002 fe4a 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000750:	e01b      	b.n	800078a <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000758:	4810      	ldr	r0, [pc, #64]	@ (800079c <set_motor_der+0x80>)
 800075a:	f002 fe43 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000764:	480d      	ldr	r0, [pc, #52]	@ (800079c <set_motor_der+0x80>)
 8000766:	f002 fe3d 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800076a:	e00e      	b.n	800078a <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000772:	480a      	ldr	r0, [pc, #40]	@ (800079c <set_motor_der+0x80>)
 8000774:	f002 fe36 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800077e:	4807      	ldr	r0, [pc, #28]	@ (800079c <set_motor_der+0x80>)
 8000780:	f002 fe30 	bl	80033e4 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000784:	2300      	movs	r3, #0
 8000786:	80bb      	strh	r3, [r7, #4]
        break;
 8000788:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <set_motor_der+0x84>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	88ba      	ldrh	r2, [r7, #4]
 8000790:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40020400 	.word	0x40020400
 80007a0:	200002d8 	.word	0x200002d8

080007a4 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, velocidad_actual_izq);
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <avanza+0x20>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff70 	bl	8000694 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_actual_der);
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <avanza+0x24>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ffae 	bl	800071c <set_motor_der>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000002 	.word	0x20000002

080007cc <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, velocidad_giro_actual_izq);
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <gira90izq+0x6c>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff59 	bl	8000694 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_giro_actual_der);
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <gira90izq+0x70>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ff97 	bl	800071c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80007ee:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 80007f2:	f001 fb69 	bl	8001ec8 <HAL_Delay>
    switch (sentido)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d817      	bhi.n	800082c <gira90izq+0x60>
 80007fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000804 <gira90izq+0x38>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	08000815 	.word	0x08000815
 8000808:	0800081b 	.word	0x0800081b
 800080c:	08000821 	.word	0x08000821
 8000810:	08000827 	.word	0x08000827
    {
    case norte:
        sentido = oeste;
 8000814:	2303      	movs	r3, #3
 8000816:	71fb      	strb	r3, [r7, #7]
        break;
 8000818:	e008      	b.n	800082c <gira90izq+0x60>

    case este:
        sentido = norte;
 800081a:	2300      	movs	r3, #0
 800081c:	71fb      	strb	r3, [r7, #7]
        break;
 800081e:	e005      	b.n	800082c <gira90izq+0x60>

    case sur:
        sentido = este;
 8000820:	2301      	movs	r3, #1
 8000822:	71fb      	strb	r3, [r7, #7]
        break;
 8000824:	e002      	b.n	800082c <gira90izq+0x60>

    case oeste:
        sentido = sur;
 8000826:	2302      	movs	r3, #2
 8000828:	71fb      	strb	r3, [r7, #7]
        break;
 800082a:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 800082c:	79fb      	ldrb	r3, [r7, #7]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000004 	.word	0x20000004
 800083c:	20000006 	.word	0x20000006

08000840 <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <gira90der+0x6c>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ff1f 	bl	8000694 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <gira90der+0x70>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ff5d 	bl	800071c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 8000862:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000866:	f001 fb2f 	bl	8001ec8 <HAL_Delay>
    switch (sentido)
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d817      	bhi.n	80008a0 <gira90der+0x60>
 8000870:	a201      	add	r2, pc, #4	@ (adr r2, 8000878 <gira90der+0x38>)
 8000872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000876:	bf00      	nop
 8000878:	08000889 	.word	0x08000889
 800087c:	0800088f 	.word	0x0800088f
 8000880:	08000895 	.word	0x08000895
 8000884:	0800089b 	.word	0x0800089b
    {
    case norte:
        sentido = este;
 8000888:	2301      	movs	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
        break;
 800088c:	e008      	b.n	80008a0 <gira90der+0x60>

    case este:
        sentido = sur;
 800088e:	2302      	movs	r3, #2
 8000890:	71fb      	strb	r3, [r7, #7]
        break;
 8000892:	e005      	b.n	80008a0 <gira90der+0x60>

    case sur:
        sentido = oeste;
 8000894:	2303      	movs	r3, #3
 8000896:	71fb      	strb	r3, [r7, #7]
        break;
 8000898:	e002      	b.n	80008a0 <gira90der+0x60>

    case oeste:
        sentido = norte;
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]
        break;
 800089e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20000006 	.word	0x20000006

080008b4 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <gira180+0x6c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fee5 	bl	8000694 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <gira180+0x70>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	4619      	mov	r1, r3
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff ff23 	bl	800071c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 80008d6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80008da:	f001 faf5 	bl	8001ec8 <HAL_Delay>
    switch (sentido)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d817      	bhi.n	8000914 <gira180+0x60>
 80008e4:	a201      	add	r2, pc, #4	@ (adr r2, 80008ec <gira180+0x38>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	080008fd 	.word	0x080008fd
 80008f0:	08000903 	.word	0x08000903
 80008f4:	08000909 	.word	0x08000909
 80008f8:	0800090f 	.word	0x0800090f
    {
    case norte:
        sentido = sur;
 80008fc:	2302      	movs	r3, #2
 80008fe:	71fb      	strb	r3, [r7, #7]
        break;
 8000900:	e008      	b.n	8000914 <gira180+0x60>

    case este:
        sentido = oeste;
 8000902:	2303      	movs	r3, #3
 8000904:	71fb      	strb	r3, [r7, #7]
        break;
 8000906:	e005      	b.n	8000914 <gira180+0x60>

    case sur:
        sentido = norte;
 8000908:	2300      	movs	r3, #0
 800090a:	71fb      	strb	r3, [r7, #7]
        break;
 800090c:	e002      	b.n	8000914 <gira180+0x60>

    case oeste:
        sentido = este;
 800090e:	2301      	movs	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
        break;
 8000912:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000914:	79fb      	ldrb	r3, [r7, #7]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000004 	.word	0x20000004
 8000924:	20000006 	.word	0x20000006

08000928 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 800092c:	2100      	movs	r1, #0
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff feb0 	bl	8000694 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff fef0 	bl	800071c <set_motor_der>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	460a      	mov	r2, r1
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	4613      	mov	r3, r2
 800094e:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f996 	bl	8000c88 <laberinto_posicion_valida>
 800095c:	4603      	mov	r3, r0
 800095e:	f083 0301 	eor.w	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000968:	23ff      	movs	r3, #255	@ 0xff
 800096a:	e00f      	b.n	800098c <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	1e59      	subs	r1, r3, #1
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	3b01      	subs	r3, #1
 8000974:	4807      	ldr	r0, [pc, #28]	@ (8000994 <laberinto_get_peso+0x54>)
 8000976:	461a      	mov	r2, r3
 8000978:	00d2      	lsls	r2, r2, #3
 800097a:	1ad2      	subs	r2, r2, r3
 800097c:	460b      	mov	r3, r1
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	4403      	add	r3, r0
 8000988:	3302      	adds	r3, #2
 800098a:	781b      	ldrb	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000cc 	.word	0x200000cc

08000998 <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	460b      	mov	r3, r1
 80009a4:	71bb      	strb	r3, [r7, #6]
 80009a6:	4613      	mov	r3, r2
 80009a8:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f969 	bl	8000c88 <laberinto_posicion_valida>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f083 0301 	eor.w	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d146      	bne.n	8000a50 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	1e59      	subs	r1, r3, #1
 80009c6:	79bb      	ldrb	r3, [r7, #6]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	7978      	ldrb	r0, [r7, #5]
 80009cc:	4c22      	ldr	r4, [pc, #136]	@ (8000a58 <laberinto_set_muro+0xc0>)
 80009ce:	461a      	mov	r2, r3
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	4423      	add	r3, r4
 80009e0:	4403      	add	r3, r0
 80009e2:	3303      	adds	r3, #3
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	723b      	strb	r3, [r7, #8]
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	4619      	mov	r1, r3
 80009f4:	68b8      	ldr	r0, [r7, #8]
 80009f6:	f000 f90d 	bl	8000c14 <laberinto_get_posicion_adyacente>
 80009fa:	4603      	mov	r3, r0
 80009fc:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 80009fe:	7b3b      	ldrb	r3, [r7, #12]
 8000a00:	7b7a      	ldrb	r2, [r7, #13]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f93f 	bl	8000c88 <laberinto_posicion_valida>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d01c      	beq.n	8000a4a <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000a10:	797b      	ldrb	r3, [r7, #5]
 8000a12:	3302      	adds	r3, #2
 8000a14:	425a      	negs	r2, r3
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	f002 0203 	and.w	r2, r2, #3
 8000a1e:	bf58      	it	pl
 8000a20:	4253      	negpl	r3, r2
 8000a22:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000a24:	7b3b      	ldrb	r3, [r7, #12]
 8000a26:	1e59      	subs	r1, r3, #1
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	7bf8      	ldrb	r0, [r7, #15]
 8000a2e:	4c0a      	ldr	r4, [pc, #40]	@ (8000a58 <laberinto_set_muro+0xc0>)
 8000a30:	461a      	mov	r2, r3
 8000a32:	00d2      	lsls	r2, r2, #3
 8000a34:	1ad2      	subs	r2, r2, r3
 8000a36:	460b      	mov	r3, r1
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	1a5b      	subs	r3, r3, r1
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	4423      	add	r3, r4
 8000a42:	4403      	add	r3, r0
 8000a44:	3303      	adds	r3, #3
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000a4a:	f000 f807 	bl	8000a5c <laberinto_recalcular_pesos>
 8000a4e:	e000      	b.n	8000a52 <laberinto_set_muro+0xba>
        return;
 8000a50:	bf00      	nop
}
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	200000cc 	.word	0x200000cc

08000a5c <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000a6e:	e092      	b.n	8000b96 <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	3301      	adds	r3, #1
 8000a78:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	737b      	strb	r3, [r7, #13]
 8000a7e:	e086      	b.n	8000b8e <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000a80:	2301      	movs	r3, #1
 8000a82:	733b      	strb	r3, [r7, #12]
 8000a84:	e07c      	b.n	8000b80 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d102      	bne.n	8000a92 <laberinto_recalcular_pesos+0x36>
 8000a8c:	7b3b      	ldrb	r3, [r7, #12]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d072      	beq.n	8000b78 <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000a92:	23ff      	movs	r3, #255	@ 0xff
 8000a94:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	72bb      	strb	r3, [r7, #10]
 8000a9a:	e03a      	b.n	8000b12 <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000a9c:	7b7b      	ldrb	r3, [r7, #13]
 8000a9e:	1e59      	subs	r1, r3, #1
 8000aa0:	7b3b      	ldrb	r3, [r7, #12]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	7ab8      	ldrb	r0, [r7, #10]
 8000aa6:	4c42      	ldr	r4, [pc, #264]	@ (8000bb0 <laberinto_recalcular_pesos+0x154>)
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	1ad2      	subs	r2, r2, r3
 8000aae:	460b      	mov	r3, r1
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	1a5b      	subs	r3, r3, r1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4423      	add	r3, r4
 8000aba:	4403      	add	r3, r0
 8000abc:	3303      	adds	r3, #3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d122      	bne.n	8000b0a <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000ac4:	7b7b      	ldrb	r3, [r7, #13]
 8000ac6:	703b      	strb	r3, [r7, #0]
 8000ac8:	7b3b      	ldrb	r3, [r7, #12]
 8000aca:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000acc:	7abb      	ldrb	r3, [r7, #10]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	6838      	ldr	r0, [r7, #0]
 8000ad2:	f000 f89f 	bl	8000c14 <laberinto_get_posicion_adyacente>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000ada:	793b      	ldrb	r3, [r7, #4]
 8000adc:	797a      	ldrb	r2, [r7, #5]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f8d1 	bl	8000c88 <laberinto_posicion_valida>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00f      	beq.n	8000b0c <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000aec:	793b      	ldrb	r3, [r7, #4]
 8000aee:	797a      	ldrb	r2, [r7, #5]
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff24 	bl	8000940 <laberinto_get_peso>
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000afc:	79fa      	ldrb	r2, [r7, #7]
 8000afe:	7afb      	ldrb	r3, [r7, #11]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d203      	bcs.n	8000b0c <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	72fb      	strb	r3, [r7, #11]
 8000b08:	e000      	b.n	8000b0c <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000b0a:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000b0c:	7abb      	ldrb	r3, [r7, #10]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	72bb      	strb	r3, [r7, #10]
 8000b12:	7abb      	ldrb	r3, [r7, #10]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d9c1      	bls.n	8000a9c <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	2bff      	cmp	r3, #255	@ 0xff
 8000b1c:	d003      	beq.n	8000b26 <laberinto_recalcular_pesos+0xca>
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	e000      	b.n	8000b28 <laberinto_recalcular_pesos+0xcc>
 8000b26:	23ff      	movs	r3, #255	@ 0xff
 8000b28:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	1e59      	subs	r1, r3, #1
 8000b2e:	7b3b      	ldrb	r3, [r7, #12]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	481f      	ldr	r0, [pc, #124]	@ (8000bb0 <laberinto_recalcular_pesos+0x154>)
 8000b34:	461a      	mov	r2, r3
 8000b36:	00d2      	lsls	r2, r2, #3
 8000b38:	1ad2      	subs	r2, r2, r3
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	1a5b      	subs	r3, r3, r1
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	4403      	add	r3, r0
 8000b46:	3302      	adds	r3, #2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	7a3a      	ldrb	r2, [r7, #8]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d014      	beq.n	8000b7a <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000b50:	7b7b      	ldrb	r3, [r7, #13]
 8000b52:	1e59      	subs	r1, r3, #1
 8000b54:	7b3b      	ldrb	r3, [r7, #12]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	4815      	ldr	r0, [pc, #84]	@ (8000bb0 <laberinto_recalcular_pesos+0x154>)
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	1ad2      	subs	r2, r2, r3
 8000b60:	460b      	mov	r3, r1
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	4403      	add	r3, r0
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	7a3a      	ldrb	r2, [r7, #8]
 8000b70:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e000      	b.n	8000b7a <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000b78:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000b7a:	7b3b      	ldrb	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	733b      	strb	r3, [r7, #12]
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	f67f af7f 	bls.w	8000a86 <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000b88:	7b7b      	ldrb	r3, [r7, #13]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	737b      	strb	r3, [r7, #13]
 8000b8e:	7b7b      	ldrb	r3, [r7, #13]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	f67f af75 	bls.w	8000a80 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d004      	beq.n	8000ba6 <laberinto_recalcular_pesos+0x14a>
 8000b9c:	7bba      	ldrb	r2, [r7, #14]
 8000b9e:	7a7b      	ldrb	r3, [r7, #9]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f4ff af65 	bcc.w	8000a70 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000cc 	.word	0x200000cc

08000bb4 <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	71bb      	strb	r3, [r7, #6]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000bc6:	79ba      	ldrb	r2, [r7, #6]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f85b 	bl	8000c88 <laberinto_posicion_valida>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000bde:	2301      	movs	r3, #1
 8000be0:	e011      	b.n	8000c06 <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	1e59      	subs	r1, r3, #1
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	7978      	ldrb	r0, [r7, #5]
 8000bec:	4c08      	ldr	r4, [pc, #32]	@ (8000c10 <laberinto_hay_muro+0x5c>)
 8000bee:	461a      	mov	r2, r3
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	1ad2      	subs	r2, r2, r3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4423      	add	r3, r4
 8000c00:	4403      	add	r3, r0
 8000c02:	3303      	adds	r3, #3
 8000c04:	781b      	ldrb	r3, [r3, #0]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000cc 	.word	0x200000cc

08000c14 <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	80b8      	strh	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d81e      	bhi.n	8000c68 <laberinto_get_posicion_adyacente+0x54>
 8000c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c30 <laberinto_get_posicion_adyacente+0x1c>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000c41 	.word	0x08000c41
 8000c34:	08000c4b 	.word	0x08000c4b
 8000c38:	08000c55 	.word	0x08000c55
 8000c3c:	08000c5f 	.word	0x08000c5f
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000c40:	793b      	ldrb	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	723b      	strb	r3, [r7, #8]
        break;
 8000c48:	e00e      	b.n	8000c68 <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	727b      	strb	r3, [r7, #9]
        break;
 8000c52:	e009      	b.n	8000c68 <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000c54:	793b      	ldrb	r3, [r7, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	723b      	strb	r3, [r7, #8]
        break;
 8000c5c:	e004      	b.n	8000c68 <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000c5e:	797b      	ldrb	r3, [r7, #5]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	727b      	strb	r3, [r7, #9]
        break;
 8000c66:	bf00      	nop
    }

    return nueva_pos;
 8000c68:	893b      	ldrh	r3, [r7, #8]
 8000c6a:	81bb      	strh	r3, [r7, #12]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	7b3a      	ldrb	r2, [r7, #12]
 8000c70:	f362 0307 	bfi	r3, r2, #0, #8
 8000c74:	7b7a      	ldrb	r2, [r7, #13]
 8000c76:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00a      	beq.n	8000cb4 <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d807      	bhi.n	8000cb4 <laberinto_posicion_valida+0x2c>
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d801      	bhi.n	8000cb4 <laberinto_posicion_valida+0x2c>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <laberinto_posicion_valida+0x2e>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f001 f88a 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f846 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 fa42 	bl	800115c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd8:	f000 fa20 	bl	800111c <MX_DMA_Init>
  MX_I2C1_Init();
 8000cdc:	f000 f90a 	bl	8000ef4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ce0:	f000 f936 	bl	8000f50 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ce4:	f000 f962 	bl	8000fac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ce8:	f00a f99c 	bl	800b024 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000cec:	f000 f8a2 	bl	8000e34 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000cf0:	f000 f992 	bl	8001018 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 8000cf4:	22c8      	movs	r2, #200	@ 0xc8
 8000cf6:	4915      	ldr	r1, [pc, #84]	@ (8000d4c <main+0x84>)
 8000cf8:	4815      	ldr	r0, [pc, #84]	@ (8000d50 <main+0x88>)
 8000cfa:	f001 f94d 	bl	8001f98 <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  // auto_calibracion();
  // Inicializar el módulo de motores
  control_motor_init();
 8000cfe:	f7ff fcb9 	bl	8000674 <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d02:	f00a f9b5 	bl	800b070 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <main+0x8c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d015      	beq.n	8000d40 <main+0x78>
    {
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

      if (flag_linea_detectada)
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <main+0x90>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d005      	beq.n	8000d2a <main+0x62>
      {
        flag_linea_detectada = false; // Clear flag PRIMERO
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <main+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
        chequeolinea();               // Ejecutar función completa
 8000d24:	f000 fb78 	bl	8001418 <chequeolinea>
 8000d28:	e00c      	b.n	8000d44 <main+0x7c>
      }
      else if (flag_muro_detectado)
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <main+0x94>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <main+0x7c>
      {                              // else if = prioridad a línea
        flag_muro_detectado = false; // Clear flag PRIMERO
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <main+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
        chequeomuro();               // Ejecutar función completa
 8000d3a:	f000 fbb5 	bl	80014a8 <chequeomuro>
 8000d3e:	e001      	b.n	8000d44 <main+0x7c>
        // controlar_linea_recta();
      }
    }
    else
    {
      termino();
 8000d40:	f7ff fdf2 	bl	8000928 <termino>
    }
    reset_posicion_pushbutton(); // ⚡ I AM SPEED button
 8000d44:	f000 fbe6 	bl	8001514 <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 8000d48:	e7db      	b.n	8000d02 <main+0x3a>
 8000d4a:	bf00      	nop
 8000d4c:	20000324 	.word	0x20000324
 8000d50:	2000013c 	.word	0x2000013c
 8000d54:	20000321 	.word	0x20000321
 8000d58:	200004b4 	.word	0x200004b4
 8000d5c:	200004b5 	.word	0x200004b5

08000d60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	@ 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	@ 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00a fd20 	bl	800b7b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	@ (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	@ (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000dd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 fa46 	bl	8006278 <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df2:	f000 fc25 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e02:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2105      	movs	r1, #5
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fca7 	bl	8006768 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e20:	f000 fc0e 	bl	8001640 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	@ 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000e46:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e48:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <MX_ADC1_Init+0xb8>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e76:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <MX_ADC1_Init+0xbc>)
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e94:	4814      	ldr	r0, [pc, #80]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000e96:	f001 f83b 	bl	8001f10 <HAL_ADC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f000 fbce 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000eac:	2305      	movs	r3, #5
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000eb6:	f001 f98d 	bl	80021d4 <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec0:	f000 fbbe 	bl	8001640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_ADC1_Init+0xb4>)
 8000ed2:	f001 f97f 	bl	80021d4 <HAL_ADC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000edc:	f000 fbb0 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000013c 	.word	0x2000013c
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	0f000001 	.word	0x0f000001

08000ef4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_I2C1_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x58>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f32:	f004 fbbd 	bl	80056b0 <HAL_I2C_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f000 fb80 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001e4 	.word	0x200001e4
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f56:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <MX_I2S3_Init+0x58>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f60:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f76:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000f7a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_I2S3_Init+0x54>)
 8000f90:	f004 fcd2 	bl	8005938 <HAL_I2S_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f9a:	f000 fb51 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000238 	.word	0x20000238
 8000fa8:	40003c00 	.word	0x40003c00

08000fac <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <MX_SPI1_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ffe:	f005 ff01 	bl	8006e04 <HAL_SPI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001008:	f000 fb1a 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000280 	.word	0x20000280
 8001014:	40013000 	.word	0x40013000

08001018 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001048:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800104a:	4a33      	ldr	r2, [pc, #204]	@ (8001118 <MX_TIM3_Init+0x100>)
 800104c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001050:	2253      	movs	r2, #83	@ 0x53
 8001052:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800105c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001060:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001070:	f005 ff51 	bl	8006f16 <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800107a:	f000 fae1 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001082:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001084:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001088:	4619      	mov	r1, r3
 800108a:	4822      	ldr	r0, [pc, #136]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800108c:	f006 f976 	bl	800737c <HAL_TIM_ConfigClockSource>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001096:	f000 fad3 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800109a:	481e      	ldr	r0, [pc, #120]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800109c:	f005 ff8a 	bl	8006fb4 <HAL_TIM_PWM_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010a6:	f000 facb 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	4619      	mov	r1, r3
 80010b8:	4816      	ldr	r0, [pc, #88]	@ (8001114 <MX_TIM3_Init+0xfc>)
 80010ba:	f006 fd3d 	bl	8007b38 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010c4:	f000 fabc 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c8:	2360      	movs	r3, #96	@ 0x60
 80010ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2208      	movs	r2, #8
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_TIM3_Init+0xfc>)
 80010e0:	f006 f88a 	bl	80071f8 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010ea:	f000 faa9 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	220c      	movs	r2, #12
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <MX_TIM3_Init+0xfc>)
 80010f6:	f006 f87f 	bl	80071f8 <HAL_TIM_PWM_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001100:	f000 fa9e 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001106:	f000 fd73 	bl	8001bf0 <HAL_TIM_MspPostInit>
}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	@ 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002d8 	.word	0x200002d8
 8001118:	40000400 	.word	0x40000400

0800111c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <MX_DMA_Init+0x3c>)
 800112c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2038      	movs	r0, #56	@ 0x38
 8001144:	f001 fbe5 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001148:	2038      	movs	r0, #56	@ 0x38
 800114a:	f001 fbfe 	bl	800294a <HAL_NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	4b86      	ldr	r3, [pc, #536]	@ (8001390 <MX_GPIO_Init+0x234>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a85      	ldr	r2, [pc, #532]	@ (8001390 <MX_GPIO_Init+0x234>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b83      	ldr	r3, [pc, #524]	@ (8001390 <MX_GPIO_Init+0x234>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	4b7f      	ldr	r3, [pc, #508]	@ (8001390 <MX_GPIO_Init+0x234>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a7e      	ldr	r2, [pc, #504]	@ (8001390 <MX_GPIO_Init+0x234>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b7c      	ldr	r3, [pc, #496]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b78      	ldr	r3, [pc, #480]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a77      	ldr	r2, [pc, #476]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b75      	ldr	r3, [pc, #468]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b71      	ldr	r3, [pc, #452]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a70      	ldr	r2, [pc, #448]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a69      	ldr	r2, [pc, #420]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b67      	ldr	r3, [pc, #412]	@ (8001390 <MX_GPIO_Init+0x234>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b63      	ldr	r3, [pc, #396]	@ (8001390 <MX_GPIO_Init+0x234>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a62      	ldr	r2, [pc, #392]	@ (8001390 <MX_GPIO_Init+0x234>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b60      	ldr	r3, [pc, #384]	@ (8001390 <MX_GPIO_Init+0x234>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2108      	movs	r1, #8
 800121e:	485d      	ldr	r0, [pc, #372]	@ (8001394 <MX_GPIO_Init+0x238>)
 8001220:	f002 f8e0 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2101      	movs	r1, #1
 8001228:	485b      	ldr	r0, [pc, #364]	@ (8001398 <MX_GPIO_Init+0x23c>)
 800122a:	f002 f8db 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001234:	4859      	ldr	r0, [pc, #356]	@ (800139c <MX_GPIO_Init+0x240>)
 8001236:	f002 f8d5 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001240:	4857      	ldr	r0, [pc, #348]	@ (80013a0 <MX_GPIO_Init+0x244>)
 8001242:	f002 f8cf 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001246:	2308      	movs	r3, #8
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	484d      	ldr	r0, [pc, #308]	@ (8001394 <MX_GPIO_Init+0x238>)
 800125e:	f001 ff0d 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001262:	2301      	movs	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4847      	ldr	r0, [pc, #284]	@ (8001398 <MX_GPIO_Init+0x23c>)
 800127a:	f001 feff 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800127e:	2308      	movs	r3, #8
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128e:	2305      	movs	r3, #5
 8001290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	483f      	ldr	r0, [pc, #252]	@ (8001398 <MX_GPIO_Init+0x23c>)
 800129a:	f001 feef 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 800129e:	2301      	movs	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	483c      	ldr	r0, [pc, #240]	@ (80013a4 <MX_GPIO_Init+0x248>)
 80012b2:	f001 fee3 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012b6:	2304      	movs	r3, #4
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4834      	ldr	r0, [pc, #208]	@ (800139c <MX_GPIO_Init+0x240>)
 80012ca:	f001 fed7 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e0:	2305      	movs	r3, #5
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	482c      	ldr	r0, [pc, #176]	@ (800139c <MX_GPIO_Init+0x240>)
 80012ec:	f001 fec6 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 80012f0:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4824      	ldr	r0, [pc, #144]	@ (800139c <MX_GPIO_Init+0x240>)
 800130a:	f001 feb7 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800130e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	481e      	ldr	r0, [pc, #120]	@ (80013a0 <MX_GPIO_Init+0x244>)
 8001328:	f001 fea8 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 800132c:	23c0      	movs	r3, #192	@ 0xc0
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4815      	ldr	r0, [pc, #84]	@ (8001398 <MX_GPIO_Init+0x23c>)
 8001342:	f001 fe9b 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001346:	2320      	movs	r3, #32
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <MX_GPIO_Init+0x244>)
 800135a:	f001 fe8f 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001362:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <MX_GPIO_Init+0x238>)
 8001374:	f001 fe82 	bl	800307c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	2017      	movs	r0, #23
 800137e:	f001 fac8 	bl	8002912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001382:	2017      	movs	r0, #23
 8001384:	f001 fae1 	bl	800294a <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	@ 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40021000 	.word	0x40021000
 8001398:	40020800 	.word	0x40020800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40020000 	.word	0x40020000

080013a8 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	4613      	mov	r3, r2
 80013b4:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d827      	bhi.n	800140c <actualizar_posicion+0x64>
 80013bc:	a201      	add	r2, pc, #4	@ (adr r2, 80013c4 <actualizar_posicion+0x1c>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013e3 	.word	0x080013e3
 80013cc:	080013f1 	.word	0x080013f1
 80013d0:	080013ff 	.word	0x080013ff
  {
  case norte:
    (*fila)--;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	701a      	strb	r2, [r3, #0]
    break;
 80013e0:	e014      	b.n	800140c <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	701a      	strb	r2, [r3, #0]
    break;
 80013ee:	e00d      	b.n	800140c <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	701a      	strb	r2, [r3, #0]
    break;
 80013fc:	e006      	b.n	800140c <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3b01      	subs	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	701a      	strb	r2, [r3, #0]
    break;
 800140a:	bf00      	nop
  }
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  // if (antirebote(LineSensor_GPIO_Port, LineSensor_Pin))
  // {
  // RETARDO DE UNOS MS
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800141e:	2017      	movs	r0, #23
 8001420:	f001 faa1 	bl	8002966 <HAL_NVIC_DisableIRQ>
  HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <chequeolinea+0x7c>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fd4d 	bl	8001ec8 <HAL_Delay>

  // Actualizar posición
  actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <chequeolinea+0x80>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4919      	ldr	r1, [pc, #100]	@ (800149c <chequeolinea+0x84>)
 8001436:	481a      	ldr	r0, [pc, #104]	@ (80014a0 <chequeolinea+0x88>)
 8001438:	f7ff ffb6 	bl	80013a8 <actualizar_posicion>

  // terminó?
  if (fila_actual == 1 && columna_actual == 1)
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <chequeolinea+0x88>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d109      	bne.n	8001458 <chequeolinea+0x40>
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <chequeolinea+0x84>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <chequeolinea+0x40>
  {
    termino();
 800144c:	f7ff fa6c 	bl	8000928 <termino>
    terminado = true;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <chequeolinea+0x8c>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
    return;
 8001456:	e019      	b.n	800148c <chequeolinea+0x74>
  }

  // Calcular y ejecutar
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <chequeolinea+0x88>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4a0f      	ldr	r2, [pc, #60]	@ (800149c <chequeolinea+0x84>)
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f8f2 	bl	800164c <calcular_mejor_direccion>
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <chequeolinea+0x80>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f9ab 	bl	80017d0 <ejecutar_movimiento>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <chequeolinea+0x80>)
 8001480:	701a      	strb	r2, [r3, #0]
  avanza();
 8001482:	f7ff f98f 	bl	80007a4 <avanza>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001486:	2017      	movs	r0, #23
 8001488:	f001 fa5f 	bl	800294a <HAL_NVIC_EnableIRQ>
  //}
}
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000000a 	.word	0x2000000a
 8001498:	20000320 	.word	0x20000320
 800149c:	20000009 	.word	0x20000009
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000321 	.word	0x20000321

080014a8 <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80014ae:	2017      	movs	r0, #23
 80014b0:	f001 fa59 	bl	8002966 <HAL_NVIC_DisableIRQ>
  // if (antirebote(WallSensor_GPIO_Port, WallSensor_Pin))

  // 1. Registrar el muro detectado
  laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <chequeomuro+0x60>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4a14      	ldr	r2, [pc, #80]	@ (800150c <chequeomuro+0x64>)
 80014ba:	7811      	ldrb	r1, [r2, #0]
 80014bc:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <chequeomuro+0x68>)
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fa69 	bl	8000998 <laberinto_set_muro>

  // 2. Recalcular todos los pesos con el nuevo muro
  laberinto_recalcular_pesos();
 80014c6:	f7ff fac9 	bl	8000a5c <laberinto_recalcular_pesos>

  // 3. Calcular nueva mejor dirección
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <chequeomuro+0x60>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4a0f      	ldr	r2, [pc, #60]	@ (800150c <chequeomuro+0x64>)
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f8b9 	bl	800164c <calcular_mejor_direccion>
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]

  // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <chequeomuro+0x68>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f972 	bl	80017d0 <ejecutar_movimiento>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <chequeomuro+0x68>)
 80014f2:	701a      	strb	r2, [r3, #0]
  avanza();
 80014f4:	f7ff f956 	bl	80007a4 <avanza>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014f8:	2017      	movs	r0, #23
 80014fa:	f001 fa26 	bl	800294a <HAL_NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	20000009 	.word	0x20000009
 8001510:	20000320 	.word	0x20000320

08001514 <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001518:	2101      	movs	r1, #1
 800151a:	4817      	ldr	r0, [pc, #92]	@ (8001578 <reset_posicion_pushbutton+0x64>)
 800151c:	f7fe ffea 	bl	80004f4 <antirebote>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d025      	beq.n	8001572 <reset_posicion_pushbutton+0x5e>
  {
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001526:	2017      	movs	r0, #23
 8001528:	f001 fa1d 	bl	8002966 <HAL_NVIC_DisableIRQ>

    // Resetear posición
    fila_actual = 4;
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <reset_posicion_pushbutton+0x68>)
 800152e:	2204      	movs	r2, #4
 8001530:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <reset_posicion_pushbutton+0x6c>)
 8001534:	2204      	movs	r2, #4
 8001536:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <reset_posicion_pushbutton+0x70>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
    terminado = false;
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <reset_posicion_pushbutton+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 8001544:	f7ff f882 	bl	800064c <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <reset_posicion_pushbutton+0x78>)
 800154a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800154e:	801a      	strh	r2, [r3, #0]

    flag_linea_detectada = false;
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <reset_posicion_pushbutton+0x7c>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
    flag_muro_detectado = false;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <reset_posicion_pushbutton+0x80>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

    // Resetear estados de sensores
    ultimo_estado_linea = true;
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <reset_posicion_pushbutton+0x84>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = true;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <reset_posicion_pushbutton+0x88>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]

    avanza();
 8001568:	f7ff f91c 	bl	80007a4 <avanza>
    // Reactivar interrupciones
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800156c:	2017      	movs	r0, #23
 800156e:	f001 f9ec 	bl	800294a <HAL_NVIC_EnableIRQ>
  }
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40020000 	.word	0x40020000
 800157c:	20000008 	.word	0x20000008
 8001580:	20000009 	.word	0x20000009
 8001584:	20000320 	.word	0x20000320
 8001588:	20000321 	.word	0x20000321
 800158c:	2000000a 	.word	0x2000000a
 8001590:	200004b4 	.word	0x200004b4
 8001594:	200004b5 	.word	0x200004b5
 8001598:	2000000c 	.word	0x2000000c
 800159c:	2000000d 	.word	0x2000000d

080015a0 <HAL_GPIO_EXTI_Callback>:

// ATENCION A LA INTERRUPCION
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LineSensor_Pin)
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	2b80      	cmp	r3, #128	@ 0x80
 80015ae:	d11b      	bne.n	80015e8 <HAL_GPIO_EXTI_Callback+0x48>
  {
    // Leer estado actual del sensor
    bool estado_actual = HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin);
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	481e      	ldr	r0, [pc, #120]	@ (800162c <HAL_GPIO_EXTI_Callback+0x8c>)
 80015b4:	f001 fefe 	bl	80033b4 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]

    // Solo activar flag si hubo transición HIGH → LOW
    if (ultimo_estado_linea == true && estado_actual == false)
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <HAL_GPIO_EXTI_Callback+0x90>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_GPIO_EXTI_Callback+0x40>
 80015ce:	7bbb      	ldrb	r3, [r7, #14]
 80015d0:	f083 0301 	eor.w	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_GPIO_EXTI_Callback+0x40>
    {
      flag_linea_detectada = true;
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_GPIO_EXTI_Callback+0x94>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
    }

    // Actualizar último estado
    ultimo_estado_linea = estado_actual;
 80015e0:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <HAL_GPIO_EXTI_Callback+0x90>)
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	7013      	strb	r3, [r2, #0]
    }

    // Actualizar último estado
    ultimo_estado_muro = estado_actual;
  }
}
 80015e6:	e01d      	b.n	8001624 <HAL_GPIO_EXTI_Callback+0x84>
  else if (GPIO_Pin == WallSensor_Pin)
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	2b40      	cmp	r3, #64	@ 0x40
 80015ec:	d11a      	bne.n	8001624 <HAL_GPIO_EXTI_Callback+0x84>
    bool estado_actual = HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin);
 80015ee:	2140      	movs	r1, #64	@ 0x40
 80015f0:	480e      	ldr	r0, [pc, #56]	@ (800162c <HAL_GPIO_EXTI_Callback+0x8c>)
 80015f2:	f001 fedf 	bl	80033b4 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
    if (ultimo_estado_muro == true && estado_actual == false)
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_GPIO_EXTI_Callback+0x98>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_GPIO_EXTI_Callback+0x7e>
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f083 0301 	eor.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_GPIO_EXTI_Callback+0x7e>
      flag_muro_detectado = true;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <HAL_GPIO_EXTI_Callback+0x9c>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = estado_actual;
 800161e:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <HAL_GPIO_EXTI_Callback+0x98>)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	7013      	strb	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020800 	.word	0x40020800
 8001630:	2000000c 	.word	0x2000000c
 8001634:	200004b4 	.word	0x200004b4
 8001638:	2000000d 	.word	0x2000000d
 800163c:	200004b5 	.word	0x200004b5

08001640 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <Error_Handler+0x8>

0800164c <calcular_mejor_direccion>:
 */

#include "navegacion.h"

brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) // nos devuelve direccion en TIPO BRUJULA gracias colo
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	@ 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
    uint8_t peso_minimo = PESO_MAXIMO;
 800165c:	23ff      	movs	r3, #255	@ 0xff
 800165e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    brujula mejor_direccion = norte; // Dirección por defecto
 8001662:	2300      	movs	r3, #0
 8001664:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool direccion_valida_encontrada = false;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // Para dar preferencia a oeste y norte que llevan hacia la meta (1,1)
    // Primero oeste, luego norte, luego sur, luego este
    static const brujula orden_eval[] = {oeste, norte, sur, este};

    for (int i = 0; i < 4; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001672:	e04f      	b.n	8001714 <calcular_mejor_direccion+0xc8>
    {
        brujula direccion = orden_eval[i];
 8001674:	4a55      	ldr	r2, [pc, #340]	@ (80017cc <calcular_mejor_direccion+0x180>)
 8001676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // 1. ¿Hay muro en esta dirección?
        if (laberinto_hay_muro(fila_actual, columna_actual, direccion))
 8001680:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001684:	79b9      	ldrb	r1, [r7, #6]
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fa93 	bl	8000bb4 <laberinto_hay_muro>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d139      	bne.n	8001708 <calcular_mejor_direccion+0xbc>
            continue; // Saltar si hay muro
        }

        // 2. Obtener posición adyacente
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, direccion);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	763b      	strb	r3, [r7, #24]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	767b      	strb	r3, [r7, #25]
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 800169c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016a0:	4619      	mov	r1, r3
 80016a2:	69b8      	ldr	r0, [r7, #24]
 80016a4:	f7ff fab6 	bl	8000c14 <laberinto_get_posicion_adyacente>
 80016a8:	4603      	mov	r3, r0
 80016aa:	83bb      	strh	r3, [r7, #28]

        // 3. ¿Es válida? (no salirse del laberinto)
        if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 80016ac:	7f3b      	ldrb	r3, [r7, #28]
 80016ae:	7f7a      	ldrb	r2, [r7, #29]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fae8 	bl	8000c88 <laberinto_posicion_valida>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d123      	bne.n	800170c <calcular_mejor_direccion+0xc0>
        {
            continue; // Saltar si está fuera del laberinto
        }

        // 4. Obtener peso de la casilla adyacente
        uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 80016c4:	7f3b      	ldrb	r3, [r7, #28]
 80016c6:	7f7a      	ldrb	r2, [r7, #29]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f938 	bl	8000940 <laberinto_get_peso>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // 5. ¿Es el mejor peso hasta ahora? O primera dirección válida encontrada
        if (!direccion_valida_encontrada || peso_adyacente < peso_minimo)
 80016d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80016da:	f083 0301 	eor.w	r3, r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <calcular_mejor_direccion+0xa4>
 80016e4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80016e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d20e      	bcs.n	800170e <calcular_mejor_direccion+0xc2>
        {
            peso_minimo = peso_adyacente;
 80016f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80016f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mejor_direccion = direccion;
 80016f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            direccion_valida_encontrada = true;
 8001700:	2301      	movs	r3, #1
 8001702:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001706:	e002      	b.n	800170e <calcular_mejor_direccion+0xc2>
            continue; // Saltar si hay muro
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <calcular_mejor_direccion+0xc2>
            continue; // Saltar si está fuera del laberinto
 800170c:	bf00      	nop
    for (int i = 0; i < 4; i++)
 800170e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001710:	3301      	adds	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001716:	2b03      	cmp	r3, #3
 8001718:	ddac      	ble.n	8001674 <calcular_mejor_direccion+0x28>
        }
    }

    // Verificación final de seguridad: asegurarnos que la dirección elegida es válida
    if (direccion_valida_encontrada)
 800171a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800171e:	2b00      	cmp	r3, #0
 8001720:	d04d      	beq.n	80017be <calcular_mejor_direccion+0x172>
    {
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, mejor_direccion);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	743b      	strb	r3, [r7, #16]
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	747b      	strb	r3, [r7, #17]
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
 800172a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800172e:	4619      	mov	r1, r3
 8001730:	6938      	ldr	r0, [r7, #16]
 8001732:	f7ff fa6f 	bl	8000c14 <laberinto_get_posicion_adyacente>
 8001736:	4603      	mov	r3, r0
 8001738:	82bb      	strh	r3, [r7, #20]

        // Doble verificación para asegurarnos que no nos salimos del laberinto
        if (!laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna))
 800173a:	7d3b      	ldrb	r3, [r7, #20]
 800173c:	7d7a      	ldrb	r2, [r7, #21]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff faa1 	bl	8000c88 <laberinto_posicion_valida>
 8001746:	4603      	mov	r3, r0
 8001748:	f083 0301 	eor.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d035      	beq.n	80017be <calcular_mejor_direccion+0x172>
        {
            // Algo salió mal, buscar cualquier dirección válida
            for (int i = 0; i < 4; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
 8001756:	e02f      	b.n	80017b8 <calcular_mejor_direccion+0x16c>
            {
                brujula dir_alternativa = orden_eval[i];
 8001758:	4a1c      	ldr	r2, [pc, #112]	@ (80017cc <calcular_mejor_direccion+0x180>)
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pos_siguiente = laberinto_get_posicion_adyacente(
                    (posicion_t){fila_actual, columna_actual}, dir_alternativa);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	733b      	strb	r3, [r7, #12]
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	737b      	strb	r3, [r7, #13]
                pos_siguiente = laberinto_get_posicion_adyacente(
 800176c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001770:	4619      	mov	r1, r3
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff fa4e 	bl	8000c14 <laberinto_get_posicion_adyacente>
 8001778:	4603      	mov	r3, r0
 800177a:	82bb      	strh	r3, [r7, #20]

                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 800177c:	7d3b      	ldrb	r3, [r7, #20]
 800177e:	7d7a      	ldrb	r2, [r7, #21]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa80 	bl	8000c88 <laberinto_posicion_valida>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d011      	beq.n	80017b2 <calcular_mejor_direccion+0x166>
                    !laberinto_hay_muro(fila_actual, columna_actual, dir_alternativa))
 800178e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001792:	79b9      	ldrb	r1, [r7, #6]
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fa0c 	bl	8000bb4 <laberinto_hay_muro>
 800179c:	4603      	mov	r3, r0
 800179e:	f083 0301 	eor.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <calcular_mejor_direccion+0x166>
                {
                    mejor_direccion = dir_alternativa;
 80017a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80017b0:	e005      	b.n	80017be <calcular_mejor_direccion+0x172>
            for (int i = 0; i < 4; i++)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	ddcc      	ble.n	8001758 <calcular_mejor_direccion+0x10c>
                }
            }
        }
    }

    return mejor_direccion;
 80017be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3730      	adds	r7, #48	@ 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	0800b8ec 	.word	0x0800b8ec

080017d0 <ejecutar_movimiento>:

brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
    // ¿Ya está orientado correctamente?
    if (sentido_actual == sentido_deseado)
 80017e0:	79fa      	ldrb	r2, [r7, #7]
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d101      	bne.n	80017ec <ejecutar_movimiento+0x1c>
    {
        // avanza(); // Solo avanzar
        return sentido_actual;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	e02b      	b.n	8001844 <ejecutar_movimiento+0x74>
    }

    // Calcular diferencia usando aritmética xq es un tipo brujula
    // norte=0, este=1, sur=2, oeste=3
    int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 80017ec:	79ba      	ldrb	r2, [r7, #6]
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	3304      	adds	r3, #4
 80017f4:	425a      	negs	r2, r3
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	bf58      	it	pl
 8001800:	4253      	negpl	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

    switch (diferencia)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d015      	beq.n	8001836 <ejecutar_movimiento+0x66>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b03      	cmp	r3, #3
 800180e:	dc18      	bgt.n	8001842 <ejecutar_movimiento+0x72>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d003      	beq.n	800181e <ejecutar_movimiento+0x4e>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d006      	beq.n	800182a <ejecutar_movimiento+0x5a>
 800181c:	e011      	b.n	8001842 <ejecutar_movimiento+0x72>
    {
    case 1: // Girar 90° a la derecha
        return gira90der(sentido_actual);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f80d 	bl	8000840 <gira90der>
 8001826:	4603      	mov	r3, r0
 8001828:	e00c      	b.n	8001844 <ejecutar_movimiento+0x74>

    case 2: // Girar 180° (media vuelta)
        return gira180(sentido_actual);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f841 	bl	80008b4 <gira180>
 8001832:	4603      	mov	r3, r0
 8001834:	e006      	b.n	8001844 <ejecutar_movimiento+0x74>

    case 3: // Girar 90° a la izquierda
        return gira90izq(sentido_actual);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe ffc7 	bl	80007cc <gira90izq>
 800183e:	4603      	mov	r3, r0
 8001840:	e000      	b.n	8001844 <ejecutar_movimiento+0x74>

    default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
        // avanza();
        return sentido_actual;
 8001842:	79fb      	ldrb	r3, [r7, #7]
    }
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <HAL_MspInit+0x4c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <HAL_MspInit+0x4c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800188a:	2007      	movs	r0, #7
 800188c:	f001 f836 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001978 <HAL_ADC_MspInit+0xdc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d157      	bne.n	800196e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b2e      	ldr	r3, [pc, #184]	@ (800197c <HAL_ADC_MspInit+0xe0>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a2d      	ldr	r2, [pc, #180]	@ (800197c <HAL_ADC_MspInit+0xe0>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <HAL_ADC_MspInit+0xe0>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b27      	ldr	r3, [pc, #156]	@ (800197c <HAL_ADC_MspInit+0xe0>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a26      	ldr	r2, [pc, #152]	@ (800197c <HAL_ADC_MspInit+0xe0>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b24      	ldr	r3, [pc, #144]	@ (800197c <HAL_ADC_MspInit+0xe0>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 80018f6:	2303      	movs	r3, #3
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	2303      	movs	r3, #3
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	481d      	ldr	r0, [pc, #116]	@ (8001980 <HAL_ADC_MspInit+0xe4>)
 800190a:	f001 fbb7 	bl	800307c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_ADC_MspInit+0xec>)
 8001912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001926:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001928:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001930:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001934:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001938:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001944:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001952:	480c      	ldr	r0, [pc, #48]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001954:	f001 f822 	bl	800299c <HAL_DMA_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800195e:	f7ff fe6f 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 8001966:	639a      	str	r2, [r3, #56]	@ 0x38
 8001968:	4a06      	ldr	r2, [pc, #24]	@ (8001984 <HAL_ADC_MspInit+0xe8>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012000 	.word	0x40012000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400
 8001984:	20000184 	.word	0x20000184
 8001988:	40026410 	.word	0x40026410

0800198c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	@ 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a19      	ldr	r2, [pc, #100]	@ (8001a10 <HAL_I2C_MspInit+0x84>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d12c      	bne.n	8001a08 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <HAL_I2C_MspInit+0x88>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a17      	ldr	r2, [pc, #92]	@ (8001a14 <HAL_I2C_MspInit+0x88>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_I2C_MspInit+0x88>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d0:	2312      	movs	r3, #18
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019dc:	2304      	movs	r3, #4
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <HAL_I2C_MspInit+0x8c>)
 80019e8:	f001 fb48 	bl	800307c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_I2C_MspInit+0x88>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <HAL_I2C_MspInit+0x88>)
 80019f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_I2C_MspInit+0x88>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	@ 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020400 	.word	0x40020400

08001a1c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08e      	sub	sp, #56	@ 0x38
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <HAL_I2S_MspInit+0xf0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d15a      	bne.n	8001b02 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a50:	23c0      	movs	r3, #192	@ 0xc0
 8001a52:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f005 f88f 	bl	8006b80 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001a68:	f7ff fdea 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	4a26      	ldr	r2, [pc, #152]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	4a1f      	ldr	r2, [pc, #124]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a98:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HAL_I2S_MspInit+0xf4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480e      	ldr	r0, [pc, #56]	@ (8001b14 <HAL_I2S_MspInit+0xf8>)
 8001adc:	f001 face 	bl	800307c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001ae0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001af2:	2306      	movs	r3, #6
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001afa:	4619      	mov	r1, r3
 8001afc:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <HAL_I2S_MspInit+0xfc>)
 8001afe:	f001 fabd 	bl	800307c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b02:	bf00      	nop
 8001b04:	3738      	adds	r7, #56	@ 0x38
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40003c00 	.word	0x40003c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020800 	.word	0x40020800

08001b1c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	@ (8001ba0 <HAL_SPI_MspInit+0x84>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12b      	bne.n	8001b96 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <HAL_SPI_MspInit+0x88>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a17      	ldr	r2, [pc, #92]	@ (8001ba4 <HAL_SPI_MspInit+0x88>)
 8001b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_SPI_MspInit+0x88>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_SPI_MspInit+0x88>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <HAL_SPI_MspInit+0x88>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_SPI_MspInit+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b76:	23e0      	movs	r3, #224	@ 0xe0
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b86:	2305      	movs	r3, #5
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <HAL_SPI_MspInit+0x8c>)
 8001b92:	f001 fa73 	bl	800307c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	@ 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40013000 	.word	0x40013000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000

08001bac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10d      	bne.n	8001bda <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_TIM_Base_MspInit+0x40>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	4a09      	ldr	r2, [pc, #36]	@ (8001bec <HAL_TIM_Base_MspInit+0x40>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <HAL_TIM_Base_MspInit+0x40>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <HAL_TIM_MspPostInit+0x68>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d11e      	bne.n	8001c50 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_TIM_MspPostInit+0x6c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a10      	ldr	r2, [pc, #64]	@ (8001c5c <HAL_TIM_MspPostInit+0x6c>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_TIM_MspPostInit+0x6c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001c2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <HAL_TIM_MspPostInit+0x70>)
 8001c4c:	f001 fa16 	bl	800307c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020800 	.word	0x40020800

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <NMI_Handler+0x4>

08001c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cba:	f000 f8e5 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WallSensor_Pin);
 8001cc6:	2040      	movs	r0, #64	@ 0x40
 8001cc8:	f001 fba6 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 8001ccc:	2080      	movs	r0, #128	@ 0x80
 8001cce:	f001 fba3 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <DMA2_Stream0_IRQHandler+0x10>)
 8001cde:	f000 ff63 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000184 	.word	0x20000184

08001cec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <OTG_FS_IRQHandler+0x10>)
 8001cf2:	f001 fe89 	bl	8003a08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000089c 	.word	0x2000089c

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f009 fd58 	bl	800b7e4 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20020000 	.word	0x20020000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	200004b8 	.word	0x200004b8
 8001d68:	20000dc8 	.word	0x20000dc8

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d94:	f7ff ffea 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f009 fd17 	bl	800b7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7fe ff81 	bl	8000cc8 <main>
  bx  lr    
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001dd4:	0800b920 	.word	0x0800b920
  ldr r2, =_sbss
 8001dd8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ddc:	20000dc4 	.word	0x20000dc4

08001de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_Init+0x40>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_Init+0x40>)
 8001dfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <HAL_Init+0x40>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 fd75 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fd18 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023c00 	.word	0x40023c00

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fd9b 	bl	8002982 <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e64:	f000 fd55 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000010 	.word	0x20000010
 8001e80:	20000018 	.word	0x20000018
 8001e84:	20000014 	.word	0x20000014

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000018 	.word	0x20000018
 8001eac:	200004bc 	.word	0x200004bc

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200004bc 	.word	0x200004bc

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000018 	.word	0x20000018

08001f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e033      	b.n	8001f8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fcb4 	bl	800189c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f56:	f023 0302 	bic.w	r3, r3, #2
 8001f5a:	f043 0202 	orr.w	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fa58 	bl	8002418 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f7e:	e001      	b.n	8001f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_ADC_Start_DMA+0x22>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0eb      	b.n	8002192 <HAL_ADC_Start_DMA+0x1fa>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d018      	beq.n	8002002 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe0:	4b6e      	ldr	r3, [pc, #440]	@ (800219c <HAL_ADC_Start_DMA+0x204>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80021a0 <HAL_ADC_Start_DMA+0x208>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0c9a      	lsrs	r2, r3, #18
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f9      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002010:	d107      	bne.n	8002022 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002020:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 80a3 	bne.w	8002178 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800205c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002070:	d106      	bne.n	8002080 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f023 0206 	bic.w	r2, r3, #6
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44
 800207e:	e002      	b.n	8002086 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208e:	4b45      	ldr	r3, [pc, #276]	@ (80021a4 <HAL_ADC_Start_DMA+0x20c>)
 8002090:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	4a44      	ldr	r2, [pc, #272]	@ (80021a8 <HAL_ADC_Start_DMA+0x210>)
 8002098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209e:	4a43      	ldr	r2, [pc, #268]	@ (80021ac <HAL_ADC_Start_DMA+0x214>)
 80020a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a6:	4a42      	ldr	r2, [pc, #264]	@ (80021b0 <HAL_ADC_Start_DMA+0x218>)
 80020a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80020b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80020c2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020d2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	334c      	adds	r3, #76	@ 0x4c
 80020de:	4619      	mov	r1, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f000 fd08 	bl	8002af8 <HAL_DMA_Start_IT>
 80020e8:	4603      	mov	r3, r0
 80020ea:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12a      	bne.n	800214e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2d      	ldr	r2, [pc, #180]	@ (80021b4 <HAL_ADC_Start_DMA+0x21c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d015      	beq.n	800212e <HAL_ADC_Start_DMA+0x196>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2c      	ldr	r2, [pc, #176]	@ (80021b8 <HAL_ADC_Start_DMA+0x220>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d105      	bne.n	8002118 <HAL_ADC_Start_DMA+0x180>
 800210c:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <HAL_ADC_Start_DMA+0x20c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <HAL_ADC_Start_DMA+0x224>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d136      	bne.n	8002190 <HAL_ADC_Start_DMA+0x1f8>
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <HAL_ADC_Start_DMA+0x20c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d130      	bne.n	8002190 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d129      	bne.n	8002190 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e020      	b.n	8002190 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a18      	ldr	r2, [pc, #96]	@ (80021b4 <HAL_ADC_Start_DMA+0x21c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d11b      	bne.n	8002190 <HAL_ADC_Start_DMA+0x1f8>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d114      	bne.n	8002190 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e00b      	b.n	8002190 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f043 0210 	orr.w	r2, r3, #16
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002190:	7ffb      	ldrb	r3, [r7, #31]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000010 	.word	0x20000010
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	40012300 	.word	0x40012300
 80021a8:	08002611 	.word	0x08002611
 80021ac:	080026cb 	.word	0x080026cb
 80021b0:	080026e7 	.word	0x080026e7
 80021b4:	40012000 	.word	0x40012000
 80021b8:	40012100 	.word	0x40012100
 80021bc:	40012200 	.word	0x40012200

080021c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1c>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e105      	b.n	80023fc <HAL_ADC_ConfigChannel+0x228>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d925      	bls.n	800224c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	3b1e      	subs	r3, #30
 8002216:	2207      	movs	r2, #7
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43da      	mvns	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	400a      	ands	r2, r1
 8002224:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68d9      	ldr	r1, [r3, #12]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	4603      	mov	r3, r0
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4403      	add	r3, r0
 800223e:	3b1e      	subs	r3, #30
 8002240:	409a      	lsls	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	e022      	b.n	8002292 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6919      	ldr	r1, [r3, #16]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	2207      	movs	r2, #7
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	4603      	mov	r3, r0
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4403      	add	r3, r0
 8002288:	409a      	lsls	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b06      	cmp	r3, #6
 8002298:	d824      	bhi.n	80022e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b05      	subs	r3, #5
 80022ac:	221f      	movs	r2, #31
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b05      	subs	r3, #5
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80022e2:	e04c      	b.n	800237e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d824      	bhi.n	8002336 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b23      	subs	r3, #35	@ 0x23
 80022fe:	221f      	movs	r2, #31
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43da      	mvns	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	400a      	ands	r2, r1
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	4618      	mov	r0, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	3b23      	subs	r3, #35	@ 0x23
 8002328:	fa00 f203 	lsl.w	r2, r0, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
 8002334:	e023      	b.n	800237e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	3b41      	subs	r3, #65	@ 0x41
 8002348:	221f      	movs	r2, #31
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	400a      	ands	r2, r1
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b41      	subs	r3, #65	@ 0x41
 8002372:	fa00 f203 	lsl.w	r2, r0, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237e:	4b22      	ldr	r3, [pc, #136]	@ (8002408 <HAL_ADC_ConfigChannel+0x234>)
 8002380:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a21      	ldr	r2, [pc, #132]	@ (800240c <HAL_ADC_ConfigChannel+0x238>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1cc>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b12      	cmp	r3, #18
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_ADC_ConfigChannel+0x238>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d123      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x21e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d003      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x1e6>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b11      	cmp	r3, #17
 80023b8:	d11b      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d111      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_ADC_ConfigChannel+0x23c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a10      	ldr	r2, [pc, #64]	@ (8002414 <HAL_ADC_ConfigChannel+0x240>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9a      	lsrs	r2, r3, #18
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40012300 	.word	0x40012300
 800240c:	40012000 	.word	0x40012000
 8002410:	20000010 	.word	0x20000010
 8002414:	431bde83 	.word	0x431bde83

08002418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002420:	4b79      	ldr	r3, [pc, #484]	@ (8002608 <ADC_Init+0x1f0>)
 8002422:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800244c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	021a      	lsls	r2, r3, #8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	4a58      	ldr	r2, [pc, #352]	@ (800260c <ADC_Init+0x1f4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	e00f      	b.n	8002516 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002514:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0202 	bic.w	r2, r2, #2
 8002524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7e1b      	ldrb	r3, [r3, #24]
 8002530:	005a      	lsls	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002552:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002562:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	3b01      	subs	r3, #1
 8002570:	035a      	lsls	r2, r3, #13
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	e007      	b.n	800258c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800258a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800259a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	051a      	lsls	r2, r3, #20
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025ce:	025a      	lsls	r2, r3, #9
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6899      	ldr	r1, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	029a      	lsls	r2, r3, #10
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40012300 	.word	0x40012300
 800260c:	0f000001 	.word	0x0f000001

08002610 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13c      	bne.n	80026a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d12b      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d127      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002664:	2b00      	cmp	r3, #0
 8002666:	d119      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0220 	bic.w	r2, r2, #32
 8002676:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7fd ff89 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026a2:	e00e      	b.n	80026c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff fd85 	bl	80021c0 <HAL_ADC_ErrorCallback>
}
 80026b6:	e004      	b.n	80026c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7fd ff5d 	bl	8000598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f043 0204 	orr.w	r2, r3, #4
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fd5a 	bl	80021c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	@ (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db12      	blt.n	80027ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	490a      	ldr	r1, [pc, #40]	@ (80027f8 <__NVIC_DisableIRQ+0x44>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	3320      	adds	r3, #32
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027e0:	f3bf 8f4f 	dsb	sy
}
 80027e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027e6:	f3bf 8f6f 	isb	sy
}
 80027ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	@ (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	@ (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	@ 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	@ 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff05 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff1a 	bl	800275c <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff0d 	bl	8002778 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff1d 	bl	80027b4 <__NVIC_DisableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff94 	bl	80028b8 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff fa82 	bl	8001eb0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e099      	b.n	8002aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d8:	e00f      	b.n	80029fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029da:	f7ff fa69 	bl	8001eb0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d908      	bls.n	80029fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2203      	movs	r2, #3
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e078      	b.n	8002aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e8      	bne.n	80029da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <HAL_DMA_Init+0x158>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d117      	bne.n	8002abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa6f 	bl	8002f84 <DMA_CheckFifoParam>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2240      	movs	r2, #64	@ 0x40
 8002ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002aba:	2301      	movs	r3, #1
 8002abc:	e016      	b.n	8002aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fa26 	bl	8002f18 <DMA_CalcBaseAndBitshift>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	223f      	movs	r2, #63	@ 0x3f
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	f010803f 	.word	0xf010803f

08002af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_DMA_Start_IT+0x26>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e040      	b.n	8002ba0 <HAL_DMA_Start_IT+0xa8>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d12f      	bne.n	8002b92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9b8 	bl	8002ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	223f      	movs	r2, #63	@ 0x3f
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0216 	orr.w	r2, r2, #22
 8002b66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e005      	b.n	8002b9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002df0 <HAL_DMA_IRQHandler+0x248>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a8e      	ldr	r2, [pc, #568]	@ (8002df4 <HAL_DMA_IRQHandler+0x24c>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a9b      	lsrs	r3, r3, #10
 8002bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01a      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	2208      	movs	r2, #8
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	2204      	movs	r2, #4
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	2210      	movs	r2, #16
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d043      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d03c      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	e01f      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e016      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0208 	bic.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 808f 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8087 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	2220      	movs	r2, #32
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d136      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0216 	bic.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x1da>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0208 	bic.w	r2, r2, #8
 8002d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	223f      	movs	r2, #63	@ 0x3f
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07e      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
        }
        return;
 8002dbe:	e079      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10d      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d031      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e02c      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
 8002dee:	bf00      	nop
 8002df0:	20000010 	.word	0x20000010
 8002df4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
 8002e08:	e01e      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10f      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0210 	bic.w	r2, r2, #16
 8002e26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d032      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d307      	bcc.n	8002e90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f2      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x2cc>
 8002e8e:	e000      	b.n	8002e92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eb4:	bf00      	nop
    }
  }
}
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b40      	cmp	r3, #64	@ 0x40
 8002ee8:	d108      	bne.n	8002efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002efa:	e007      	b.n	8002f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3b10      	subs	r3, #16
 8002f28:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <DMA_CalcBaseAndBitshift+0x64>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f32:	4a13      	ldr	r2, [pc, #76]	@ (8002f80 <DMA_CalcBaseAndBitshift+0x68>)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d909      	bls.n	8002f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f58:	e007      	b.n	8002f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	aaaaaaab 	.word	0xaaaaaaab
 8002f80:	0800b908 	.word	0x0800b908

08002f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11f      	bne.n	8002fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d856      	bhi.n	8003052 <DMA_CheckFifoParam+0xce>
 8002fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <DMA_CheckFifoParam+0x28>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fcf 	.word	0x08002fcf
 8002fb4:	08002fbd 	.word	0x08002fbd
 8002fb8:	08003053 	.word	0x08003053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d046      	beq.n	8003056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fcc:	e043      	b.n	8003056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fd6:	d140      	bne.n	800305a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e03d      	b.n	800305a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	d121      	bne.n	800302c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d837      	bhi.n	800305e <DMA_CheckFifoParam+0xda>
 8002fee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <DMA_CheckFifoParam+0x70>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	0800300b 	.word	0x0800300b
 8002ffc:	08003005 	.word	0x08003005
 8003000:	0800301d 	.word	0x0800301d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e030      	b.n	800306c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d025      	beq.n	8003062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301a:	e022      	b.n	8003062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003024:	d11f      	bne.n	8003066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800302a:	e01c      	b.n	8003066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d903      	bls.n	800303a <DMA_CheckFifoParam+0xb6>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d003      	beq.n	8003040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003038:	e018      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
      break;
 800303e:	e015      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e00b      	b.n	800306a <DMA_CheckFifoParam+0xe6>
      break;
 8003052:	bf00      	nop
 8003054:	e00a      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e008      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e006      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305e:	bf00      	nop
 8003060:	e004      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;   
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800306a:	bf00      	nop
    }
  } 
  
  return status; 
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e16b      	b.n	8003370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 815a 	bne.w	800336a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d005      	beq.n	80030ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d130      	bne.n	8003130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d017      	beq.n	800316c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d123      	bne.n	80031c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	08da      	lsrs	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80b4 	beq.w	800336a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b60      	ldr	r3, [pc, #384]	@ (8003388 <HAL_GPIO_Init+0x30c>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	4a5f      	ldr	r2, [pc, #380]	@ (8003388 <HAL_GPIO_Init+0x30c>)
 800320c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003210:	6453      	str	r3, [r2, #68]	@ 0x44
 8003212:	4b5d      	ldr	r3, [pc, #372]	@ (8003388 <HAL_GPIO_Init+0x30c>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800321e:	4a5b      	ldr	r2, [pc, #364]	@ (800338c <HAL_GPIO_Init+0x310>)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	@ (8003390 <HAL_GPIO_Init+0x314>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02b      	beq.n	80032a2 <HAL_GPIO_Init+0x226>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a51      	ldr	r2, [pc, #324]	@ (8003394 <HAL_GPIO_Init+0x318>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d025      	beq.n	800329e <HAL_GPIO_Init+0x222>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a50      	ldr	r2, [pc, #320]	@ (8003398 <HAL_GPIO_Init+0x31c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <HAL_GPIO_Init+0x21e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	@ (800339c <HAL_GPIO_Init+0x320>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0x21a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4e      	ldr	r2, [pc, #312]	@ (80033a0 <HAL_GPIO_Init+0x324>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x216>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4d      	ldr	r2, [pc, #308]	@ (80033a4 <HAL_GPIO_Init+0x328>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x212>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4c      	ldr	r2, [pc, #304]	@ (80033a8 <HAL_GPIO_Init+0x32c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4b      	ldr	r2, [pc, #300]	@ (80033ac <HAL_GPIO_Init+0x330>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x20a>
 8003282:	2307      	movs	r3, #7
 8003284:	e00e      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 8003286:	2308      	movs	r3, #8
 8003288:	e00c      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 800328a:	2306      	movs	r3, #6
 800328c:	e00a      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 800328e:	2305      	movs	r3, #5
 8003290:	e008      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 8003292:	2304      	movs	r3, #4
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 8003296:	2303      	movs	r3, #3
 8003298:	e004      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 800329a:	2302      	movs	r3, #2
 800329c:	e002      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_GPIO_Init+0x228>
 80032a2:	2300      	movs	r3, #0
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	f002 0203 	and.w	r2, r2, #3
 80032aa:	0092      	lsls	r2, r2, #2
 80032ac:	4093      	lsls	r3, r2
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032b4:	4935      	ldr	r1, [pc, #212]	@ (800338c <HAL_GPIO_Init+0x310>)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c2:	4b3b      	ldr	r3, [pc, #236]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e6:	4a32      	ldr	r2, [pc, #200]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ec:	4b30      	ldr	r3, [pc, #192]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003310:	4a27      	ldr	r2, [pc, #156]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003316:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800333a:	4a1d      	ldr	r2, [pc, #116]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003340:	4b1b      	ldr	r3, [pc, #108]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003364:	4a12      	ldr	r2, [pc, #72]	@ (80033b0 <HAL_GPIO_Init+0x334>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3301      	adds	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	f67f ae90 	bls.w	8003098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40013800 	.word	0x40013800
 8003390:	40020000 	.word	0x40020000
 8003394:	40020400 	.word	0x40020400
 8003398:	40020800 	.word	0x40020800
 800339c:	40020c00 	.word	0x40020c00
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40021400 	.word	0x40021400
 80033a8:	40021800 	.word	0x40021800
 80033ac:	40021c00 	.word	0x40021c00
 80033b0:	40013c00 	.word	0x40013c00

080033b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e001      	b.n	80033d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f4:	787b      	ldrb	r3, [r7, #1]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003400:	e003      	b.n	800340a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003402:	887b      	ldrh	r3, [r7, #2]
 8003404:	041a      	lsls	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	619a      	str	r2, [r3, #24]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003422:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800342e:	4a05      	ldr	r2, [pc, #20]	@ (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f8b2 	bl	80015a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40013c00 	.word	0x40013c00

08003448 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e059      	b.n	800350e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f007 fe33 	bl	800b0e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003488:	d102      	bne.n	8003490 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 fc40 	bl	8007d1a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7c1a      	ldrb	r2, [r3, #16]
 80034a2:	f88d 2000 	strb.w	r2, [sp]
 80034a6:	3304      	adds	r3, #4
 80034a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034aa:	f004 fbc1 	bl	8007c30 <USB_CoreInit>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e026      	b.n	800350e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f004 fc38 	bl	8007d3c <USB_SetCurrentMode>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e017      	b.n	800350e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7c1a      	ldrb	r2, [r3, #16]
 80034e6:	f88d 2000 	strb.w	r2, [sp]
 80034ea:	3304      	adds	r3, #4
 80034ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ee:	f004 fde1 	bl	80080b4 <USB_HostInit>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e004      	b.n	800350e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003516:	b590      	push	{r4, r7, lr}
 8003518:	b08b      	sub	sp, #44	@ 0x2c
 800351a:	af04      	add	r7, sp, #16
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	4608      	mov	r0, r1
 8003520:	4611      	mov	r1, r2
 8003522:	461a      	mov	r2, r3
 8003524:	4603      	mov	r3, r0
 8003526:	70fb      	strb	r3, [r7, #3]
 8003528:	460b      	mov	r3, r1
 800352a:	70bb      	strb	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003530:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003532:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_HCD_HC_Init+0x2c>
 800353e:	2302      	movs	r3, #2
 8003540:	e09d      	b.n	800367e <HAL_HCD_HC_Init+0x168>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	3319      	adds	r3, #25
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3314      	adds	r3, #20
 800356e:	787a      	ldrb	r2, [r7, #1]
 8003570:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3315      	adds	r3, #21
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3326      	adds	r3, #38	@ 0x26
 8003596:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800359a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	78bb      	ldrb	r3, [r7, #2]
 80035a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035a4:	b2d8      	uxtb	r0, r3
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3316      	adds	r3, #22
 80035b4:	4602      	mov	r2, r0
 80035b6:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fbc7 	bl	8003d50 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80035c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da0a      	bge.n	80035e0 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3317      	adds	r3, #23
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e009      	b.n	80035f4 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3317      	adds	r3, #23
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f004 febf 	bl	800837c <USB_GetHostSpeed>
 80035fe:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003600:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10b      	bne.n	8003620 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003608:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_HCD_HC_Init+0x10a>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2bbc      	cmp	r3, #188	@ 0xbc
 800361a:	d901      	bls.n	8003620 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800361c:	23bc      	movs	r3, #188	@ 0xbc
 800361e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3318      	adds	r3, #24
 8003630:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	b298      	uxth	r0, r3
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3328      	adds	r3, #40	@ 0x28
 800364a:	4602      	mov	r2, r0
 800364c:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	b29b      	uxth	r3, r3
 8003656:	787c      	ldrb	r4, [r7, #1]
 8003658:	78ba      	ldrb	r2, [r7, #2]
 800365a:	78f9      	ldrb	r1, [r7, #3]
 800365c:	9302      	str	r3, [sp, #8]
 800365e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4623      	mov	r3, r4
 800366c:	f004 feae 	bl	80083cc <USB_HC_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd90      	pop	{r4, r7, pc}

08003686 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_HCD_HC_Halt+0x1e>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e00f      	b.n	80036c4 <HAL_HCD_HC_Halt+0x3e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f005 fa40 	bl	8008b3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	70fb      	strb	r3, [r7, #3]
 80036de:	460b      	mov	r3, r1
 80036e0:	70bb      	strb	r3, [r7, #2]
 80036e2:	4613      	mov	r3, r2
 80036e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	3317      	adds	r3, #23
 80036f6:	78ba      	ldrb	r2, [r7, #2]
 80036f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3326      	adds	r3, #38	@ 0x26
 800370a:	787a      	ldrb	r2, [r7, #1]
 800370c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800370e:	7c3b      	ldrb	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d114      	bne.n	800373e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	332a      	adds	r3, #42	@ 0x2a
 8003724:	2203      	movs	r2, #3
 8003726:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3319      	adds	r3, #25
 8003738:	7f3a      	ldrb	r2, [r7, #28]
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e009      	b.n	8003752 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	332a      	adds	r3, #42	@ 0x2a
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003752:	787b      	ldrb	r3, [r7, #1]
 8003754:	2b03      	cmp	r3, #3
 8003756:	f200 8102 	bhi.w	800395e <HAL_HCD_HC_SubmitRequest+0x292>
 800375a:	a201      	add	r2, pc, #4	@ (adr r2, 8003760 <HAL_HCD_HC_SubmitRequest+0x94>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003771 	.word	0x08003771
 8003764:	08003949 	.word	0x08003949
 8003768:	08003835 	.word	0x08003835
 800376c:	080038bf 	.word	0x080038bf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003770:	7c3b      	ldrb	r3, [r7, #16]
 8003772:	2b01      	cmp	r3, #1
 8003774:	f040 80f5 	bne.w	8003962 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003778:	78bb      	ldrb	r3, [r7, #2]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d12d      	bne.n	80037da <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800377e:	8b3b      	ldrh	r3, [r7, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	333d      	adds	r3, #61	@ 0x3d
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	333d      	adds	r3, #61	@ 0x3d
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	332a      	adds	r3, #42	@ 0x2a
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80037c2:	e0ce      	b.n	8003962 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	332a      	adds	r3, #42	@ 0x2a
 80037d4:	2202      	movs	r2, #2
 80037d6:	701a      	strb	r2, [r3, #0]
      break;
 80037d8:	e0c3      	b.n	8003962 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	331a      	adds	r3, #26
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	f040 80b8 	bne.w	8003962 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	333c      	adds	r3, #60	@ 0x3c
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	332a      	adds	r3, #42	@ 0x2a
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
      break;
 800381c:	e0a1      	b.n	8003962 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	332a      	adds	r3, #42	@ 0x2a
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
      break;
 8003832:	e096      	b.n	8003962 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003834:	78bb      	ldrb	r3, [r7, #2]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d120      	bne.n	800387c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	333d      	adds	r3, #61	@ 0x3d
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	332a      	adds	r3, #42	@ 0x2a
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003864:	e07e      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	332a      	adds	r3, #42	@ 0x2a
 8003876:	2202      	movs	r2, #2
 8003878:	701a      	strb	r2, [r3, #0]
      break;
 800387a:	e073      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	333c      	adds	r3, #60	@ 0x3c
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	332a      	adds	r3, #42	@ 0x2a
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
      break;
 80038a6:	e05d      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	332a      	adds	r3, #42	@ 0x2a
 80038b8:	2202      	movs	r2, #2
 80038ba:	701a      	strb	r2, [r3, #0]
      break;
 80038bc:	e052      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038be:	78bb      	ldrb	r3, [r7, #2]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d120      	bne.n	8003906 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	333d      	adds	r3, #61	@ 0x3d
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	332a      	adds	r3, #42	@ 0x2a
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038ee:	e039      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	332a      	adds	r3, #42	@ 0x2a
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]
      break;
 8003904:	e02e      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	333c      	adds	r3, #60	@ 0x3c
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	332a      	adds	r3, #42	@ 0x2a
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
      break;
 8003930:	e018      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	332a      	adds	r3, #42	@ 0x2a
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
      break;
 8003946:	e00d      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	332a      	adds	r3, #42	@ 0x2a
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
      break;
 800395c:	e002      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003962:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	332c      	adds	r3, #44	@ 0x2c
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	8b39      	ldrh	r1, [r7, #24]
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4403      	add	r3, r0
 8003988:	3334      	adds	r3, #52	@ 0x34
 800398a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334c      	adds	r3, #76	@ 0x4c
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3338      	adds	r3, #56	@ 0x38
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	3315      	adds	r3, #21
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	334d      	adds	r3, #77	@ 0x4d
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3310      	adds	r3, #16
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	1d19      	adds	r1, r3, #4
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	799b      	ldrb	r3, [r3, #6]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f004 fe14 	bl	8008624 <USB_HC_StartXfer>
 80039fc:	4603      	mov	r3, r0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop

08003a08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 fb02 	bl	8008028 <USB_GetMode>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	f040 80fb 	bne.w	8003c22 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f004 fac5 	bl	8007fc0 <USB_ReadInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80f1 	beq.w	8003c20 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fabc 	bl	8007fc0 <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a52:	d104      	bne.n	8003a5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 faac 	bl	8007fc0 <USB_ReadInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a72:	d104      	bne.n	8003a7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 fa9c 	bl	8007fc0 <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a92:	d104      	bne.n	8003a9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 fa8c 	bl	8007fc0 <USB_ReadInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d103      	bne.n	8003aba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 fa7e 	bl	8007fc0 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ace:	d120      	bne.n	8003b12 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ad8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d113      	bne.n	8003b12 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003aea:	2110      	movs	r1, #16
 8003aec:	6938      	ldr	r0, [r7, #16]
 8003aee:	f004 f971 	bl	8007dd4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003af2:	6938      	ldr	r0, [r7, #16]
 8003af4:	f004 f9a0 	bl	8007e38 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7a5b      	ldrb	r3, [r3, #9]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d105      	bne.n	8003b0c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 fb98 	bl	800823c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f007 fb65 	bl	800b1dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 fa52 	bl	8007fc0 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b26:	d102      	bne.n	8003b2e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f001 fd4d 	bl	80055c8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 fa44 	bl	8007fc0 <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d106      	bne.n	8003b50 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f007 fb2e 	bl	800b1a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 fa33 	bl	8007fc0 <USB_ReadInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b64:	d139      	bne.n	8003bda <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 ffd4 	bl	8008b18 <USB_HC_ReadInterrupt>
 8003b70:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e025      	b.n	8003bc4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d018      	beq.n	8003bbe <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba2:	d106      	bne.n	8003bb2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f905 	bl	8003dba <HCD_HC_IN_IRQHandler>
 8003bb0:	e005      	b.n	8003bbe <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 ff67 	bl	8004a8c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	795b      	ldrb	r3, [r3, #5]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d3d3      	bcc.n	8003b78 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 f9ee 	bl	8007fc0 <USB_ReadInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d101      	bne.n	8003bf2 <HAL_HCD_IRQHandler+0x1ea>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_HCD_IRQHandler+0x1ec>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d014      	beq.n	8003c22 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0210 	bic.w	r2, r2, #16
 8003c06:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f001 fbfe 	bl	800540a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0210 	orr.w	r2, r2, #16
 8003c1c:	619a      	str	r2, [r3, #24]
 8003c1e:	e000      	b.n	8003c22 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003c20:	bf00      	nop
    }
  }
}
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_HCD_Start+0x16>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e013      	b.n	8003c66 <HAL_HCD_Start+0x3e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f004 fb5c 	bl	800830a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f004 f84e 	bl	8007cf8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_HCD_Stop+0x16>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e00d      	b.n	8003ca0 <HAL_HCD_Stop+0x32>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f005 f8af 	bl	8008df4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f004 fafe 	bl	80082b6 <USB_ResetPort>
 8003cba:	4603      	mov	r3, r0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334c      	adds	r3, #76	@ 0x4c
 8003ce0:	781b      	ldrb	r3, [r3, #0]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3338      	adds	r3, #56	@ 0x38
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f004 fb40 	bl	80083aa <USB_GetCurrentFrame>
 8003d2a:	4603      	mov	r3, r0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f004 fb1b 	bl	800837c <USB_GetHostSpeed>
 8003d46:	4603      	mov	r3, r0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	331a      	adds	r3, #26
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	331b      	adds	r3, #27
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	3325      	adds	r3, #37	@ 0x25
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	3324      	adds	r3, #36	@ 0x24
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f004 f904 	bl	8007fe6 <USB_ReadChInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11a      	bne.n	8003e1e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df4:	461a      	mov	r2, r3
 8003df6:	2304      	movs	r3, #4
 8003df8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	334d      	adds	r3, #77	@ 0x4d
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f004 fe8f 	bl	8008b3a <USB_HC_Halt>
 8003e1c:	e09e      	b.n	8003f5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 f8dd 	bl	8007fe6 <USB_ReadChInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e36:	d11b      	bne.n	8003e70 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e44:	461a      	mov	r2, r3
 8003e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	334d      	adds	r3, #77	@ 0x4d
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fe66 	bl	8008b3a <USB_HC_Halt>
 8003e6e:	e075      	b.n	8003f5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f004 f8b4 	bl	8007fe6 <USB_ReadChInterrupts>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d11a      	bne.n	8003ebe <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e94:	461a      	mov	r2, r3
 8003e96:	2308      	movs	r3, #8
 8003e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	334d      	adds	r3, #77	@ 0x4d
 8003eaa:	2206      	movs	r2, #6
 8003eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 fe3f 	bl	8008b3a <USB_HC_Halt>
 8003ebc:	e04e      	b.n	8003f5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f004 f88d 	bl	8007fe6 <USB_ReadChInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	d11b      	bne.n	8003f10 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	334d      	adds	r3, #77	@ 0x4d
 8003efc:	2209      	movs	r2, #9
 8003efe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 fe16 	bl	8008b3a <USB_HC_Halt>
 8003f0e:	e025      	b.n	8003f5c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f004 f864 	bl	8007fe6 <USB_ReadChInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	2b80      	cmp	r3, #128	@ 0x80
 8003f26:	d119      	bne.n	8003f5c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	334d      	adds	r3, #77	@ 0x4d
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fdef 	bl	8008b3a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 f83e 	bl	8007fe6 <USB_ReadChInterrupts>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f74:	d112      	bne.n	8003f9c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 fddb 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f90:	461a      	mov	r2, r3
 8003f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f96:	6093      	str	r3, [r2, #8]
 8003f98:	f000 bd75 	b.w	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 f81e 	bl	8007fe6 <USB_ReadChInterrupts>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 8128 	bne.w	8004206 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	331b      	adds	r3, #27
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d119      	bne.n	8004012 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	331b      	adds	r3, #27
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	440a      	add	r2, r1
 8004008:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800400c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004010:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	799b      	ldrb	r3, [r3, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01b      	beq.n	8004052 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	3330      	adds	r3, #48	@ 0x30
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	1ac9      	subs	r1, r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4403      	add	r3, r0
 800404e:	3338      	adds	r3, #56	@ 0x38
 8004050:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	334d      	adds	r3, #77	@ 0x4d
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3344      	adds	r3, #68	@ 0x44
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4413      	add	r3, r2
 8004082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004086:	461a      	mov	r2, r3
 8004088:	2301      	movs	r3, #1
 800408a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	3326      	adds	r3, #38	@ 0x26
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3326      	adds	r3, #38	@ 0x26
 80040b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d110      	bne.n	80040da <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f004 fd3a 	bl	8008b3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d2:	461a      	mov	r2, r3
 80040d4:	2310      	movs	r3, #16
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	e03d      	b.n	8004156 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3326      	adds	r3, #38	@ 0x26
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d00a      	beq.n	8004106 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	3326      	adds	r3, #38	@ 0x26
 8004100:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004102:	2b01      	cmp	r3, #1
 8004104:	d127      	bne.n	8004156 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	440a      	add	r2, r1
 800411c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004120:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004124:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	334c      	adds	r3, #76	@ 0x4c
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	334c      	adds	r3, #76	@ 0x4c
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f007 f851 	bl	800b1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	799b      	ldrb	r3, [r3, #6]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d13b      	bne.n	80041d6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	3338      	adds	r3, #56	@ 0x38
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4403      	add	r3, r0
 800417e:	3328      	adds	r3, #40	@ 0x28
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	440b      	add	r3, r1
 8004184:	1e59      	subs	r1, r3, #1
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4403      	add	r3, r0
 8004194:	3328      	adds	r3, #40	@ 0x28
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	fbb1 f3f3 	udiv	r3, r1, r3
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8470 	beq.w	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	333c      	adds	r3, #60	@ 0x3c
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	f083 0301 	eor.w	r3, r3, #1
 80041be:	b2d8      	uxtb	r0, r3
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	333c      	adds	r3, #60	@ 0x3c
 80041ce:	4602      	mov	r2, r0
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	f000 bc58 	b.w	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	333c      	adds	r3, #60	@ 0x3c
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	f083 0301 	eor.w	r3, r3, #1
 80041ee:	b2d8      	uxtb	r0, r3
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	333c      	adds	r3, #60	@ 0x3c
 80041fe:	4602      	mov	r2, r0
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	f000 bc40 	b.w	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f003 fee9 	bl	8007fe6 <USB_ReadChInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b20      	cmp	r3, #32
 800421c:	d131      	bne.n	8004282 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422a:	461a      	mov	r2, r3
 800422c:	2320      	movs	r3, #32
 800422e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	331a      	adds	r3, #26
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	f040 841f 	bne.w	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	331b      	adds	r3, #27
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	334d      	adds	r3, #77	@ 0x4d
 800426c:	2203      	movs	r2, #3
 800426e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f004 fc5e 	bl	8008b3a <USB_HC_Halt>
 800427e:	f000 bc02 	b.w	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f003 feab 	bl	8007fe6 <USB_ReadChInterrupts>
 8004290:	4603      	mov	r3, r0
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	f040 8305 	bne.w	80048a6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a8:	461a      	mov	r2, r3
 80042aa:	2302      	movs	r3, #2
 80042ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	334d      	adds	r3, #77	@ 0x4d
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d114      	bne.n	80042ee <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	334d      	adds	r3, #77	@ 0x4d
 80042d4:	2202      	movs	r2, #2
 80042d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	334c      	adds	r3, #76	@ 0x4c
 80042e8:	2201      	movs	r2, #1
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e2cc      	b.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	334d      	adds	r3, #77	@ 0x4d
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b06      	cmp	r3, #6
 8004302:	d114      	bne.n	800432e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	334d      	adds	r3, #77	@ 0x4d
 8004314:	2202      	movs	r2, #2
 8004316:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	334c      	adds	r3, #76	@ 0x4c
 8004328:	2205      	movs	r2, #5
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e2ac      	b.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	334d      	adds	r3, #77	@ 0x4d
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b07      	cmp	r3, #7
 8004342:	d00b      	beq.n	800435c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334d      	adds	r3, #77	@ 0x4d
 8004354:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004356:	2b09      	cmp	r3, #9
 8004358:	f040 80a6 	bne.w	80044a8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	334d      	adds	r3, #77	@ 0x4d
 800436c:	2202      	movs	r2, #2
 800436e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3344      	adds	r3, #68	@ 0x44
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4403      	add	r3, r0
 8004390:	3344      	adds	r3, #68	@ 0x44
 8004392:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	3344      	adds	r3, #68	@ 0x44
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d943      	bls.n	8004432 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	3344      	adds	r3, #68	@ 0x44
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	331a      	adds	r3, #26
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d123      	bne.n	800441c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	331b      	adds	r3, #27
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	331c      	adds	r3, #28
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	440a      	add	r2, r1
 8004412:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	334c      	adds	r3, #76	@ 0x4c
 800442c:	2204      	movs	r2, #4
 800442e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004430:	e229      	b.n	8004886 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334c      	adds	r3, #76	@ 0x4c
 8004442:	2202      	movs	r2, #2
 8004444:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	3326      	adds	r3, #38	@ 0x26
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3326      	adds	r3, #38	@ 0x26
 800446c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800446e:	2b02      	cmp	r3, #2
 8004470:	f040 8209 	bne.w	8004886 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800448a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004492:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a0:	461a      	mov	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044a6:	e1ee      	b.n	8004886 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	334d      	adds	r3, #77	@ 0x4d
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	f040 80c8 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	334d      	adds	r3, #77	@ 0x4d
 80044d0:	2202      	movs	r2, #2
 80044d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	331b      	adds	r3, #27
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	f040 81ce 	bne.w	8004888 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3326      	adds	r3, #38	@ 0x26
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d16b      	bne.n	80045da <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004502:	78fa      	ldrb	r2, [r7, #3]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	3348      	adds	r3, #72	@ 0x48
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	1c59      	adds	r1, r3, #1
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4403      	add	r3, r0
 8004522:	3348      	adds	r3, #72	@ 0x48
 8004524:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	3348      	adds	r3, #72	@ 0x48
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d943      	bls.n	80045c4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3348      	adds	r3, #72	@ 0x48
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	331b      	adds	r3, #27
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3344      	adds	r3, #68	@ 0x44
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d809      	bhi.n	800458e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	331c      	adds	r3, #28
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	0151      	lsls	r1, r2, #5
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	440a      	add	r2, r1
 80045a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ac:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	334c      	adds	r3, #76	@ 0x4c
 80045be:	2204      	movs	r2, #4
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e014      	b.n	80045ee <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	334c      	adds	r3, #76	@ 0x4c
 80045d4:	2202      	movs	r2, #2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e009      	b.n	80045ee <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	334c      	adds	r3, #76	@ 0x4c
 80045ea:	2202      	movs	r2, #2
 80045ec:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3326      	adds	r3, #38	@ 0x26
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	3326      	adds	r3, #38	@ 0x26
 8004614:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004616:	2b02      	cmp	r3, #2
 8004618:	f040 8136 	bne.w	8004888 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004632:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800463a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004648:	461a      	mov	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e11b      	b.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334d      	adds	r3, #77	@ 0x4d
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b03      	cmp	r3, #3
 8004664:	f040 8081 	bne.w	800476a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	334d      	adds	r3, #77	@ 0x4d
 8004678:	2202      	movs	r2, #2
 800467a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	331b      	adds	r3, #27
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	f040 80fa 	bne.w	8004888 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	334c      	adds	r3, #76	@ 0x4c
 80046a4:	2202      	movs	r2, #2
 80046a6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046e6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004702:	f023 0320 	bic.w	r3, r3, #32
 8004706:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3326      	adds	r3, #38	@ 0x26
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	3326      	adds	r3, #38	@ 0x26
 800472e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004730:	2b02      	cmp	r3, #2
 8004732:	f040 80a9 	bne.w	8004888 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800474c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004754:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e08e      	b.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	334d      	adds	r3, #77	@ 0x4d
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d143      	bne.n	8004808 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	334d      	adds	r3, #77	@ 0x4d
 8004790:	2202      	movs	r2, #2
 8004792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	334c      	adds	r3, #76	@ 0x4c
 80047a4:	2202      	movs	r2, #2
 80047a6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3326      	adds	r3, #38	@ 0x26
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3326      	adds	r3, #38	@ 0x26
 80047ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d159      	bne.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047ea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047f2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004800:	461a      	mov	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e03f      	b.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	334d      	adds	r3, #77	@ 0x4d
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d126      	bne.n	800486c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	334d      	adds	r3, #77	@ 0x4d
 800482e:	2202      	movs	r2, #2
 8004830:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	3344      	adds	r3, #68	@ 0x44
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	1c59      	adds	r1, r3, #1
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4403      	add	r3, r0
 8004852:	3344      	adds	r3, #68	@ 0x44
 8004854:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	334c      	adds	r3, #76	@ 0x4c
 8004866:	2204      	movs	r2, #4
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e00d      	b.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	334d      	adds	r3, #77	@ 0x4d
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b02      	cmp	r3, #2
 8004880:	f000 8100 	beq.w	8004a84 <HCD_HC_IN_IRQHandler+0xcca>
 8004884:	e000      	b.n	8004888 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004886:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	334c      	adds	r3, #76	@ 0x4c
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f006 fcaa 	bl	800b1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048a4:	e0ef      	b.n	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 fb99 	bl	8007fe6 <USB_ReadChInterrupts>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ba:	2b40      	cmp	r3, #64	@ 0x40
 80048bc:	d12f      	bne.n	800491e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ca:	461a      	mov	r2, r3
 80048cc:	2340      	movs	r3, #64	@ 0x40
 80048ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	334d      	adds	r3, #77	@ 0x4d
 80048e0:	2205      	movs	r2, #5
 80048e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	331a      	adds	r3, #26
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3344      	adds	r3, #68	@ 0x44
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f004 f90f 	bl	8008b3a <USB_HC_Halt>
 800491c:	e0b3      	b.n	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f003 fb5d 	bl	8007fe6 <USB_ReadChInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b10      	cmp	r3, #16
 8004934:	f040 80a7 	bne.w	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	3326      	adds	r3, #38	@ 0x26
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d11b      	bne.n	8004986 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	3344      	adds	r3, #68	@ 0x44
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	334d      	adds	r3, #77	@ 0x4d
 8004972:	2204      	movs	r2, #4
 8004974:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f004 f8db 	bl	8008b3a <USB_HC_Halt>
 8004984:	e03f      	b.n	8004a06 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	3326      	adds	r3, #38	@ 0x26
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	3326      	adds	r3, #38	@ 0x26
 80049ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d129      	bne.n	8004a06 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049b2:	78fa      	ldrb	r2, [r7, #3]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3344      	adds	r3, #68	@ 0x44
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	799b      	ldrb	r3, [r3, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HCD_HC_IN_IRQHandler+0xc2a>
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	331b      	adds	r3, #27
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d110      	bne.n	8004a06 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	334d      	adds	r3, #77	@ 0x4d
 80049f4:	2204      	movs	r2, #4
 80049f6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f004 f89a 	bl	8008b3a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	331b      	adds	r3, #27
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d129      	bne.n	8004a70 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	331b      	adds	r3, #27
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a6a:	f043 0320 	orr.w	r3, r3, #32
 8004a6e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2310      	movs	r3, #16
 8004a80:	6093      	str	r3, [r2, #8]
 8004a82:	e000      	b.n	8004a86 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004a84:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f003 fa9b 	bl	8007fe6 <USB_ReadChInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d11b      	bne.n	8004af2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2304      	movs	r3, #4
 8004aca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	334d      	adds	r3, #77	@ 0x4d
 8004adc:	2207      	movs	r2, #7
 8004ade:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f004 f826 	bl	8008b3a <USB_HC_Halt>
 8004aee:	f000 bc89 	b.w	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f003 fa73 	bl	8007fe6 <USB_ReadChInterrupts>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	f040 8082 	bne.w	8004c10 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3319      	adds	r3, #25
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d124      	bne.n	8004b7e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	3319      	adds	r3, #25
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	334c      	adds	r3, #76	@ 0x4c
 8004b58:	2202      	movs	r2, #2
 8004b5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	334d      	adds	r3, #77	@ 0x4d
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f003 ffde 	bl	8008b3a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	331a      	adds	r3, #26
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 8437 	bne.w	8005404 <HCD_HC_OUT_IRQHandler+0x978>
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	331b      	adds	r3, #27
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 842b 	bne.w	8005404 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	3326      	adds	r3, #38	@ 0x26
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d009      	beq.n	8004bd8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	331b      	adds	r3, #27
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	334d      	adds	r3, #77	@ 0x4d
 8004be8:	2203      	movs	r2, #3
 8004bea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f003 ffa0 	bl	8008b3a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	3344      	adds	r3, #68	@ 0x44
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e3f9      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f003 f9e4 	bl	8007fe6 <USB_ReadChInterrupts>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c28:	d111      	bne.n	8004c4e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c36:	461a      	mov	r2, r3
 8004c38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f003 ff77 	bl	8008b3a <USB_HC_Halt>
 8004c4c:	e3da      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 f9c5 	bl	8007fe6 <USB_ReadChInterrupts>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d168      	bne.n	8004d38 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	3344      	adds	r3, #68	@ 0x44
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 f9af 	bl	8007fe6 <USB_ReadChInterrupts>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b40      	cmp	r3, #64	@ 0x40
 8004c90:	d112      	bne.n	8004cb8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3319      	adds	r3, #25
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	2340      	movs	r3, #64	@ 0x40
 8004cb6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	331b      	adds	r3, #27
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d019      	beq.n	8004d02 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	331b      	adds	r3, #27
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d00:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2301      	movs	r3, #1
 8004d12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	334d      	adds	r3, #77	@ 0x4d
 8004d24:	2201      	movs	r2, #1
 8004d26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f003 ff02 	bl	8008b3a <USB_HC_Halt>
 8004d36:	e365      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f003 f950 	bl	8007fe6 <USB_ReadChInterrupts>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4c:	2b40      	cmp	r3, #64	@ 0x40
 8004d4e:	d139      	bne.n	8004dc4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	334d      	adds	r3, #77	@ 0x4d
 8004d60:	2205      	movs	r2, #5
 8004d62:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	331a      	adds	r3, #26
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3319      	adds	r3, #25
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3344      	adds	r3, #68	@ 0x44
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f003 fec5 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2340      	movs	r3, #64	@ 0x40
 8004dc0:	6093      	str	r3, [r2, #8]
 8004dc2:	e31f      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f003 f90a 	bl	8007fe6 <USB_ReadChInterrupts>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d11a      	bne.n	8004e12 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de8:	461a      	mov	r2, r3
 8004dea:	2308      	movs	r3, #8
 8004dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	334d      	adds	r3, #77	@ 0x4d
 8004dfe:	2206      	movs	r2, #6
 8004e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 fe95 	bl	8008b3a <USB_HC_Halt>
 8004e10:	e2f8      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f003 f8e3 	bl	8007fe6 <USB_ReadChInterrupts>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d144      	bne.n	8004eb4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	3344      	adds	r3, #68	@ 0x44
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	334d      	adds	r3, #77	@ 0x4d
 8004e4e:	2204      	movs	r2, #4
 8004e50:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3319      	adds	r3, #25
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d114      	bne.n	8004e92 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3318      	adds	r3, #24
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3319      	adds	r3, #25
 8004e8e:	2201      	movs	r2, #1
 8004e90:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f003 fe4d 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eac:	461a      	mov	r2, r3
 8004eae:	2310      	movs	r3, #16
 8004eb0:	6093      	str	r3, [r2, #8]
 8004eb2:	e2a7      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f003 f892 	bl	8007fe6 <USB_ReadChInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec8:	2b80      	cmp	r3, #128	@ 0x80
 8004eca:	f040 8083 	bne.w	8004fd4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	799b      	ldrb	r3, [r3, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d111      	bne.n	8004efa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	334d      	adds	r3, #77	@ 0x4d
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f003 fe21 	bl	8008b3a <USB_HC_Halt>
 8004ef8:	e062      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	3344      	adds	r3, #68	@ 0x44
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4403      	add	r3, r0
 8004f1a:	3344      	adds	r3, #68	@ 0x44
 8004f1c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3344      	adds	r3, #68	@ 0x44
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d922      	bls.n	8004f7a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	3344      	adds	r3, #68	@ 0x44
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	334c      	adds	r3, #76	@ 0x4c
 8004f58:	2204      	movs	r2, #4
 8004f5a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	334c      	adds	r3, #76	@ 0x4c
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f006 f940 	bl	800b1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f78:	e022      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	334c      	adds	r3, #76	@ 0x4c
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fa4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2380      	movs	r3, #128	@ 0x80
 8004fd0:	6093      	str	r3, [r2, #8]
 8004fd2:	e217      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f003 f802 	bl	8007fe6 <USB_ReadChInterrupts>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fec:	d11b      	bne.n	8005026 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	334d      	adds	r3, #77	@ 0x4d
 8004ffe:	2209      	movs	r2, #9
 8005000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f003 fd95 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800501c:	461a      	mov	r2, r3
 800501e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005022:	6093      	str	r3, [r2, #8]
 8005024:	e1ee      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f002 ffd9 	bl	8007fe6 <USB_ReadChInterrupts>
 8005034:	4603      	mov	r3, r0
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	f040 81df 	bne.w	80053fe <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800504c:	461a      	mov	r2, r3
 800504e:	2302      	movs	r3, #2
 8005050:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	334d      	adds	r3, #77	@ 0x4d
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	f040 8093 	bne.w	8005190 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	334d      	adds	r3, #77	@ 0x4d
 800507a:	2202      	movs	r2, #2
 800507c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	334c      	adds	r3, #76	@ 0x4c
 800508e:	2201      	movs	r2, #1
 8005090:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3326      	adds	r3, #38	@ 0x26
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d00b      	beq.n	80050c0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	3326      	adds	r3, #38	@ 0x26
 80050b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	f040 8190 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	799b      	ldrb	r3, [r3, #6]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d115      	bne.n	80050f4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	333d      	adds	r3, #61	@ 0x3d
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2d8      	uxtb	r0, r3
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	333d      	adds	r3, #61	@ 0x3d
 80050f0:	4602      	mov	r2, r0
 80050f2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	799b      	ldrb	r3, [r3, #6]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	f040 8171 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3334      	adds	r3, #52	@ 0x34
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8165 	beq.w	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3334      	adds	r3, #52	@ 0x34
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4403      	add	r3, r0
 8005136:	3328      	adds	r3, #40	@ 0x28
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	440b      	add	r3, r1
 800513c:	1e59      	subs	r1, r3, #1
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4403      	add	r3, r0
 800514c:	3328      	adds	r3, #40	@ 0x28
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	fbb1 f3f3 	udiv	r3, r1, r3
 8005154:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 813f 	beq.w	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	333d      	adds	r3, #61	@ 0x3d
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	f083 0301 	eor.w	r3, r3, #1
 800517a:	b2d8      	uxtb	r0, r3
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	333d      	adds	r3, #61	@ 0x3d
 800518a:	4602      	mov	r2, r0
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e127      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	334d      	adds	r3, #77	@ 0x4d
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d120      	bne.n	80051e8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	334d      	adds	r3, #77	@ 0x4d
 80051b6:	2202      	movs	r2, #2
 80051b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	331b      	adds	r3, #27
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	f040 8107 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	334c      	adds	r3, #76	@ 0x4c
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e0fb      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	334d      	adds	r3, #77	@ 0x4d
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d13a      	bne.n	8005274 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	334d      	adds	r3, #77	@ 0x4d
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	334c      	adds	r3, #76	@ 0x4c
 8005222:	2202      	movs	r2, #2
 8005224:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	331b      	adds	r3, #27
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	f040 80d1 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800523e:	78fa      	ldrb	r2, [r7, #3]
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	331b      	adds	r3, #27
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	440a      	add	r2, r1
 8005268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800526c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005270:	6053      	str	r3, [r2, #4]
 8005272:	e0b5      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	334d      	adds	r3, #77	@ 0x4d
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d114      	bne.n	80052b4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	334d      	adds	r3, #77	@ 0x4d
 800529a:	2202      	movs	r2, #2
 800529c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	334c      	adds	r3, #76	@ 0x4c
 80052ae:	2202      	movs	r2, #2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e095      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	334d      	adds	r3, #77	@ 0x4d
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d114      	bne.n	80052f4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	334d      	adds	r3, #77	@ 0x4d
 80052da:	2202      	movs	r2, #2
 80052dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	334c      	adds	r3, #76	@ 0x4c
 80052ee:	2205      	movs	r2, #5
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e075      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	334d      	adds	r3, #77	@ 0x4d
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b07      	cmp	r3, #7
 8005308:	d00a      	beq.n	8005320 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	334d      	adds	r3, #77	@ 0x4d
 800531a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800531c:	2b09      	cmp	r3, #9
 800531e:	d170      	bne.n	8005402 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	334d      	adds	r3, #77	@ 0x4d
 8005330:	2202      	movs	r2, #2
 8005332:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	3344      	adds	r3, #68	@ 0x44
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4403      	add	r3, r0
 8005354:	3344      	adds	r3, #68	@ 0x44
 8005356:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3344      	adds	r3, #68	@ 0x44
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d914      	bls.n	8005398 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	3344      	adds	r3, #68	@ 0x44
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	334c      	adds	r3, #76	@ 0x4c
 8005392:	2204      	movs	r2, #4
 8005394:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005396:	e022      	b.n	80053de <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	334c      	adds	r3, #76	@ 0x4c
 80053a8:	2202      	movs	r2, #2
 80053aa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053c2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053ca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d8:	461a      	mov	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053de:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	334c      	adds	r3, #76	@ 0x4c
 80053f0:	781a      	ldrb	r2, [r3, #0]
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f005 fefe 	bl	800b1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053fc:	e002      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005402:	bf00      	nop
  }
}
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b08a      	sub	sp, #40	@ 0x28
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	0c5b      	lsrs	r3, r3, #17
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800543e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d004      	beq.n	8005450 <HCD_RXQLVL_IRQHandler+0x46>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b05      	cmp	r3, #5
 800544a:	f000 80b6 	beq.w	80055ba <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800544e:	e0b7      	b.n	80055c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80b3 	beq.w	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	4613      	mov	r3, r2
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	332c      	adds	r3, #44	@ 0x2c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80a7 	beq.w	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	3338      	adds	r3, #56	@ 0x38
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	18d1      	adds	r1, r2, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4403      	add	r3, r0
 8005494:	3334      	adds	r3, #52	@ 0x34
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4299      	cmp	r1, r3
 800549a:	f200 8083 	bhi.w	80055a4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4613      	mov	r3, r2
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	332c      	adds	r3, #44	@ 0x2c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	b292      	uxth	r2, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	f002 fd29 	bl	8007f10 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	332c      	adds	r3, #44	@ 0x2c
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	18d1      	adds	r1, r2, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4403      	add	r3, r0
 80054e2:	332c      	adds	r3, #44	@ 0x2c
 80054e4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3338      	adds	r3, #56	@ 0x38
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	18d1      	adds	r1, r2, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4403      	add	r3, r0
 800550a:	3338      	adds	r3, #56	@ 0x38
 800550c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	0cdb      	lsrs	r3, r3, #19
 800551e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005522:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4613      	mov	r3, r2
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	3328      	adds	r3, #40	@ 0x28
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4293      	cmp	r3, r2
 800553c:	d13f      	bne.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d03c      	beq.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800555a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005562:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	4413      	add	r3, r2
 800556c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005570:	461a      	mov	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	333c      	adds	r3, #60	@ 0x3c
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f083 0301 	eor.w	r3, r3, #1
 800558c:	b2d8      	uxtb	r0, r3
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	333c      	adds	r3, #60	@ 0x3c
 800559e:	4602      	mov	r2, r0
 80055a0:	701a      	strb	r2, [r3, #0]
      break;
 80055a2:	e00c      	b.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4613      	mov	r3, r2
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	334c      	adds	r3, #76	@ 0x4c
 80055b4:	2204      	movs	r2, #4
 80055b6:	701a      	strb	r2, [r3, #0]
      break;
 80055b8:	e001      	b.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80055be:	bf00      	nop
  }
}
 80055c0:	bf00      	nop
 80055c2:	3728      	adds	r7, #40	@ 0x28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055f4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d10b      	bne.n	8005618 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d102      	bne.n	8005610 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f005 fdd8 	bl	800b1c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d132      	bne.n	8005688 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 0308 	orr.w	r3, r3, #8
 8005628:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b04      	cmp	r3, #4
 8005632:	d126      	bne.n	8005682 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7a5b      	ldrb	r3, [r3, #9]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d113      	bne.n	8005664 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005642:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005646:	d106      	bne.n	8005656 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2102      	movs	r1, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f002 fdf4 	bl	800823c <USB_InitFSLSPClkSel>
 8005654:	e011      	b.n	800567a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2101      	movs	r1, #1
 800565c:	4618      	mov	r0, r3
 800565e:	f002 fded 	bl	800823c <USB_InitFSLSPClkSel>
 8005662:	e00a      	b.n	800567a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	79db      	ldrb	r3, [r3, #7]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d106      	bne.n	800567a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005672:	461a      	mov	r2, r3
 8005674:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005678:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f005 fdca 	bl	800b214 <HAL_HCD_PortEnabled_Callback>
 8005680:	e002      	b.n	8005688 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f005 fdd4 	bl	800b230 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	d103      	bne.n	800569a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f043 0320 	orr.w	r3, r3, #32
 8005698:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6013      	str	r3, [r2, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e12b      	b.n	800591a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fc f958 	bl	800198c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	@ 0x24
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005714:	f001 fa20 	bl	8006b58 <HAL_RCC_GetPCLK1Freq>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a81      	ldr	r2, [pc, #516]	@ (8005924 <HAL_I2C_Init+0x274>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d807      	bhi.n	8005734 <HAL_I2C_Init+0x84>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a80      	ldr	r2, [pc, #512]	@ (8005928 <HAL_I2C_Init+0x278>)
 8005728:	4293      	cmp	r3, r2
 800572a:	bf94      	ite	ls
 800572c:	2301      	movls	r3, #1
 800572e:	2300      	movhi	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e006      	b.n	8005742 <HAL_I2C_Init+0x92>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a7d      	ldr	r2, [pc, #500]	@ (800592c <HAL_I2C_Init+0x27c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	bf94      	ite	ls
 800573c:	2301      	movls	r3, #1
 800573e:	2300      	movhi	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0e7      	b.n	800591a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a78      	ldr	r2, [pc, #480]	@ (8005930 <HAL_I2C_Init+0x280>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0c9b      	lsrs	r3, r3, #18
 8005754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a6a      	ldr	r2, [pc, #424]	@ (8005924 <HAL_I2C_Init+0x274>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d802      	bhi.n	8005784 <HAL_I2C_Init+0xd4>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3301      	adds	r3, #1
 8005782:	e009      	b.n	8005798 <HAL_I2C_Init+0xe8>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	4a69      	ldr	r2, [pc, #420]	@ (8005934 <HAL_I2C_Init+0x284>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	3301      	adds	r3, #1
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	430b      	orrs	r3, r1
 800579e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80057aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	495c      	ldr	r1, [pc, #368]	@ (8005924 <HAL_I2C_Init+0x274>)
 80057b4:	428b      	cmp	r3, r1
 80057b6:	d819      	bhi.n	80057ec <HAL_I2C_Init+0x13c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e59      	subs	r1, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80057cc:	400b      	ands	r3, r1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_I2C_Init+0x138>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1e59      	subs	r1, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e0:	3301      	adds	r3, #1
 80057e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e6:	e051      	b.n	800588c <HAL_I2C_Init+0x1dc>
 80057e8:	2304      	movs	r3, #4
 80057ea:	e04f      	b.n	800588c <HAL_I2C_Init+0x1dc>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d111      	bne.n	8005818 <HAL_I2C_Init+0x168>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1e58      	subs	r0, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6859      	ldr	r1, [r3, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	440b      	add	r3, r1
 8005802:	fbb0 f3f3 	udiv	r3, r0, r3
 8005806:	3301      	adds	r3, #1
 8005808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e012      	b.n	800583e <HAL_I2C_Init+0x18e>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1e58      	subs	r0, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	0099      	lsls	r1, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	fbb0 f3f3 	udiv	r3, r0, r3
 800582e:	3301      	adds	r3, #1
 8005830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Init+0x196>
 8005842:	2301      	movs	r3, #1
 8005844:	e022      	b.n	800588c <HAL_I2C_Init+0x1dc>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10e      	bne.n	800586c <HAL_I2C_Init+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1e58      	subs	r0, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6859      	ldr	r1, [r3, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	440b      	add	r3, r1
 800585c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005860:	3301      	adds	r3, #1
 8005862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800586a:	e00f      	b.n	800588c <HAL_I2C_Init+0x1dc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1e58      	subs	r0, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	0099      	lsls	r1, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005882:	3301      	adds	r3, #1
 8005884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	6809      	ldr	r1, [r1, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80058ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6911      	ldr	r1, [r2, #16]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68d2      	ldr	r2, [r2, #12]
 80058c6:	4311      	orrs	r1, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	000186a0 	.word	0x000186a0
 8005928:	001e847f 	.word	0x001e847f
 800592c:	003d08ff 	.word	0x003d08ff
 8005930:	431bde83 	.word	0x431bde83
 8005934:	10624dd3 	.word	0x10624dd3

08005938 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e128      	b.n	8005b9c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a90      	ldr	r2, [pc, #576]	@ (8005ba4 <HAL_I2S_Init+0x26c>)
 8005962:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fc f859 	bl	8001a1c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005980:	f023 030f 	bic.w	r3, r3, #15
 8005984:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2202      	movs	r2, #2
 800598c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d060      	beq.n	8005a58 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800599e:	2310      	movs	r3, #16
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e001      	b.n	80059a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80059a4:	2320      	movs	r3, #32
 80059a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d802      	bhi.n	80059b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059b6:	2001      	movs	r0, #1
 80059b8:	f001 f9c4 	bl	8006d44 <HAL_RCCEx_GetPeriphCLKFreq>
 80059bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c6:	d125      	bne.n	8005a14 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	461a      	mov	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	3305      	adds	r3, #5
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e01f      	b.n	8005a32 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	461a      	mov	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	3305      	adds	r3, #5
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	e00e      	b.n	8005a32 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	3305      	adds	r3, #5
 8005a30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4a5c      	ldr	r2, [pc, #368]	@ (8005ba8 <HAL_I2S_Init+0x270>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	08db      	lsrs	r3, r3, #3
 8005a3c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e003      	b.n	8005a60 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d902      	bls.n	8005a6c <HAL_I2S_Init+0x134>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2bff      	cmp	r3, #255	@ 0xff
 8005a6a:	d907      	bls.n	8005a7c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a70:	f043 0210 	orr.w	r2, r3, #16
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e08f      	b.n	8005b9c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	ea42 0103 	orr.w	r1, r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a9a:	f023 030f 	bic.w	r3, r3, #15
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6851      	ldr	r1, [r2, #4]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6892      	ldr	r2, [r2, #8]
 8005aa6:	4311      	orrs	r1, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68d2      	ldr	r2, [r2, #12]
 8005aac:	4311      	orrs	r1, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6992      	ldr	r2, [r2, #24]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005abe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d161      	bne.n	8005b8c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a38      	ldr	r2, [pc, #224]	@ (8005bac <HAL_I2S_Init+0x274>)
 8005acc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a37      	ldr	r2, [pc, #220]	@ (8005bb0 <HAL_I2S_Init+0x278>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <HAL_I2S_Init+0x1a4>
 8005ad8:	4b36      	ldr	r3, [pc, #216]	@ (8005bb4 <HAL_I2S_Init+0x27c>)
 8005ada:	e001      	b.n	8005ae0 <HAL_I2S_Init+0x1a8>
 8005adc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	4932      	ldr	r1, [pc, #200]	@ (8005bb0 <HAL_I2S_Init+0x278>)
 8005ae8:	428a      	cmp	r2, r1
 8005aea:	d101      	bne.n	8005af0 <HAL_I2S_Init+0x1b8>
 8005aec:	4a31      	ldr	r2, [pc, #196]	@ (8005bb4 <HAL_I2S_Init+0x27c>)
 8005aee:	e001      	b.n	8005af4 <HAL_I2S_Init+0x1bc>
 8005af0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005af4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005af8:	f023 030f 	bic.w	r3, r3, #15
 8005afc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb0 <HAL_I2S_Init+0x278>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_I2S_Init+0x1d4>
 8005b08:	4b2a      	ldr	r3, [pc, #168]	@ (8005bb4 <HAL_I2S_Init+0x27c>)
 8005b0a:	e001      	b.n	8005b10 <HAL_I2S_Init+0x1d8>
 8005b0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b10:	2202      	movs	r2, #2
 8005b12:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a25      	ldr	r2, [pc, #148]	@ (8005bb0 <HAL_I2S_Init+0x278>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <HAL_I2S_Init+0x1ea>
 8005b1e:	4b25      	ldr	r3, [pc, #148]	@ (8005bb4 <HAL_I2S_Init+0x27c>)
 8005b20:	e001      	b.n	8005b26 <HAL_I2S_Init+0x1ee>
 8005b22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b32:	d003      	beq.n	8005b3c <HAL_I2S_Init+0x204>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e001      	b.n	8005b48 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b52:	4313      	orrs	r3, r2
 8005b54:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b66:	4313      	orrs	r3, r2
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	897b      	ldrh	r3, [r7, #10]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b74:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb0 <HAL_I2S_Init+0x278>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d101      	bne.n	8005b84 <HAL_I2S_Init+0x24c>
 8005b80:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <HAL_I2S_Init+0x27c>)
 8005b82:	e001      	b.n	8005b88 <HAL_I2S_Init+0x250>
 8005b84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b88:	897a      	ldrh	r2, [r7, #10]
 8005b8a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08005caf 	.word	0x08005caf
 8005ba8:	cccccccd 	.word	0xcccccccd
 8005bac:	08005dc5 	.word	0x08005dc5
 8005bb0:	40003800 	.word	0x40003800
 8005bb4:	40003400 	.word	0x40003400

08005bb8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10e      	bne.n	8005c48 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c38:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff ffb8 	bl	8005bb8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c62:	b292      	uxth	r2, r2
 8005c64:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	1c9a      	adds	r2, r3, #2
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10e      	bne.n	8005ca6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff93 	bl	8005bcc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d13a      	bne.n	8005d40 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d109      	bne.n	8005ce8 <I2S_IRQHandler+0x3a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cde:	2b40      	cmp	r3, #64	@ 0x40
 8005ce0:	d102      	bne.n	8005ce8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ffb4 	bl	8005c50 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cee:	2b40      	cmp	r3, #64	@ 0x40
 8005cf0:	d126      	bne.n	8005d40 <I2S_IRQHandler+0x92>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d11f      	bne.n	8005d40 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d32:	f043 0202 	orr.w	r2, r3, #2
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff ff50 	bl	8005be0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d136      	bne.n	8005dba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d109      	bne.n	8005d6a <I2S_IRQHandler+0xbc>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d60:	2b80      	cmp	r3, #128	@ 0x80
 8005d62:	d102      	bne.n	8005d6a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff ff45 	bl	8005bf4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d122      	bne.n	8005dba <I2S_IRQHandler+0x10c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d11b      	bne.n	8005dba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d90:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dac:	f043 0204 	orr.w	r2, r3, #4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ff13 	bl	8005be0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dba:	bf00      	nop
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a92      	ldr	r2, [pc, #584]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005dde:	4b92      	ldr	r3, [pc, #584]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005de0:	e001      	b.n	8005de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005de2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a8b      	ldr	r2, [pc, #556]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d101      	bne.n	8005e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dfe:	e001      	b.n	8005e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005e00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e10:	d004      	beq.n	8005e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 8099 	bne.w	8005f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d107      	bne.n	8005e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f925 	bl	8006080 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d107      	bne.n	8005e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f9c8 	bl	80061e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	2b40      	cmp	r3, #64	@ 0x40
 8005e58:	d13a      	bne.n	8005ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d035      	beq.n	8005ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e70:	e001      	b.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4969      	ldr	r1, [pc, #420]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e7e:	428b      	cmp	r3, r1
 8005e80:	d101      	bne.n	8005e86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e82:	4b69      	ldr	r3, [pc, #420]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e84:	e001      	b.n	8005e8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e8e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	f043 0202 	orr.w	r2, r3, #2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fe88 	bl	8005be0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	f040 80c3 	bne.w	8006062 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80bd 	beq.w	8006062 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ef6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a49      	ldr	r2, [pc, #292]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d101      	bne.n	8005f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005f02:	4b49      	ldr	r3, [pc, #292]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f04:	e001      	b.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005f06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4944      	ldr	r1, [pc, #272]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f12:	428b      	cmp	r3, r1
 8005f14:	d101      	bne.n	8005f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f16:	4b44      	ldr	r3, [pc, #272]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f18:	e001      	b.n	8005f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f22:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f24:	2300      	movs	r3, #0
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	f043 0204 	orr.w	r2, r3, #4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fe4a 	bl	8005be0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f4c:	e089      	b.n	8006062 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d107      	bne.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f8be 	bl	80060e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d107      	bne.n	8005f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f8fd 	bl	800617c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d12f      	bne.n	8005fec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02a      	beq.n	8005fec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fa4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1e      	ldr	r2, [pc, #120]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb2:	e001      	b.n	8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005fb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4919      	ldr	r1, [pc, #100]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005fc4:	4b18      	ldr	r3, [pc, #96]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fc6:	e001      	b.n	8005fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005fc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fcc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fd0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	f043 0202 	orr.w	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fdfa 	bl	8005be0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d136      	bne.n	8006064 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d031      	beq.n	8006064 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a07      	ldr	r2, [pc, #28]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d101      	bne.n	800600e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800600a:	4b07      	ldr	r3, [pc, #28]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800600c:	e001      	b.n	8006012 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800600e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4902      	ldr	r1, [pc, #8]	@ (8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800601a:	428b      	cmp	r3, r1
 800601c:	d106      	bne.n	800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800601e:	4b02      	ldr	r3, [pc, #8]	@ (8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006020:	e006      	b.n	8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006022:	bf00      	nop
 8006024:	40003800 	.word	0x40003800
 8006028:	40003400 	.word	0x40003400
 800602c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006030:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006034:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006044:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006052:	f043 0204 	orr.w	r2, r3, #4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fdc0 	bl	8005be0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006060:	e000      	b.n	8006064 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006062:	bf00      	nop
}
 8006064:	bf00      	nop
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608c:	1c99      	adds	r1, r3, #2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6251      	str	r1, [r2, #36]	@ 0x24
 8006092:	881a      	ldrh	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d113      	bne.n	80060da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ffc9 	bl	800606c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	1c99      	adds	r1, r3, #2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6251      	str	r1, [r2, #36]	@ 0x24
 80060f6:	8819      	ldrh	r1, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <I2SEx_TxISR_I2SExt+0x90>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d101      	bne.n	8006106 <I2SEx_TxISR_I2SExt+0x22>
 8006102:	4b1d      	ldr	r3, [pc, #116]	@ (8006178 <I2SEx_TxISR_I2SExt+0x94>)
 8006104:	e001      	b.n	800610a <I2SEx_TxISR_I2SExt+0x26>
 8006106:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800610a:	460a      	mov	r2, r1
 800610c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d121      	bne.n	800616a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a12      	ldr	r2, [pc, #72]	@ (8006174 <I2SEx_TxISR_I2SExt+0x90>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d101      	bne.n	8006134 <I2SEx_TxISR_I2SExt+0x50>
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <I2SEx_TxISR_I2SExt+0x94>)
 8006132:	e001      	b.n	8006138 <I2SEx_TxISR_I2SExt+0x54>
 8006134:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	490d      	ldr	r1, [pc, #52]	@ (8006174 <I2SEx_TxISR_I2SExt+0x90>)
 8006140:	428b      	cmp	r3, r1
 8006142:	d101      	bne.n	8006148 <I2SEx_TxISR_I2SExt+0x64>
 8006144:	4b0c      	ldr	r3, [pc, #48]	@ (8006178 <I2SEx_TxISR_I2SExt+0x94>)
 8006146:	e001      	b.n	800614c <I2SEx_TxISR_I2SExt+0x68>
 8006148:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800614c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006150:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff81 	bl	800606c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40003800 	.word	0x40003800
 8006178:	40003400 	.word	0x40003400

0800617c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68d8      	ldr	r0, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	1c99      	adds	r1, r3, #2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006194:	b282      	uxth	r2, r0
 8006196:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d113      	bne.n	80061d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff ff4a 	bl	800606c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a20      	ldr	r2, [pc, #128]	@ (8006270 <I2SEx_RxISR_I2SExt+0x90>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <I2SEx_RxISR_I2SExt+0x16>
 80061f2:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <I2SEx_RxISR_I2SExt+0x94>)
 80061f4:	e001      	b.n	80061fa <I2SEx_RxISR_I2SExt+0x1a>
 80061f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061fa:	68d8      	ldr	r0, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	1c99      	adds	r1, r3, #2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006206:	b282      	uxth	r2, r0
 8006208:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d121      	bne.n	8006266 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a12      	ldr	r2, [pc, #72]	@ (8006270 <I2SEx_RxISR_I2SExt+0x90>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <I2SEx_RxISR_I2SExt+0x50>
 800622c:	4b11      	ldr	r3, [pc, #68]	@ (8006274 <I2SEx_RxISR_I2SExt+0x94>)
 800622e:	e001      	b.n	8006234 <I2SEx_RxISR_I2SExt+0x54>
 8006230:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	490d      	ldr	r1, [pc, #52]	@ (8006270 <I2SEx_RxISR_I2SExt+0x90>)
 800623c:	428b      	cmp	r3, r1
 800623e:	d101      	bne.n	8006244 <I2SEx_RxISR_I2SExt+0x64>
 8006240:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <I2SEx_RxISR_I2SExt+0x94>)
 8006242:	e001      	b.n	8006248 <I2SEx_RxISR_I2SExt+0x68>
 8006244:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006248:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800624c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff03 	bl	800606c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40003800 	.word	0x40003800
 8006274:	40003400 	.word	0x40003400

08006278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e267      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d075      	beq.n	8006382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006296:	4b88      	ldr	r3, [pc, #544]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d00c      	beq.n	80062bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062a2:	4b85      	ldr	r3, [pc, #532]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d112      	bne.n	80062d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ae:	4b82      	ldr	r3, [pc, #520]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ba:	d10b      	bne.n	80062d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062bc:	4b7e      	ldr	r3, [pc, #504]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05b      	beq.n	8006380 <HAL_RCC_OscConfig+0x108>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d157      	bne.n	8006380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e242      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062dc:	d106      	bne.n	80062ec <HAL_RCC_OscConfig+0x74>
 80062de:	4b76      	ldr	r3, [pc, #472]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a75      	ldr	r2, [pc, #468]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e01d      	b.n	8006328 <HAL_RCC_OscConfig+0xb0>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062f4:	d10c      	bne.n	8006310 <HAL_RCC_OscConfig+0x98>
 80062f6:	4b70      	ldr	r3, [pc, #448]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6f      	ldr	r2, [pc, #444]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	4b6d      	ldr	r3, [pc, #436]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a6c      	ldr	r2, [pc, #432]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e00b      	b.n	8006328 <HAL_RCC_OscConfig+0xb0>
 8006310:	4b69      	ldr	r3, [pc, #420]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a68      	ldr	r2, [pc, #416]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4b66      	ldr	r3, [pc, #408]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a65      	ldr	r2, [pc, #404]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d013      	beq.n	8006358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006330:	f7fb fdbe 	bl	8001eb0 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006338:	f7fb fdba 	bl	8001eb0 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	@ 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e207      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	4b5b      	ldr	r3, [pc, #364]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0xc0>
 8006356:	e014      	b.n	8006382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fb fdaa 	bl	8001eb0 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006360:	f7fb fda6 	bl	8001eb0 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	@ 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e1f3      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006372:	4b51      	ldr	r3, [pc, #324]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0xe8>
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d063      	beq.n	8006456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800638e:	4b4a      	ldr	r3, [pc, #296]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800639a:	4b47      	ldr	r3, [pc, #284]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d11c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063a6:	4b44      	ldr	r3, [pc, #272]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d116      	bne.n	80063e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b2:	4b41      	ldr	r3, [pc, #260]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_RCC_OscConfig+0x152>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e1c7      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ca:	4b3b      	ldr	r3, [pc, #236]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4937      	ldr	r1, [pc, #220]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063de:	e03a      	b.n	8006456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d020      	beq.n	800642a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063e8:	4b34      	ldr	r3, [pc, #208]	@ (80064bc <HAL_RCC_OscConfig+0x244>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fb fd5f 	bl	8001eb0 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063f6:	f7fb fd5b 	bl	8001eb0 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e1a8      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	4b2b      	ldr	r3, [pc, #172]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006414:	4b28      	ldr	r3, [pc, #160]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4925      	ldr	r1, [pc, #148]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]
 8006428:	e015      	b.n	8006456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642a:	4b24      	ldr	r3, [pc, #144]	@ (80064bc <HAL_RCC_OscConfig+0x244>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fb fd3e 	bl	8001eb0 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006438:	f7fb fd3a 	bl	8001eb0 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e187      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d036      	beq.n	80064d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800646a:	4b15      	ldr	r3, [pc, #84]	@ (80064c0 <HAL_RCC_OscConfig+0x248>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fb fd1e 	bl	8001eb0 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006478:	f7fb fd1a 	bl	8001eb0 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e167      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <HAL_RCC_OscConfig+0x240>)
 800648c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x200>
 8006496:	e01b      	b.n	80064d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006498:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <HAL_RCC_OscConfig+0x248>)
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800649e:	f7fb fd07 	bl	8001eb0 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a4:	e00e      	b.n	80064c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a6:	f7fb fd03 	bl	8001eb0 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d907      	bls.n	80064c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e150      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
 80064b8:	40023800 	.word	0x40023800
 80064bc:	42470000 	.word	0x42470000
 80064c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c4:	4b88      	ldr	r3, [pc, #544]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ea      	bne.n	80064a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8097 	beq.w	800660c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e2:	4b81      	ldr	r3, [pc, #516]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	4b7d      	ldr	r3, [pc, #500]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	4a7c      	ldr	r2, [pc, #496]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80064fe:	4b7a      	ldr	r3, [pc, #488]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800650e:	4b77      	ldr	r3, [pc, #476]	@ (80066ec <HAL_RCC_OscConfig+0x474>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d118      	bne.n	800654c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800651a:	4b74      	ldr	r3, [pc, #464]	@ (80066ec <HAL_RCC_OscConfig+0x474>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a73      	ldr	r2, [pc, #460]	@ (80066ec <HAL_RCC_OscConfig+0x474>)
 8006520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006526:	f7fb fcc3 	bl	8001eb0 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652e:	f7fb fcbf 	bl	8001eb0 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e10c      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	4b6a      	ldr	r3, [pc, #424]	@ (80066ec <HAL_RCC_OscConfig+0x474>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f0      	beq.n	800652e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d106      	bne.n	8006562 <HAL_RCC_OscConfig+0x2ea>
 8006554:	4b64      	ldr	r3, [pc, #400]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006558:	4a63      	ldr	r2, [pc, #396]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006560:	e01c      	b.n	800659c <HAL_RCC_OscConfig+0x324>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b05      	cmp	r3, #5
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x30c>
 800656a:	4b5f      	ldr	r3, [pc, #380]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	4a5e      	ldr	r2, [pc, #376]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006570:	f043 0304 	orr.w	r3, r3, #4
 8006574:	6713      	str	r3, [r2, #112]	@ 0x70
 8006576:	4b5c      	ldr	r3, [pc, #368]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	4a5b      	ldr	r2, [pc, #364]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	6713      	str	r3, [r2, #112]	@ 0x70
 8006582:	e00b      	b.n	800659c <HAL_RCC_OscConfig+0x324>
 8006584:	4b58      	ldr	r3, [pc, #352]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006588:	4a57      	ldr	r2, [pc, #348]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006590:	4b55      	ldr	r3, [pc, #340]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006594:	4a54      	ldr	r2, [pc, #336]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006596:	f023 0304 	bic.w	r3, r3, #4
 800659a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d015      	beq.n	80065d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fb fc84 	bl	8001eb0 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ac:	f7fb fc80 	bl	8001eb0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e0cb      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c2:	4b49      	ldr	r3, [pc, #292]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0ee      	beq.n	80065ac <HAL_RCC_OscConfig+0x334>
 80065ce:	e014      	b.n	80065fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d0:	f7fb fc6e 	bl	8001eb0 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d6:	e00a      	b.n	80065ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d8:	f7fb fc6a 	bl	8001eb0 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e0b5      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ee:	4b3e      	ldr	r3, [pc, #248]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80065f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1ee      	bne.n	80065d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d105      	bne.n	800660c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006600:	4b39      	ldr	r3, [pc, #228]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006604:	4a38      	ldr	r2, [pc, #224]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800660a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80a1 	beq.w	8006758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006616:	4b34      	ldr	r3, [pc, #208]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
 800661e:	2b08      	cmp	r3, #8
 8006620:	d05c      	beq.n	80066dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d141      	bne.n	80066ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662a:	4b31      	ldr	r3, [pc, #196]	@ (80066f0 <HAL_RCC_OscConfig+0x478>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006630:	f7fb fc3e 	bl	8001eb0 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006638:	f7fb fc3a 	bl	8001eb0 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e087      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	4b27      	ldr	r3, [pc, #156]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	3b01      	subs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	491b      	ldr	r1, [pc, #108]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 800667c:	4313      	orrs	r3, r2
 800667e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006680:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <HAL_RCC_OscConfig+0x478>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006686:	f7fb fc13 	bl	8001eb0 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668e:	f7fb fc0f 	bl	8001eb0 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e05c      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a0:	4b11      	ldr	r3, [pc, #68]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x416>
 80066ac:	e054      	b.n	8006758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ae:	4b10      	ldr	r3, [pc, #64]	@ (80066f0 <HAL_RCC_OscConfig+0x478>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fb fbfc 	bl	8001eb0 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fb fbf8 	bl	8001eb0 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e045      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <HAL_RCC_OscConfig+0x470>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x444>
 80066da:	e03d      	b.n	8006758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d107      	bne.n	80066f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e038      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
 80066e8:	40023800 	.word	0x40023800
 80066ec:	40007000 	.word	0x40007000
 80066f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006764 <HAL_RCC_OscConfig+0x4ec>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d028      	beq.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670c:	429a      	cmp	r2, r3
 800670e:	d121      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d11a      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006724:	4013      	ands	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800672a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800672c:	4293      	cmp	r3, r2
 800672e:	d111      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	3b01      	subs	r3, #1
 800673e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d107      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006750:	429a      	cmp	r2, r3
 8006752:	d001      	beq.n	8006758 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40023800 	.word	0x40023800

08006768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0cc      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800677c:	4b68      	ldr	r3, [pc, #416]	@ (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d90c      	bls.n	80067a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678a:	4b65      	ldr	r3, [pc, #404]	@ (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	4b63      	ldr	r3, [pc, #396]	@ (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d001      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0b8      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d020      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067bc:	4b59      	ldr	r3, [pc, #356]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	4a58      	ldr	r2, [pc, #352]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067d4:	4b53      	ldr	r3, [pc, #332]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	4a52      	ldr	r2, [pc, #328]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e0:	4b50      	ldr	r3, [pc, #320]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	494d      	ldr	r1, [pc, #308]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d044      	beq.n	8006888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d107      	bne.n	8006816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006806:	4b47      	ldr	r3, [pc, #284]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d119      	bne.n	8006846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e07f      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d003      	beq.n	8006826 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006822:	2b03      	cmp	r3, #3
 8006824:	d107      	bne.n	8006836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006826:	4b3f      	ldr	r3, [pc, #252]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e06f      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006836:	4b3b      	ldr	r3, [pc, #236]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e067      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006846:	4b37      	ldr	r3, [pc, #220]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f023 0203 	bic.w	r2, r3, #3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4934      	ldr	r1, [pc, #208]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	4313      	orrs	r3, r2
 8006856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006858:	f7fb fb2a 	bl	8001eb0 <HAL_GetTick>
 800685c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685e:	e00a      	b.n	8006876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006860:	f7fb fb26 	bl	8001eb0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686e:	4293      	cmp	r3, r2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e04f      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006876:	4b2b      	ldr	r3, [pc, #172]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 020c 	and.w	r2, r3, #12
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	429a      	cmp	r2, r3
 8006886:	d1eb      	bne.n	8006860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006888:	4b25      	ldr	r3, [pc, #148]	@ (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d20c      	bcs.n	80068b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006896:	4b22      	ldr	r3, [pc, #136]	@ (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800689e:	4b20      	ldr	r3, [pc, #128]	@ (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d001      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e032      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068bc:	4b19      	ldr	r3, [pc, #100]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4916      	ldr	r1, [pc, #88]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068da:	4b12      	ldr	r3, [pc, #72]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	490e      	ldr	r1, [pc, #56]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068ee:	f000 f821 	bl	8006934 <HAL_RCC_GetSysClockFreq>
 80068f2:	4602      	mov	r2, r0
 80068f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	490a      	ldr	r1, [pc, #40]	@ (8006928 <HAL_RCC_ClockConfig+0x1c0>)
 8006900:	5ccb      	ldrb	r3, [r1, r3]
 8006902:	fa22 f303 	lsr.w	r3, r2, r3
 8006906:	4a09      	ldr	r2, [pc, #36]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 8006908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800690a:	4b09      	ldr	r3, [pc, #36]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7fb fa8a 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40023c00 	.word	0x40023c00
 8006924:	40023800 	.word	0x40023800
 8006928:	0800b8f0 	.word	0x0800b8f0
 800692c:	20000010 	.word	0x20000010
 8006930:	20000014 	.word	0x20000014

08006934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006938:	b094      	sub	sp, #80	@ 0x50
 800693a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800694c:	4b79      	ldr	r3, [pc, #484]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 030c 	and.w	r3, r3, #12
 8006954:	2b08      	cmp	r3, #8
 8006956:	d00d      	beq.n	8006974 <HAL_RCC_GetSysClockFreq+0x40>
 8006958:	2b08      	cmp	r3, #8
 800695a:	f200 80e1 	bhi.w	8006b20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0x34>
 8006962:	2b04      	cmp	r3, #4
 8006964:	d003      	beq.n	800696e <HAL_RCC_GetSysClockFreq+0x3a>
 8006966:	e0db      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006968:	4b73      	ldr	r3, [pc, #460]	@ (8006b38 <HAL_RCC_GetSysClockFreq+0x204>)
 800696a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800696c:	e0db      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800696e:	4b73      	ldr	r3, [pc, #460]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x208>)
 8006970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006972:	e0d8      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006974:	4b6f      	ldr	r3, [pc, #444]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800697c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800697e:	4b6d      	ldr	r3, [pc, #436]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d063      	beq.n	8006a52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800698a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	099b      	lsrs	r3, r3, #6
 8006990:	2200      	movs	r2, #0
 8006992:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006994:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699c:	633b      	str	r3, [r7, #48]	@ 0x30
 800699e:	2300      	movs	r3, #0
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80069a6:	4622      	mov	r2, r4
 80069a8:	462b      	mov	r3, r5
 80069aa:	f04f 0000 	mov.w	r0, #0
 80069ae:	f04f 0100 	mov.w	r1, #0
 80069b2:	0159      	lsls	r1, r3, #5
 80069b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069b8:	0150      	lsls	r0, r2, #5
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4621      	mov	r1, r4
 80069c0:	1a51      	subs	r1, r2, r1
 80069c2:	6139      	str	r1, [r7, #16]
 80069c4:	4629      	mov	r1, r5
 80069c6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069d8:	4659      	mov	r1, fp
 80069da:	018b      	lsls	r3, r1, #6
 80069dc:	4651      	mov	r1, sl
 80069de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069e2:	4651      	mov	r1, sl
 80069e4:	018a      	lsls	r2, r1, #6
 80069e6:	4651      	mov	r1, sl
 80069e8:	ebb2 0801 	subs.w	r8, r2, r1
 80069ec:	4659      	mov	r1, fp
 80069ee:	eb63 0901 	sbc.w	r9, r3, r1
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a06:	4690      	mov	r8, r2
 8006a08:	4699      	mov	r9, r3
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	eb18 0303 	adds.w	r3, r8, r3
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	462b      	mov	r3, r5
 8006a14:	eb49 0303 	adc.w	r3, r9, r3
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a26:	4629      	mov	r1, r5
 8006a28:	024b      	lsls	r3, r1, #9
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a30:	4621      	mov	r1, r4
 8006a32:	024a      	lsls	r2, r1, #9
 8006a34:	4610      	mov	r0, r2
 8006a36:	4619      	mov	r1, r3
 8006a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a44:	f7f9 fbc0 	bl	80001c8 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a50:	e058      	b.n	8006b04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a52:	4b38      	ldr	r3, [pc, #224]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a62:	623b      	str	r3, [r7, #32]
 8006a64:	2300      	movs	r3, #0
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	f04f 0000 	mov.w	r0, #0
 8006a74:	f04f 0100 	mov.w	r1, #0
 8006a78:	0159      	lsls	r1, r3, #5
 8006a7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a7e:	0150      	lsls	r0, r2, #5
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4641      	mov	r1, r8
 8006a86:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006aa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006aa4:	ebb2 040a 	subs.w	r4, r2, sl
 8006aa8:	eb63 050b 	sbc.w	r5, r3, fp
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	00eb      	lsls	r3, r5, #3
 8006ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aba:	00e2      	lsls	r2, r4, #3
 8006abc:	4614      	mov	r4, r2
 8006abe:	461d      	mov	r5, r3
 8006ac0:	4643      	mov	r3, r8
 8006ac2:	18e3      	adds	r3, r4, r3
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	eb45 0303 	adc.w	r3, r5, r3
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ada:	4629      	mov	r1, r5
 8006adc:	028b      	lsls	r3, r1, #10
 8006ade:	4621      	mov	r1, r4
 8006ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	028a      	lsls	r2, r1, #10
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aee:	2200      	movs	r2, #0
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	61fa      	str	r2, [r7, #28]
 8006af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006af8:	f7f9 fb66 	bl	80001c8 <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4613      	mov	r3, r2
 8006b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b04:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	0c1b      	lsrs	r3, r3, #16
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	3301      	adds	r3, #1
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b1e:	e002      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b20:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3750      	adds	r7, #80	@ 0x50
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b32:	bf00      	nop
 8006b34:	40023800 	.word	0x40023800
 8006b38:	00f42400 	.word	0x00f42400
 8006b3c:	007a1200 	.word	0x007a1200

08006b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b44:	4b03      	ldr	r3, [pc, #12]	@ (8006b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b46:	681b      	ldr	r3, [r3, #0]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000010 	.word	0x20000010

08006b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b5c:	f7ff fff0 	bl	8006b40 <HAL_RCC_GetHCLKFreq>
 8006b60:	4602      	mov	r2, r0
 8006b62:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	0a9b      	lsrs	r3, r3, #10
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	4903      	ldr	r1, [pc, #12]	@ (8006b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b6e:	5ccb      	ldrb	r3, [r1, r3]
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	0800b900 	.word	0x0800b900

08006b80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d035      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ba8:	4b62      	ldr	r3, [pc, #392]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bae:	f7fb f97f 	bl	8001eb0 <HAL_GetTick>
 8006bb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bb6:	f7fb f97b 	bl	8001eb0 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e0b0      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc8:	4b5b      	ldr	r3, [pc, #364]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	019a      	lsls	r2, r3, #6
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	071b      	lsls	r3, r3, #28
 8006be0:	4955      	ldr	r1, [pc, #340]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006be8:	4b52      	ldr	r3, [pc, #328]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bee:	f7fb f95f 	bl	8001eb0 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bf6:	f7fb f95b 	bl	8001eb0 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e090      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c08:	4b4b      	ldr	r3, [pc, #300]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f0      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8083 	beq.w	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	4b44      	ldr	r3, [pc, #272]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	4a43      	ldr	r2, [pc, #268]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c32:	4b41      	ldr	r3, [pc, #260]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3e      	ldr	r2, [pc, #248]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c4a:	f7fb f931 	bl	8001eb0 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c50:	e008      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c52:	f7fb f92d 	bl	8001eb0 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e062      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c64:	4b35      	ldr	r3, [pc, #212]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c70:	4b31      	ldr	r3, [pc, #196]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c78:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d02f      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d028      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c98:	4b29      	ldr	r3, [pc, #164]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c9e:	4b28      	ldr	r3, [pc, #160]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ca4:	4a24      	ldr	r2, [pc, #144]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006caa:	4b23      	ldr	r3, [pc, #140]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d114      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cb6:	f7fb f8fb 	bl	8001eb0 <HAL_GetTick>
 8006cba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	e00a      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cbe:	f7fb f8f7 	bl	8001eb0 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e02a      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	4b18      	ldr	r3, [pc, #96]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ee      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cec:	d10d      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006cee:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d02:	490d      	ldr	r1, [pc, #52]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	608b      	str	r3, [r1, #8]
 8006d08:	e005      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006d14:	6093      	str	r3, [r2, #8]
 8006d16:	4b08      	ldr	r3, [pc, #32]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d22:	4905      	ldr	r1, [pc, #20]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	42470068 	.word	0x42470068
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	40007000 	.word	0x40007000
 8006d40:	42470e40 	.word	0x42470e40

08006d44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d13f      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d62:	4b24      	ldr	r3, [pc, #144]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d6a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d78:	d12f      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d7c:	617b      	str	r3, [r7, #20]
          break;
 8006d7e:	e02f      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d80:	4b1c      	ldr	r3, [pc, #112]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d8c:	d108      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d8e:	4b19      	ldr	r3, [pc, #100]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d96:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	e007      	b.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006da0:	4b14      	ldr	r3, [pc, #80]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006da8:	4a15      	ldr	r2, [pc, #84]	@ (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006db0:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dca:	0f1b      	lsrs	r3, r3, #28
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	617b      	str	r3, [r7, #20]
          break;
 8006dd8:	e002      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
          break;
 8006dde:	bf00      	nop
        }
      }
      break;
 8006de0:	e000      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006de2:	bf00      	nop
    }
  }
  return frequency;
 8006de4:	697b      	ldr	r3, [r7, #20]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40023800 	.word	0x40023800
 8006df8:	00bb8000 	.word	0x00bb8000
 8006dfc:	007a1200 	.word	0x007a1200
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e07b      	b.n	8006f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e26:	d009      	beq.n	8006e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	61da      	str	r2, [r3, #28]
 8006e2e:	e005      	b.n	8006e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fa fe60 	bl	8001b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec0:	ea42 0103 	orr.w	r1, r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 0104 	and.w	r1, r3, #4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	f003 0210 	and.w	r2, r3, #16
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e041      	b.n	8006fac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7fa fe35 	bl	8001bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f000 fad9 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e041      	b.n	800704a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f839 	bl	8007052 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f000 fa8a 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d109      	bne.n	800708c <HAL_TIM_PWM_Start+0x24>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b01      	cmp	r3, #1
 8007082:	bf14      	ite	ne
 8007084:	2301      	movne	r3, #1
 8007086:	2300      	moveq	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	e022      	b.n	80070d2 <HAL_TIM_PWM_Start+0x6a>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b04      	cmp	r3, #4
 8007090:	d109      	bne.n	80070a6 <HAL_TIM_PWM_Start+0x3e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	bf14      	ite	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	2300      	moveq	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	e015      	b.n	80070d2 <HAL_TIM_PWM_Start+0x6a>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d109      	bne.n	80070c0 <HAL_TIM_PWM_Start+0x58>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	bf14      	ite	ne
 80070b8:	2301      	movne	r3, #1
 80070ba:	2300      	moveq	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	e008      	b.n	80070d2 <HAL_TIM_PWM_Start+0x6a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	bf14      	ite	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	2300      	moveq	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e07c      	b.n	80071d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Start+0x82>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070e8:	e013      	b.n	8007112 <HAL_TIM_PWM_Start+0xaa>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start+0x92>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f8:	e00b      	b.n	8007112 <HAL_TIM_PWM_Start+0xaa>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d104      	bne.n	800710a <HAL_TIM_PWM_Start+0xa2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007108:	e003      	b.n	8007112 <HAL_TIM_PWM_Start+0xaa>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2201      	movs	r2, #1
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fce6 	bl	8007aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a2d      	ldr	r2, [pc, #180]	@ (80071dc <HAL_TIM_PWM_Start+0x174>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIM_PWM_Start+0xcc>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a2c      	ldr	r2, [pc, #176]	@ (80071e0 <HAL_TIM_PWM_Start+0x178>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d101      	bne.n	8007138 <HAL_TIM_PWM_Start+0xd0>
 8007134:	2301      	movs	r3, #1
 8007136:	e000      	b.n	800713a <HAL_TIM_PWM_Start+0xd2>
 8007138:	2300      	movs	r3, #0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800714c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a22      	ldr	r2, [pc, #136]	@ (80071dc <HAL_TIM_PWM_Start+0x174>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d022      	beq.n	800719e <HAL_TIM_PWM_Start+0x136>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007160:	d01d      	beq.n	800719e <HAL_TIM_PWM_Start+0x136>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1f      	ldr	r2, [pc, #124]	@ (80071e4 <HAL_TIM_PWM_Start+0x17c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d018      	beq.n	800719e <HAL_TIM_PWM_Start+0x136>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1d      	ldr	r2, [pc, #116]	@ (80071e8 <HAL_TIM_PWM_Start+0x180>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <HAL_TIM_PWM_Start+0x136>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1c      	ldr	r2, [pc, #112]	@ (80071ec <HAL_TIM_PWM_Start+0x184>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00e      	beq.n	800719e <HAL_TIM_PWM_Start+0x136>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a16      	ldr	r2, [pc, #88]	@ (80071e0 <HAL_TIM_PWM_Start+0x178>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d009      	beq.n	800719e <HAL_TIM_PWM_Start+0x136>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a18      	ldr	r2, [pc, #96]	@ (80071f0 <HAL_TIM_PWM_Start+0x188>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d004      	beq.n	800719e <HAL_TIM_PWM_Start+0x136>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a16      	ldr	r2, [pc, #88]	@ (80071f4 <HAL_TIM_PWM_Start+0x18c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d111      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b06      	cmp	r3, #6
 80071ae:	d010      	beq.n	80071d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c0:	e007      	b.n	80071d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0201 	orr.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40001800 	.word	0x40001800

080071f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007212:	2302      	movs	r3, #2
 8007214:	e0ae      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b0c      	cmp	r3, #12
 8007222:	f200 809f 	bhi.w	8007364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007226:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007261 	.word	0x08007261
 8007230:	08007365 	.word	0x08007365
 8007234:	08007365 	.word	0x08007365
 8007238:	08007365 	.word	0x08007365
 800723c:	080072a1 	.word	0x080072a1
 8007240:	08007365 	.word	0x08007365
 8007244:	08007365 	.word	0x08007365
 8007248:	08007365 	.word	0x08007365
 800724c:	080072e3 	.word	0x080072e3
 8007250:	08007365 	.word	0x08007365
 8007254:	08007365 	.word	0x08007365
 8007258:	08007365 	.word	0x08007365
 800725c:	08007323 	.word	0x08007323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f9f6 	bl	8007658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0208 	orr.w	r2, r2, #8
 800727a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0204 	bic.w	r2, r2, #4
 800728a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6999      	ldr	r1, [r3, #24]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	619a      	str	r2, [r3, #24]
      break;
 800729e:	e064      	b.n	800736a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fa46 	bl	8007738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6999      	ldr	r1, [r3, #24]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	021a      	lsls	r2, r3, #8
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	619a      	str	r2, [r3, #24]
      break;
 80072e0:	e043      	b.n	800736a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fa9b 	bl	8007824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0208 	orr.w	r2, r2, #8
 80072fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69da      	ldr	r2, [r3, #28]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0204 	bic.w	r2, r2, #4
 800730c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69d9      	ldr	r1, [r3, #28]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	61da      	str	r2, [r3, #28]
      break;
 8007320:	e023      	b.n	800736a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 faef 	bl	800790c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800733c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800734c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69d9      	ldr	r1, [r3, #28]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	021a      	lsls	r2, r3, #8
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	61da      	str	r2, [r3, #28]
      break;
 8007362:	e002      	b.n	800736a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
      break;
 8007368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_TIM_ConfigClockSource+0x1c>
 8007394:	2302      	movs	r3, #2
 8007396:	e0b4      	b.n	8007502 <HAL_TIM_ConfigClockSource+0x186>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073d0:	d03e      	beq.n	8007450 <HAL_TIM_ConfigClockSource+0xd4>
 80073d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073d6:	f200 8087 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073de:	f000 8086 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x172>
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e6:	d87f      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b70      	cmp	r3, #112	@ 0x70
 80073ea:	d01a      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0xa6>
 80073ec:	2b70      	cmp	r3, #112	@ 0x70
 80073ee:	d87b      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b60      	cmp	r3, #96	@ 0x60
 80073f2:	d050      	beq.n	8007496 <HAL_TIM_ConfigClockSource+0x11a>
 80073f4:	2b60      	cmp	r3, #96	@ 0x60
 80073f6:	d877      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b50      	cmp	r3, #80	@ 0x50
 80073fa:	d03c      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0xfa>
 80073fc:	2b50      	cmp	r3, #80	@ 0x50
 80073fe:	d873      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b40      	cmp	r3, #64	@ 0x40
 8007402:	d058      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007404:	2b40      	cmp	r3, #64	@ 0x40
 8007406:	d86f      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007408:	2b30      	cmp	r3, #48	@ 0x30
 800740a:	d064      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x15a>
 800740c:	2b30      	cmp	r3, #48	@ 0x30
 800740e:	d86b      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007410:	2b20      	cmp	r3, #32
 8007412:	d060      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007414:	2b20      	cmp	r3, #32
 8007416:	d867      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d05c      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x15a>
 800741c:	2b10      	cmp	r3, #16
 800741e:	d05a      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007420:	e062      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007432:	f000 fb3b 	bl	8007aac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	609a      	str	r2, [r3, #8]
      break;
 800744e:	e04f      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007460:	f000 fb24 	bl	8007aac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007472:	609a      	str	r2, [r3, #8]
      break;
 8007474:	e03c      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007482:	461a      	mov	r2, r3
 8007484:	f000 fa98 	bl	80079b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2150      	movs	r1, #80	@ 0x50
 800748e:	4618      	mov	r0, r3
 8007490:	f000 faf1 	bl	8007a76 <TIM_ITRx_SetConfig>
      break;
 8007494:	e02c      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074a2:	461a      	mov	r2, r3
 80074a4:	f000 fab7 	bl	8007a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2160      	movs	r1, #96	@ 0x60
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fae1 	bl	8007a76 <TIM_ITRx_SetConfig>
      break;
 80074b4:	e01c      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c2:	461a      	mov	r2, r3
 80074c4:	f000 fa78 	bl	80079b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2140      	movs	r1, #64	@ 0x40
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fad1 	bl	8007a76 <TIM_ITRx_SetConfig>
      break;
 80074d4:	e00c      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f000 fac8 	bl	8007a76 <TIM_ITRx_SetConfig>
      break;
 80074e6:	e003      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
      break;
 80074ec:	e000      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a43      	ldr	r2, [pc, #268]	@ (800762c <TIM_Base_SetConfig+0x120>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752a:	d00f      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a40      	ldr	r2, [pc, #256]	@ (8007630 <TIM_Base_SetConfig+0x124>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00b      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a3f      	ldr	r2, [pc, #252]	@ (8007634 <TIM_Base_SetConfig+0x128>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a3e      	ldr	r2, [pc, #248]	@ (8007638 <TIM_Base_SetConfig+0x12c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a3d      	ldr	r2, [pc, #244]	@ (800763c <TIM_Base_SetConfig+0x130>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d108      	bne.n	800755e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a32      	ldr	r2, [pc, #200]	@ (800762c <TIM_Base_SetConfig+0x120>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d02b      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756c:	d027      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2f      	ldr	r2, [pc, #188]	@ (8007630 <TIM_Base_SetConfig+0x124>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d023      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2e      	ldr	r2, [pc, #184]	@ (8007634 <TIM_Base_SetConfig+0x128>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01f      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2d      	ldr	r2, [pc, #180]	@ (8007638 <TIM_Base_SetConfig+0x12c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01b      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a2c      	ldr	r2, [pc, #176]	@ (800763c <TIM_Base_SetConfig+0x130>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d017      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a2b      	ldr	r2, [pc, #172]	@ (8007640 <TIM_Base_SetConfig+0x134>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2a      	ldr	r2, [pc, #168]	@ (8007644 <TIM_Base_SetConfig+0x138>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00f      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a29      	ldr	r2, [pc, #164]	@ (8007648 <TIM_Base_SetConfig+0x13c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00b      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a28      	ldr	r2, [pc, #160]	@ (800764c <TIM_Base_SetConfig+0x140>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a27      	ldr	r2, [pc, #156]	@ (8007650 <TIM_Base_SetConfig+0x144>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a26      	ldr	r2, [pc, #152]	@ (8007654 <TIM_Base_SetConfig+0x148>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d108      	bne.n	80075d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a0e      	ldr	r2, [pc, #56]	@ (800762c <TIM_Base_SetConfig+0x120>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_Base_SetConfig+0xf2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a10      	ldr	r2, [pc, #64]	@ (800763c <TIM_Base_SetConfig+0x130>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d103      	bne.n	8007606 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f043 0204 	orr.w	r2, r3, #4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000
 8007630:	40000400 	.word	0x40000400
 8007634:	40000800 	.word	0x40000800
 8007638:	40000c00 	.word	0x40000c00
 800763c:	40010400 	.word	0x40010400
 8007640:	40014000 	.word	0x40014000
 8007644:	40014400 	.word	0x40014400
 8007648:	40014800 	.word	0x40014800
 800764c:	40001800 	.word	0x40001800
 8007650:	40001c00 	.word	0x40001c00
 8007654:	40002000 	.word	0x40002000

08007658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f023 0201 	bic.w	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 0302 	bic.w	r3, r3, #2
 80076a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a20      	ldr	r2, [pc, #128]	@ (8007730 <TIM_OC1_SetConfig+0xd8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC1_SetConfig+0x64>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007734 <TIM_OC1_SetConfig+0xdc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10c      	bne.n	80076d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0308 	bic.w	r3, r3, #8
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 0304 	bic.w	r3, r3, #4
 80076d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a15      	ldr	r2, [pc, #84]	@ (8007730 <TIM_OC1_SetConfig+0xd8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_OC1_SetConfig+0x8e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a14      	ldr	r2, [pc, #80]	@ (8007734 <TIM_OC1_SetConfig+0xdc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d111      	bne.n	800770a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	621a      	str	r2, [r3, #32]
}
 8007724:	bf00      	nop
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400

08007738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	f023 0210 	bic.w	r2, r3, #16
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800776e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f023 0320 	bic.w	r3, r3, #32
 8007782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a22      	ldr	r2, [pc, #136]	@ (800781c <TIM_OC2_SetConfig+0xe4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_OC2_SetConfig+0x68>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a21      	ldr	r2, [pc, #132]	@ (8007820 <TIM_OC2_SetConfig+0xe8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10d      	bne.n	80077bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a17      	ldr	r2, [pc, #92]	@ (800781c <TIM_OC2_SetConfig+0xe4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC2_SetConfig+0x94>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a16      	ldr	r2, [pc, #88]	@ (8007820 <TIM_OC2_SetConfig+0xe8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d113      	bne.n	80077f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40010000 	.word	0x40010000
 8007820:	40010400 	.word	0x40010400

08007824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800786c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a21      	ldr	r2, [pc, #132]	@ (8007904 <TIM_OC3_SetConfig+0xe0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_OC3_SetConfig+0x66>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a20      	ldr	r2, [pc, #128]	@ (8007908 <TIM_OC3_SetConfig+0xe4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d10d      	bne.n	80078a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a16      	ldr	r2, [pc, #88]	@ (8007904 <TIM_OC3_SetConfig+0xe0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC3_SetConfig+0x92>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a15      	ldr	r2, [pc, #84]	@ (8007908 <TIM_OC3_SetConfig+0xe4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d113      	bne.n	80078de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	621a      	str	r2, [r3, #32]
}
 80078f8:	bf00      	nop
 80078fa:	371c      	adds	r7, #28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	40010000 	.word	0x40010000
 8007908:	40010400 	.word	0x40010400

0800790c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800793a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	031b      	lsls	r3, r3, #12
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a12      	ldr	r2, [pc, #72]	@ (80079b0 <TIM_OC4_SetConfig+0xa4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_OC4_SetConfig+0x68>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a11      	ldr	r2, [pc, #68]	@ (80079b4 <TIM_OC4_SetConfig+0xa8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d109      	bne.n	8007988 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800797a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	019b      	lsls	r3, r3, #6
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	621a      	str	r2, [r3, #32]
}
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40010000 	.word	0x40010000
 80079b4:	40010400 	.word	0x40010400

080079b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f023 0201 	bic.w	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f023 030a 	bic.w	r3, r3, #10
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b087      	sub	sp, #28
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	f023 0210 	bic.w	r2, r3, #16
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	031b      	lsls	r3, r3, #12
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b085      	sub	sp, #20
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f043 0307 	orr.w	r3, r3, #7
 8007a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	609a      	str	r2, [r3, #8]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	021a      	lsls	r2, r3, #8
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	609a      	str	r2, [r3, #8]
}
 8007ae0:	bf00      	nop
 8007ae2:	371c      	adds	r7, #28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	2201      	movs	r2, #1
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	401a      	ands	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a1a      	ldr	r2, [r3, #32]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	fa01 f303 	lsl.w	r3, r1, r3
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e05a      	b.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a21      	ldr	r2, [pc, #132]	@ (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d022      	beq.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9c:	d01d      	beq.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d018      	beq.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	@ (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00e      	beq.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a18      	ldr	r2, [pc, #96]	@ (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d009      	beq.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a15      	ldr	r2, [pc, #84]	@ (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d10c      	bne.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40010000 	.word	0x40010000
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40001800 	.word	0x40001800

08007c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c30:	b084      	sub	sp, #16
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	f107 001c 	add.w	r0, r7, #28
 8007c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d123      	bne.n	8007c92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d105      	bne.n	8007c86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f9dc 	bl	8008044 <USB_CoreReset>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
 8007c90:	e01b      	b.n	8007cca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9d0 	bl	8008044 <USB_CoreReset>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ca8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d106      	bne.n	8007cbe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cbc:	e005      	b.n	8007cca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cca:	7fbb      	ldrb	r3, [r7, #30]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10b      	bne.n	8007ce8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f043 0206 	orr.w	r2, r3, #6
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f043 0220 	orr.w	r2, r3, #32
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cf4:	b004      	add	sp, #16
 8007cf6:	4770      	bx	lr

08007cf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f043 0201 	orr.w	r2, r3, #1
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d115      	bne.n	8007d8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d6a:	200a      	movs	r0, #10
 8007d6c:	f7fa f8ac 	bl	8001ec8 <HAL_Delay>
      ms += 10U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	330a      	adds	r3, #10
 8007d74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f956 	bl	8008028 <USB_GetMode>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d01e      	beq.n	8007dc0 <USB_SetCurrentMode+0x84>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d86:	d9f0      	bls.n	8007d6a <USB_SetCurrentMode+0x2e>
 8007d88:	e01a      	b.n	8007dc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d115      	bne.n	8007dbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d9c:	200a      	movs	r0, #10
 8007d9e:	f7fa f893 	bl	8001ec8 <HAL_Delay>
      ms += 10U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	330a      	adds	r3, #10
 8007da6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f93d 	bl	8008028 <USB_GetMode>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <USB_SetCurrentMode+0x84>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2bc7      	cmp	r3, #199	@ 0xc7
 8007db8:	d9f0      	bls.n	8007d9c <USB_SetCurrentMode+0x60>
 8007dba:	e001      	b.n	8007dc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e005      	b.n	8007dcc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8007dc4:	d101      	bne.n	8007dca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3301      	adds	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dee:	d901      	bls.n	8007df4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e01b      	b.n	8007e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	daf2      	bge.n	8007de2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	019b      	lsls	r3, r3, #6
 8007e04:	f043 0220 	orr.w	r2, r3, #32
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e18:	d901      	bls.n	8007e1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e006      	b.n	8007e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d0f0      	beq.n	8007e0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e50:	d901      	bls.n	8007e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e018      	b.n	8007e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	daf2      	bge.n	8007e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2210      	movs	r2, #16
 8007e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e74:	d901      	bls.n	8007e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e006      	b.n	8007e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0310 	and.w	r3, r3, #16
 8007e82:	2b10      	cmp	r3, #16
 8007e84:	d0f0      	beq.n	8007e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b089      	sub	sp, #36	@ 0x24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	71fb      	strb	r3, [r7, #7]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d123      	bne.n	8007f02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eba:	88bb      	ldrh	r3, [r7, #4]
 8007ebc:	3303      	adds	r3, #3
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	e018      	b.n	8007efa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	031a      	lsls	r2, r3, #12
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	3301      	adds	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d3e2      	bcc.n	8007ec8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3724      	adds	r7, #36	@ 0x24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b08b      	sub	sp, #44	@ 0x2c
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f26:	88fb      	ldrh	r3, [r7, #6]
 8007f28:	089b      	lsrs	r3, r3, #2
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	f003 0303 	and.w	r3, r3, #3
 8007f34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	e014      	b.n	8007f66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f50:	3301      	adds	r3, #1
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	3301      	adds	r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	3301      	adds	r3, #1
 8007f64:	623b      	str	r3, [r7, #32]
 8007f66:	6a3a      	ldr	r2, [r7, #32]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d3e6      	bcc.n	8007f3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f6e:	8bfb      	ldrh	r3, [r7, #30]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01e      	beq.n	8007fb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f107 0310 	add.w	r3, r7, #16
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	701a      	strb	r2, [r3, #0]
      i++;
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007fa6:	8bfb      	ldrh	r3, [r7, #30]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fac:	8bfb      	ldrh	r3, [r7, #30]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1ea      	bne.n	8007f88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	372c      	adds	r7, #44	@ 0x2c
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	4013      	ands	r3, r2
 8008018:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800801a:	68bb      	ldr	r3, [r7, #8]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	f003 0301 	and.w	r3, r3, #1
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800805c:	d901      	bls.n	8008062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e022      	b.n	80080a8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	daf2      	bge.n	8008050 <USB_CoreReset+0xc>

  count = 10U;
 800806a:	230a      	movs	r3, #10
 800806c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800806e:	e002      	b.n	8008076 <USB_CoreReset+0x32>
  {
    count--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3b01      	subs	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f9      	bne.n	8008070 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f043 0201 	orr.w	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008094:	d901      	bls.n	800809a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e006      	b.n	80080a8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d0f0      	beq.n	8008088 <USB_CoreReset+0x44>

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080b4:	b084      	sub	sp, #16
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80080c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080d4:	461a      	mov	r2, r3
 80080d6:	2300      	movs	r3, #0
 80080d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d119      	bne.n	800813e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800810a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800810e:	2b01      	cmp	r3, #1
 8008110:	d10a      	bne.n	8008128 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008120:	f043 0304 	orr.w	r3, r3, #4
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e014      	b.n	8008152 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008136:	f023 0304 	bic.w	r3, r3, #4
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	e009      	b.n	8008152 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800814c:	f023 0304 	bic.w	r3, r3, #4
 8008150:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008152:	2110      	movs	r1, #16
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff fe3d 	bl	8007dd4 <USB_FlushTxFifo>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff fe67 	bl	8007e38 <USB_FlushRxFifo>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008174:	2300      	movs	r3, #0
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	e015      	b.n	80081a6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4413      	add	r3, r2
 8008182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008186:	461a      	mov	r2, r3
 8008188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800818c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819a:	461a      	mov	r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3301      	adds	r3, #1
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80081aa:	461a      	mov	r2, r3
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d3e3      	bcc.n	800817a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081be:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a18      	ldr	r2, [pc, #96]	@ (8008224 <USB_HostInit+0x170>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d10b      	bne.n	80081e0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081ce:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a15      	ldr	r2, [pc, #84]	@ (8008228 <USB_HostInit+0x174>)
 80081d4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a14      	ldr	r2, [pc, #80]	@ (800822c <USB_HostInit+0x178>)
 80081da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80081de:	e009      	b.n	80081f4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2280      	movs	r2, #128	@ 0x80
 80081e4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a11      	ldr	r2, [pc, #68]	@ (8008230 <USB_HostInit+0x17c>)
 80081ea:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a11      	ldr	r2, [pc, #68]	@ (8008234 <USB_HostInit+0x180>)
 80081f0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f043 0210 	orr.w	r2, r3, #16
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699a      	ldr	r2, [r3, #24]
 800820c:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <USB_HostInit+0x184>)
 800820e:	4313      	orrs	r3, r2
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008220:	b004      	add	sp, #16
 8008222:	4770      	bx	lr
 8008224:	40040000 	.word	0x40040000
 8008228:	01000200 	.word	0x01000200
 800822c:	00e00300 	.word	0x00e00300
 8008230:	00600080 	.word	0x00600080
 8008234:	004000e0 	.word	0x004000e0
 8008238:	a3200008 	.word	0xa3200008

0800823c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008274:	4313      	orrs	r3, r2
 8008276:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008284:	461a      	mov	r2, r3
 8008286:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800828a:	6053      	str	r3, [r2, #4]
 800828c:	e00c      	b.n	80082a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d107      	bne.n	80082a4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800829a:	461a      	mov	r2, r3
 800829c:	f241 7370 	movw	r3, #6000	@ 0x1770
 80082a0:	6053      	str	r3, [r2, #4]
 80082a2:	e001      	b.n	80082a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80082d6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80082e6:	2064      	movs	r0, #100	@ 0x64
 80082e8:	f7f9 fdee 	bl	8001ec8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80082fa:	200a      	movs	r0, #10
 80082fc:	f7f9 fde4 	bl	8001ec8 <HAL_Delay>

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800832e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <USB_DriveVbus+0x44>
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d106      	bne.n	800834e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800834c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008358:	d109      	bne.n	800836e <USB_DriveVbus+0x64>
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800836c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	0c5b      	lsrs	r3, r3, #17
 800839a:	f003 0303 	and.w	r3, r3, #3
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	b29b      	uxth	r3, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	4608      	mov	r0, r1
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	4603      	mov	r3, r0
 80083dc:	70fb      	strb	r3, [r7, #3]
 80083de:	460b      	mov	r3, r1
 80083e0:	70bb      	strb	r3, [r7, #2]
 80083e2:	4613      	mov	r3, r2
 80083e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fa:	461a      	mov	r2, r3
 80083fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008400:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008402:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008406:	2b03      	cmp	r3, #3
 8008408:	d87c      	bhi.n	8008504 <USB_HC_Init+0x138>
 800840a:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <USB_HC_Init+0x44>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008421 	.word	0x08008421
 8008414:	080084c7 	.word	0x080084c7
 8008418:	08008421 	.word	0x08008421
 800841c:	08008489 	.word	0x08008489
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	4413      	add	r3, r2
 8008428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800842c:	461a      	mov	r2, r3
 800842e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008432:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008434:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008438:	2b00      	cmp	r3, #0
 800843a:	da10      	bge.n	800845e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	78fa      	ldrb	r2, [r7, #3]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	440a      	add	r2, r1
 8008452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800845a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800845c:	e055      	b.n	800850a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a6f      	ldr	r2, [pc, #444]	@ (8008620 <USB_HC_Init+0x254>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d151      	bne.n	800850a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	4413      	add	r3, r2
 800846e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	78fa      	ldrb	r2, [r7, #3]
 8008476:	0151      	lsls	r1, r2, #5
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	440a      	add	r2, r1
 800847c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008480:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008484:	60d3      	str	r3, [r2, #12]
      break;
 8008486:	e040      	b.n	800850a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	4413      	add	r3, r2
 8008490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008494:	461a      	mov	r2, r3
 8008496:	f240 639d 	movw	r3, #1693	@ 0x69d
 800849a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800849c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da34      	bge.n	800850e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084a4:	78fb      	ldrb	r3, [r7, #3]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80084c4:	e023      	b.n	800850e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d2:	461a      	mov	r2, r3
 80084d4:	f240 2325 	movw	r3, #549	@ 0x225
 80084d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	da17      	bge.n	8008512 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	0151      	lsls	r1, r2, #5
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	440a      	add	r2, r1
 80084f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084fc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008500:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008502:	e006      	b.n	8008512 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	77fb      	strb	r3, [r7, #31]
      break;
 8008508:	e004      	b.n	8008514 <USB_HC_Init+0x148>
      break;
 800850a:	bf00      	nop
 800850c:	e002      	b.n	8008514 <USB_HC_Init+0x148>
      break;
 800850e:	bf00      	nop
 8008510:	e000      	b.n	8008514 <USB_HC_Init+0x148>
      break;
 8008512:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008520:	461a      	mov	r2, r3
 8008522:	2300      	movs	r3, #0
 8008524:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	4413      	add	r3, r2
 800852e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	440a      	add	r2, r1
 800853c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008540:	f043 0302 	orr.w	r3, r3, #2
 8008544:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	2101      	movs	r1, #1
 8008556:	fa01 f303 	lsl.w	r3, r1, r3
 800855a:	6939      	ldr	r1, [r7, #16]
 800855c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008560:	4313      	orrs	r3, r2
 8008562:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008574:	2b00      	cmp	r3, #0
 8008576:	da03      	bge.n	8008580 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	e001      	b.n	8008584 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff fef9 	bl	800837c <USB_GetHostSpeed>
 800858a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800858c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008590:	2b02      	cmp	r3, #2
 8008592:	d106      	bne.n	80085a2 <USB_HC_Init+0x1d6>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d003      	beq.n	80085a2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800859a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e001      	b.n	80085a6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085a6:	787b      	ldrb	r3, [r7, #1]
 80085a8:	059b      	lsls	r3, r3, #22
 80085aa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085ae:	78bb      	ldrb	r3, [r7, #2]
 80085b0:	02db      	lsls	r3, r3, #11
 80085b2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085b6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085bc:	049b      	lsls	r3, r3, #18
 80085be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80085c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80085c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085ca:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80085e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085e4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80085e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d003      	beq.n	80085f6 <USB_HC_Init+0x22a>
 80085ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d10f      	bne.n	8008616 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	440a      	add	r2, r1
 800860c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008610:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008614:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008616:	7ffb      	ldrb	r3, [r7, #31]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3720      	adds	r7, #32
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	40040000 	.word	0x40040000

08008624 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08c      	sub	sp, #48	@ 0x30
 8008628:	af02      	add	r7, sp, #8
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800863c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008640:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	4a5d      	ldr	r2, [pc, #372]	@ (80087bc <USB_HC_StartXfer+0x198>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d12f      	bne.n	80086aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d11c      	bne.n	800868a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	7c9b      	ldrb	r3, [r3, #18]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <USB_HC_StartXfer+0x3c>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	7c9b      	ldrb	r3, [r3, #18]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d124      	bne.n	80086aa <USB_HC_StartXfer+0x86>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	799b      	ldrb	r3, [r3, #6]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d120      	bne.n	80086aa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	4413      	add	r3, r2
 8008670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	69fa      	ldr	r2, [r7, #28]
 8008678:	0151      	lsls	r1, r2, #5
 800867a:	6a3a      	ldr	r2, [r7, #32]
 800867c:	440a      	add	r2, r1
 800867e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008686:	60d3      	str	r3, [r2, #12]
 8008688:	e00f      	b.n	80086aa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	791b      	ldrb	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <USB_HC_StartXfer+0x86>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	795b      	ldrb	r3, [r3, #5]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d107      	bne.n	80086aa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fb6b 	bl	8008d7c <USB_DoPing>
        return HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e232      	b.n	8008b10 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	799b      	ldrb	r3, [r3, #6]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d158      	bne.n	8008764 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80086b2:	2301      	movs	r3, #1
 80086b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	78db      	ldrb	r3, [r3, #3]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	8a92      	ldrh	r2, [r2, #20]
 80086c4:	fb03 f202 	mul.w	r2, r3, r2
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	61da      	str	r2, [r3, #28]
 80086cc:	e07c      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	7c9b      	ldrb	r3, [r3, #18]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d130      	bne.n	8008738 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	2bbc      	cmp	r3, #188	@ 0xbc
 80086dc:	d918      	bls.n	8008710 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	8a9b      	ldrh	r3, [r3, #20]
 80086e2:	461a      	mov	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	69da      	ldr	r2, [r3, #28]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d003      	beq.n	8008700 <USB_HC_StartXfer+0xdc>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d103      	bne.n	8008708 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2202      	movs	r2, #2
 8008704:	60da      	str	r2, [r3, #12]
 8008706:	e05f      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2201      	movs	r2, #1
 800870c:	60da      	str	r2, [r3, #12]
 800870e:	e05b      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6a1a      	ldr	r2, [r3, #32]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d007      	beq.n	8008730 <USB_HC_StartXfer+0x10c>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d003      	beq.n	8008730 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2204      	movs	r2, #4
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	e04b      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2203      	movs	r2, #3
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	e047      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10d      	bne.n	800875a <USB_HC_StartXfer+0x136>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	8a92      	ldrh	r2, [r2, #20]
 8008746:	4293      	cmp	r3, r2
 8008748:	d907      	bls.n	800875a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800874a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	8a92      	ldrh	r2, [r2, #20]
 8008750:	fb03 f202 	mul.w	r2, r3, r2
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	61da      	str	r2, [r3, #28]
 8008758:	e036      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	6a1a      	ldr	r2, [r3, #32]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	61da      	str	r2, [r3, #28]
 8008762:	e031      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d018      	beq.n	800879e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	8a92      	ldrh	r2, [r2, #20]
 8008774:	4413      	add	r3, r2
 8008776:	3b01      	subs	r3, #1
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	8a92      	ldrh	r2, [r2, #20]
 800877c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008780:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008782:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008784:	8b7b      	ldrh	r3, [r7, #26]
 8008786:	429a      	cmp	r2, r3
 8008788:	d90b      	bls.n	80087a2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800878a:	8b7b      	ldrh	r3, [r7, #26]
 800878c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800878e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	8a92      	ldrh	r2, [r2, #20]
 8008794:	fb03 f202 	mul.w	r2, r3, r2
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	61da      	str	r2, [r3, #28]
 800879c:	e001      	b.n	80087a2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800879e:	2301      	movs	r3, #1
 80087a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	8a92      	ldrh	r2, [r2, #20]
 80087b0:	fb03 f202 	mul.w	r2, r3, r2
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	61da      	str	r2, [r3, #28]
 80087b8:	e006      	b.n	80087c8 <USB_HC_StartXfer+0x1a4>
 80087ba:	bf00      	nop
 80087bc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6a1a      	ldr	r2, [r3, #32]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087d2:	04d9      	lsls	r1, r3, #19
 80087d4:	4ba3      	ldr	r3, [pc, #652]	@ (8008a64 <USB_HC_StartXfer+0x440>)
 80087d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	7d9b      	ldrb	r3, [r3, #22]
 80087de:	075b      	lsls	r3, r3, #29
 80087e0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087e4:	69f9      	ldr	r1, [r7, #28]
 80087e6:	0148      	lsls	r0, r1, #5
 80087e8:	6a39      	ldr	r1, [r7, #32]
 80087ea:	4401      	add	r1, r0
 80087ec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6999      	ldr	r1, [r3, #24]
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	4413      	add	r3, r2
 8008806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800880a:	460a      	mov	r2, r1
 800880c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	bf0c      	ite	eq
 800881e:	2301      	moveq	r3, #1
 8008820:	2300      	movne	r3, #0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	4413      	add	r3, r2
 800882e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	6a3a      	ldr	r2, [r7, #32]
 800883a:	440a      	add	r2, r1
 800883c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008840:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008844:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	4413      	add	r3, r2
 800884e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	7e7b      	ldrb	r3, [r7, #25]
 8008856:	075b      	lsls	r3, r3, #29
 8008858:	69f9      	ldr	r1, [r7, #28]
 800885a:	0148      	lsls	r0, r1, #5
 800885c:	6a39      	ldr	r1, [r7, #32]
 800885e:	4401      	add	r1, r0
 8008860:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008864:	4313      	orrs	r3, r2
 8008866:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	799b      	ldrb	r3, [r3, #6]
 800886c:	2b01      	cmp	r3, #1
 800886e:	f040 80c3 	bne.w	80089f8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	7c5b      	ldrb	r3, [r3, #17]
 8008876:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800887c:	4313      	orrs	r3, r2
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	6a3a      	ldr	r2, [r7, #32]
 8008884:	440a      	add	r2, r1
 8008886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800888a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800888e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	4413      	add	r3, r2
 8008898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80088ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	79db      	ldrb	r3, [r3, #7]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d123      	bne.n	8008900 <USB_HC_StartXfer+0x2dc>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	78db      	ldrb	r3, [r3, #3]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d11f      	bne.n	8008900 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	0151      	lsls	r1, r2, #5
 80088d2:	6a3a      	ldr	r2, [r7, #32]
 80088d4:	440a      	add	r2, r1
 80088d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088de:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	6a3a      	ldr	r2, [r7, #32]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088fe:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	7c9b      	ldrb	r3, [r3, #18]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d003      	beq.n	8008910 <USB_HC_StartXfer+0x2ec>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	7c9b      	ldrb	r3, [r3, #18]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d117      	bne.n	8008940 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008914:	2b01      	cmp	r3, #1
 8008916:	d113      	bne.n	8008940 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	78db      	ldrb	r3, [r3, #3]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d10f      	bne.n	8008940 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	4413      	add	r3, r2
 8008928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	69fa      	ldr	r2, [r7, #28]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	440a      	add	r2, r1
 8008936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800893a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800893e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	7c9b      	ldrb	r3, [r3, #18]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d162      	bne.n	8008a0e <USB_HC_StartXfer+0x3ea>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	78db      	ldrb	r3, [r3, #3]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d15e      	bne.n	8008a0e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	3b01      	subs	r3, #1
 8008956:	2b03      	cmp	r3, #3
 8008958:	d858      	bhi.n	8008a0c <USB_HC_StartXfer+0x3e8>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <USB_HC_StartXfer+0x33c>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008971 	.word	0x08008971
 8008964:	08008993 	.word	0x08008993
 8008968:	080089b5 	.word	0x080089b5
 800896c:	080089d7 	.word	0x080089d7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	0151      	lsls	r1, r2, #5
 8008982:	6a3a      	ldr	r2, [r7, #32]
 8008984:	440a      	add	r2, r1
 8008986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800898a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800898e:	6053      	str	r3, [r2, #4]
          break;
 8008990:	e03d      	b.n	8008a0e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	6a3a      	ldr	r2, [r7, #32]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ac:	f043 030e 	orr.w	r3, r3, #14
 80089b0:	6053      	str	r3, [r2, #4]
          break;
 80089b2:	e02c      	b.n	8008a0e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	6a3a      	ldr	r2, [r7, #32]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089d2:	6053      	str	r3, [r2, #4]
          break;
 80089d4:	e01b      	b.n	8008a0e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	6a3a      	ldr	r2, [r7, #32]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089f4:	6053      	str	r3, [r2, #4]
          break;
 80089f6:	e00a      	b.n	8008a0e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a04:	461a      	mov	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	6053      	str	r3, [r2, #4]
 8008a0a:	e000      	b.n	8008a0e <USB_HC_StartXfer+0x3ea>
          break;
 8008a0c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a24:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	78db      	ldrb	r3, [r3, #3]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	e003      	b.n	8008a40 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a3e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a46:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a54:	461a      	mov	r2, r3
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	e055      	b.n	8008b10 <USB_HC_StartXfer+0x4ec>
 8008a64:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d14e      	bne.n	8008b0e <USB_HC_StartXfer+0x4ea>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d04a      	beq.n	8008b0e <USB_HC_StartXfer+0x4ea>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	79db      	ldrb	r3, [r3, #7]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d146      	bne.n	8008b0e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	7c9b      	ldrb	r3, [r3, #18]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d831      	bhi.n	8008aec <USB_HC_StartXfer+0x4c8>
 8008a88:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <USB_HC_StartXfer+0x46c>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008aa1 	.word	0x08008aa1
 8008a94:	08008ac5 	.word	0x08008ac5
 8008a98:	08008aa1 	.word	0x08008aa1
 8008a9c:	08008ac5 	.word	0x08008ac5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	3303      	adds	r3, #3
 8008aa6:	089b      	lsrs	r3, r3, #2
 8008aa8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008aaa:	8afa      	ldrh	r2, [r7, #22]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d91c      	bls.n	8008af0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	f043 0220 	orr.w	r2, r3, #32
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ac2:	e015      	b.n	8008af0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	3303      	adds	r3, #3
 8008aca:	089b      	lsrs	r3, r3, #2
 8008acc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008ace:	8afa      	ldrh	r2, [r7, #22]
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d90a      	bls.n	8008af4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008aea:	e003      	b.n	8008af4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008aec:	bf00      	nop
 8008aee:	e002      	b.n	8008af6 <USB_HC_StartXfer+0x4d2>
        break;
 8008af0:	bf00      	nop
 8008af2:	e000      	b.n	8008af6 <USB_HC_StartXfer+0x4d2>
        break;
 8008af4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	6999      	ldr	r1, [r3, #24]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	785a      	ldrb	r2, [r3, #1]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2000      	movs	r0, #0
 8008b06:	9000      	str	r0, [sp, #0]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff f9c3 	bl	8007e94 <USB_WritePacket>
  }

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3728      	adds	r7, #40	@ 0x28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	b29b      	uxth	r3, r3
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b089      	sub	sp, #36	@ 0x24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	0c9b      	lsrs	r3, r3, #18
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	0fdb      	lsrs	r3, r3, #31
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	0fdb      	lsrs	r3, r3, #31
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d10d      	bne.n	8008bbc <USB_HC_Halt+0x82>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <USB_HC_Halt+0x82>
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d002      	beq.n	8008bb8 <USB_HC_Halt+0x7e>
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d101      	bne.n	8008bbc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e0d8      	b.n	8008d6e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <USB_HC_Halt+0x8e>
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d173      	bne.n	8008cb0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008be2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d14a      	bne.n	8008c8a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d133      	bne.n	8008c68 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c1e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c3e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c4c:	d82e      	bhi.n	8008cac <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c64:	d0ec      	beq.n	8008c40 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c66:	e081      	b.n	8008d6c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c86:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c88:	e070      	b.n	8008d6c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	0151      	lsls	r1, r2, #5
 8008c9c:	69fa      	ldr	r2, [r7, #28]
 8008c9e:	440a      	add	r2, r1
 8008ca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ca4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ca8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008caa:	e05f      	b.n	8008d6c <USB_HC_Halt+0x232>
            break;
 8008cac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cae:	e05d      	b.n	8008d6c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d133      	bne.n	8008d48 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	69fa      	ldr	r2, [r7, #28]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3301      	adds	r3, #1
 8008d24:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d2c:	d81d      	bhi.n	8008d6a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d44:	d0ec      	beq.n	8008d20 <USB_HC_Halt+0x1e6>
 8008d46:	e011      	b.n	8008d6c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	0151      	lsls	r1, r2, #5
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	e000      	b.n	8008d6c <USB_HC_Halt+0x232>
          break;
 8008d6a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3724      	adds	r7, #36	@ 0x24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d90:	2301      	movs	r3, #1
 8008d92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	04da      	lsls	r2, r3, #19
 8008d98:	4b15      	ldr	r3, [pc, #84]	@ (8008df0 <USB_DoPing+0x74>)
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008da8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008dc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dcc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	1ff80000 	.word	0x1ff80000

08008df4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7fe ff86 	bl	8007d1a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e0e:	2110      	movs	r1, #16
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7fe ffdf 	bl	8007dd4 <USB_FlushTxFifo>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff f809 	bl	8007e38 <USB_FlushRxFifo>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e30:	2300      	movs	r3, #0
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	e01f      	b.n	8008e76 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	3301      	adds	r3, #1
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b0f      	cmp	r3, #15
 8008e7a:	d9dc      	bls.n	8008e36 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	61bb      	str	r3, [r7, #24]
 8008e80:	e034      	b.n	8008eec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ea0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ea8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ec8:	d80c      	bhi.n	8008ee4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ee0:	d0ec      	beq.n	8008ebc <USB_StopHost+0xc8>
 8008ee2:	e000      	b.n	8008ee6 <USB_StopHost+0xf2>
        break;
 8008ee4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b0f      	cmp	r3, #15
 8008ef0:	d9c7      	bls.n	8008e82 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008efe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7fe fef5 	bl	8007cf8 <USB_EnableGlobalInt>

  return ret;
 8008f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008f18:	b590      	push	{r4, r7, lr}
 8008f1a:	b089      	sub	sp, #36	@ 0x24
 8008f1c:	af04      	add	r7, sp, #16
 8008f1e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008f20:	2301      	movs	r3, #1
 8008f22:	2202      	movs	r2, #2
 8008f24:	2102      	movs	r1, #2
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fc83 	bl	8009832 <USBH_FindInterface>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	2bff      	cmp	r3, #255	@ 0xff
 8008f34:	d002      	beq.n	8008f3c <USBH_CDC_InterfaceInit+0x24>
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d901      	bls.n	8008f40 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e13d      	b.n	80091bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fc58 	bl	80097fa <USBH_SelectInterface>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f54:	2302      	movs	r3, #2
 8008f56:	e131      	b.n	80091bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008f5e:	2050      	movs	r0, #80	@ 0x50
 8008f60:	f002 fb6a 	bl	800b638 <malloc>
 8008f64:	4603      	mov	r3, r0
 8008f66:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e11f      	b.n	80091bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f7c:	2250      	movs	r2, #80	@ 0x50
 8008f7e:	2100      	movs	r1, #0
 8008f80:	68b8      	ldr	r0, [r7, #8]
 8008f82:	f002 fc17 	bl	800b7b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	211a      	movs	r1, #26
 8008f8c:	fb01 f303 	mul.w	r3, r1, r3
 8008f90:	4413      	add	r3, r2
 8008f92:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	b25b      	sxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da15      	bge.n	8008fca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	211a      	movs	r1, #26
 8008fa4:	fb01 f303 	mul.w	r3, r1, r3
 8008fa8:	4413      	add	r3, r2
 8008faa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fae:	781a      	ldrb	r2, [r3, #0]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	211a      	movs	r1, #26
 8008fba:	fb01 f303 	mul.w	r3, r1, r3
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008fc4:	881a      	ldrh	r2, [r3, #0]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	785b      	ldrb	r3, [r3, #1]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 ffc4 	bl	800af5e <USBH_AllocPipe>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	461a      	mov	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	7819      	ldrb	r1, [r3, #0]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	7858      	ldrb	r0, [r3, #1]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	8952      	ldrh	r2, [r2, #10]
 8008ff6:	9202      	str	r2, [sp, #8]
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	9201      	str	r2, [sp, #4]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	4623      	mov	r3, r4
 8009000:	4602      	mov	r2, r0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 ff7c 	bl	800af00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2200      	movs	r2, #0
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f002 fa8b 	bl	800b52c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009016:	2300      	movs	r3, #0
 8009018:	2200      	movs	r2, #0
 800901a:	210a      	movs	r1, #10
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fc08 	bl	8009832 <USBH_FindInterface>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2bff      	cmp	r3, #255	@ 0xff
 800902a:	d002      	beq.n	8009032 <USBH_CDC_InterfaceInit+0x11a>
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d901      	bls.n	8009036 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009032:	2302      	movs	r3, #2
 8009034:	e0c2      	b.n	80091bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	211a      	movs	r1, #26
 800903c:	fb01 f303 	mul.w	r3, r1, r3
 8009040:	4413      	add	r3, r2
 8009042:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	b25b      	sxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	da16      	bge.n	800907c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	211a      	movs	r1, #26
 8009054:	fb01 f303 	mul.w	r3, r1, r3
 8009058:	4413      	add	r3, r2
 800905a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800905e:	781a      	ldrb	r2, [r3, #0]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	211a      	movs	r1, #26
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	4413      	add	r3, r2
 8009070:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009074:	881a      	ldrh	r2, [r3, #0]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	835a      	strh	r2, [r3, #26]
 800907a:	e015      	b.n	80090a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	211a      	movs	r1, #26
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	4413      	add	r3, r2
 8009088:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800908c:	781a      	ldrb	r2, [r3, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	211a      	movs	r1, #26
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	4413      	add	r3, r2
 800909e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80090a2:	881a      	ldrh	r2, [r3, #0]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	211a      	movs	r1, #26
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	4413      	add	r3, r2
 80090b4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	b25b      	sxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	da16      	bge.n	80090ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	211a      	movs	r1, #26
 80090c6:	fb01 f303 	mul.w	r3, r1, r3
 80090ca:	4413      	add	r3, r2
 80090cc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	211a      	movs	r1, #26
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80090e6:	881a      	ldrh	r2, [r3, #0]
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	835a      	strh	r2, [r3, #26]
 80090ec:	e015      	b.n	800911a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	211a      	movs	r1, #26
 80090f4:	fb01 f303 	mul.w	r3, r1, r3
 80090f8:	4413      	add	r3, r2
 80090fa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090fe:	781a      	ldrb	r2, [r3, #0]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	211a      	movs	r1, #26
 800910a:	fb01 f303 	mul.w	r3, r1, r3
 800910e:	4413      	add	r3, r2
 8009110:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009114:	881a      	ldrh	r2, [r3, #0]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	7b9b      	ldrb	r3, [r3, #14]
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 ff1c 	bl	800af5e <USBH_AllocPipe>
 8009126:	4603      	mov	r3, r0
 8009128:	461a      	mov	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	7bdb      	ldrb	r3, [r3, #15]
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 ff12 	bl	800af5e <USBH_AllocPipe>
 800913a:	4603      	mov	r3, r0
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	7b59      	ldrb	r1, [r3, #13]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	7b98      	ldrb	r0, [r3, #14]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	8b12      	ldrh	r2, [r2, #24]
 800915a:	9202      	str	r2, [sp, #8]
 800915c:	2202      	movs	r2, #2
 800915e:	9201      	str	r2, [sp, #4]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	4623      	mov	r3, r4
 8009164:	4602      	mov	r2, r0
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 feca 	bl	800af00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	7b19      	ldrb	r1, [r3, #12]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	7bd8      	ldrb	r0, [r3, #15]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	8b52      	ldrh	r2, [r2, #26]
 8009184:	9202      	str	r2, [sp, #8]
 8009186:	2202      	movs	r2, #2
 8009188:	9201      	str	r2, [sp, #4]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	4623      	mov	r3, r4
 800918e:	4602      	mov	r2, r0
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 feb5 	bl	800af00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	7b5b      	ldrb	r3, [r3, #13]
 80091a2:	2200      	movs	r2, #0
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f002 f9c0 	bl	800b52c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	7b1b      	ldrb	r3, [r3, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f002 f9b9 	bl	800b52c <USBH_LL_SetToggle>

  return USBH_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd90      	pop	{r4, r7, pc}

080091c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00e      	beq.n	80091fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 feaa 	bl	800af3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f001 fed5 	bl	800afa0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	7b1b      	ldrb	r3, [r3, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00e      	beq.n	8009222 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	7b1b      	ldrb	r3, [r3, #12]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 fe97 	bl	800af3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	7b1b      	ldrb	r3, [r3, #12]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 fec2 	bl	800afa0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	7b5b      	ldrb	r3, [r3, #13]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00e      	beq.n	8009248 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	7b5b      	ldrb	r3, [r3, #13]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f001 fe84 	bl	800af3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	7b5b      	ldrb	r3, [r3, #13]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 feaf 	bl	800afa0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	4618      	mov	r0, r3
 800925e:	f002 f9f3 	bl	800b648 <free>
    phost->pActiveClass->pData = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009268:	2200      	movs	r2, #0
 800926a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3340      	adds	r3, #64	@ 0x40
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8b1 	bl	80093f6 <GetLineCoding>
 8009294:	4603      	mov	r3, r0
 8009296:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009298:	7afb      	ldrb	r3, [r7, #11]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092a4:	2102      	movs	r1, #2
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80092aa:	7afb      	ldrb	r3, [r7, #11]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d877      	bhi.n	80093c8 <USBH_CDC_Process+0x114>
 80092d8:	a201      	add	r2, pc, #4	@ (adr r2, 80092e0 <USBH_CDC_Process+0x2c>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	080092f5 	.word	0x080092f5
 80092e4:	080092fb 	.word	0x080092fb
 80092e8:	0800932b 	.word	0x0800932b
 80092ec:	0800939f 	.word	0x0800939f
 80092f0:	080093ad 	.word	0x080093ad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
      break;
 80092f8:	e06d      	b.n	80093d6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f897 	bl	8009434 <SetLineCoding>
 8009306:	4603      	mov	r3, r0
 8009308:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009318:	e058      	b.n	80093cc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d055      	beq.n	80093cc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2204      	movs	r2, #4
 8009324:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009328:	e050      	b.n	80093cc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	3340      	adds	r3, #64	@ 0x40
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f860 	bl	80093f6 <GetLineCoding>
 8009336:	4603      	mov	r3, r0
 8009338:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d126      	bne.n	800938e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009352:	791b      	ldrb	r3, [r3, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d13b      	bne.n	80093d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009362:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009364:	429a      	cmp	r2, r3
 8009366:	d133      	bne.n	80093d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009372:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009374:	429a      	cmp	r2, r3
 8009376:	d12b      	bne.n	80093d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009380:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009382:	429a      	cmp	r2, r3
 8009384:	d124      	bne.n	80093d0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f958 	bl	800963c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800938c:	e020      	b.n	80093d0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d01d      	beq.n	80093d0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2204      	movs	r2, #4
 8009398:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800939c:	e018      	b.n	80093d0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f867 	bl	8009472 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f8da 	bl	800955e <CDC_ProcessReception>
      break;
 80093aa:	e014      	b.n	80093d6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80093ac:	2100      	movs	r1, #0
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 f81e 	bl	800a3f0 <USBH_ClrFeature>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10a      	bne.n	80093d4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80093c6:	e005      	b.n	80093d4 <USBH_CDC_Process+0x120>

    default:
      break;
 80093c8:	bf00      	nop
 80093ca:	e004      	b.n	80093d6 <USBH_CDC_Process+0x122>
      break;
 80093cc:	bf00      	nop
 80093ce:	e002      	b.n	80093d6 <USBH_CDC_Process+0x122>
      break;
 80093d0:	bf00      	nop
 80093d2:	e000      	b.n	80093d6 <USBH_CDC_Process+0x122>
      break;
 80093d4:	bf00      	nop

  }

  return status;
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	22a1      	movs	r2, #161	@ 0xa1
 8009404:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2221      	movs	r2, #33	@ 0x21
 800940a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2207      	movs	r2, #7
 800941c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2207      	movs	r2, #7
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 fb17 	bl	800aa58 <USBH_CtlReq>
 800942a:	4603      	mov	r3, r0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2221      	movs	r2, #33	@ 0x21
 8009442:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2207      	movs	r2, #7
 800945a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2207      	movs	r2, #7
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 faf8 	bl	800aa58 <USBH_CtlReq>
 8009468:	4603      	mov	r3, r0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b086      	sub	sp, #24
 8009476:	af02      	add	r7, sp, #8
 8009478:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009484:	2300      	movs	r3, #0
 8009486:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800948e:	2b01      	cmp	r3, #1
 8009490:	d002      	beq.n	8009498 <CDC_ProcessTransmission+0x26>
 8009492:	2b02      	cmp	r3, #2
 8009494:	d023      	beq.n	80094de <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009496:	e05e      	b.n	8009556 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	8b12      	ldrh	r2, [r2, #24]
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d90b      	bls.n	80094bc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	69d9      	ldr	r1, [r3, #28]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8b1a      	ldrh	r2, [r3, #24]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	7b5b      	ldrb	r3, [r3, #13]
 80094b0:	2001      	movs	r0, #1
 80094b2:	9000      	str	r0, [sp, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 fce0 	bl	800ae7a <USBH_BulkSendData>
 80094ba:	e00b      	b.n	80094d4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	7b5b      	ldrb	r3, [r3, #13]
 80094ca:	2001      	movs	r0, #1
 80094cc:	9000      	str	r0, [sp, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 fcd3 	bl	800ae7a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80094dc:	e03b      	b.n	8009556 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	7b5b      	ldrb	r3, [r3, #13]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 fff7 	bl	800b4d8 <USBH_LL_GetURBState>
 80094ea:	4603      	mov	r3, r0
 80094ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d128      	bne.n	8009546 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	8b12      	ldrh	r2, [r2, #24]
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d90e      	bls.n	800951e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	8b12      	ldrh	r2, [r2, #24]
 8009508:	1a9a      	subs	r2, r3, r2
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	8b12      	ldrh	r2, [r2, #24]
 8009516:	441a      	add	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	61da      	str	r2, [r3, #28]
 800951c:	e002      	b.n	8009524 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	2b00      	cmp	r3, #0
 800952a:	d004      	beq.n	8009536 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009534:	e00e      	b.n	8009554 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f868 	bl	8009614 <USBH_CDC_TransmitCallback>
      break;
 8009544:	e006      	b.n	8009554 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	2b02      	cmp	r3, #2
 800954a:	d103      	bne.n	8009554 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009554:	bf00      	nop
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009570:	2300      	movs	r3, #0
 8009572:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800957a:	2b03      	cmp	r3, #3
 800957c:	d002      	beq.n	8009584 <CDC_ProcessReception+0x26>
 800957e:	2b04      	cmp	r3, #4
 8009580:	d00e      	beq.n	80095a0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009582:	e043      	b.n	800960c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	6a19      	ldr	r1, [r3, #32]
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	8b5a      	ldrh	r2, [r3, #26]
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	7b1b      	ldrb	r3, [r3, #12]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 fc97 	bl	800aec4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2204      	movs	r2, #4
 800959a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800959e:	e035      	b.n	800960c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	7b1b      	ldrb	r3, [r3, #12]
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 ff96 	bl	800b4d8 <USBH_LL_GetURBState>
 80095ac:	4603      	mov	r3, r0
 80095ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80095b0:	7cfb      	ldrb	r3, [r7, #19]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d129      	bne.n	800960a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	7b1b      	ldrb	r3, [r3, #12]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fef9 	bl	800b3b4 <USBH_LL_GetLastXferSize>
 80095c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d016      	beq.n	80095fc <CDC_ProcessReception+0x9e>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	8b5b      	ldrh	r3, [r3, #26]
 80095d2:	461a      	mov	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d110      	bne.n	80095fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad2      	subs	r2, r2, r3
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	6a1a      	ldr	r2, [r3, #32]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	441a      	add	r2, r3
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2203      	movs	r2, #3
 80095f6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80095fa:	e006      	b.n	800960a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f80f 	bl	8009628 <USBH_CDC_ReceiveCallback>
      break;
 800960a:	bf00      	nop
  }
}
 800960c:	bf00      	nop
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	4613      	mov	r3, r2
 800965c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009664:	2302      	movs	r3, #2
 8009666:	e029      	b.n	80096bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	79fa      	ldrb	r2, [r7, #7]
 800966c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 f81f 	bl	80096c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f001 fdc9 	bl	800b24c <USBH_LL_Init>

  return USBH_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e009      	b.n	80096e6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	33e0      	adds	r3, #224	@ 0xe0
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	2200      	movs	r2, #0
 80096de:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b0f      	cmp	r3, #15
 80096ea:	d9f2      	bls.n	80096d2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e009      	b.n	8009706 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970c:	d3f1      	bcc.n	80096f2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2240      	movs	r2, #64	@ 0x40
 8009732:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	331c      	adds	r3, #28
 800975e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009762:	2100      	movs	r1, #0
 8009764:	4618      	mov	r0, r3
 8009766:	f002 f825 	bl	800b7b4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f002 f81c 	bl	800b7b4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009782:	2212      	movs	r2, #18
 8009784:	2100      	movs	r1, #0
 8009786:	4618      	mov	r0, r3
 8009788:	f002 f814 	bl	800b7b4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009792:	223e      	movs	r2, #62	@ 0x3e
 8009794:	2100      	movs	r1, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f002 f80c 	bl	800b7b4 <memset>

  return USBH_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d016      	beq.n	80097e8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10e      	bne.n	80097e2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80097ca:	1c59      	adds	r1, r3, #1
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	33de      	adds	r3, #222	@ 0xde
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
 80097e0:	e004      	b.n	80097ec <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80097e2:	2302      	movs	r3, #2
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	e001      	b.n	80097ec <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80097e8:	2302      	movs	r3, #2
 80097ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009810:	78fa      	ldrb	r2, [r7, #3]
 8009812:	429a      	cmp	r2, r3
 8009814:	d204      	bcs.n	8009820 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800981e:	e001      	b.n	8009824 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009820:	2302      	movs	r3, #2
 8009822:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009824:	7bfb      	ldrb	r3, [r7, #15]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009832:	b480      	push	{r7}
 8009834:	b087      	sub	sp, #28
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	4608      	mov	r0, r1
 800983c:	4611      	mov	r1, r2
 800983e:	461a      	mov	r2, r3
 8009840:	4603      	mov	r3, r0
 8009842:	70fb      	strb	r3, [r7, #3]
 8009844:	460b      	mov	r3, r1
 8009846:	70bb      	strb	r3, [r7, #2]
 8009848:	4613      	mov	r3, r2
 800984a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800985a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800985c:	e025      	b.n	80098aa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	221a      	movs	r2, #26
 8009862:	fb02 f303 	mul.w	r3, r2, r3
 8009866:	3308      	adds	r3, #8
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	3302      	adds	r3, #2
 800986e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	795b      	ldrb	r3, [r3, #5]
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	429a      	cmp	r2, r3
 8009878:	d002      	beq.n	8009880 <USBH_FindInterface+0x4e>
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	2bff      	cmp	r3, #255	@ 0xff
 800987e:	d111      	bne.n	80098a4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009884:	78ba      	ldrb	r2, [r7, #2]
 8009886:	429a      	cmp	r2, r3
 8009888:	d002      	beq.n	8009890 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800988a:	78bb      	ldrb	r3, [r7, #2]
 800988c:	2bff      	cmp	r3, #255	@ 0xff
 800988e:	d109      	bne.n	80098a4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009894:	787a      	ldrb	r2, [r7, #1]
 8009896:	429a      	cmp	r2, r3
 8009898:	d002      	beq.n	80098a0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800989a:	787b      	ldrb	r3, [r7, #1]
 800989c:	2bff      	cmp	r3, #255	@ 0xff
 800989e:	d101      	bne.n	80098a4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	e006      	b.n	80098b2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	3301      	adds	r3, #1
 80098a8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d9d6      	bls.n	800985e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80098b0:	23ff      	movs	r3, #255	@ 0xff
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fcfc 	bl	800b2c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80098cc:	2101      	movs	r1, #1
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fe15 	bl	800b4fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80098e8:	2302      	movs	r3, #2
 80098ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d102      	bne.n	8009902 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2203      	movs	r2, #3
 8009900:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b0b      	cmp	r3, #11
 800990a:	f200 81bc 	bhi.w	8009c86 <USBH_Process+0x3a6>
 800990e:	a201      	add	r2, pc, #4	@ (adr r2, 8009914 <USBH_Process+0x34>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	08009945 	.word	0x08009945
 8009918:	08009977 	.word	0x08009977
 800991c:	080099e1 	.word	0x080099e1
 8009920:	08009c21 	.word	0x08009c21
 8009924:	08009c87 	.word	0x08009c87
 8009928:	08009a81 	.word	0x08009a81
 800992c:	08009bc7 	.word	0x08009bc7
 8009930:	08009ab7 	.word	0x08009ab7
 8009934:	08009ad7 	.word	0x08009ad7
 8009938:	08009af5 	.word	0x08009af5
 800993c:	08009b39 	.word	0x08009b39
 8009940:	08009c09 	.word	0x08009c09
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 819c 	beq.w	8009c8a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009958:	20c8      	movs	r0, #200	@ 0xc8
 800995a:	f001 fe1a 	bl	800b592 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 fd0d 	bl	800b37e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009974:	e189      	b.n	8009c8a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b01      	cmp	r3, #1
 8009980:	d107      	bne.n	8009992 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2202      	movs	r2, #2
 800998e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009990:	e18a      	b.n	8009ca8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009998:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800999c:	d914      	bls.n	80099c8 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80099a4:	3301      	adds	r3, #1
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d903      	bls.n	80099c0 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	220d      	movs	r2, #13
 80099bc:	701a      	strb	r2, [r3, #0]
      break;
 80099be:	e173      	b.n	8009ca8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]
      break;
 80099c6:	e16f      	b.n	8009ca8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80099ce:	f103 020a 	add.w	r2, r3, #10
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80099d8:	200a      	movs	r0, #10
 80099da:	f001 fdda 	bl	800b592 <USBH_Delay>
      break;
 80099de:	e163      	b.n	8009ca8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d005      	beq.n	80099f6 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099f0:	2104      	movs	r1, #4
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80099f6:	2064      	movs	r0, #100	@ 0x64
 80099f8:	f001 fdcb 	bl	800b592 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f001 fc97 	bl	800b330 <USBH_LL_GetSpeed>
 8009a02:	4603      	mov	r3, r0
 8009a04:	461a      	mov	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2205      	movs	r2, #5
 8009a10:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009a12:	2100      	movs	r1, #0
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 faa2 	bl	800af5e <USBH_AllocPipe>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009a22:	2180      	movs	r1, #128	@ 0x80
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f001 fa9a 	bl	800af5e <USBH_AllocPipe>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	7919      	ldrb	r1, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a46:	9202      	str	r2, [sp, #8]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	9201      	str	r2, [sp, #4]
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2280      	movs	r2, #128	@ 0x80
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fa54 	bl	800af00 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	7959      	ldrb	r1, [r3, #5]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a6c:	9202      	str	r2, [sp, #8]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	9201      	str	r2, [sp, #4]
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	4603      	mov	r3, r0
 8009a76:	2200      	movs	r2, #0
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 fa41 	bl	800af00 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009a7e:	e113      	b.n	8009ca8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f917 	bl	8009cb4 <USBH_HandleEnum>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f040 80fd 	bne.w	8009c8e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d103      	bne.n	8009aae <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2208      	movs	r2, #8
 8009aaa:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009aac:	e0ef      	b.n	8009c8e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2207      	movs	r2, #7
 8009ab2:	701a      	strb	r2, [r3, #0]
      break;
 8009ab4:	e0eb      	b.n	8009c8e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80e8 	beq.w	8009c92 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ac8:	2101      	movs	r1, #1
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2208      	movs	r2, #8
 8009ad2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009ad4:	e0dd      	b.n	8009c92 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fc3f 	bl	800a362 <USBH_SetCfg>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f040 80d5 	bne.w	8009c96 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2209      	movs	r2, #9
 8009af0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009af2:	e0d0      	b.n	8009c96 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d016      	beq.n	8009b30 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009b02:	2101      	movs	r1, #1
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fc4f 	bl	800a3a8 <USBH_SetFeature>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d103      	bne.n	8009b1e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	220a      	movs	r2, #10
 8009b1a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009b1c:	e0bd      	b.n	8009c9a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	f040 80b9 	bne.w	8009c9a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	220a      	movs	r2, #10
 8009b2c:	701a      	strb	r2, [r3, #0]
      break;
 8009b2e:	e0b4      	b.n	8009c9a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	220a      	movs	r2, #10
 8009b34:	701a      	strb	r2, [r3, #0]
      break;
 8009b36:	e0b0      	b.n	8009c9a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 80ad 	beq.w	8009c9e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
 8009b50:	e016      	b.n	8009b80 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b52:	7bfa      	ldrb	r2, [r7, #15]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	32de      	adds	r2, #222	@ 0xde
 8009b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5c:	791a      	ldrb	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d108      	bne.n	8009b7a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b68:	7bfa      	ldrb	r2, [r7, #15]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	32de      	adds	r2, #222	@ 0xde
 8009b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009b78:	e005      	b.n	8009b86 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	73fb      	strb	r3, [r7, #15]
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0e5      	beq.n	8009b52 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d016      	beq.n	8009bbe <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d109      	bne.n	8009bb6 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2206      	movs	r2, #6
 8009ba6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009bae:	2103      	movs	r1, #3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009bb4:	e073      	b.n	8009c9e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	220d      	movs	r2, #13
 8009bba:	701a      	strb	r2, [r3, #0]
      break;
 8009bbc:	e06f      	b.n	8009c9e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	220d      	movs	r2, #13
 8009bc2:	701a      	strb	r2, [r3, #0]
      break;
 8009bc4:	e06b      	b.n	8009c9e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d017      	beq.n	8009c00 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	4798      	blx	r3
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	220b      	movs	r2, #11
 8009bec:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009bee:	e058      	b.n	8009ca2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d154      	bne.n	8009ca2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	220d      	movs	r2, #13
 8009bfc:	701a      	strb	r2, [r3, #0]
      break;
 8009bfe:	e050      	b.n	8009ca2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	220d      	movs	r2, #13
 8009c04:	701a      	strb	r2, [r3, #0]
      break;
 8009c06:	e04c      	b.n	8009ca2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d049      	beq.n	8009ca6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	4798      	blx	r3
      }
      break;
 8009c1e:	e042      	b.n	8009ca6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff fd4b 	bl	80096c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d009      	beq.n	8009c4c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d005      	beq.n	8009c62 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c5c:	2105      	movs	r1, #5
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d107      	bne.n	8009c7e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff fe21 	bl	80098be <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009c7c:	e014      	b.n	8009ca8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 fb20 	bl	800b2c4 <USBH_LL_Start>
      break;
 8009c84:	e010      	b.n	8009ca8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c86:	bf00      	nop
 8009c88:	e00e      	b.n	8009ca8 <USBH_Process+0x3c8>
      break;
 8009c8a:	bf00      	nop
 8009c8c:	e00c      	b.n	8009ca8 <USBH_Process+0x3c8>
      break;
 8009c8e:	bf00      	nop
 8009c90:	e00a      	b.n	8009ca8 <USBH_Process+0x3c8>
    break;
 8009c92:	bf00      	nop
 8009c94:	e008      	b.n	8009ca8 <USBH_Process+0x3c8>
      break;
 8009c96:	bf00      	nop
 8009c98:	e006      	b.n	8009ca8 <USBH_Process+0x3c8>
      break;
 8009c9a:	bf00      	nop
 8009c9c:	e004      	b.n	8009ca8 <USBH_Process+0x3c8>
      break;
 8009c9e:	bf00      	nop
 8009ca0:	e002      	b.n	8009ca8 <USBH_Process+0x3c8>
      break;
 8009ca2:	bf00      	nop
 8009ca4:	e000      	b.n	8009ca8 <USBH_Process+0x3c8>
      break;
 8009ca6:	bf00      	nop
  }
  return USBH_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop

08009cb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af04      	add	r7, sp, #16
 8009cba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b07      	cmp	r3, #7
 8009cca:	f200 81bd 	bhi.w	800a048 <USBH_HandleEnum+0x394>
 8009cce:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <USBH_HandleEnum+0x20>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009cf5 	.word	0x08009cf5
 8009cd8:	08009daf 	.word	0x08009daf
 8009cdc:	08009e19 	.word	0x08009e19
 8009ce0:	08009ea3 	.word	0x08009ea3
 8009ce4:	08009f0d 	.word	0x08009f0d
 8009ce8:	08009f7d 	.word	0x08009f7d
 8009cec:	08009fc3 	.word	0x08009fc3
 8009cf0:	0800a009 	.word	0x0800a009
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009cf4:	2108      	movs	r1, #8
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa50 	bl	800a19c <USBH_Get_DevDesc>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d12e      	bne.n	8009d64 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	7919      	ldrb	r1, [r3, #4]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d2a:	9202      	str	r2, [sp, #8]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	9201      	str	r2, [sp, #4]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	4603      	mov	r3, r0
 8009d34:	2280      	movs	r2, #128	@ 0x80
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f001 f8e2 	bl	800af00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7959      	ldrb	r1, [r3, #5]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d50:	9202      	str	r2, [sp, #8]
 8009d52:	2200      	movs	r2, #0
 8009d54:	9201      	str	r2, [sp, #4]
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 f8cf 	bl	800af00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d62:	e173      	b.n	800a04c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	f040 8170 	bne.w	800a04c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d72:	3301      	adds	r3, #1
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d903      	bls.n	8009d8e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	220d      	movs	r2, #13
 8009d8a:	701a      	strb	r2, [r3, #0]
      break;
 8009d8c:	e15e      	b.n	800a04c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	795b      	ldrb	r3, [r3, #5]
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 f903 	bl	800afa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	791b      	ldrb	r3, [r3, #4]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 f8fd 	bl	800afa0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]
      break;
 8009dac:	e14e      	b.n	800a04c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009dae:	2112      	movs	r1, #18
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f9f3 	bl	800a19c <USBH_Get_DevDesc>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d103      	bne.n	8009dc8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009dc6:	e143      	b.n	800a050 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	f040 8140 	bne.w	800a050 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d903      	bls.n	8009df2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	220d      	movs	r2, #13
 8009dee:	701a      	strb	r2, [r3, #0]
      break;
 8009df0:	e12e      	b.n	800a050 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	795b      	ldrb	r3, [r3, #5]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 f8d1 	bl	800afa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	791b      	ldrb	r3, [r3, #4]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 f8cb 	bl	800afa0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
      break;
 8009e16:	e11b      	b.n	800a050 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009e18:	2101      	movs	r1, #1
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa7d 	bl	800a31a <USBH_SetAddress>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d130      	bne.n	8009e8c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009e2a:	2002      	movs	r0, #2
 8009e2c:	f001 fbb1 	bl	800b592 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	7919      	ldrb	r1, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e52:	9202      	str	r2, [sp, #8]
 8009e54:	2200      	movs	r2, #0
 8009e56:	9201      	str	r2, [sp, #4]
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2280      	movs	r2, #128	@ 0x80
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 f84e 	bl	800af00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7959      	ldrb	r1, [r3, #5]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e78:	9202      	str	r2, [sp, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	9201      	str	r2, [sp, #4]
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4603      	mov	r3, r0
 8009e82:	2200      	movs	r2, #0
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f83b 	bl	800af00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e8a:	e0e3      	b.n	800a054 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	f040 80e0 	bne.w	800a054 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	220d      	movs	r2, #13
 8009e98:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	705a      	strb	r2, [r3, #1]
      break;
 8009ea0:	e0d8      	b.n	800a054 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ea2:	2109      	movs	r1, #9
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f9a5 	bl	800a1f4 <USBH_Get_CfgDesc>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2204      	movs	r2, #4
 8009eb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009eba:	e0cd      	b.n	800a058 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	f040 80ca 	bne.w	800a058 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009eca:	3301      	adds	r3, #1
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d903      	bls.n	8009ee6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	220d      	movs	r2, #13
 8009ee2:	701a      	strb	r2, [r3, #0]
      break;
 8009ee4:	e0b8      	b.n	800a058 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	795b      	ldrb	r3, [r3, #5]
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 f857 	bl	800afa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	791b      	ldrb	r3, [r3, #4]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 f851 	bl	800afa0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	701a      	strb	r2, [r3, #0]
      break;
 8009f0a:	e0a5      	b.n	800a058 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f96d 	bl	800a1f4 <USBH_Get_CfgDesc>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2205      	movs	r2, #5
 8009f28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f2a:	e097      	b.n	800a05c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	f040 8094 	bne.w	800a05c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d903      	bls.n	8009f56 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	220d      	movs	r2, #13
 8009f52:	701a      	strb	r2, [r3, #0]
      break;
 8009f54:	e082      	b.n	800a05c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	795b      	ldrb	r3, [r3, #5]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 f81f 	bl	800afa0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	791b      	ldrb	r3, [r3, #4]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f819 	bl	800afa0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
      break;
 8009f7a:	e06f      	b.n	800a05c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d019      	beq.n	8009fba <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f92:	23ff      	movs	r3, #255	@ 0xff
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f957 	bl	800a248 <USBH_Get_StringDesc>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d103      	bne.n	8009fac <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2206      	movs	r2, #6
 8009fa8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009faa:	e059      	b.n	800a060 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d156      	bne.n	800a060 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2206      	movs	r2, #6
 8009fb6:	705a      	strb	r2, [r3, #1]
      break;
 8009fb8:	e052      	b.n	800a060 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2206      	movs	r2, #6
 8009fbe:	705a      	strb	r2, [r3, #1]
      break;
 8009fc0:	e04e      	b.n	800a060 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d019      	beq.n	800a000 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fd8:	23ff      	movs	r3, #255	@ 0xff
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f934 	bl	800a248 <USBH_Get_StringDesc>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d103      	bne.n	8009ff2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2207      	movs	r2, #7
 8009fee:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ff0:	e038      	b.n	800a064 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d135      	bne.n	800a064 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2207      	movs	r2, #7
 8009ffc:	705a      	strb	r2, [r3, #1]
      break;
 8009ffe:	e031      	b.n	800a064 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2207      	movs	r2, #7
 800a004:	705a      	strb	r2, [r3, #1]
      break;
 800a006:	e02d      	b.n	800a064 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d017      	beq.n	800a042 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a01e:	23ff      	movs	r3, #255	@ 0xff
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f911 	bl	800a248 <USBH_Get_StringDesc>
 800a026:	4603      	mov	r3, r0
 800a028:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a034:	e018      	b.n	800a068 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d115      	bne.n	800a068 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73fb      	strb	r3, [r7, #15]
      break;
 800a040:	e012      	b.n	800a068 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]
      break;
 800a046:	e00f      	b.n	800a068 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a048:	bf00      	nop
 800a04a:	e00e      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a04c:	bf00      	nop
 800a04e:	e00c      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a050:	bf00      	nop
 800a052:	e00a      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a054:	bf00      	nop
 800a056:	e008      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a058:	bf00      	nop
 800a05a:	e006      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a05c:	bf00      	nop
 800a05e:	e004      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a060:	bf00      	nop
 800a062:	e002      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a064:	bf00      	nop
 800a066:	e000      	b.n	800a06a <USBH_HandleEnum+0x3b6>
      break;
 800a068:	bf00      	nop
  }
  return Status;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f804 	bl	800a0b6 <USBH_HandleSof>
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b0b      	cmp	r3, #11
 800a0c6:	d10a      	bne.n	800a0de <USBH_HandleSof+0x28>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d005      	beq.n	800a0de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a0f6:	bf00      	nop
}
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a11a:	bf00      	nop
}
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f8c0 	bl	800b2fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	791b      	ldrb	r3, [r3, #4]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 ff0d 	bl	800afa0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	795b      	ldrb	r3, [r3, #5]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 ff07 	bl	800afa0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af02      	add	r7, sp, #8
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a1a8:	887b      	ldrh	r3, [r7, #2]
 800a1aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1ae:	d901      	bls.n	800a1b4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e01b      	b.n	800a1ec <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f872 	bl	800a2b0 <USBH_GetDescriptor>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d109      	bne.n	800a1ea <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1dc:	887a      	ldrh	r2, [r7, #2]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f929 	bl	800a438 <USBH_ParseDevDesc>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	331c      	adds	r3, #28
 800a204:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a206:	887b      	ldrh	r3, [r7, #2]
 800a208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a20c:	d901      	bls.n	800a212 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a20e:	2303      	movs	r3, #3
 800a210:	e016      	b.n	800a240 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a212:	887b      	ldrh	r3, [r7, #2]
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a21c:	2100      	movs	r1, #0
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f846 	bl	800a2b0 <USBH_GetDescriptor>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d107      	bne.n	800a23e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a22e:	887b      	ldrh	r3, [r7, #2]
 800a230:	461a      	mov	r2, r3
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f9af 	bl	800a598 <USBH_ParseCfgDesc>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	461a      	mov	r2, r3
 800a254:	460b      	mov	r3, r1
 800a256:	72fb      	strb	r3, [r7, #11]
 800a258:	4613      	mov	r3, r2
 800a25a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a25c:	893b      	ldrh	r3, [r7, #8]
 800a25e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a262:	d802      	bhi.n	800a26a <USBH_Get_StringDesc+0x22>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e01c      	b.n	800a2a8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	b29b      	uxth	r3, r3
 800a272:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a276:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a27e:	893b      	ldrh	r3, [r7, #8]
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	460b      	mov	r3, r1
 800a284:	2100      	movs	r1, #0
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f812 	bl	800a2b0 <USBH_GetDescriptor>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d107      	bne.n	800a2a6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a29c:	893a      	ldrh	r2, [r7, #8]
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fb8c 	bl	800a9be <USBH_ParseStringDesc>
  }

  return status;
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	607b      	str	r3, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	72fb      	strb	r3, [r7, #11]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	789b      	ldrb	r3, [r3, #2]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d11c      	bne.n	800a304 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2206      	movs	r2, #6
 800a2da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	893a      	ldrh	r2, [r7, #8]
 800a2e0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2ec:	d104      	bne.n	800a2f8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f240 4209 	movw	r2, #1033	@ 0x409
 800a2f4:	829a      	strh	r2, [r3, #20]
 800a2f6:	e002      	b.n	800a2fe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8b3a      	ldrh	r2, [r7, #24]
 800a302:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a304:	8b3b      	ldrh	r3, [r7, #24]
 800a306:	461a      	mov	r2, r3
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fba4 	bl	800aa58 <USBH_CtlReq>
 800a310:	4603      	mov	r3, r0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	789b      	ldrb	r3, [r3, #2]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d10f      	bne.n	800a34e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2205      	movs	r2, #5
 800a338:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a34e:	2200      	movs	r2, #0
 800a350:	2100      	movs	r1, #0
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fb80 	bl	800aa58 <USBH_CtlReq>
 800a358:	4603      	mov	r3, r0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	789b      	ldrb	r3, [r3, #2]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d10e      	bne.n	800a394 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2209      	movs	r2, #9
 800a380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	887a      	ldrh	r2, [r7, #2]
 800a386:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a394:	2200      	movs	r2, #0
 800a396:	2100      	movs	r1, #0
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fb5d 	bl	800aa58 <USBH_CtlReq>
 800a39e:	4603      	mov	r3, r0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	789b      	ldrb	r3, [r3, #2]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d10f      	bne.n	800a3dc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fb39 	bl	800aa58 <USBH_CtlReq>
 800a3e6:	4603      	mov	r3, r0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	789b      	ldrb	r3, [r3, #2]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d10f      	bne.n	800a424 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a416:	78fb      	ldrb	r3, [r7, #3]
 800a418:	b29a      	uxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a424:	2200      	movs	r2, #0
 800a426:	2100      	movs	r1, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fb15 	bl	800aa58 <USBH_CtlReq>
 800a42e:	4603      	mov	r3, r0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a44c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a458:	2302      	movs	r3, #2
 800a45a:	e094      	b.n	800a586 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	785a      	ldrb	r2, [r3, #1]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	3302      	adds	r3, #2
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	3303      	adds	r3, #3
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	b29a      	uxth	r2, r3
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	791a      	ldrb	r2, [r3, #4]
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	795a      	ldrb	r2, [r3, #5]
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	799a      	ldrb	r2, [r3, #6]
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	79da      	ldrb	r2, [r3, #7]
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d004      	beq.n	800a4ba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d11b      	bne.n	800a4f2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	79db      	ldrb	r3, [r3, #7]
 800a4be:	2b20      	cmp	r3, #32
 800a4c0:	dc0f      	bgt.n	800a4e2 <USBH_ParseDevDesc+0xaa>
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	db0f      	blt.n	800a4e6 <USBH_ParseDevDesc+0xae>
 800a4c6:	3b08      	subs	r3, #8
 800a4c8:	4a32      	ldr	r2, [pc, #200]	@ (800a594 <USBH_ParseDevDesc+0x15c>)
 800a4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bf14      	ite	ne
 800a4d6:	2301      	movne	r3, #1
 800a4d8:	2300      	moveq	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <USBH_ParseDevDesc+0xb6>
 800a4e0:	e001      	b.n	800a4e6 <USBH_ParseDevDesc+0xae>
 800a4e2:	2b40      	cmp	r3, #64	@ 0x40
 800a4e4:	d003      	beq.n	800a4ee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2208      	movs	r2, #8
 800a4ea:	71da      	strb	r2, [r3, #7]
        break;
 800a4ec:	e000      	b.n	800a4f0 <USBH_ParseDevDesc+0xb8>
        break;
 800a4ee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a4f0:	e00e      	b.n	800a510 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d107      	bne.n	800a50c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	79db      	ldrb	r3, [r3, #7]
 800a500:	2b08      	cmp	r3, #8
 800a502:	d005      	beq.n	800a510 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	2208      	movs	r2, #8
 800a508:	71da      	strb	r2, [r3, #7]
 800a50a:	e001      	b.n	800a510 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a50c:	2303      	movs	r3, #3
 800a50e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	2b08      	cmp	r3, #8
 800a514:	d936      	bls.n	800a584 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3308      	adds	r3, #8
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	3309      	adds	r3, #9
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	021b      	lsls	r3, r3, #8
 800a526:	b29b      	uxth	r3, r3
 800a528:	4313      	orrs	r3, r2
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	330a      	adds	r3, #10
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	330b      	adds	r3, #11
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	021b      	lsls	r3, r3, #8
 800a540:	b29b      	uxth	r3, r3
 800a542:	4313      	orrs	r3, r2
 800a544:	b29a      	uxth	r2, r3
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	330c      	adds	r3, #12
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	330d      	adds	r3, #13
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	4313      	orrs	r3, r2
 800a55e:	b29a      	uxth	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	7b9a      	ldrb	r2, [r3, #14]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	7bda      	ldrb	r2, [r3, #15]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	7c1a      	ldrb	r2, [r3, #16]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	7c5a      	ldrb	r2, [r3, #17]
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a584:	7dfb      	ldrb	r3, [r7, #23]
}
 800a586:	4618      	mov	r0, r3
 800a588:	371c      	adds	r7, #28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	01000101 	.word	0x01000101

0800a598 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08c      	sub	sp, #48	@ 0x30
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a5ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e0de      	b.n	800a788 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b09      	cmp	r3, #9
 800a5d4:	d002      	beq.n	800a5dc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d8:	2209      	movs	r2, #9
 800a5da:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	785a      	ldrb	r2, [r3, #1]
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	3302      	adds	r3, #2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3303      	adds	r3, #3
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	4313      	orrs	r3, r2
 800a600:	b29b      	uxth	r3, r3
 800a602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a606:	bf28      	it	cs
 800a608:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	791a      	ldrb	r2, [r3, #4]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	795a      	ldrb	r2, [r3, #5]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	799a      	ldrb	r2, [r3, #6]
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	79da      	ldrb	r2, [r3, #7]
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	7a1a      	ldrb	r2, [r3, #8]
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	2b09      	cmp	r3, #9
 800a63e:	f240 80a1 	bls.w	800a784 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a642:	2309      	movs	r3, #9
 800a644:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a64a:	e085      	b.n	800a758 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a64c:	f107 0316 	add.w	r3, r7, #22
 800a650:	4619      	mov	r1, r3
 800a652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a654:	f000 f9e6 	bl	800aa24 <USBH_GetNextDesc>
 800a658:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d17a      	bne.n	800a758 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b09      	cmp	r3, #9
 800a668:	d002      	beq.n	800a670 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	2209      	movs	r2, #9
 800a66e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a674:	221a      	movs	r2, #26
 800a676:	fb02 f303 	mul.w	r3, r2, r3
 800a67a:	3308      	adds	r3, #8
 800a67c:	6a3a      	ldr	r2, [r7, #32]
 800a67e:	4413      	add	r3, r2
 800a680:	3302      	adds	r3, #2
 800a682:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a686:	69f8      	ldr	r0, [r7, #28]
 800a688:	f000 f882 	bl	800a790 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a696:	e043      	b.n	800a720 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a698:	f107 0316 	add.w	r3, r7, #22
 800a69c:	4619      	mov	r1, r3
 800a69e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6a0:	f000 f9c0 	bl	800aa24 <USBH_GetNextDesc>
 800a6a4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	785b      	ldrb	r3, [r3, #1]
 800a6aa:	2b05      	cmp	r3, #5
 800a6ac:	d138      	bne.n	800a720 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	795b      	ldrb	r3, [r3, #5]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d113      	bne.n	800a6de <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d003      	beq.n	800a6c6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	799b      	ldrb	r3, [r3, #6]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d10b      	bne.n	800a6de <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	79db      	ldrb	r3, [r3, #7]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10b      	bne.n	800a6e6 <USBH_ParseCfgDesc+0x14e>
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d007      	beq.n	800a6e6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d8:	2209      	movs	r2, #9
 800a6da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6dc:	e003      	b.n	800a6e6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e0:	2207      	movs	r2, #7
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	e000      	b.n	800a6e8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6e6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6f0:	3201      	adds	r2, #1
 800a6f2:	00d2      	lsls	r2, r2, #3
 800a6f4:	211a      	movs	r1, #26
 800a6f6:	fb01 f303 	mul.w	r3, r1, r3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	6a3a      	ldr	r2, [r7, #32]
 800a700:	4413      	add	r3, r2
 800a702:	3304      	adds	r3, #4
 800a704:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a708:	69b9      	ldr	r1, [r7, #24]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f86f 	bl	800a7ee <USBH_ParseEPDesc>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a716:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a71a:	3301      	adds	r3, #1
 800a71c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a720:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a724:	2b01      	cmp	r3, #1
 800a726:	d80a      	bhi.n	800a73e <USBH_ParseCfgDesc+0x1a6>
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	791b      	ldrb	r3, [r3, #4]
 800a72c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a730:	429a      	cmp	r2, r3
 800a732:	d204      	bcs.n	800a73e <USBH_ParseCfgDesc+0x1a6>
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	885a      	ldrh	r2, [r3, #2]
 800a738:	8afb      	ldrh	r3, [r7, #22]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d8ac      	bhi.n	800a698 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	791b      	ldrb	r3, [r3, #4]
 800a742:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a746:	429a      	cmp	r2, r3
 800a748:	d201      	bcs.n	800a74e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e01c      	b.n	800a788 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a74e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a752:	3301      	adds	r3, #1
 800a754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d805      	bhi.n	800a76c <USBH_ParseCfgDesc+0x1d4>
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	885a      	ldrh	r2, [r3, #2]
 800a764:	8afb      	ldrh	r3, [r7, #22]
 800a766:	429a      	cmp	r2, r3
 800a768:	f63f af70 	bhi.w	800a64c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	791b      	ldrb	r3, [r3, #4]
 800a770:	2b02      	cmp	r3, #2
 800a772:	bf28      	it	cs
 800a774:	2302      	movcs	r3, #2
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d201      	bcs.n	800a784 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a780:	2303      	movs	r3, #3
 800a782:	e001      	b.n	800a788 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3730      	adds	r7, #48	@ 0x30
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781a      	ldrb	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	785a      	ldrb	r2, [r3, #1]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	789a      	ldrb	r2, [r3, #2]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	78da      	ldrb	r2, [r3, #3]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	791a      	ldrb	r2, [r3, #4]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	795a      	ldrb	r2, [r3, #5]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	799a      	ldrb	r2, [r3, #6]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	79da      	ldrb	r2, [r3, #7]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	7a1a      	ldrb	r2, [r3, #8]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	721a      	strb	r2, [r3, #8]
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b087      	sub	sp, #28
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	781a      	ldrb	r2, [r3, #0]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	785a      	ldrb	r2, [r3, #1]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	789a      	ldrb	r2, [r3, #2]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	78da      	ldrb	r2, [r3, #3]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3304      	adds	r3, #4
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	461a      	mov	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3305      	adds	r3, #5
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	021b      	lsls	r3, r3, #8
 800a82e:	b29b      	uxth	r3, r3
 800a830:	4313      	orrs	r3, r2
 800a832:	b29a      	uxth	r2, r3
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	799a      	ldrb	r2, [r3, #6]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	889b      	ldrh	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d009      	beq.n	800a85c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a84c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a850:	d804      	bhi.n	800a85c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a85a:	d901      	bls.n	800a860 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a85c:	2303      	movs	r3, #3
 800a85e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a866:	2b00      	cmp	r3, #0
 800a868:	d136      	bne.n	800a8d8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	78db      	ldrb	r3, [r3, #3]
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	2b02      	cmp	r3, #2
 800a874:	d108      	bne.n	800a888 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	889b      	ldrh	r3, [r3, #4]
 800a87a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a87e:	f240 8097 	bls.w	800a9b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a882:	2303      	movs	r3, #3
 800a884:	75fb      	strb	r3, [r7, #23]
 800a886:	e093      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	78db      	ldrb	r3, [r3, #3]
 800a88c:	f003 0303 	and.w	r3, r3, #3
 800a890:	2b00      	cmp	r3, #0
 800a892:	d107      	bne.n	800a8a4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	889b      	ldrh	r3, [r3, #4]
 800a898:	2b40      	cmp	r3, #64	@ 0x40
 800a89a:	f240 8089 	bls.w	800a9b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	75fb      	strb	r3, [r7, #23]
 800a8a2:	e085      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	78db      	ldrb	r3, [r3, #3]
 800a8a8:	f003 0303 	and.w	r3, r3, #3
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d005      	beq.n	800a8bc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	78db      	ldrb	r3, [r3, #3]
 800a8b4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d10a      	bne.n	800a8d2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	799b      	ldrb	r3, [r3, #6]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <USBH_ParseEPDesc+0xde>
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	799b      	ldrb	r3, [r3, #6]
 800a8c8:	2b10      	cmp	r3, #16
 800a8ca:	d970      	bls.n	800a9ae <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8d0:	e06d      	b.n	800a9ae <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	75fb      	strb	r3, [r7, #23]
 800a8d6:	e06b      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d13c      	bne.n	800a95c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	78db      	ldrb	r3, [r3, #3]
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d005      	beq.n	800a8fa <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	78db      	ldrb	r3, [r3, #3]
 800a8f2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	889b      	ldrh	r3, [r3, #4]
 800a8fe:	2b40      	cmp	r3, #64	@ 0x40
 800a900:	d956      	bls.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a902:	2303      	movs	r3, #3
 800a904:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a906:	e053      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	78db      	ldrb	r3, [r3, #3]
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	2b01      	cmp	r3, #1
 800a912:	d10e      	bne.n	800a932 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	799b      	ldrb	r3, [r3, #6]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d007      	beq.n	800a92c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a920:	2b10      	cmp	r3, #16
 800a922:	d803      	bhi.n	800a92c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a928:	2b40      	cmp	r3, #64	@ 0x40
 800a92a:	d941      	bls.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a92c:	2303      	movs	r3, #3
 800a92e:	75fb      	strb	r3, [r7, #23]
 800a930:	e03e      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	78db      	ldrb	r3, [r3, #3]
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d10b      	bne.n	800a956 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	799b      	ldrb	r3, [r3, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d004      	beq.n	800a950 <USBH_ParseEPDesc+0x162>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	889b      	ldrh	r3, [r3, #4]
 800a94a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a94e:	d32f      	bcc.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a950:	2303      	movs	r3, #3
 800a952:	75fb      	strb	r3, [r7, #23]
 800a954:	e02c      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a956:	2303      	movs	r3, #3
 800a958:	75fb      	strb	r3, [r7, #23]
 800a95a:	e029      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a962:	2b02      	cmp	r3, #2
 800a964:	d120      	bne.n	800a9a8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	78db      	ldrb	r3, [r3, #3]
 800a96a:	f003 0303 	and.w	r3, r3, #3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	889b      	ldrh	r3, [r3, #4]
 800a976:	2b08      	cmp	r3, #8
 800a978:	d01a      	beq.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a97a:	2303      	movs	r3, #3
 800a97c:	75fb      	strb	r3, [r7, #23]
 800a97e:	e017      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	78db      	ldrb	r3, [r3, #3]
 800a984:	f003 0303 	and.w	r3, r3, #3
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d10a      	bne.n	800a9a2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	799b      	ldrb	r3, [r3, #6]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d003      	beq.n	800a99c <USBH_ParseEPDesc+0x1ae>
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	889b      	ldrh	r3, [r3, #4]
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d909      	bls.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a99c:	2303      	movs	r3, #3
 800a99e:	75fb      	strb	r3, [r7, #23]
 800a9a0:	e006      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	75fb      	strb	r3, [r7, #23]
 800a9a6:	e003      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	75fb      	strb	r3, [r7, #23]
 800a9ac:	e000      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9ae:	bf00      	nop
  }

  return status;
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b087      	sub	sp, #28
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d120      	bne.n	800aa18 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	1e9a      	subs	r2, r3, #2
 800a9dc:	88fb      	ldrh	r3, [r7, #6]
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	bf28      	it	cs
 800a9e2:	4613      	movcs	r3, r2
 800a9e4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3302      	adds	r3, #2
 800a9ea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	82fb      	strh	r3, [r7, #22]
 800a9f0:	e00b      	b.n	800aa0a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9f2:	8afb      	ldrh	r3, [r7, #22]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	3301      	adds	r3, #1
 800aa02:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa04:	8afb      	ldrh	r3, [r7, #22]
 800aa06:	3302      	adds	r3, #2
 800aa08:	82fb      	strh	r3, [r7, #22]
 800aa0a:	8afa      	ldrh	r2, [r7, #22]
 800aa0c:	8abb      	ldrh	r3, [r7, #20]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d3ef      	bcc.n	800a9f2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2200      	movs	r2, #0
 800aa16:	701a      	strb	r2, [r3, #0]
  }
}
 800aa18:	bf00      	nop
 800aa1a:	371c      	adds	r7, #28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	7812      	ldrb	r2, [r2, #0]
 800aa36:	4413      	add	r3, r2
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4413      	add	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	4613      	mov	r3, r2
 800aa64:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	789b      	ldrb	r3, [r3, #2]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d002      	beq.n	800aa78 <USBH_CtlReq+0x20>
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d00f      	beq.n	800aa96 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800aa76:	e027      	b.n	800aac8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	88fa      	ldrh	r2, [r7, #6]
 800aa82:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2201      	movs	r2, #1
 800aa88:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa90:	2301      	movs	r3, #1
 800aa92:	75fb      	strb	r3, [r7, #23]
      break;
 800aa94:	e018      	b.n	800aac8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f81c 	bl	800aad4 <USBH_HandleControl>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <USBH_CtlReq+0x54>
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	2b03      	cmp	r3, #3
 800aaaa:	d106      	bne.n	800aaba <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2201      	movs	r2, #1
 800aab0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	761a      	strb	r2, [r3, #24]
      break;
 800aab8:	e005      	b.n	800aac6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d102      	bne.n	800aac6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2201      	movs	r2, #1
 800aac4:	709a      	strb	r2, [r3, #2]
      break;
 800aac6:	bf00      	nop
  }
  return status;
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af02      	add	r7, sp, #8
 800aada:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aadc:	2301      	movs	r3, #1
 800aade:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	7e1b      	ldrb	r3, [r3, #24]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	2b0a      	cmp	r3, #10
 800aaec:	f200 8157 	bhi.w	800ad9e <USBH_HandleControl+0x2ca>
 800aaf0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <USBH_HandleControl+0x24>)
 800aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf6:	bf00      	nop
 800aaf8:	0800ab25 	.word	0x0800ab25
 800aafc:	0800ab3f 	.word	0x0800ab3f
 800ab00:	0800aba9 	.word	0x0800aba9
 800ab04:	0800abcf 	.word	0x0800abcf
 800ab08:	0800ac09 	.word	0x0800ac09
 800ab0c:	0800ac33 	.word	0x0800ac33
 800ab10:	0800ac85 	.word	0x0800ac85
 800ab14:	0800aca7 	.word	0x0800aca7
 800ab18:	0800ace3 	.word	0x0800ace3
 800ab1c:	0800ad09 	.word	0x0800ad09
 800ab20:	0800ad47 	.word	0x0800ad47
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f103 0110 	add.w	r1, r3, #16
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	795b      	ldrb	r3, [r3, #5]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f945 	bl	800adc0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2202      	movs	r2, #2
 800ab3a:	761a      	strb	r2, [r3, #24]
      break;
 800ab3c:	e13a      	b.n	800adb4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	795b      	ldrb	r3, [r3, #5]
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fcc7 	bl	800b4d8 <USBH_LL_GetURBState>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d11e      	bne.n	800ab92 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7c1b      	ldrb	r3, [r3, #16]
 800ab58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab5c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	8adb      	ldrh	r3, [r3, #22]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab66:	7b7b      	ldrb	r3, [r7, #13]
 800ab68:	2b80      	cmp	r3, #128	@ 0x80
 800ab6a:	d103      	bne.n	800ab74 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2203      	movs	r2, #3
 800ab70:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ab72:	e116      	b.n	800ada2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2205      	movs	r2, #5
 800ab78:	761a      	strb	r2, [r3, #24]
      break;
 800ab7a:	e112      	b.n	800ada2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800ab7c:	7b7b      	ldrb	r3, [r7, #13]
 800ab7e:	2b80      	cmp	r3, #128	@ 0x80
 800ab80:	d103      	bne.n	800ab8a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2209      	movs	r2, #9
 800ab86:	761a      	strb	r2, [r3, #24]
      break;
 800ab88:	e10b      	b.n	800ada2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2207      	movs	r2, #7
 800ab8e:	761a      	strb	r2, [r3, #24]
      break;
 800ab90:	e107      	b.n	800ada2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	d003      	beq.n	800aba0 <USBH_HandleControl+0xcc>
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	f040 8101 	bne.w	800ada2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	220b      	movs	r2, #11
 800aba4:	761a      	strb	r2, [r3, #24]
      break;
 800aba6:	e0fc      	b.n	800ada2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abae:	b29a      	uxth	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6899      	ldr	r1, [r3, #8]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	899a      	ldrh	r2, [r3, #12]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	791b      	ldrb	r3, [r3, #4]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f93c 	bl	800ae3e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2204      	movs	r2, #4
 800abca:	761a      	strb	r2, [r3, #24]
      break;
 800abcc:	e0f2      	b.n	800adb4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc7f 	bl	800b4d8 <USBH_LL_GetURBState>
 800abda:	4603      	mov	r3, r0
 800abdc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d103      	bne.n	800abec <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2209      	movs	r2, #9
 800abe8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800abea:	e0dc      	b.n	800ada6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d102      	bne.n	800abf8 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800abf2:	2303      	movs	r3, #3
 800abf4:	73fb      	strb	r3, [r7, #15]
      break;
 800abf6:	e0d6      	b.n	800ada6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	f040 80d3 	bne.w	800ada6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	220b      	movs	r2, #11
 800ac04:	761a      	strb	r2, [r3, #24]
      break;
 800ac06:	e0ce      	b.n	800ada6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6899      	ldr	r1, [r3, #8]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	899a      	ldrh	r2, [r3, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	795b      	ldrb	r3, [r3, #5]
 800ac14:	2001      	movs	r0, #1
 800ac16:	9000      	str	r0, [sp, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f8eb 	bl	800adf4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2206      	movs	r2, #6
 800ac2e:	761a      	strb	r2, [r3, #24]
      break;
 800ac30:	e0c0      	b.n	800adb4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	795b      	ldrb	r3, [r3, #5]
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fc4d 	bl	800b4d8 <USBH_LL_GetURBState>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d103      	bne.n	800ac50 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2207      	movs	r2, #7
 800ac4c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ac4e:	e0ac      	b.n	800adaa <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	d105      	bne.n	800ac62 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	220c      	movs	r2, #12
 800ac5a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac60:	e0a3      	b.n	800adaa <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d103      	bne.n	800ac70 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2205      	movs	r2, #5
 800ac6c:	761a      	strb	r2, [r3, #24]
      break;
 800ac6e:	e09c      	b.n	800adaa <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
 800ac72:	2b04      	cmp	r3, #4
 800ac74:	f040 8099 	bne.w	800adaa <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	220b      	movs	r2, #11
 800ac7c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	73fb      	strb	r3, [r7, #15]
      break;
 800ac82:	e092      	b.n	800adaa <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	791b      	ldrb	r3, [r3, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f8d6 	bl	800ae3e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2208      	movs	r2, #8
 800aca2:	761a      	strb	r2, [r3, #24]

      break;
 800aca4:	e086      	b.n	800adb4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	791b      	ldrb	r3, [r3, #4]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fc13 	bl	800b4d8 <USBH_LL_GetURBState>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d105      	bne.n	800acc8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	220d      	movs	r2, #13
 800acc0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800acc6:	e072      	b.n	800adae <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	2b04      	cmp	r3, #4
 800accc:	d103      	bne.n	800acd6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	220b      	movs	r2, #11
 800acd2:	761a      	strb	r2, [r3, #24]
      break;
 800acd4:	e06b      	b.n	800adae <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	2b05      	cmp	r3, #5
 800acda:	d168      	bne.n	800adae <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800acdc:	2303      	movs	r3, #3
 800acde:	73fb      	strb	r3, [r7, #15]
      break;
 800ace0:	e065      	b.n	800adae <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	795b      	ldrb	r3, [r3, #5]
 800ace6:	2201      	movs	r2, #1
 800ace8:	9200      	str	r2, [sp, #0]
 800acea:	2200      	movs	r2, #0
 800acec:	2100      	movs	r1, #0
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f880 	bl	800adf4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	220a      	movs	r2, #10
 800ad04:	761a      	strb	r2, [r3, #24]
      break;
 800ad06:	e055      	b.n	800adb4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	795b      	ldrb	r3, [r3, #5]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fbe2 	bl	800b4d8 <USBH_LL_GetURBState>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d105      	bne.n	800ad2a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	220d      	movs	r2, #13
 800ad26:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ad28:	e043      	b.n	800adb2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d103      	bne.n	800ad38 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2209      	movs	r2, #9
 800ad34:	761a      	strb	r2, [r3, #24]
      break;
 800ad36:	e03c      	b.n	800adb2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	2b04      	cmp	r3, #4
 800ad3c:	d139      	bne.n	800adb2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	220b      	movs	r2, #11
 800ad42:	761a      	strb	r2, [r3, #24]
      break;
 800ad44:	e035      	b.n	800adb2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7e5b      	ldrb	r3, [r3, #25]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	765a      	strb	r2, [r3, #25]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	7e5b      	ldrb	r3, [r3, #25]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d806      	bhi.n	800ad68 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad66:	e025      	b.n	800adb4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad6e:	2106      	movs	r1, #6
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	795b      	ldrb	r3, [r3, #5]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f90d 	bl	800afa0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	791b      	ldrb	r3, [r3, #4]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f907 	bl	800afa0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad98:	2302      	movs	r3, #2
 800ad9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad9c:	e00a      	b.n	800adb4 <USBH_HandleControl+0x2e0>

    default:
      break;
 800ad9e:	bf00      	nop
 800ada0:	e008      	b.n	800adb4 <USBH_HandleControl+0x2e0>
      break;
 800ada2:	bf00      	nop
 800ada4:	e006      	b.n	800adb4 <USBH_HandleControl+0x2e0>
      break;
 800ada6:	bf00      	nop
 800ada8:	e004      	b.n	800adb4 <USBH_HandleControl+0x2e0>
      break;
 800adaa:	bf00      	nop
 800adac:	e002      	b.n	800adb4 <USBH_HandleControl+0x2e0>
      break;
 800adae:	bf00      	nop
 800adb0:	e000      	b.n	800adb4 <USBH_HandleControl+0x2e0>
      break;
 800adb2:	bf00      	nop
  }

  return status;
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop

0800adc0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af04      	add	r7, sp, #16
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adce:	79f9      	ldrb	r1, [r7, #7]
 800add0:	2300      	movs	r3, #0
 800add2:	9303      	str	r3, [sp, #12]
 800add4:	2308      	movs	r3, #8
 800add6:	9302      	str	r3, [sp, #8]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	2300      	movs	r3, #0
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	2300      	movs	r3, #0
 800ade2:	2200      	movs	r2, #0
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 fb46 	bl	800b476 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af04      	add	r7, sp, #16
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	4611      	mov	r1, r2
 800ae00:	461a      	mov	r2, r3
 800ae02:	460b      	mov	r3, r1
 800ae04:	80fb      	strh	r3, [r7, #6]
 800ae06:	4613      	mov	r3, r2
 800ae08:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae14:	2300      	movs	r3, #0
 800ae16:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae18:	7979      	ldrb	r1, [r7, #5]
 800ae1a:	7e3b      	ldrb	r3, [r7, #24]
 800ae1c:	9303      	str	r3, [sp, #12]
 800ae1e:	88fb      	ldrh	r3, [r7, #6]
 800ae20:	9302      	str	r3, [sp, #8]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	2301      	movs	r3, #1
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 fb21 	bl	800b476 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b088      	sub	sp, #32
 800ae42:	af04      	add	r7, sp, #16
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	4611      	mov	r1, r2
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	80fb      	strh	r3, [r7, #6]
 800ae50:	4613      	mov	r3, r2
 800ae52:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae54:	7979      	ldrb	r1, [r7, #5]
 800ae56:	2300      	movs	r3, #0
 800ae58:	9303      	str	r3, [sp, #12]
 800ae5a:	88fb      	ldrh	r3, [r7, #6]
 800ae5c:	9302      	str	r3, [sp, #8]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	2301      	movs	r3, #1
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	2300      	movs	r3, #0
 800ae68:	2201      	movs	r2, #1
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f000 fb03 	bl	800b476 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae70:	2300      	movs	r3, #0

}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b088      	sub	sp, #32
 800ae7e:	af04      	add	r7, sp, #16
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	4611      	mov	r1, r2
 800ae86:	461a      	mov	r2, r3
 800ae88:	460b      	mov	r3, r1
 800ae8a:	80fb      	strh	r3, [r7, #6]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae9e:	7979      	ldrb	r1, [r7, #5]
 800aea0:	7e3b      	ldrb	r3, [r7, #24]
 800aea2:	9303      	str	r3, [sp, #12]
 800aea4:	88fb      	ldrh	r3, [r7, #6]
 800aea6:	9302      	str	r3, [sp, #8]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	2301      	movs	r3, #1
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 fade 	bl	800b476 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af04      	add	r7, sp, #16
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4611      	mov	r1, r2
 800aed0:	461a      	mov	r2, r3
 800aed2:	460b      	mov	r3, r1
 800aed4:	80fb      	strh	r3, [r7, #6]
 800aed6:	4613      	mov	r3, r2
 800aed8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aeda:	7979      	ldrb	r1, [r7, #5]
 800aedc:	2300      	movs	r3, #0
 800aede:	9303      	str	r3, [sp, #12]
 800aee0:	88fb      	ldrh	r3, [r7, #6]
 800aee2:	9302      	str	r3, [sp, #8]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	2301      	movs	r3, #1
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	2302      	movs	r3, #2
 800aeee:	2201      	movs	r2, #1
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 fac0 	bl	800b476 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af04      	add	r7, sp, #16
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	4608      	mov	r0, r1
 800af0a:	4611      	mov	r1, r2
 800af0c:	461a      	mov	r2, r3
 800af0e:	4603      	mov	r3, r0
 800af10:	70fb      	strb	r3, [r7, #3]
 800af12:	460b      	mov	r3, r1
 800af14:	70bb      	strb	r3, [r7, #2]
 800af16:	4613      	mov	r3, r2
 800af18:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af1a:	7878      	ldrb	r0, [r7, #1]
 800af1c:	78ba      	ldrb	r2, [r7, #2]
 800af1e:	78f9      	ldrb	r1, [r7, #3]
 800af20:	8b3b      	ldrh	r3, [r7, #24]
 800af22:	9302      	str	r3, [sp, #8]
 800af24:	7d3b      	ldrb	r3, [r7, #20]
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	7c3b      	ldrb	r3, [r7, #16]
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	4603      	mov	r3, r0
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fa53 	bl	800b3da <USBH_LL_OpenPipe>

  return USBH_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b082      	sub	sp, #8
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	460b      	mov	r3, r1
 800af48:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa72 	bl	800b438 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	460b      	mov	r3, r1
 800af68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f836 	bl	800afdc <USBH_GetFreePipe>
 800af70:	4603      	mov	r3, r0
 800af72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af74:	89fb      	ldrh	r3, [r7, #14]
 800af76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d00a      	beq.n	800af94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af7e:	78fa      	ldrb	r2, [r7, #3]
 800af80:	89fb      	ldrh	r3, [r7, #14]
 800af82:	f003 030f 	and.w	r3, r3, #15
 800af86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	33e0      	adds	r3, #224	@ 0xe0
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	440b      	add	r3, r1
 800af92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	b2db      	uxtb	r3, r3
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800afac:	78fb      	ldrb	r3, [r7, #3]
 800afae:	2b0f      	cmp	r3, #15
 800afb0:	d80d      	bhi.n	800afce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	33e0      	adds	r3, #224	@ 0xe0
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	33e0      	adds	r3, #224	@ 0xe0
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	440b      	add	r3, r1
 800afcc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
 800afec:	e00f      	b.n	800b00e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	33e0      	adds	r3, #224	@ 0xe0
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d102      	bne.n	800b008 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	b29b      	uxth	r3, r3
 800b006:	e007      	b.n	800b018 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	3301      	adds	r3, #1
 800b00c:	73fb      	strb	r3, [r7, #15]
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
 800b010:	2b0f      	cmp	r3, #15
 800b012:	d9ec      	bls.n	800afee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b014:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b028:	2201      	movs	r2, #1
 800b02a:	490e      	ldr	r1, [pc, #56]	@ (800b064 <MX_USB_HOST_Init+0x40>)
 800b02c:	480e      	ldr	r0, [pc, #56]	@ (800b068 <MX_USB_HOST_Init+0x44>)
 800b02e:	f7fe fb0f 	bl	8009650 <USBH_Init>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b038:	f7f6 fb02 	bl	8001640 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b03c:	490b      	ldr	r1, [pc, #44]	@ (800b06c <MX_USB_HOST_Init+0x48>)
 800b03e:	480a      	ldr	r0, [pc, #40]	@ (800b068 <MX_USB_HOST_Init+0x44>)
 800b040:	f7fe fbb1 	bl	80097a6 <USBH_RegisterClass>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b04a:	f7f6 faf9 	bl	8001640 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b04e:	4806      	ldr	r0, [pc, #24]	@ (800b068 <MX_USB_HOST_Init+0x44>)
 800b050:	f7fe fc35 	bl	80098be <USBH_Start>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b05a:	f7f6 faf1 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b05e:	bf00      	nop
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	0800b085 	.word	0x0800b085
 800b068:	200004c0 	.word	0x200004c0
 800b06c:	2000001c 	.word	0x2000001c

0800b070 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b074:	4802      	ldr	r0, [pc, #8]	@ (800b080 <MX_USB_HOST_Process+0x10>)
 800b076:	f7fe fc33 	bl	80098e0 <USBH_Process>
}
 800b07a:	bf00      	nop
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	200004c0 	.word	0x200004c0

0800b084 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	3b01      	subs	r3, #1
 800b094:	2b04      	cmp	r3, #4
 800b096:	d819      	bhi.n	800b0cc <USBH_UserProcess+0x48>
 800b098:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a0 <USBH_UserProcess+0x1c>)
 800b09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09e:	bf00      	nop
 800b0a0:	0800b0cd 	.word	0x0800b0cd
 800b0a4:	0800b0bd 	.word	0x0800b0bd
 800b0a8:	0800b0cd 	.word	0x0800b0cd
 800b0ac:	0800b0c5 	.word	0x0800b0c5
 800b0b0:	0800b0b5 	.word	0x0800b0b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0b4:	4b09      	ldr	r3, [pc, #36]	@ (800b0dc <USBH_UserProcess+0x58>)
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	701a      	strb	r2, [r3, #0]
  break;
 800b0ba:	e008      	b.n	800b0ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0bc:	4b07      	ldr	r3, [pc, #28]	@ (800b0dc <USBH_UserProcess+0x58>)
 800b0be:	2202      	movs	r2, #2
 800b0c0:	701a      	strb	r2, [r3, #0]
  break;
 800b0c2:	e004      	b.n	800b0ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0c4:	4b05      	ldr	r3, [pc, #20]	@ (800b0dc <USBH_UserProcess+0x58>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	701a      	strb	r2, [r3, #0]
  break;
 800b0ca:	e000      	b.n	800b0ce <USBH_UserProcess+0x4a>

  default:
  break;
 800b0cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0ce:	bf00      	nop
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20000898 	.word	0x20000898

0800b0e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08a      	sub	sp, #40	@ 0x28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0e8:	f107 0314 	add.w	r3, r7, #20
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	605a      	str	r2, [r3, #4]
 800b0f2:	609a      	str	r2, [r3, #8]
 800b0f4:	60da      	str	r2, [r3, #12]
 800b0f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b100:	d147      	bne.n	800b192 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b102:	2300      	movs	r3, #0
 800b104:	613b      	str	r3, [r7, #16]
 800b106:	4b25      	ldr	r3, [pc, #148]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b10a:	4a24      	ldr	r2, [pc, #144]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b10c:	f043 0301 	orr.w	r3, r3, #1
 800b110:	6313      	str	r3, [r2, #48]	@ 0x30
 800b112:	4b22      	ldr	r3, [pc, #136]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	613b      	str	r3, [r7, #16]
 800b11c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b11e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b124:	2300      	movs	r3, #0
 800b126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b128:	2300      	movs	r3, #0
 800b12a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b12c:	f107 0314 	add.w	r3, r7, #20
 800b130:	4619      	mov	r1, r3
 800b132:	481b      	ldr	r0, [pc, #108]	@ (800b1a0 <HAL_HCD_MspInit+0xc0>)
 800b134:	f7f7 ffa2 	bl	800307c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b138:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b13c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13e:	2302      	movs	r3, #2
 800b140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b142:	2300      	movs	r3, #0
 800b144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b146:	2300      	movs	r3, #0
 800b148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b14a:	230a      	movs	r3, #10
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b14e:	f107 0314 	add.w	r3, r7, #20
 800b152:	4619      	mov	r1, r3
 800b154:	4812      	ldr	r0, [pc, #72]	@ (800b1a0 <HAL_HCD_MspInit+0xc0>)
 800b156:	f7f7 ff91 	bl	800307c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b15a:	4b10      	ldr	r3, [pc, #64]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b15e:	4a0f      	ldr	r2, [pc, #60]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b164:	6353      	str	r3, [r2, #52]	@ 0x34
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	4b0c      	ldr	r3, [pc, #48]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b16e:	4a0b      	ldr	r2, [pc, #44]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b174:	6453      	str	r3, [r2, #68]	@ 0x44
 800b176:	4b09      	ldr	r3, [pc, #36]	@ (800b19c <HAL_HCD_MspInit+0xbc>)
 800b178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b17a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	2043      	movs	r0, #67	@ 0x43
 800b188:	f7f7 fbc3 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b18c:	2043      	movs	r0, #67	@ 0x43
 800b18e:	f7f7 fbdc 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b192:	bf00      	nop
 800b194:	3728      	adds	r7, #40	@ 0x28
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	40023800 	.word	0x40023800
 800b1a0:	40020000 	.word	0x40020000

0800b1a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe ff6d 	bl	800a092 <USBH_LL_IncTimer>
}
 800b1b8:	bf00      	nop
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe ffa9 	bl	800a126 <USBH_LL_Connect>
}
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe ffb2 	bl	800a154 <USBH_LL_Disconnect>
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	70fb      	strb	r3, [r7, #3]
 800b204:	4613      	mov	r3, r2
 800b206:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe ff5f 	bl	800a0e6 <USBH_LL_PortEnabled>
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe ff5f 	bl	800a102 <USBH_LL_PortDisabled>
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d12a      	bne.n	800b2b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b25e:	4a18      	ldr	r2, [pc, #96]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a15      	ldr	r2, [pc, #84]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b26a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b26e:	4b14      	ldr	r3, [pc, #80]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b270:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b274:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b276:	4b12      	ldr	r3, [pc, #72]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b278:	2208      	movs	r2, #8
 800b27a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b27c:	4b10      	ldr	r3, [pc, #64]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b27e:	2201      	movs	r2, #1
 800b280:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b282:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b284:	2200      	movs	r2, #0
 800b286:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b288:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b28a:	2202      	movs	r2, #2
 800b28c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b28e:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b290:	2200      	movs	r2, #0
 800b292:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b294:	480a      	ldr	r0, [pc, #40]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b296:	f7f8 f8d7 	bl	8003448 <HAL_HCD_Init>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b2a0:	f7f6 f9ce 	bl	8001640 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2a4:	4806      	ldr	r0, [pc, #24]	@ (800b2c0 <USBH_LL_Init+0x74>)
 800b2a6:	f7f8 fd37 	bl	8003d18 <HAL_HCD_GetCurrentFrame>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7fe fee0 	bl	800a074 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	2000089c 	.word	0x2000089c

0800b2c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7f8 fca4 	bl	8003c28 <HAL_HCD_Start>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 f95e 	bl	800b5a8 <USBH_Get_USB_Status>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b310:	4618      	mov	r0, r3
 800b312:	f7f8 fcac 	bl	8003c6e <HAL_HCD_Stop>
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 f943 	bl	800b5a8 <USBH_Get_USB_Status>
 800b322:	4603      	mov	r3, r0
 800b324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b326:	7bbb      	ldrb	r3, [r7, #14]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b338:	2301      	movs	r3, #1
 800b33a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b342:	4618      	mov	r0, r3
 800b344:	f7f8 fcf6 	bl	8003d34 <HAL_HCD_GetCurrentSpeed>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d00c      	beq.n	800b368 <USBH_LL_GetSpeed+0x38>
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d80d      	bhi.n	800b36e <USBH_LL_GetSpeed+0x3e>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <USBH_LL_GetSpeed+0x2c>
 800b356:	2b01      	cmp	r3, #1
 800b358:	d003      	beq.n	800b362 <USBH_LL_GetSpeed+0x32>
 800b35a:	e008      	b.n	800b36e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
    break;
 800b360:	e008      	b.n	800b374 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b362:	2301      	movs	r3, #1
 800b364:	73fb      	strb	r3, [r7, #15]
    break;
 800b366:	e005      	b.n	800b374 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b368:	2302      	movs	r3, #2
 800b36a:	73fb      	strb	r3, [r7, #15]
    break;
 800b36c:	e002      	b.n	800b374 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b36e:	2301      	movs	r3, #1
 800b370:	73fb      	strb	r3, [r7, #15]
    break;
 800b372:	bf00      	nop
  }
  return  speed;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b394:	4618      	mov	r0, r3
 800b396:	f7f8 fc87 	bl	8003ca8 <HAL_HCD_ResetPort>
 800b39a:	4603      	mov	r3, r0
 800b39c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 f901 	bl	800b5a8 <USBH_Get_USB_Status>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3c6:	78fa      	ldrb	r2, [r7, #3]
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7f8 fc8f 	bl	8003cee <HAL_HCD_HC_GetXferCount>
 800b3d0:	4603      	mov	r3, r0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3da:	b590      	push	{r4, r7, lr}
 800b3dc:	b089      	sub	sp, #36	@ 0x24
 800b3de:	af04      	add	r7, sp, #16
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	4608      	mov	r0, r1
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	70fb      	strb	r3, [r7, #3]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	70bb      	strb	r3, [r7, #2]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b402:	787c      	ldrb	r4, [r7, #1]
 800b404:	78ba      	ldrb	r2, [r7, #2]
 800b406:	78f9      	ldrb	r1, [r7, #3]
 800b408:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b40a:	9302      	str	r3, [sp, #8]
 800b40c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	4623      	mov	r3, r4
 800b41a:	f7f8 f87c 	bl	8003516 <HAL_HCD_HC_Init>
 800b41e:	4603      	mov	r3, r0
 800b420:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f8bf 	bl	800b5a8 <USBH_Get_USB_Status>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b42e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	bd90      	pop	{r4, r7, pc}

0800b438 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b452:	78fa      	ldrb	r2, [r7, #3]
 800b454:	4611      	mov	r1, r2
 800b456:	4618      	mov	r0, r3
 800b458:	f7f8 f915 	bl	8003686 <HAL_HCD_HC_Halt>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 f8a0 	bl	800b5a8 <USBH_Get_USB_Status>
 800b468:	4603      	mov	r3, r0
 800b46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b476:	b590      	push	{r4, r7, lr}
 800b478:	b089      	sub	sp, #36	@ 0x24
 800b47a:	af04      	add	r7, sp, #16
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	4608      	mov	r0, r1
 800b480:	4611      	mov	r1, r2
 800b482:	461a      	mov	r2, r3
 800b484:	4603      	mov	r3, r0
 800b486:	70fb      	strb	r3, [r7, #3]
 800b488:	460b      	mov	r3, r1
 800b48a:	70bb      	strb	r3, [r7, #2]
 800b48c:	4613      	mov	r3, r2
 800b48e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b49e:	787c      	ldrb	r4, [r7, #1]
 800b4a0:	78ba      	ldrb	r2, [r7, #2]
 800b4a2:	78f9      	ldrb	r1, [r7, #3]
 800b4a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b4a8:	9303      	str	r3, [sp, #12]
 800b4aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4ac:	9302      	str	r3, [sp, #8]
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	4623      	mov	r3, r4
 800b4ba:	f7f8 f907 	bl	80036cc <HAL_HCD_HC_SubmitRequest>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 f86f 	bl	800b5a8 <USBH_Get_USB_Status>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd90      	pop	{r4, r7, pc}

0800b4d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4ea:	78fa      	ldrb	r2, [r7, #3]
 800b4ec:	4611      	mov	r1, r2
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7f8 fbe8 	bl	8003cc4 <HAL_HCD_HC_GetURBState>
 800b4f4:	4603      	mov	r3, r0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	460b      	mov	r3, r1
 800b508:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b510:	2b01      	cmp	r3, #1
 800b512:	d103      	bne.n	800b51c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b514:	78fb      	ldrb	r3, [r7, #3]
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f872 	bl	800b600 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b51c:	20c8      	movs	r0, #200	@ 0xc8
 800b51e:	f7f6 fcd3 	bl	8001ec8 <HAL_Delay>
  return USBH_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
 800b538:	4613      	mov	r3, r2
 800b53a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b542:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	68f9      	ldr	r1, [r7, #12]
 800b548:	4613      	mov	r3, r2
 800b54a:	011b      	lsls	r3, r3, #4
 800b54c:	1a9b      	subs	r3, r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	440b      	add	r3, r1
 800b552:	3317      	adds	r3, #23
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b55a:	78fa      	ldrb	r2, [r7, #3]
 800b55c:	68f9      	ldr	r1, [r7, #12]
 800b55e:	4613      	mov	r3, r2
 800b560:	011b      	lsls	r3, r3, #4
 800b562:	1a9b      	subs	r3, r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	440b      	add	r3, r1
 800b568:	333c      	adds	r3, #60	@ 0x3c
 800b56a:	78ba      	ldrb	r2, [r7, #2]
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	e009      	b.n	800b584 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b570:	78fa      	ldrb	r2, [r7, #3]
 800b572:	68f9      	ldr	r1, [r7, #12]
 800b574:	4613      	mov	r3, r2
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	1a9b      	subs	r3, r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	440b      	add	r3, r1
 800b57e:	333d      	adds	r3, #61	@ 0x3d
 800b580:	78ba      	ldrb	r2, [r7, #2]
 800b582:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7f6 fc94 	bl	8001ec8 <HAL_Delay>
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d817      	bhi.n	800b5ec <USBH_Get_USB_Status+0x44>
 800b5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c4 <USBH_Get_USB_Status+0x1c>)
 800b5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c2:	bf00      	nop
 800b5c4:	0800b5d5 	.word	0x0800b5d5
 800b5c8:	0800b5db 	.word	0x0800b5db
 800b5cc:	0800b5e1 	.word	0x0800b5e1
 800b5d0:	0800b5e7 	.word	0x0800b5e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d8:	e00b      	b.n	800b5f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5da:	2302      	movs	r3, #2
 800b5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b5de:	e008      	b.n	800b5f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e4:	e005      	b.n	800b5f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ea:	e002      	b.n	800b5f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f0:	bf00      	nop
  }
  return usb_status;
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d102      	bne.n	800b61a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b614:	2300      	movs	r3, #0
 800b616:	73fb      	strb	r3, [r7, #15]
 800b618:	e001      	b.n	800b61e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b61a:	2301      	movs	r3, #1
 800b61c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	461a      	mov	r2, r3
 800b622:	2101      	movs	r1, #1
 800b624:	4803      	ldr	r0, [pc, #12]	@ (800b634 <MX_DriverVbusFS+0x34>)
 800b626:	f7f7 fedd 	bl	80033e4 <HAL_GPIO_WritePin>
}
 800b62a:	bf00      	nop
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	40020800 	.word	0x40020800

0800b638 <malloc>:
 800b638:	4b02      	ldr	r3, [pc, #8]	@ (800b644 <malloc+0xc>)
 800b63a:	4601      	mov	r1, r0
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	f000 b82d 	b.w	800b69c <_malloc_r>
 800b642:	bf00      	nop
 800b644:	2000003c 	.word	0x2000003c

0800b648 <free>:
 800b648:	4b02      	ldr	r3, [pc, #8]	@ (800b654 <free+0xc>)
 800b64a:	4601      	mov	r1, r0
 800b64c:	6818      	ldr	r0, [r3, #0]
 800b64e:	f000 b8f5 	b.w	800b83c <_free_r>
 800b652:	bf00      	nop
 800b654:	2000003c 	.word	0x2000003c

0800b658 <sbrk_aligned>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	4e0f      	ldr	r6, [pc, #60]	@ (800b698 <sbrk_aligned+0x40>)
 800b65c:	460c      	mov	r4, r1
 800b65e:	6831      	ldr	r1, [r6, #0]
 800b660:	4605      	mov	r5, r0
 800b662:	b911      	cbnz	r1, 800b66a <sbrk_aligned+0x12>
 800b664:	f000 f8ae 	bl	800b7c4 <_sbrk_r>
 800b668:	6030      	str	r0, [r6, #0]
 800b66a:	4621      	mov	r1, r4
 800b66c:	4628      	mov	r0, r5
 800b66e:	f000 f8a9 	bl	800b7c4 <_sbrk_r>
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	d103      	bne.n	800b67e <sbrk_aligned+0x26>
 800b676:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b67a:	4620      	mov	r0, r4
 800b67c:	bd70      	pop	{r4, r5, r6, pc}
 800b67e:	1cc4      	adds	r4, r0, #3
 800b680:	f024 0403 	bic.w	r4, r4, #3
 800b684:	42a0      	cmp	r0, r4
 800b686:	d0f8      	beq.n	800b67a <sbrk_aligned+0x22>
 800b688:	1a21      	subs	r1, r4, r0
 800b68a:	4628      	mov	r0, r5
 800b68c:	f000 f89a 	bl	800b7c4 <_sbrk_r>
 800b690:	3001      	adds	r0, #1
 800b692:	d1f2      	bne.n	800b67a <sbrk_aligned+0x22>
 800b694:	e7ef      	b.n	800b676 <sbrk_aligned+0x1e>
 800b696:	bf00      	nop
 800b698:	20000c7c 	.word	0x20000c7c

0800b69c <_malloc_r>:
 800b69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a0:	1ccd      	adds	r5, r1, #3
 800b6a2:	f025 0503 	bic.w	r5, r5, #3
 800b6a6:	3508      	adds	r5, #8
 800b6a8:	2d0c      	cmp	r5, #12
 800b6aa:	bf38      	it	cc
 800b6ac:	250c      	movcc	r5, #12
 800b6ae:	2d00      	cmp	r5, #0
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	db01      	blt.n	800b6b8 <_malloc_r+0x1c>
 800b6b4:	42a9      	cmp	r1, r5
 800b6b6:	d904      	bls.n	800b6c2 <_malloc_r+0x26>
 800b6b8:	230c      	movs	r3, #12
 800b6ba:	6033      	str	r3, [r6, #0]
 800b6bc:	2000      	movs	r0, #0
 800b6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b798 <_malloc_r+0xfc>
 800b6c6:	f000 f869 	bl	800b79c <__malloc_lock>
 800b6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ce:	461c      	mov	r4, r3
 800b6d0:	bb44      	cbnz	r4, 800b724 <_malloc_r+0x88>
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f7ff ffbf 	bl	800b658 <sbrk_aligned>
 800b6da:	1c43      	adds	r3, r0, #1
 800b6dc:	4604      	mov	r4, r0
 800b6de:	d158      	bne.n	800b792 <_malloc_r+0xf6>
 800b6e0:	f8d8 4000 	ldr.w	r4, [r8]
 800b6e4:	4627      	mov	r7, r4
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	d143      	bne.n	800b772 <_malloc_r+0xd6>
 800b6ea:	2c00      	cmp	r4, #0
 800b6ec:	d04b      	beq.n	800b786 <_malloc_r+0xea>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	eb04 0903 	add.w	r9, r4, r3
 800b6f8:	f000 f864 	bl	800b7c4 <_sbrk_r>
 800b6fc:	4581      	cmp	r9, r0
 800b6fe:	d142      	bne.n	800b786 <_malloc_r+0xea>
 800b700:	6821      	ldr	r1, [r4, #0]
 800b702:	1a6d      	subs	r5, r5, r1
 800b704:	4629      	mov	r1, r5
 800b706:	4630      	mov	r0, r6
 800b708:	f7ff ffa6 	bl	800b658 <sbrk_aligned>
 800b70c:	3001      	adds	r0, #1
 800b70e:	d03a      	beq.n	800b786 <_malloc_r+0xea>
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	442b      	add	r3, r5
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	f8d8 3000 	ldr.w	r3, [r8]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	bb62      	cbnz	r2, 800b778 <_malloc_r+0xdc>
 800b71e:	f8c8 7000 	str.w	r7, [r8]
 800b722:	e00f      	b.n	800b744 <_malloc_r+0xa8>
 800b724:	6822      	ldr	r2, [r4, #0]
 800b726:	1b52      	subs	r2, r2, r5
 800b728:	d420      	bmi.n	800b76c <_malloc_r+0xd0>
 800b72a:	2a0b      	cmp	r2, #11
 800b72c:	d917      	bls.n	800b75e <_malloc_r+0xc2>
 800b72e:	1961      	adds	r1, r4, r5
 800b730:	42a3      	cmp	r3, r4
 800b732:	6025      	str	r5, [r4, #0]
 800b734:	bf18      	it	ne
 800b736:	6059      	strne	r1, [r3, #4]
 800b738:	6863      	ldr	r3, [r4, #4]
 800b73a:	bf08      	it	eq
 800b73c:	f8c8 1000 	streq.w	r1, [r8]
 800b740:	5162      	str	r2, [r4, r5]
 800b742:	604b      	str	r3, [r1, #4]
 800b744:	4630      	mov	r0, r6
 800b746:	f000 f82f 	bl	800b7a8 <__malloc_unlock>
 800b74a:	f104 000b 	add.w	r0, r4, #11
 800b74e:	1d23      	adds	r3, r4, #4
 800b750:	f020 0007 	bic.w	r0, r0, #7
 800b754:	1ac2      	subs	r2, r0, r3
 800b756:	bf1c      	itt	ne
 800b758:	1a1b      	subne	r3, r3, r0
 800b75a:	50a3      	strne	r3, [r4, r2]
 800b75c:	e7af      	b.n	800b6be <_malloc_r+0x22>
 800b75e:	6862      	ldr	r2, [r4, #4]
 800b760:	42a3      	cmp	r3, r4
 800b762:	bf0c      	ite	eq
 800b764:	f8c8 2000 	streq.w	r2, [r8]
 800b768:	605a      	strne	r2, [r3, #4]
 800b76a:	e7eb      	b.n	800b744 <_malloc_r+0xa8>
 800b76c:	4623      	mov	r3, r4
 800b76e:	6864      	ldr	r4, [r4, #4]
 800b770:	e7ae      	b.n	800b6d0 <_malloc_r+0x34>
 800b772:	463c      	mov	r4, r7
 800b774:	687f      	ldr	r7, [r7, #4]
 800b776:	e7b6      	b.n	800b6e6 <_malloc_r+0x4a>
 800b778:	461a      	mov	r2, r3
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	42a3      	cmp	r3, r4
 800b77e:	d1fb      	bne.n	800b778 <_malloc_r+0xdc>
 800b780:	2300      	movs	r3, #0
 800b782:	6053      	str	r3, [r2, #4]
 800b784:	e7de      	b.n	800b744 <_malloc_r+0xa8>
 800b786:	230c      	movs	r3, #12
 800b788:	6033      	str	r3, [r6, #0]
 800b78a:	4630      	mov	r0, r6
 800b78c:	f000 f80c 	bl	800b7a8 <__malloc_unlock>
 800b790:	e794      	b.n	800b6bc <_malloc_r+0x20>
 800b792:	6005      	str	r5, [r0, #0]
 800b794:	e7d6      	b.n	800b744 <_malloc_r+0xa8>
 800b796:	bf00      	nop
 800b798:	20000c80 	.word	0x20000c80

0800b79c <__malloc_lock>:
 800b79c:	4801      	ldr	r0, [pc, #4]	@ (800b7a4 <__malloc_lock+0x8>)
 800b79e:	f000 b84b 	b.w	800b838 <__retarget_lock_acquire_recursive>
 800b7a2:	bf00      	nop
 800b7a4:	20000dbc 	.word	0x20000dbc

0800b7a8 <__malloc_unlock>:
 800b7a8:	4801      	ldr	r0, [pc, #4]	@ (800b7b0 <__malloc_unlock+0x8>)
 800b7aa:	f000 b846 	b.w	800b83a <__retarget_lock_release_recursive>
 800b7ae:	bf00      	nop
 800b7b0:	20000dbc 	.word	0x20000dbc

0800b7b4 <memset>:
 800b7b4:	4402      	add	r2, r0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d100      	bne.n	800b7be <memset+0xa>
 800b7bc:	4770      	bx	lr
 800b7be:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c2:	e7f9      	b.n	800b7b8 <memset+0x4>

0800b7c4 <_sbrk_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4d06      	ldr	r5, [pc, #24]	@ (800b7e0 <_sbrk_r+0x1c>)
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	602b      	str	r3, [r5, #0]
 800b7d0:	f7f6 fa96 	bl	8001d00 <_sbrk>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d102      	bne.n	800b7de <_sbrk_r+0x1a>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	b103      	cbz	r3, 800b7de <_sbrk_r+0x1a>
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	20000dc0 	.word	0x20000dc0

0800b7e4 <__errno>:
 800b7e4:	4b01      	ldr	r3, [pc, #4]	@ (800b7ec <__errno+0x8>)
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	2000003c 	.word	0x2000003c

0800b7f0 <__libc_init_array>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b828 <__libc_init_array+0x38>)
 800b7f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b82c <__libc_init_array+0x3c>)
 800b7f6:	1b64      	subs	r4, r4, r5
 800b7f8:	10a4      	asrs	r4, r4, #2
 800b7fa:	2600      	movs	r6, #0
 800b7fc:	42a6      	cmp	r6, r4
 800b7fe:	d109      	bne.n	800b814 <__libc_init_array+0x24>
 800b800:	4d0b      	ldr	r5, [pc, #44]	@ (800b830 <__libc_init_array+0x40>)
 800b802:	4c0c      	ldr	r4, [pc, #48]	@ (800b834 <__libc_init_array+0x44>)
 800b804:	f000 f864 	bl	800b8d0 <_init>
 800b808:	1b64      	subs	r4, r4, r5
 800b80a:	10a4      	asrs	r4, r4, #2
 800b80c:	2600      	movs	r6, #0
 800b80e:	42a6      	cmp	r6, r4
 800b810:	d105      	bne.n	800b81e <__libc_init_array+0x2e>
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	f855 3b04 	ldr.w	r3, [r5], #4
 800b818:	4798      	blx	r3
 800b81a:	3601      	adds	r6, #1
 800b81c:	e7ee      	b.n	800b7fc <__libc_init_array+0xc>
 800b81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b822:	4798      	blx	r3
 800b824:	3601      	adds	r6, #1
 800b826:	e7f2      	b.n	800b80e <__libc_init_array+0x1e>
 800b828:	0800b918 	.word	0x0800b918
 800b82c:	0800b918 	.word	0x0800b918
 800b830:	0800b918 	.word	0x0800b918
 800b834:	0800b91c 	.word	0x0800b91c

0800b838 <__retarget_lock_acquire_recursive>:
 800b838:	4770      	bx	lr

0800b83a <__retarget_lock_release_recursive>:
 800b83a:	4770      	bx	lr

0800b83c <_free_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4605      	mov	r5, r0
 800b840:	2900      	cmp	r1, #0
 800b842:	d041      	beq.n	800b8c8 <_free_r+0x8c>
 800b844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b848:	1f0c      	subs	r4, r1, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bfb8      	it	lt
 800b84e:	18e4      	addlt	r4, r4, r3
 800b850:	f7ff ffa4 	bl	800b79c <__malloc_lock>
 800b854:	4a1d      	ldr	r2, [pc, #116]	@ (800b8cc <_free_r+0x90>)
 800b856:	6813      	ldr	r3, [r2, #0]
 800b858:	b933      	cbnz	r3, 800b868 <_free_r+0x2c>
 800b85a:	6063      	str	r3, [r4, #4]
 800b85c:	6014      	str	r4, [r2, #0]
 800b85e:	4628      	mov	r0, r5
 800b860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b864:	f7ff bfa0 	b.w	800b7a8 <__malloc_unlock>
 800b868:	42a3      	cmp	r3, r4
 800b86a:	d908      	bls.n	800b87e <_free_r+0x42>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	1821      	adds	r1, r4, r0
 800b870:	428b      	cmp	r3, r1
 800b872:	bf01      	itttt	eq
 800b874:	6819      	ldreq	r1, [r3, #0]
 800b876:	685b      	ldreq	r3, [r3, #4]
 800b878:	1809      	addeq	r1, r1, r0
 800b87a:	6021      	streq	r1, [r4, #0]
 800b87c:	e7ed      	b.n	800b85a <_free_r+0x1e>
 800b87e:	461a      	mov	r2, r3
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	b10b      	cbz	r3, 800b888 <_free_r+0x4c>
 800b884:	42a3      	cmp	r3, r4
 800b886:	d9fa      	bls.n	800b87e <_free_r+0x42>
 800b888:	6811      	ldr	r1, [r2, #0]
 800b88a:	1850      	adds	r0, r2, r1
 800b88c:	42a0      	cmp	r0, r4
 800b88e:	d10b      	bne.n	800b8a8 <_free_r+0x6c>
 800b890:	6820      	ldr	r0, [r4, #0]
 800b892:	4401      	add	r1, r0
 800b894:	1850      	adds	r0, r2, r1
 800b896:	4283      	cmp	r3, r0
 800b898:	6011      	str	r1, [r2, #0]
 800b89a:	d1e0      	bne.n	800b85e <_free_r+0x22>
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	6053      	str	r3, [r2, #4]
 800b8a2:	4408      	add	r0, r1
 800b8a4:	6010      	str	r0, [r2, #0]
 800b8a6:	e7da      	b.n	800b85e <_free_r+0x22>
 800b8a8:	d902      	bls.n	800b8b0 <_free_r+0x74>
 800b8aa:	230c      	movs	r3, #12
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	e7d6      	b.n	800b85e <_free_r+0x22>
 800b8b0:	6820      	ldr	r0, [r4, #0]
 800b8b2:	1821      	adds	r1, r4, r0
 800b8b4:	428b      	cmp	r3, r1
 800b8b6:	bf04      	itt	eq
 800b8b8:	6819      	ldreq	r1, [r3, #0]
 800b8ba:	685b      	ldreq	r3, [r3, #4]
 800b8bc:	6063      	str	r3, [r4, #4]
 800b8be:	bf04      	itt	eq
 800b8c0:	1809      	addeq	r1, r1, r0
 800b8c2:	6021      	streq	r1, [r4, #0]
 800b8c4:	6054      	str	r4, [r2, #4]
 800b8c6:	e7ca      	b.n	800b85e <_free_r+0x22>
 800b8c8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20000c80 	.word	0x20000c80

0800b8d0 <_init>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	bf00      	nop
 800b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d6:	bc08      	pop	{r3}
 800b8d8:	469e      	mov	lr, r3
 800b8da:	4770      	bx	lr

0800b8dc <_fini>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	bf00      	nop
 800b8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e2:	bc08      	pop	{r3}
 800b8e4:	469e      	mov	lr, r3
 800b8e6:	4770      	bx	lr
