
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b854  0800b854  0000d090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b854  0800b854  0000c854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b85c  0800b85c  0000d090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b85c  0800b85c  0000c85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b860  0800b860  0000c860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800b864  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d090  2**0
                  CONTENTS
 10 .bss          00000d3c  20000090  20000090  0000d090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dcc  20000dcc  0000d090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf83  00000000  00000000  0000d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b25  00000000  00000000  0002a043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  0002eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c2  00000000  00000000  00030510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bce  00000000  00000000  000318d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227e6  00000000  00000000  000584a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e166d  00000000  00000000  0007ac86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015c2f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ef0  00000000  00000000  0015c338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00163228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b818 	.word	0x0800b818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800b818 	.word	0x0800b818

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 8000508:	e005      	b.n	8000516 <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 800050a:	89bb      	ldrh	r3, [r7, #12]
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 8000516:	89bb      	ldrh	r3, [r7, #12]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d8f6      	bhi.n	800050a <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f002 ff01 	bl	800332c <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <antirebote+0x9c>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d109      	bne.n	800054c <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	4916      	ldr	r1, [pc, #88]	@ (8000594 <antirebote+0xa0>)
 800053c:	7aba      	ldrb	r2, [r7, #10]
 800053e:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <antirebote+0x9c>)
 8000544:	2101      	movs	r1, #1
 8000546:	54d1      	strb	r1, [r2, r3]
        return false;
 8000548:	2300      	movs	r3, #0
 800054a:	e01d      	b.n	8000588 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <antirebote+0xa0>)
 8000550:	5cd3      	ldrb	r3, [r2, r3]
 8000552:	7aba      	ldrb	r2, [r7, #10]
 8000554:	429a      	cmp	r2, r3
 8000556:	d016      	beq.n	8000586 <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000558:	2032      	movs	r0, #50	@ 0x32
 800055a:	f001 fca3 	bl	8001ea4 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f002 fee2 	bl	800332c <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 800056c:	7aba      	ldrb	r2, [r7, #10]
 800056e:	7a7b      	ldrb	r3, [r7, #9]
 8000570:	429a      	cmp	r2, r3
 8000572:	d108      	bne.n	8000586 <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4907      	ldr	r1, [pc, #28]	@ (8000594 <antirebote+0xa0>)
 8000578:	7a7a      	ldrb	r2, [r7, #9]
 800057a:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 800057c:	7a7b      	ldrb	r3, [r7, #9]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <antirebote+0x92>
            {
                pulsado = true;
 8000582:	2301      	movs	r3, #1
 8000584:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000ac 	.word	0x200000ac
 8000594:	200000bc 	.word	0x200000bc

08000598 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80005a2:	f000 f815 	bl	80005d0 <promediar_sensores>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000032c 	.word	0x2000032c

080005b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <HAL_ADC_ConvCpltCallback+0x18>)
 80005be:	f000 f807 	bl	80005d0 <promediar_sensores>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200003f4 	.word	0x200003f4

080005d0 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e012      	b.n	800060c <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4413      	add	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3302      	adds	r3, #2
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3304      	adds	r3, #4
 8000604:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b31      	cmp	r3, #49	@ 0x31
 8000610:	dde9      	ble.n	80005e6 <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <promediar_sensores+0x70>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	091b      	lsrs	r3, r3, #4
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <promediar_sensores+0x74>)
 8000620:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <promediar_sensores+0x70>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <promediar_sensores+0x78>)
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	51eb851f 	.word	0x51eb851f
 8000644:	200000ce 	.word	0x200000ce
 8000648:	200000cc 	.word	0x200000cc

0800064c <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000654:	f001 fc26 	bl	8001ea4 <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065e:	4835      	ldr	r0, [pc, #212]	@ (8000734 <auto_calibracion+0xe8>)
 8000660:	f002 fe7c 	bl	800335c <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 8000664:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000668:	f001 fc1c 	bl	8001ea4 <HAL_Delay>

    der_cerca = sensor_der_avg;
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <auto_calibracion+0xec>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b32      	ldr	r3, [pc, #200]	@ (800073c <auto_calibracion+0xf0>)
 8000672:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067a:	482e      	ldr	r0, [pc, #184]	@ (8000734 <auto_calibracion+0xe8>)
 800067c:	f002 fe6e 	bl	800335c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000686:	482b      	ldr	r0, [pc, #172]	@ (8000734 <auto_calibracion+0xe8>)
 8000688:	f002 fe68 	bl	800335c <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 800068c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000690:	f001 fc08 	bl	8001ea4 <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <auto_calibracion+0xf4>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <auto_calibracion+0xf8>)
 800069a:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a2:	4824      	ldr	r0, [pc, #144]	@ (8000734 <auto_calibracion+0xe8>)
 80006a4:	f002 fe5a 	bl	800335c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ae:	4821      	ldr	r0, [pc, #132]	@ (8000734 <auto_calibracion+0xe8>)
 80006b0:	f002 fe54 	bl	800335c <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 80006b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006b8:	f001 fbf4 	bl	8001ea4 <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <auto_calibracion+0xf4>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <auto_calibracion+0xfc>)
 80006c2:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <auto_calibracion+0xec>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <auto_calibracion+0x100>)
 80006ca:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <auto_calibracion+0xf8>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <auto_calibracion+0xfc>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <auto_calibracion+0x104>)
 80006e2:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <auto_calibracion+0xf0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <auto_calibracion+0x100>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	0fda      	lsrs	r2, r3, #31
 80006f2:	4413      	add	r3, r2
 80006f4:	105b      	asrs	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <auto_calibracion+0x108>)
 80006fa:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <auto_calibracion+0xe8>)
 8000704:	f002 fe2a 	bl	800335c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <auto_calibracion+0xe8>)
 8000710:	f002 fe24 	bl	800335c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000718:	f001 fbc4 	bl	8001ea4 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <auto_calibracion+0xe8>)
 8000724:	f002 fe1a 	bl	800335c <HAL_GPIO_WritePin>

    calibrado = true;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <auto_calibracion+0x10c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020c00 	.word	0x40020c00
 8000738:	200000ce 	.word	0x200000ce
 800073c:	20000006 	.word	0x20000006
 8000740:	200000cc 	.word	0x200000cc
 8000744:	20000000 	.word	0x20000000
 8000748:	20000002 	.word	0x20000002
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004
 8000754:	2000000a 	.word	0x2000000a
 8000758:	200000d0 	.word	0x200000d0

0800075c <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
    if (!calibrado)
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <controlar_linea_recta+0x60>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d120      	bne.n	80007b2 <controlar_linea_recta+0x56>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca);
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <controlar_linea_recta+0x64>)
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <controlar_linea_recta+0x68>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	bf34      	ite	cc
 800077c:	2301      	movcc	r3, #1
 800077e:	2300      	movcs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca);
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <controlar_linea_recta+0x6c>)
 8000784:	881a      	ldrh	r2, [r3, #0]
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <controlar_linea_recta+0x70>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	bf34      	ite	cc
 800078e:	2301      	movcc	r3, #1
 8000790:	2300      	movcs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <controlar_linea_recta+0x44>
    {
        correccion_derecha();
 800079a:	f000 f991 	bl	8000ac0 <correccion_derecha>
 800079e:	e009      	b.n	80007b4 <controlar_linea_recta+0x58>
    }
    else if (muy_cerca_der)
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <controlar_linea_recta+0x50>
    {
        correccion_izquierda();
 80007a6:	f000 f979 	bl	8000a9c <correccion_izquierda>
 80007aa:	e003      	b.n	80007b4 <controlar_linea_recta+0x58>
    }
    else
    {
        avanza();
 80007ac:	f000 f8b6 	bl	800091c <avanza>
 80007b0:	e000      	b.n	80007b4 <controlar_linea_recta+0x58>
        return;
 80007b2:	bf00      	nop
    }
}
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000d0 	.word	0x200000d0
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	20000000 	.word	0x20000000
 80007c8:	200000ce 	.word	0x200000ce
 80007cc:	20000006 	.word	0x20000006

080007d0 <activar_modo_sprint>:
extern TIM_HandleTypeDef htim3; // usa el timer 3 para PWM

uint16_t VELOCIDAD_AVANCE = VELOCIDAD_EXPLORACION; // Inicializa en modo lento

void activar_modo_sprint(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    VELOCIDAD_AVANCE = VELOCIDAD_SPRINT;
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <activar_modo_sprint+0x18>)
 80007d6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80007da:	801a      	strh	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	2000000c 	.word	0x2000000c

080007ec <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80007f0:	2108      	movs	r1, #8
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <control_motor_init+0x1c>)
 80007f4:	f006 fbdc 	bl	8006fb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 80007f8:	210c      	movs	r1, #12
 80007fa:	4803      	ldr	r0, [pc, #12]	@ (8000808 <control_motor_init+0x1c>)
 80007fc:	f006 fbd8 	bl	8006fb0 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000800:	f000 f88c 	bl	800091c <avanza>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200002e0 	.word	0x200002e0

0800080c <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <set_motor_izq+0x1c>
 8000822:	2b01      	cmp	r3, #1
 8000824:	d00d      	beq.n	8000842 <set_motor_izq+0x36>
 8000826:	e019      	b.n	800085c <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800082e:	4817      	ldr	r0, [pc, #92]	@ (800088c <set_motor_izq+0x80>)
 8000830:	f002 fd94 	bl	800335c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	4814      	ldr	r0, [pc, #80]	@ (800088c <set_motor_izq+0x80>)
 800083c:	f002 fd8e 	bl	800335c <HAL_GPIO_WritePin>
        break;
 8000840:	e01b      	b.n	800087a <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000848:	4810      	ldr	r0, [pc, #64]	@ (800088c <set_motor_izq+0x80>)
 800084a:	f002 fd87 	bl	800335c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <set_motor_izq+0x80>)
 8000856:	f002 fd81 	bl	800335c <HAL_GPIO_WritePin>
        break;
 800085a:	e00e      	b.n	800087a <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000862:	480a      	ldr	r0, [pc, #40]	@ (800088c <set_motor_izq+0x80>)
 8000864:	f002 fd7a 	bl	800335c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800086e:	4807      	ldr	r0, [pc, #28]	@ (800088c <set_motor_izq+0x80>)
 8000870:	f002 fd74 	bl	800335c <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000874:	2300      	movs	r3, #0
 8000876:	80bb      	strh	r3, [r7, #4]
        break;
 8000878:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <set_motor_izq+0x84>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	88ba      	ldrh	r2, [r7, #4]
 8000880:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40020400 	.word	0x40020400
 8000890:	200002e0 	.word	0x200002e0

08000894 <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <set_motor_der+0x1c>
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d00d      	beq.n	80008ca <set_motor_der+0x36>
 80008ae:	e019      	b.n	80008e4 <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b6:	4817      	ldr	r0, [pc, #92]	@ (8000914 <set_motor_der+0x80>)
 80008b8:	f002 fd50 	bl	800335c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c2:	4814      	ldr	r0, [pc, #80]	@ (8000914 <set_motor_der+0x80>)
 80008c4:	f002 fd4a 	bl	800335c <HAL_GPIO_WritePin>
        break;
 80008c8:	e01b      	b.n	8000902 <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d0:	4810      	ldr	r0, [pc, #64]	@ (8000914 <set_motor_der+0x80>)
 80008d2:	f002 fd43 	bl	800335c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008dc:	480d      	ldr	r0, [pc, #52]	@ (8000914 <set_motor_der+0x80>)
 80008de:	f002 fd3d 	bl	800335c <HAL_GPIO_WritePin>
        break;
 80008e2:	e00e      	b.n	8000902 <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ea:	480a      	ldr	r0, [pc, #40]	@ (8000914 <set_motor_der+0x80>)
 80008ec:	f002 fd36 	bl	800335c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <set_motor_der+0x80>)
 80008f8:	f002 fd30 	bl	800335c <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80008fc:	2300      	movs	r3, #0
 80008fe:	80bb      	strh	r3, [r7, #4]
        break;
 8000900:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <set_motor_der+0x84>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	88ba      	ldrh	r2, [r7, #4]
 8000908:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020400 	.word	0x40020400
 8000918:	200002e0 	.word	0x200002e0

0800091c <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <avanza+0x20>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff ff70 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <avanza+0x20>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ffae 	bl	8000894 <set_motor_der>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000000c 	.word	0x2000000c

08000940 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800094a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff5c 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000954:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff9b 	bl	8000894 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 800095e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000962:	f001 fa9f 	bl	8001ea4 <HAL_Delay>
    switch (sentido)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d817      	bhi.n	800099c <gira90izq+0x5c>
 800096c:	a201      	add	r2, pc, #4	@ (adr r2, 8000974 <gira90izq+0x34>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000985 	.word	0x08000985
 8000978:	0800098b 	.word	0x0800098b
 800097c:	08000991 	.word	0x08000991
 8000980:	08000997 	.word	0x08000997
    {
    case norte:
        sentido = oeste;
 8000984:	2303      	movs	r3, #3
 8000986:	71fb      	strb	r3, [r7, #7]
        break;
 8000988:	e008      	b.n	800099c <gira90izq+0x5c>

    case este:
        sentido = norte;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
        break;
 800098e:	e005      	b.n	800099c <gira90izq+0x5c>

    case sur:
        sentido = este;
 8000990:	2301      	movs	r3, #1
 8000992:	71fb      	strb	r3, [r7, #7]
        break;
 8000994:	e002      	b.n	800099c <gira90izq+0x5c>

    case oeste:
        sentido = sur;
 8000996:	2302      	movs	r3, #2
 8000998:	71fb      	strb	r3, [r7, #7]
        break;
 800099a:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 800099c:	f7ff ffbe 	bl	800091c <avanza>
    return sentido;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop

080009ac <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 80009b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ff26 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 80009c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff ff65 	bl	8000894 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80009ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ce:	f001 fa69 	bl	8001ea4 <HAL_Delay>
    switch (sentido)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d817      	bhi.n	8000a08 <gira90der+0x5c>
 80009d8:	a201      	add	r2, pc, #4	@ (adr r2, 80009e0 <gira90der+0x34>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	080009f1 	.word	0x080009f1
 80009e4:	080009f7 	.word	0x080009f7
 80009e8:	080009fd 	.word	0x080009fd
 80009ec:	08000a03 	.word	0x08000a03
    {
    case norte:
        sentido = este;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
        break;
 80009f4:	e008      	b.n	8000a08 <gira90der+0x5c>

    case este:
        sentido = sur;
 80009f6:	2302      	movs	r3, #2
 80009f8:	71fb      	strb	r3, [r7, #7]
        break;
 80009fa:	e005      	b.n	8000a08 <gira90der+0x5c>

    case sur:
        sentido = oeste;
 80009fc:	2303      	movs	r3, #3
 80009fe:	71fb      	strb	r3, [r7, #7]
        break;
 8000a00:	e002      	b.n	8000a08 <gira90der+0x5c>

    case oeste:
        sentido = norte;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71fb      	strb	r3, [r7, #7]
        break;
 8000a06:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000a08:	f7ff ff88 	bl	800091c <avanza>
    return sentido;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop

08000a18 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000a22:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fef0 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 8000a2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ff2f 	bl	8000894 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000a36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3a:	f001 fa33 	bl	8001ea4 <HAL_Delay>
    switch (sentido)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d817      	bhi.n	8000a74 <gira180+0x5c>
 8000a44:	a201      	add	r2, pc, #4	@ (adr r2, 8000a4c <gira180+0x34>)
 8000a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4a:	bf00      	nop
 8000a4c:	08000a5d 	.word	0x08000a5d
 8000a50:	08000a63 	.word	0x08000a63
 8000a54:	08000a69 	.word	0x08000a69
 8000a58:	08000a6f 	.word	0x08000a6f
    {
    case norte:
        sentido = sur;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	71fb      	strb	r3, [r7, #7]
        break;
 8000a60:	e008      	b.n	8000a74 <gira180+0x5c>

    case este:
        sentido = oeste;
 8000a62:	2303      	movs	r3, #3
 8000a64:	71fb      	strb	r3, [r7, #7]
        break;
 8000a66:	e005      	b.n	8000a74 <gira180+0x5c>

    case sur:
        sentido = norte;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	71fb      	strb	r3, [r7, #7]
        break;
 8000a6c:	e002      	b.n	8000a74 <gira180+0x5c>

    case oeste:
        sentido = este;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
        break;
 8000a72:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000a74:	f7ff ff52 	bl	800091c <avanza>
    return sentido;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop

08000a84 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff febe 	bl	800080c <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff fefe 	bl	8000894 <set_motor_der>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 80);  // Motor izq más lento
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <correccion_izquierda+0x20>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2250      	movs	r2, #80	@ 0x50
 8000aa6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100); // Motor der normal
 8000aa8:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <correccion_izquierda+0x20>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2264      	movs	r2, #100	@ 0x64
 8000aae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200002e0 	.word	0x200002e0

08000ac0 <correccion_derecha>:

void correccion_derecha(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100); // Motor izq normal
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <correccion_derecha+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2264      	movs	r2, #100	@ 0x64
 8000aca:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 80);  // Motor der más lento
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <correccion_derecha+0x20>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2250      	movs	r2, #80	@ 0x50
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200002e0 	.word	0x200002e0

08000ae4 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	460a      	mov	r2, r1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	4613      	mov	r3, r2
 8000af2:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000af4:	79ba      	ldrb	r2, [r7, #6]
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f996 	bl	8000e2c <laberinto_posicion_valida>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f083 0301 	eor.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000b0c:	23ff      	movs	r3, #255	@ 0xff
 8000b0e:	e00f      	b.n	8000b30 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	1e59      	subs	r1, r3, #1
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <laberinto_get_peso+0x54>)
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	00d2      	lsls	r2, r2, #3
 8000b1e:	1ad2      	subs	r2, r2, r3
 8000b20:	460b      	mov	r3, r1
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	4403      	add	r3, r0
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000d4 	.word	0x200000d4

08000b3c <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	460b      	mov	r3, r1
 8000b48:	71bb      	strb	r3, [r7, #6]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f969 	bl	8000e2c <laberinto_posicion_valida>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f083 0301 	eor.w	r3, r3, #1
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d146      	bne.n	8000bf4 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	1e59      	subs	r1, r3, #1
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	7978      	ldrb	r0, [r7, #5]
 8000b70:	4c22      	ldr	r4, [pc, #136]	@ (8000bfc <laberinto_set_muro+0xc0>)
 8000b72:	461a      	mov	r2, r3
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	1ad2      	subs	r2, r2, r3
 8000b78:	460b      	mov	r3, r1
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	4423      	add	r3, r4
 8000b84:	4403      	add	r3, r0
 8000b86:	3303      	adds	r3, #3
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	723b      	strb	r3, [r7, #8]
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	4619      	mov	r1, r3
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f000 f90d 	bl	8000db8 <laberinto_get_posicion_adyacente>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000ba2:	7b3b      	ldrb	r3, [r7, #12]
 8000ba4:	7b7a      	ldrb	r2, [r7, #13]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f93f 	bl	8000e2c <laberinto_posicion_valida>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d01c      	beq.n	8000bee <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000bb4:	797b      	ldrb	r3, [r7, #5]
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	425a      	negs	r2, r3
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	f002 0203 	and.w	r2, r2, #3
 8000bc2:	bf58      	it	pl
 8000bc4:	4253      	negpl	r3, r2
 8000bc6:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000bc8:	7b3b      	ldrb	r3, [r7, #12]
 8000bca:	1e59      	subs	r1, r3, #1
 8000bcc:	7b7b      	ldrb	r3, [r7, #13]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	7bf8      	ldrb	r0, [r7, #15]
 8000bd2:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <laberinto_set_muro+0xc0>)
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	00d2      	lsls	r2, r2, #3
 8000bd8:	1ad2      	subs	r2, r2, r3
 8000bda:	460b      	mov	r3, r1
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	1a5b      	subs	r3, r3, r1
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	4423      	add	r3, r4
 8000be6:	4403      	add	r3, r0
 8000be8:	3303      	adds	r3, #3
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000bee:	f000 f807 	bl	8000c00 <laberinto_recalcular_pesos>
 8000bf2:	e000      	b.n	8000bf6 <laberinto_set_muro+0xba>
        return;
 8000bf4:	bf00      	nop
}
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	200000d4 	.word	0x200000d4

08000c00 <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000c0e:	2314      	movs	r3, #20
 8000c10:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000c12:	e092      	b.n	8000d3a <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000c1e:	2301      	movs	r3, #1
 8000c20:	737b      	strb	r3, [r7, #13]
 8000c22:	e086      	b.n	8000d32 <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000c24:	2301      	movs	r3, #1
 8000c26:	733b      	strb	r3, [r7, #12]
 8000c28:	e07c      	b.n	8000d24 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d102      	bne.n	8000c36 <laberinto_recalcular_pesos+0x36>
 8000c30:	7b3b      	ldrb	r3, [r7, #12]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d072      	beq.n	8000d1c <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000c36:	23ff      	movs	r3, #255	@ 0xff
 8000c38:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	72bb      	strb	r3, [r7, #10]
 8000c3e:	e03a      	b.n	8000cb6 <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
 8000c42:	1e59      	subs	r1, r3, #1
 8000c44:	7b3b      	ldrb	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	7ab8      	ldrb	r0, [r7, #10]
 8000c4a:	4c42      	ldr	r4, [pc, #264]	@ (8000d54 <laberinto_recalcular_pesos+0x154>)
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	00d2      	lsls	r2, r2, #3
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	460b      	mov	r3, r1
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	1a5b      	subs	r3, r3, r1
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4423      	add	r3, r4
 8000c5e:	4403      	add	r3, r0
 8000c60:	3303      	adds	r3, #3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d122      	bne.n	8000cae <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000c68:	7b7b      	ldrb	r3, [r7, #13]
 8000c6a:	703b      	strb	r3, [r7, #0]
 8000c6c:	7b3b      	ldrb	r3, [r7, #12]
 8000c6e:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000c70:	7abb      	ldrb	r3, [r7, #10]
 8000c72:	4619      	mov	r1, r3
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f000 f89f 	bl	8000db8 <laberinto_get_posicion_adyacente>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000c7e:	793b      	ldrb	r3, [r7, #4]
 8000c80:	797a      	ldrb	r2, [r7, #5]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f8d1 	bl	8000e2c <laberinto_posicion_valida>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00f      	beq.n	8000cb0 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000c90:	793b      	ldrb	r3, [r7, #4]
 8000c92:	797a      	ldrb	r2, [r7, #5]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff24 	bl	8000ae4 <laberinto_get_peso>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	7afb      	ldrb	r3, [r7, #11]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d203      	bcs.n	8000cb0 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	72fb      	strb	r3, [r7, #11]
 8000cac:	e000      	b.n	8000cb0 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000cae:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000cb0:	7abb      	ldrb	r3, [r7, #10]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	72bb      	strb	r3, [r7, #10]
 8000cb6:	7abb      	ldrb	r3, [r7, #10]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d9c1      	bls.n	8000c40 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000cbc:	7afb      	ldrb	r3, [r7, #11]
 8000cbe:	2bff      	cmp	r3, #255	@ 0xff
 8000cc0:	d003      	beq.n	8000cca <laberinto_recalcular_pesos+0xca>
 8000cc2:	7afb      	ldrb	r3, [r7, #11]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	e000      	b.n	8000ccc <laberinto_recalcular_pesos+0xcc>
 8000cca:	23ff      	movs	r3, #255	@ 0xff
 8000ccc:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000cce:	7b7b      	ldrb	r3, [r7, #13]
 8000cd0:	1e59      	subs	r1, r3, #1
 8000cd2:	7b3b      	ldrb	r3, [r7, #12]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	481f      	ldr	r0, [pc, #124]	@ (8000d54 <laberinto_recalcular_pesos+0x154>)
 8000cd8:	461a      	mov	r2, r3
 8000cda:	00d2      	lsls	r2, r2, #3
 8000cdc:	1ad2      	subs	r2, r2, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	1a5b      	subs	r3, r3, r1
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4403      	add	r3, r0
 8000cea:	3302      	adds	r3, #2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	7a3a      	ldrb	r2, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d014      	beq.n	8000d1e <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000cf4:	7b7b      	ldrb	r3, [r7, #13]
 8000cf6:	1e59      	subs	r1, r3, #1
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4815      	ldr	r0, [pc, #84]	@ (8000d54 <laberinto_recalcular_pesos+0x154>)
 8000cfe:	461a      	mov	r2, r3
 8000d00:	00d2      	lsls	r2, r2, #3
 8000d02:	1ad2      	subs	r2, r2, r3
 8000d04:	460b      	mov	r3, r1
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4403      	add	r3, r0
 8000d10:	3302      	adds	r3, #2
 8000d12:	7a3a      	ldrb	r2, [r7, #8]
 8000d14:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e000      	b.n	8000d1e <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000d1c:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000d1e:	7b3b      	ldrb	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	733b      	strb	r3, [r7, #12]
 8000d24:	7b3b      	ldrb	r3, [r7, #12]
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	f67f af7f 	bls.w	8000c2a <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	737b      	strb	r3, [r7, #13]
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	f67f af75 	bls.w	8000c24 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <laberinto_recalcular_pesos+0x14a>
 8000d40:	7bba      	ldrb	r2, [r7, #14]
 8000d42:	7a7b      	ldrb	r3, [r7, #9]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f4ff af65 	bcc.w	8000c14 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000d4 	.word	0x200000d4

08000d58 <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	460b      	mov	r3, r1
 8000d64:	71bb      	strb	r3, [r7, #6]
 8000d66:	4613      	mov	r3, r2
 8000d68:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000d6a:	79ba      	ldrb	r2, [r7, #6]
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f85b 	bl	8000e2c <laberinto_posicion_valida>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f083 0301 	eor.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000d82:	2301      	movs	r3, #1
 8000d84:	e011      	b.n	8000daa <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	1e59      	subs	r1, r3, #1
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	7978      	ldrb	r0, [r7, #5]
 8000d90:	4c08      	ldr	r4, [pc, #32]	@ (8000db4 <laberinto_hay_muro+0x5c>)
 8000d92:	461a      	mov	r2, r3
 8000d94:	00d2      	lsls	r2, r2, #3
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	460b      	mov	r3, r1
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	4423      	add	r3, r4
 8000da4:	4403      	add	r3, r0
 8000da6:	3303      	adds	r3, #3
 8000da8:	781b      	ldrb	r3, [r3, #0]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000d4 	.word	0x200000d4

08000db8 <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	80b8      	strh	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d81e      	bhi.n	8000e0c <laberinto_get_posicion_adyacente+0x54>
 8000dce:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd4 <laberinto_get_posicion_adyacente+0x1c>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000de5 	.word	0x08000de5
 8000dd8:	08000def 	.word	0x08000def
 8000ddc:	08000df9 	.word	0x08000df9
 8000de0:	08000e03 	.word	0x08000e03
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000de4:	793b      	ldrb	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	723b      	strb	r3, [r7, #8]
        break;
 8000dec:	e00e      	b.n	8000e0c <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	727b      	strb	r3, [r7, #9]
        break;
 8000df6:	e009      	b.n	8000e0c <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000df8:	793b      	ldrb	r3, [r7, #4]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	723b      	strb	r3, [r7, #8]
        break;
 8000e00:	e004      	b.n	8000e0c <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	727b      	strb	r3, [r7, #9]
        break;
 8000e0a:	bf00      	nop
    }

    return nueva_pos;
 8000e0c:	893b      	ldrh	r3, [r7, #8]
 8000e0e:	81bb      	strh	r3, [r7, #12]
 8000e10:	2300      	movs	r3, #0
 8000e12:	7b3a      	ldrb	r2, [r7, #12]
 8000e14:	f362 0307 	bfi	r3, r2, #0, #8
 8000e18:	7b7a      	ldrb	r2, [r7, #13]
 8000e1a:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00a      	beq.n	8000e58 <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d807      	bhi.n	8000e58 <laberinto_posicion_valida+0x2c>
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d801      	bhi.n	8000e58 <laberinto_posicion_valida+0x2c>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <laberinto_posicion_valida+0x2e>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 ffa6 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f848 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 fa44 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e7c:	f000 fa22 	bl	80012c4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e80:	f000 f90c 	bl	800109c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e84:	f000 f938 	bl	80010f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e88:	f000 f964 	bl	8001154 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e8c:	f00a f86e 	bl	800af6c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000e90:	f000 f8a4 	bl	8000fdc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e94:	f000 f994 	bl	80011c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 8000e98:	22c8      	movs	r2, #200	@ 0xc8
 8000e9a:	4916      	ldr	r1, [pc, #88]	@ (8000ef4 <main+0x88>)
 8000e9c:	4816      	ldr	r0, [pc, #88]	@ (8000ef8 <main+0x8c>)
 8000e9e:	f001 f869 	bl	8001f74 <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8000ea2:	f7ff fbd3 	bl	800064c <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 8000ea6:	f7ff fca1 	bl	80007ec <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000eaa:	f00a f885 	bl	800afb8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <main+0x90>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	f083 0301 	eor.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d017      	beq.n	8000eec <main+0x80>
    {
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

      if (flag_linea_detectada)
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <main+0x94>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <main+0x66>
      {
        flag_linea_detectada = false; // Clear flag PRIMERO
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <main+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
        chequeolinea();               // Ejecutar función completa
 8000ecc:	f000 fb78 	bl	80015c0 <chequeolinea>
 8000ed0:	e00c      	b.n	8000eec <main+0x80>
      }
      else if (flag_muro_detectado)
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <main+0x98>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <main+0x7c>
      {                              // else if = prioridad a línea
        flag_muro_detectado = false; // Clear flag PRIMERO
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <main+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
        chequeomuro();               // Ejecutar función completa
 8000ee2:	f000 fbb5 	bl	8001650 <chequeomuro>
 8000ee6:	e001      	b.n	8000eec <main+0x80>
      }
      else
      {
        // Solo ejecutar control de línea recta si NO hay interrupciones pendientes
        // FALTA HACER: HACER BREAKS DENTRO DE CONTROLAR_LINEA_RECTA PARA VERIFICAR SI HAY MURO O LINEA
        controlar_linea_recta();
 8000ee8:	f7ff fc38 	bl	800075c <controlar_linea_recta>
      }
    }

    reset_posicion_pushbutton(); // ⚡ I AM SPEED button
 8000eec:	f000 fbe6 	bl	80016bc <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 8000ef0:	e7db      	b.n	8000eaa <main+0x3e>
 8000ef2:	bf00      	nop
 8000ef4:	2000032c 	.word	0x2000032c
 8000ef8:	20000144 	.word	0x20000144
 8000efc:	20000329 	.word	0x20000329
 8000f00:	200004bc 	.word	0x200004bc
 8000f04:	200004bd 	.word	0x200004bd

08000f08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	@ 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00a fbf0 	bl	800b6fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	4a27      	ldr	r2, [pc, #156]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3c:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f7c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f86:	2307      	movs	r3, #7
 8000f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 f916 	bl	80061c0 <HAL_RCC_OscConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f9a:	f000 fbb9 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000faa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2105      	movs	r1, #5
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fb77 	bl	80066b0 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc8:	f000 fba2 	bl	8001710 <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	@ 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8000ff0:	4a28      	ldr	r2, [pc, #160]	@ (8001094 <MX_ADC1_Init+0xb8>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8000ff6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ffa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8001004:	2201      	movs	r2, #1
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_ADC1_Init+0xb4>)
 800100a:	2201      	movs	r2, #1
 800100c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001016:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8001018:	2200      	movs	r2, #0
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0xb4>)
 800101e:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <MX_ADC1_Init+0xbc>)
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0xb4>)
 800102a:	2202      	movs	r2, #2
 800102c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0xb4>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103c:	4814      	ldr	r0, [pc, #80]	@ (8001090 <MX_ADC1_Init+0xb4>)
 800103e:	f000 ff55 	bl	8001eec <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001048:	f000 fb62 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 800104c:	2308      	movs	r3, #8
 800104e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001054:	2305      	movs	r3, #5
 8001056:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <MX_ADC1_Init+0xb4>)
 800105e:	f001 f8a7 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001068:	f000 fb52 	bl	8001710 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 800106c:	2309      	movs	r3, #9
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_ADC1_Init+0xb4>)
 800107a:	f001 f899 	bl	80021b0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001084:	f000 fb44 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000144 	.word	0x20000144
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f004 fa8d 	bl	80055f8 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 fb14 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001ec 	.word	0x200001ec
 80010f0:	40005400 	.word	0x40005400
 80010f4:	000186a0 	.word	0x000186a0

080010f8 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_I2S3_Init+0x54>)
 80010fe:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <MX_I2S3_Init+0x58>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MX_I2S3_Init+0x54>)
 8001104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001108:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <MX_I2S3_Init+0x54>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_I2S3_Init+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <MX_I2S3_Init+0x54>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_I2S3_Init+0x54>)
 800111e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001122:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_I2S3_Init+0x54>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_I2S3_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_I2S3_Init+0x54>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_I2S3_Init+0x54>)
 8001138:	f004 fba2 	bl	8005880 <HAL_I2S_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001142:	f000 fae5 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000240 	.word	0x20000240
 8001150:	40003c00 	.word	0x40003c00

08001154 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <MX_SPI1_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001184:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_SPI1_Init+0x64>)
 80011a6:	f005 fdd1 	bl	8006d4c <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011b0:	f000 faae 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000288 	.word	0x20000288
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	@ 0x38
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f0:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <MX_TIM3_Init+0xfc>)
 80011f2:	4a33      	ldr	r2, [pc, #204]	@ (80012c0 <MX_TIM3_Init+0x100>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <MX_TIM3_Init+0xfc>)
 80011f8:	2253      	movs	r2, #83	@ 0x53
 80011fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <MX_TIM3_Init+0xfc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001202:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <MX_TIM3_Init+0xfc>)
 8001204:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001208:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <MX_TIM3_Init+0xfc>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <MX_TIM3_Init+0xfc>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001216:	4829      	ldr	r0, [pc, #164]	@ (80012bc <MX_TIM3_Init+0xfc>)
 8001218:	f005 fe21 	bl	8006e5e <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001222:	f000 fa75 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001230:	4619      	mov	r1, r3
 8001232:	4822      	ldr	r0, [pc, #136]	@ (80012bc <MX_TIM3_Init+0xfc>)
 8001234:	f006 f846 	bl	80072c4 <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800123e:	f000 fa67 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001242:	481e      	ldr	r0, [pc, #120]	@ (80012bc <MX_TIM3_Init+0xfc>)
 8001244:	f005 fe5a 	bl	8006efc <HAL_TIM_PWM_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800124e:	f000 fa5f 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4619      	mov	r1, r3
 8001260:	4816      	ldr	r0, [pc, #88]	@ (80012bc <MX_TIM3_Init+0xfc>)
 8001262:	f006 fc0d 	bl	8007a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800126c:	f000 fa50 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001270:	2360      	movs	r3, #96	@ 0x60
 8001272:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2208      	movs	r2, #8
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_TIM3_Init+0xfc>)
 8001288:	f005 ff5a 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001292:	f000 fa3d 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	220c      	movs	r2, #12
 800129a:	4619      	mov	r1, r3
 800129c:	4807      	ldr	r0, [pc, #28]	@ (80012bc <MX_TIM3_Init+0xfc>)
 800129e:	f005 ff4f 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012a8:	f000 fa32 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <MX_TIM3_Init+0xfc>)
 80012ae:	f000 fc97 	bl	8001be0 <HAL_TIM_MspPostInit>
}
 80012b2:	bf00      	nop
 80012b4:	3738      	adds	r7, #56	@ 0x38
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002e0 	.word	0x200002e0
 80012c0:	40000400 	.word	0x40000400

080012c4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <MX_DMA_Init+0x3c>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_DMA_Init+0x3c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2038      	movs	r0, #56	@ 0x38
 80012ec:	f001 fadb 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f0:	2038      	movs	r0, #56	@ 0x38
 80012f2:	f001 faf4 	bl	80028de <HAL_NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	4b86      	ldr	r3, [pc, #536]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a85      	ldr	r2, [pc, #532]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b83      	ldr	r3, [pc, #524]	@ (8001538 <MX_GPIO_Init+0x234>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	4b7f      	ldr	r3, [pc, #508]	@ (8001538 <MX_GPIO_Init+0x234>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a7e      	ldr	r2, [pc, #504]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b7c      	ldr	r3, [pc, #496]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b78      	ldr	r3, [pc, #480]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a77      	ldr	r2, [pc, #476]	@ (8001538 <MX_GPIO_Init+0x234>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b75      	ldr	r3, [pc, #468]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b71      	ldr	r3, [pc, #452]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a70      	ldr	r2, [pc, #448]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b6e      	ldr	r3, [pc, #440]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b6a      	ldr	r3, [pc, #424]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a69      	ldr	r2, [pc, #420]	@ (8001538 <MX_GPIO_Init+0x234>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b67      	ldr	r3, [pc, #412]	@ (8001538 <MX_GPIO_Init+0x234>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b63      	ldr	r3, [pc, #396]	@ (8001538 <MX_GPIO_Init+0x234>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a62      	ldr	r2, [pc, #392]	@ (8001538 <MX_GPIO_Init+0x234>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b60      	ldr	r3, [pc, #384]	@ (8001538 <MX_GPIO_Init+0x234>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2108      	movs	r1, #8
 80013c6:	485d      	ldr	r0, [pc, #372]	@ (800153c <MX_GPIO_Init+0x238>)
 80013c8:	f001 ffc8 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2101      	movs	r1, #1
 80013d0:	485b      	ldr	r0, [pc, #364]	@ (8001540 <MX_GPIO_Init+0x23c>)
 80013d2:	f001 ffc3 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80013dc:	4859      	ldr	r0, [pc, #356]	@ (8001544 <MX_GPIO_Init+0x240>)
 80013de:	f001 ffbd 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80013e8:	4857      	ldr	r0, [pc, #348]	@ (8001548 <MX_GPIO_Init+0x244>)
 80013ea:	f001 ffb7 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013ee:	2308      	movs	r3, #8
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	484d      	ldr	r0, [pc, #308]	@ (800153c <MX_GPIO_Init+0x238>)
 8001406:	f001 fdf5 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800140a:	2301      	movs	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4847      	ldr	r0, [pc, #284]	@ (8001540 <MX_GPIO_Init+0x23c>)
 8001422:	f001 fde7 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001426:	2308      	movs	r3, #8
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001436:	2305      	movs	r3, #5
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	483f      	ldr	r0, [pc, #252]	@ (8001540 <MX_GPIO_Init+0x23c>)
 8001442:	f001 fdd7 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 8001446:	2301      	movs	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	@ (800154c <MX_GPIO_Init+0x248>)
 800145a:	f001 fdcb 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800145e:	2304      	movs	r3, #4
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4834      	ldr	r0, [pc, #208]	@ (8001544 <MX_GPIO_Init+0x240>)
 8001472:	f001 fdbf 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001488:	2305      	movs	r3, #5
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	482c      	ldr	r0, [pc, #176]	@ (8001544 <MX_GPIO_Init+0x240>)
 8001494:	f001 fdae 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8001498:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4824      	ldr	r0, [pc, #144]	@ (8001544 <MX_GPIO_Init+0x240>)
 80014b2:	f001 fd9f 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80014b6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	481e      	ldr	r0, [pc, #120]	@ (8001548 <MX_GPIO_Init+0x244>)
 80014d0:	f001 fd90 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 80014d4:	23c0      	movs	r3, #192	@ 0xc0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4815      	ldr	r0, [pc, #84]	@ (8001540 <MX_GPIO_Init+0x23c>)
 80014ea:	f001 fd83 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014ee:	2320      	movs	r3, #32
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4811      	ldr	r0, [pc, #68]	@ (8001548 <MX_GPIO_Init+0x244>)
 8001502:	f001 fd77 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800150a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4808      	ldr	r0, [pc, #32]	@ (800153c <MX_GPIO_Init+0x238>)
 800151c:	f001 fd6a 	bl	8002ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001520:	2200      	movs	r2, #0
 8001522:	2101      	movs	r1, #1
 8001524:	2017      	movs	r0, #23
 8001526:	f001 f9be 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800152a:	2017      	movs	r0, #23
 800152c:	f001 f9d7 	bl	80028de <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001530:	bf00      	nop
 8001532:	3730      	adds	r7, #48	@ 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40021000 	.word	0x40021000
 8001540:	40020800 	.word	0x40020800
 8001544:	40020400 	.word	0x40020400
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40020000 	.word	0x40020000

08001550 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	4613      	mov	r3, r2
 800155c:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d827      	bhi.n	80015b4 <actualizar_posicion+0x64>
 8001564:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <actualizar_posicion+0x1c>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	0800157d 	.word	0x0800157d
 8001570:	0800158b 	.word	0x0800158b
 8001574:	08001599 	.word	0x08001599
 8001578:	080015a7 	.word	0x080015a7
  {
  case norte:
    (*fila)--;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	701a      	strb	r2, [r3, #0]
    break;
 8001588:	e014      	b.n	80015b4 <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	701a      	strb	r2, [r3, #0]
    break;
 8001596:	e00d      	b.n	80015b4 <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	701a      	strb	r2, [r3, #0]
    break;
 80015a4:	e006      	b.n	80015b4 <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	701a      	strb	r2, [r3, #0]
    break;
 80015b2:	bf00      	nop
  }
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  if (antirebote(LineSensor_GPIO_Port, LineSensor_Pin))
 80015c6:	2180      	movs	r1, #128	@ 0x80
 80015c8:	481b      	ldr	r0, [pc, #108]	@ (8001638 <chequeolinea+0x78>)
 80015ca:	f7fe ff93 	bl	80004f4 <antirebote>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d02e      	beq.n	8001632 <chequeolinea+0x72>
  {
    // RETARDO DE UNOS MS
    HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <chequeolinea+0x7c>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fc63 	bl	8001ea4 <HAL_Delay>

    // Actualizar posición
    actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <chequeolinea+0x80>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4917      	ldr	r1, [pc, #92]	@ (8001644 <chequeolinea+0x84>)
 80015e6:	4818      	ldr	r0, [pc, #96]	@ (8001648 <chequeolinea+0x88>)
 80015e8:	f7ff ffb2 	bl	8001550 <actualizar_posicion>

    // terminó?
    if (fila_actual == 1 && columna_actual == 1)
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <chequeolinea+0x88>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d109      	bne.n	8001608 <chequeolinea+0x48>
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <chequeolinea+0x84>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <chequeolinea+0x48>
    {
      termino();
 80015fc:	f7ff fa42 	bl	8000a84 <termino>
      terminado = true;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <chequeolinea+0x8c>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
      return;
 8001606:	e014      	b.n	8001632 <chequeolinea+0x72>
    }

    // Calcular y ejecutar
    brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <chequeolinea+0x88>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <chequeolinea+0x84>)
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f882 	bl	800171c <calcular_mejor_direccion>
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
    sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <chequeolinea+0x80>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	79fa      	ldrb	r2, [r7, #7]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f8c7 	bl	80017b8 <ejecutar_movimiento>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <chequeolinea+0x80>)
 8001630:	701a      	strb	r2, [r3, #0]
  }
}
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020800 	.word	0x40020800
 800163c:	20000010 	.word	0x20000010
 8001640:	20000328 	.word	0x20000328
 8001644:	2000000f 	.word	0x2000000f
 8001648:	2000000e 	.word	0x2000000e
 800164c:	20000329 	.word	0x20000329

08001650 <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  if (antirebote(WallSensor_GPIO_Port, WallSensor_Pin))
 8001656:	2140      	movs	r1, #64	@ 0x40
 8001658:	4814      	ldr	r0, [pc, #80]	@ (80016ac <chequeomuro+0x5c>)
 800165a:	f7fe ff4b 	bl	80004f4 <antirebote>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01f      	beq.n	80016a4 <chequeomuro+0x54>
  {

    // 1. Registrar el muro detectado
    laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <chequeomuro+0x60>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <chequeomuro+0x64>)
 800166a:	7811      	ldrb	r1, [r2, #0]
 800166c:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <chequeomuro+0x68>)
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fa63 	bl	8000b3c <laberinto_set_muro>

    // 2. Recalcular todos los pesos con el nuevo muro
    laberinto_recalcular_pesos();
 8001676:	f7ff fac3 	bl	8000c00 <laberinto_recalcular_pesos>

    // 3. Calcular nueva mejor dirección
    brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <chequeomuro+0x60>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <chequeomuro+0x64>)
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f849 	bl	800171c <calcular_mejor_direccion>
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]

    // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
    sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <chequeomuro+0x68>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f88e 	bl	80017b8 <ejecutar_movimiento>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <chequeomuro+0x68>)
 80016a2:	701a      	strb	r2, [r3, #0]
  }
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40020800 	.word	0x40020800
 80016b0:	2000000e 	.word	0x2000000e
 80016b4:	2000000f 	.word	0x2000000f
 80016b8:	20000328 	.word	0x20000328

080016bc <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 80016c0:	2101      	movs	r1, #1
 80016c2:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <reset_posicion_pushbutton+0x3c>)
 80016c4:	f7fe ff16 	bl	80004f4 <antirebote>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d011      	beq.n	80016f2 <reset_posicion_pushbutton+0x36>
  {

    // Resetear posición
    fila_actual = 4;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <reset_posicion_pushbutton+0x40>)
 80016d0:	2204      	movs	r2, #4
 80016d2:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <reset_posicion_pushbutton+0x44>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <reset_posicion_pushbutton+0x48>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
    terminado = false;
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <reset_posicion_pushbutton+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 80016e6:	f7ff f873 	bl	80007d0 <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <reset_posicion_pushbutton+0x50>)
 80016ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80016f0:	801a      	strh	r2, [r3, #0]
  }
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40020000 	.word	0x40020000
 80016fc:	2000000e 	.word	0x2000000e
 8001700:	2000000f 	.word	0x2000000f
 8001704:	20000328 	.word	0x20000328
 8001708:	20000329 	.word	0x20000329
 800170c:	20000010 	.word	0x20000010

08001710 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <Error_Handler+0x8>

0800171c <calcular_mejor_direccion>:
 */

 #include "navegacion.h"

 brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) //nos devuelve direccion en TIPO BRUJULA gracias colo
 {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	4613      	mov	r3, r2
 800172a:	71bb      	strb	r3, [r7, #6]
     uint8_t peso_minimo = PESO_MAXIMO;
 800172c:	23ff      	movs	r3, #255	@ 0xff
 800172e:	75fb      	strb	r3, [r7, #23]
     brujula mejor_direccion = norte; // Dirección por defecto
 8001730:	2300      	movs	r3, #0
 8001732:	75bb      	strb	r3, [r7, #22]
     
     // Evaluar las 4 direcciones posibles
     for (brujula direccion = norte; direccion <= oeste; direccion++) {
 8001734:	2300      	movs	r3, #0
 8001736:	757b      	strb	r3, [r7, #21]
 8001738:	e036      	b.n	80017a8 <calcular_mejor_direccion+0x8c>
         
         // 1. ¿Hay muro en esta dirección?
         if (laberinto_hay_muro(fila_actual, columna_actual, direccion)) {
 800173a:	7d7a      	ldrb	r2, [r7, #21]
 800173c:	79b9      	ldrb	r1, [r7, #6]
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fb09 	bl	8000d58 <laberinto_hay_muro>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d127      	bne.n	800179c <calcular_mejor_direccion+0x80>
             continue; // Saltar si hay muro
         }
         
         // 2. Obtener posición adyacente
         posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
             (posicion_t){fila_actual, columna_actual}, direccion);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	733b      	strb	r3, [r7, #12]
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	737b      	strb	r3, [r7, #13]
         posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	4619      	mov	r1, r3
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7ff fb2d 	bl	8000db8 <laberinto_get_posicion_adyacente>
 800175e:	4603      	mov	r3, r0
 8001760:	823b      	strh	r3, [r7, #16]
         
         // 3. ¿Es válida? (no salirse del laberinto)
         if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna)) {
 8001762:	7c3b      	ldrb	r3, [r7, #16]
 8001764:	7c7a      	ldrb	r2, [r7, #17]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fb5f 	bl	8000e2c <laberinto_posicion_valida>
 800176e:	4603      	mov	r3, r0
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d112      	bne.n	80017a0 <calcular_mejor_direccion+0x84>
             continue; // Saltar si está fuera del laberinto
         }
         
         // 4. Obtener peso de la casilla adyacente
         uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 800177a:	7c3b      	ldrb	r3, [r7, #16]
 800177c:	7c7a      	ldrb	r2, [r7, #17]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff f9af 	bl	8000ae4 <laberinto_get_peso>
 8001786:	4603      	mov	r3, r0
 8001788:	753b      	strb	r3, [r7, #20]
         
         // 5. ¿Es el mejor peso hasta ahora?
         if (peso_adyacente < peso_minimo) {
 800178a:	7d3a      	ldrb	r2, [r7, #20]
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	429a      	cmp	r2, r3
 8001790:	d207      	bcs.n	80017a2 <calcular_mejor_direccion+0x86>
             peso_minimo = peso_adyacente;
 8001792:	7d3b      	ldrb	r3, [r7, #20]
 8001794:	75fb      	strb	r3, [r7, #23]
             mejor_direccion = direccion;
 8001796:	7d7b      	ldrb	r3, [r7, #21]
 8001798:	75bb      	strb	r3, [r7, #22]
 800179a:	e002      	b.n	80017a2 <calcular_mejor_direccion+0x86>
             continue; // Saltar si hay muro
 800179c:	bf00      	nop
 800179e:	e000      	b.n	80017a2 <calcular_mejor_direccion+0x86>
             continue; // Saltar si está fuera del laberinto
 80017a0:	bf00      	nop
     for (brujula direccion = norte; direccion <= oeste; direccion++) {
 80017a2:	7d7b      	ldrb	r3, [r7, #21]
 80017a4:	3301      	adds	r3, #1
 80017a6:	757b      	strb	r3, [r7, #21]
 80017a8:	7d7b      	ldrb	r3, [r7, #21]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d9c5      	bls.n	800173a <calcular_mejor_direccion+0x1e>
         }
     }
     
     return mejor_direccion;
 80017ae:	7dbb      	ldrb	r3, [r7, #22]
 }
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <ejecutar_movimiento>:

 brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
 {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
     // ¿Ya está orientado correctamente?
     if (sentido_actual == sentido_deseado)
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d103      	bne.n	80017d8 <ejecutar_movimiento+0x20>
     {
         avanza(); // Solo avanzar
 80017d0:	f7ff f8a4 	bl	800091c <avanza>
         return sentido_actual;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	e02d      	b.n	8001834 <ejecutar_movimiento+0x7c>
     }

     // Calcular diferencia usando aritmética xq es un tipo brujula
     // norte=0, este=1, sur=2, oeste=3
     int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 80017d8:	79ba      	ldrb	r2, [r7, #6]
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	3304      	adds	r3, #4
 80017e0:	425a      	negs	r2, r3
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	bf58      	it	pl
 80017ec:	4253      	negpl	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

     switch (diferencia)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d015      	beq.n	8001822 <ejecutar_movimiento+0x6a>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	dc18      	bgt.n	800182e <ejecutar_movimiento+0x76>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d003      	beq.n	800180a <ejecutar_movimiento+0x52>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d006      	beq.n	8001816 <ejecutar_movimiento+0x5e>
 8001808:	e011      	b.n	800182e <ejecutar_movimiento+0x76>
     {
     case 1: // Girar 90° a la derecha
         return gira90der(sentido_actual);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f8cd 	bl	80009ac <gira90der>
 8001812:	4603      	mov	r3, r0
 8001814:	e00e      	b.n	8001834 <ejecutar_movimiento+0x7c>

     case 2: // Girar 180° (media vuelta)
         return gira180(sentido_actual);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f8fd 	bl	8000a18 <gira180>
 800181e:	4603      	mov	r3, r0
 8001820:	e008      	b.n	8001834 <ejecutar_movimiento+0x7c>

     case 3: // Girar 90° a la izquierda
         return gira90izq(sentido_actual);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f88b 	bl	8000940 <gira90izq>
 800182a:	4603      	mov	r3, r0
 800182c:	e002      	b.n	8001834 <ejecutar_movimiento+0x7c>

     default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
         avanza();
 800182e:	f7ff f875 	bl	800091c <avanza>
         return sentido_actual;
 8001832:	79fb      	ldrb	r3, [r7, #7]
     }
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <HAL_MspInit+0x4c>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001850:	6453      	str	r3, [r2, #68]	@ 0x44
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <HAL_MspInit+0x4c>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800187a:	2007      	movs	r0, #7
 800187c:	f001 f808 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001968 <HAL_ADC_MspInit+0xdc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d157      	bne.n	800195e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	4a2d      	ldr	r2, [pc, #180]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018be:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b27      	ldr	r3, [pc, #156]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a26      	ldr	r2, [pc, #152]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 80018e6:	2303      	movs	r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ea:	2303      	movs	r3, #3
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	481d      	ldr	r0, [pc, #116]	@ (8001970 <HAL_ADC_MspInit+0xe4>)
 80018fa:	f001 fb7b 	bl	8002ff4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <HAL_ADC_MspInit+0xec>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001924:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001934:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001942:	480c      	ldr	r0, [pc, #48]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001944:	f000 ffe6 	bl	8002914 <HAL_DMA_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800194e:	f7ff fedf 	bl	8001710 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001956:	639a      	str	r2, [r3, #56]	@ 0x38
 8001958:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	@ 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40012000 	.word	0x40012000
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400
 8001974:	2000018c 	.word	0x2000018c
 8001978:	40026410 	.word	0x40026410

0800197c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <HAL_I2C_MspInit+0x84>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d12c      	bne.n	80019f8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <HAL_I2C_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a17      	ldr	r2, [pc, #92]	@ (8001a04 <HAL_I2C_MspInit+0x88>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <HAL_I2C_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019ba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c0:	2312      	movs	r3, #18
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019cc:	2304      	movs	r3, #4
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <HAL_I2C_MspInit+0x8c>)
 80019d8:	f001 fb0c 	bl	8002ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_I2C_MspInit+0x88>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_I2C_MspInit+0x88>)
 80019e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_I2C_MspInit+0x88>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	@ 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40005400 	.word	0x40005400
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020400 	.word	0x40020400

08001a0c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	@ 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a31      	ldr	r2, [pc, #196]	@ (8001afc <HAL_I2S_MspInit+0xf0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d15a      	bne.n	8001af2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a40:	23c0      	movs	r3, #192	@ 0xc0
 8001a42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f005 f83b 	bl	8006ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001a58:	f7ff fe5a 	bl	8001710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a26      	ldr	r2, [pc, #152]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6c:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	4a1f      	ldr	r2, [pc, #124]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <HAL_I2S_MspInit+0xf4>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <HAL_I2S_MspInit+0xf8>)
 8001acc:	f001 fa92 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001ad0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	4806      	ldr	r0, [pc, #24]	@ (8001b08 <HAL_I2S_MspInit+0xfc>)
 8001aee:	f001 fa81 	bl	8002ff4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001af2:	bf00      	nop
 8001af4:	3738      	adds	r7, #56	@ 0x38
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40003c00 	.word	0x40003c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020800 	.word	0x40020800

08001b0c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a19      	ldr	r2, [pc, #100]	@ (8001b90 <HAL_SPI_MspInit+0x84>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12b      	bne.n	8001b86 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b66:	23e0      	movs	r3, #224	@ 0xe0
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b76:	2305      	movs	r3, #5
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <HAL_SPI_MspInit+0x8c>)
 8001b82:	f001 fa37 	bl	8002ff4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40013000 	.word	0x40013000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10d      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_TIM_Base_MspInit+0x40>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <HAL_TIM_Base_MspInit+0x40>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <HAL_TIM_Base_MspInit+0x40>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <HAL_TIM_MspPostInit+0x68>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d11e      	bne.n	8001c40 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_TIM_MspPostInit+0x6c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a10      	ldr	r2, [pc, #64]	@ (8001c4c <HAL_TIM_MspPostInit+0x6c>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <HAL_TIM_MspPostInit+0x6c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001c1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <HAL_TIM_MspPostInit+0x70>)
 8001c3c:	f001 f9da 	bl	8002ff4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020800 	.word	0x40020800

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001caa:	f000 f8db 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <DMA2_Stream0_IRQHandler+0x10>)
 8001cba:	f000 ff31 	bl	8002b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000018c 	.word	0x2000018c

08001cc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <OTG_FS_IRQHandler+0x10>)
 8001cce:	f001 fe3f 	bl	8003950 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200008a4 	.word	0x200008a4

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f009 fd0e 	bl	800b72c <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20020000 	.word	0x20020000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	200004c0 	.word	0x200004c0
 8001d44:	20000dd0 	.word	0x20000dd0

08001d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <SystemInit+0x20>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <SystemInit+0x20>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d70:	f7ff ffea 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	@ (8001dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f009 fccd 	bl	800b738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9e:	f7ff f865 	bl	8000e6c <main>
  bx  lr    
 8001da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001db0:	0800b864 	.word	0x0800b864
  ldr r2, =_sbss
 8001db4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001db8:	20000dcc 	.word	0x20000dcc

08001dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <HAL_Init+0x40>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <HAL_Init+0x40>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	@ (8001e00 <HAL_Init+0x40>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 fd51 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f000 f808 	bl	8001e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff fd22 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_InitTick+0x54>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_InitTick+0x58>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fd69 	bl	80028fa <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e40:	f000 fd31 	bl	80028a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	@ (8001e60 <HAL_InitTick+0x5c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000014 	.word	0x20000014
 8001e5c:	2000001c 	.word	0x2000001c
 8001e60:	20000018 	.word	0x20000018

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000001c 	.word	0x2000001c
 8001e88:	200004c4 	.word	0x200004c4

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	200004c4 	.word	0x200004c4

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000001c 	.word	0x2000001c

08001eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e033      	b.n	8001f6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fcbe 	bl	800188c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f32:	f023 0302 	bic.w	r3, r3, #2
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fa58 	bl	80023f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f023 0303 	bic.w	r3, r3, #3
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f5a:	e001      	b.n	8001f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Start_DMA+0x22>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e0eb      	b.n	800216e <HAL_ADC_Start_DMA+0x1fa>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d018      	beq.n	8001fde <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fbc:	4b6e      	ldr	r3, [pc, #440]	@ (8002178 <HAL_ADC_Start_DMA+0x204>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800217c <HAL_ADC_Start_DMA+0x208>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0c9a      	lsrs	r2, r3, #18
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fec:	d107      	bne.n	8001ffe <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ffc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	f040 80a3 	bne.w	8002154 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002038:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800204c:	d106      	bne.n	800205c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f023 0206 	bic.w	r2, r3, #6
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
 800205a:	e002      	b.n	8002062 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206a:	4b45      	ldr	r3, [pc, #276]	@ (8002180 <HAL_ADC_Start_DMA+0x20c>)
 800206c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002072:	4a44      	ldr	r2, [pc, #272]	@ (8002184 <HAL_ADC_Start_DMA+0x210>)
 8002074:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207a:	4a43      	ldr	r2, [pc, #268]	@ (8002188 <HAL_ADC_Start_DMA+0x214>)
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002082:	4a42      	ldr	r2, [pc, #264]	@ (800218c <HAL_ADC_Start_DMA+0x218>)
 8002084:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800208e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800209e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	334c      	adds	r3, #76	@ 0x4c
 80020ba:	4619      	mov	r1, r3
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f000 fcd6 	bl	8002a70 <HAL_DMA_Start_IT>
 80020c4:	4603      	mov	r3, r0
 80020c6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d12a      	bne.n	800212a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_ADC_Start_DMA+0x21c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d015      	beq.n	800210a <HAL_ADC_Start_DMA+0x196>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002194 <HAL_ADC_Start_DMA+0x220>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_Start_DMA+0x180>
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_ADC_Start_DMA+0x20c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a27      	ldr	r2, [pc, #156]	@ (8002198 <HAL_ADC_Start_DMA+0x224>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d136      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f8>
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <HAL_ADC_Start_DMA+0x20c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d130      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d129      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e020      	b.n	800216c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a18      	ldr	r2, [pc, #96]	@ (8002190 <HAL_ADC_Start_DMA+0x21c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d11b      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f8>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d114      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	e00b      	b.n	800216c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	f043 0210 	orr.w	r2, r3, #16
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800216c:	7ffb      	ldrb	r3, [r7, #31]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000014 	.word	0x20000014
 800217c:	431bde83 	.word	0x431bde83
 8002180:	40012300 	.word	0x40012300
 8002184:	080025ed 	.word	0x080025ed
 8002188:	080026a7 	.word	0x080026a7
 800218c:	080026c3 	.word	0x080026c3
 8002190:	40012000 	.word	0x40012000
 8002194:	40012100 	.word	0x40012100
 8002198:	40012200 	.word	0x40012200

0800219c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1c>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e105      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x228>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d925      	bls.n	8002228 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68d9      	ldr	r1, [r3, #12]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	3b1e      	subs	r3, #30
 80021f2:	2207      	movs	r2, #7
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43da      	mvns	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68d9      	ldr	r1, [r3, #12]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4618      	mov	r0, r3
 8002214:	4603      	mov	r3, r0
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4403      	add	r3, r0
 800221a:	3b1e      	subs	r3, #30
 800221c:	409a      	lsls	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	e022      	b.n	800226e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6919      	ldr	r1, [r3, #16]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	2207      	movs	r2, #7
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	400a      	ands	r2, r1
 800224a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6919      	ldr	r1, [r3, #16]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4618      	mov	r0, r3
 800225e:	4603      	mov	r3, r0
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4403      	add	r3, r0
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d824      	bhi.n	80022c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	3b05      	subs	r3, #5
 8002288:	221f      	movs	r2, #31
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	400a      	ands	r2, r1
 8002296:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3b05      	subs	r3, #5
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80022be:	e04c      	b.n	800235a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d824      	bhi.n	8002312 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b23      	subs	r3, #35	@ 0x23
 80022da:	221f      	movs	r2, #31
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43da      	mvns	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	400a      	ands	r2, r1
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b23      	subs	r3, #35	@ 0x23
 8002304:	fa00 f203 	lsl.w	r2, r0, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002310:	e023      	b.n	800235a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3b41      	subs	r3, #65	@ 0x41
 8002324:	221f      	movs	r2, #31
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	400a      	ands	r2, r1
 8002332:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	3b41      	subs	r3, #65	@ 0x41
 800234e:	fa00 f203 	lsl.w	r2, r0, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <HAL_ADC_ConfigChannel+0x234>)
 800235c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a21      	ldr	r2, [pc, #132]	@ (80023e8 <HAL_ADC_ConfigChannel+0x238>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d109      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1cc>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b12      	cmp	r3, #18
 800236e:	d105      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <HAL_ADC_ConfigChannel+0x238>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d123      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x21e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d003      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x1e6>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b11      	cmp	r3, #17
 8002394:	d11b      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d111      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_ADC_ConfigChannel+0x23c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a10      	ldr	r2, [pc, #64]	@ (80023f0 <HAL_ADC_ConfigChannel+0x240>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	0c9a      	lsrs	r2, r3, #18
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f9      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40012300 	.word	0x40012300
 80023e8:	40012000 	.word	0x40012000
 80023ec:	20000014 	.word	0x20000014
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fc:	4b79      	ldr	r3, [pc, #484]	@ (80025e4 <ADC_Init+0x1f0>)
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800244c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <ADC_Init+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800249a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e00f      	b.n	80024f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0202 	bic.w	r2, r2, #2
 8002500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
 800250c:	005a      	lsls	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800253e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	3b01      	subs	r3, #1
 800254c:	035a      	lsls	r2, r3, #13
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e007      	b.n	8002568 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002566:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	3b01      	subs	r3, #1
 8002584:	051a      	lsls	r2, r3, #20
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800259c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025aa:	025a      	lsls	r2, r3, #9
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	029a      	lsls	r2, r3, #10
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40012300 	.word	0x40012300
 80025e8:	0f000001 	.word	0x0f000001

080025ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13c      	bne.n	8002680 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12b      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d127      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0220 	bic.w	r2, r2, #32
 8002652:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7fd ff9b 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800267e:	e00e      	b.n	800269e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fd85 	bl	800219c <HAL_ADC_ErrorCallback>
}
 8002692:	e004      	b.n	800269e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7fd ff6f 	bl	8000598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	@ 0x40
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff fd5a 	bl	800219c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	@ (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	@ (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	@ 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff29 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff3e 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff8e 	bl	80027e4 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5d 	bl	8002790 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff31 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ffa2 	bl	800284c <SysTick_Config>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff fab4 	bl	8001e8c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e099      	b.n	8002a64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002950:	e00f      	b.n	8002972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002952:	f7ff fa9b 	bl	8001e8c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b05      	cmp	r3, #5
 800295e:	d908      	bls.n	8002972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e078      	b.n	8002a64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e8      	bne.n	8002952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <HAL_DMA_Init+0x158>)
 800298c:	4013      	ands	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d107      	bne.n	80029dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	4313      	orrs	r3, r2
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0307 	bic.w	r3, r3, #7
 80029f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d117      	bne.n	8002a36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fa6f 	bl	8002efc <DMA_CheckFifoParam>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a32:	2301      	movs	r3, #1
 8002a34:	e016      	b.n	8002a64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa26 	bl	8002e90 <DMA_CalcBaseAndBitshift>
 8002a44:	4603      	mov	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4c:	223f      	movs	r2, #63	@ 0x3f
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	f010803f 	.word	0xf010803f

08002a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_DMA_Start_IT+0x26>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e040      	b.n	8002b18 <HAL_DMA_Start_IT+0xa8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d12f      	bne.n	8002b0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f9b8 	bl	8002e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	223f      	movs	r2, #63	@ 0x3f
 8002aca:	409a      	lsls	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0216 	orr.w	r2, r2, #22
 8002ade:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e005      	b.n	8002b16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
 8002b14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d68 <HAL_DMA_IRQHandler+0x248>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a8e      	ldr	r2, [pc, #568]	@ (8002d6c <HAL_DMA_IRQHandler+0x24c>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01a      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0204 	bic.w	r2, r2, #4
 8002b72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	2208      	movs	r2, #8
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	2201      	movs	r2, #1
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	2201      	movs	r2, #1
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00b      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	2204      	movs	r2, #4
 8002be6:	409a      	lsls	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f043 0204 	orr.w	r2, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d043      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03c      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d108      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
 8002c4e:	e01f      	b.n	8002c90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e016      	b.n	8002c90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0208 	bic.w	r2, r2, #8
 8002c7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	2220      	movs	r2, #32
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 808f 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8087 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d136      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0216 	bic.w	r2, r2, #22
 8002cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ce8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_DMA_IRQHandler+0x1da>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0208 	bic.w	r2, r2, #8
 8002d08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	223f      	movs	r2, #63	@ 0x3f
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d07e      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
        }
        return;
 8002d36:	e079      	b.n	8002e2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01d      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10d      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d031      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
 8002d64:	e02c      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
 8002d66:	bf00      	nop
 8002d68:	20000014 	.word	0x20000014
 8002d6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
 8002d80:	e01e      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10f      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0210 	bic.w	r2, r2, #16
 8002d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d032      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d022      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2205      	movs	r2, #5
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d307      	bcc.n	8002e08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f2      	bne.n	8002dec <HAL_DMA_IRQHandler+0x2cc>
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
 8002e2a:	e000      	b.n	8002e2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e2c:	bf00      	nop
    }
  }
}
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b40      	cmp	r3, #64	@ 0x40
 8002e60:	d108      	bne.n	8002e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e72:	e007      	b.n	8002e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3b10      	subs	r3, #16
 8002ea0:	4a14      	ldr	r2, [pc, #80]	@ (8002ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eaa:	4a13      	ldr	r2, [pc, #76]	@ (8002ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d909      	bls.n	8002ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ed0:	e007      	b.n	8002ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	aaaaaaab 	.word	0xaaaaaaab
 8002ef8:	0800b84c 	.word	0x0800b84c

08002efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11f      	bne.n	8002f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d856      	bhi.n	8002fca <DMA_CheckFifoParam+0xce>
 8002f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <DMA_CheckFifoParam+0x28>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f47 	.word	0x08002f47
 8002f2c:	08002f35 	.word	0x08002f35
 8002f30:	08002fcb 	.word	0x08002fcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d046      	beq.n	8002fce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f44:	e043      	b.n	8002fce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f4e:	d140      	bne.n	8002fd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f54:	e03d      	b.n	8002fd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5e:	d121      	bne.n	8002fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d837      	bhi.n	8002fd6 <DMA_CheckFifoParam+0xda>
 8002f66:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <DMA_CheckFifoParam+0x70>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f83 	.word	0x08002f83
 8002f74:	08002f7d 	.word	0x08002f7d
 8002f78:	08002f95 	.word	0x08002f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f80:	e030      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d025      	beq.n	8002fda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f92:	e022      	b.n	8002fda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f9c:	d11f      	bne.n	8002fde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fa2:	e01c      	b.n	8002fde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d903      	bls.n	8002fb2 <DMA_CheckFifoParam+0xb6>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d003      	beq.n	8002fb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb0:	e018      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb6:	e015      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc8:	e00b      	b.n	8002fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e00a      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e008      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e006      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e004      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e16b      	b.n	80032e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 815a 	bne.w	80032e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d005      	beq.n	8003046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	2b02      	cmp	r3, #2
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d017      	beq.n	80030e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80b4 	beq.w	80032e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b60      	ldr	r3, [pc, #384]	@ (8003300 <HAL_GPIO_Init+0x30c>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	4a5f      	ldr	r2, [pc, #380]	@ (8003300 <HAL_GPIO_Init+0x30c>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003188:	6453      	str	r3, [r2, #68]	@ 0x44
 800318a:	4b5d      	ldr	r3, [pc, #372]	@ (8003300 <HAL_GPIO_Init+0x30c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003196:	4a5b      	ldr	r2, [pc, #364]	@ (8003304 <HAL_GPIO_Init+0x310>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	@ (8003308 <HAL_GPIO_Init+0x314>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_Init+0x226>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a51      	ldr	r2, [pc, #324]	@ (800330c <HAL_GPIO_Init+0x318>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_Init+0x222>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a50      	ldr	r2, [pc, #320]	@ (8003310 <HAL_GPIO_Init+0x31c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003314 <HAL_GPIO_Init+0x320>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x21a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003318 <HAL_GPIO_Init+0x324>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4d      	ldr	r2, [pc, #308]	@ (800331c <HAL_GPIO_Init+0x328>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003320 <HAL_GPIO_Init+0x32c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003324 <HAL_GPIO_Init+0x330>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x20a>
 80031fa:	2307      	movs	r3, #7
 80031fc:	e00e      	b.n	800321c <HAL_GPIO_Init+0x228>
 80031fe:	2308      	movs	r3, #8
 8003200:	e00c      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003202:	2306      	movs	r3, #6
 8003204:	e00a      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003206:	2305      	movs	r3, #5
 8003208:	e008      	b.n	800321c <HAL_GPIO_Init+0x228>
 800320a:	2304      	movs	r3, #4
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x228>
 800320e:	2303      	movs	r3, #3
 8003210:	e004      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003212:	2302      	movs	r3, #2
 8003214:	e002      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_GPIO_Init+0x228>
 800321a:	2300      	movs	r3, #0
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	f002 0203 	and.w	r2, r2, #3
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	4093      	lsls	r3, r2
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322c:	4935      	ldr	r1, [pc, #212]	@ (8003304 <HAL_GPIO_Init+0x310>)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323a:	4b3b      	ldr	r3, [pc, #236]	@ (8003328 <HAL_GPIO_Init+0x334>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800325e:	4a32      	ldr	r2, [pc, #200]	@ (8003328 <HAL_GPIO_Init+0x334>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003264:	4b30      	ldr	r3, [pc, #192]	@ (8003328 <HAL_GPIO_Init+0x334>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003288:	4a27      	ldr	r2, [pc, #156]	@ (8003328 <HAL_GPIO_Init+0x334>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800328e:	4b26      	ldr	r3, [pc, #152]	@ (8003328 <HAL_GPIO_Init+0x334>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <HAL_GPIO_Init+0x334>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <HAL_GPIO_Init+0x334>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032dc:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <HAL_GPIO_Init+0x334>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	f67f ae90 	bls.w	8003010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3724      	adds	r7, #36	@ 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40013800 	.word	0x40013800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400
 8003310:	40020800 	.word	0x40020800
 8003314:	40020c00 	.word	0x40020c00
 8003318:	40021000 	.word	0x40021000
 800331c:	40021400 	.word	0x40021400
 8003320:	40021800 	.word	0x40021800
 8003324:	40021c00 	.word	0x40021c00
 8003328:	40013c00 	.word	0x40013c00

0800332c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e001      	b.n	800334e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af02      	add	r7, sp, #8
 8003394:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e059      	b.n	8003454 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f007 fe34 	bl	800b028 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2203      	movs	r2, #3
 80033c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ce:	d102      	bne.n	80033d6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f004 fc41 	bl	8007c62 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7c1a      	ldrb	r2, [r3, #16]
 80033e8:	f88d 2000 	strb.w	r2, [sp]
 80033ec:	3304      	adds	r3, #4
 80033ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f0:	f004 fbc2 	bl	8007b78 <USB_CoreInit>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e026      	b.n	8003454 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f004 fc39 	bl	8007c84 <USB_SetCurrentMode>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e017      	b.n	8003454 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7c1a      	ldrb	r2, [r3, #16]
 800342c:	f88d 2000 	strb.w	r2, [sp]
 8003430:	3304      	adds	r3, #4
 8003432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003434:	f004 fde2 	bl	8007ffc <USB_HostInit>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e004      	b.n	8003454 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b08b      	sub	sp, #44	@ 0x2c
 8003460:	af04      	add	r7, sp, #16
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	4608      	mov	r0, r1
 8003466:	4611      	mov	r1, r2
 8003468:	461a      	mov	r2, r3
 800346a:	4603      	mov	r3, r0
 800346c:	70fb      	strb	r3, [r7, #3]
 800346e:	460b      	mov	r3, r1
 8003470:	70bb      	strb	r3, [r7, #2]
 8003472:	4613      	mov	r3, r2
 8003474:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003476:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003478:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_HCD_HC_Init+0x2c>
 8003484:	2302      	movs	r3, #2
 8003486:	e09d      	b.n	80035c4 <HAL_HCD_HC_Init+0x168>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3319      	adds	r3, #25
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3314      	adds	r3, #20
 80034b4:	787a      	ldrb	r2, [r7, #1]
 80034b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3315      	adds	r3, #21
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3326      	adds	r3, #38	@ 0x26
 80034dc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80034e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	78bb      	ldrb	r3, [r7, #2]
 80034e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ea:	b2d8      	uxtb	r0, r3
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3316      	adds	r3, #22
 80034fa:	4602      	mov	r2, r0
 80034fc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fbc8 	bl	8003c98 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003508:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800350c:	2b00      	cmp	r3, #0
 800350e:	da0a      	bge.n	8003526 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3317      	adds	r3, #23
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	e009      	b.n	800353a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3317      	adds	r3, #23
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f004 fec0 	bl	80082c4 <USB_GetHostSpeed>
 8003544:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003546:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10b      	bne.n	8003566 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800354e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_HCD_HC_Init+0x10a>
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2bbc      	cmp	r3, #188	@ 0xbc
 8003560:	d901      	bls.n	8003566 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003562:	23bc      	movs	r3, #188	@ 0xbc
 8003564:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3318      	adds	r3, #24
 8003576:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800357a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	b298      	uxth	r0, r3
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3328      	adds	r3, #40	@ 0x28
 8003590:	4602      	mov	r2, r0
 8003592:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	b29b      	uxth	r3, r3
 800359c:	787c      	ldrb	r4, [r7, #1]
 800359e:	78ba      	ldrb	r2, [r7, #2]
 80035a0:	78f9      	ldrb	r1, [r7, #3]
 80035a2:	9302      	str	r3, [sp, #8]
 80035a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4623      	mov	r3, r4
 80035b2:	f004 feaf 	bl	8008314 <USB_HC_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}

080035cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_HCD_HC_Halt+0x1e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e00f      	b.n	800360a <HAL_HCD_HC_Halt+0x3e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f005 fa41 	bl	8008a82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	70fb      	strb	r3, [r7, #3]
 8003626:	460b      	mov	r3, r1
 8003628:	70bb      	strb	r3, [r7, #2]
 800362a:	4613      	mov	r3, r2
 800362c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3317      	adds	r3, #23
 800363e:	78ba      	ldrb	r2, [r7, #2]
 8003640:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3326      	adds	r3, #38	@ 0x26
 8003652:	787a      	ldrb	r2, [r7, #1]
 8003654:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003656:	7c3b      	ldrb	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d114      	bne.n	8003686 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	332a      	adds	r3, #42	@ 0x2a
 800366c:	2203      	movs	r2, #3
 800366e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3319      	adds	r3, #25
 8003680:	7f3a      	ldrb	r2, [r7, #28]
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e009      	b.n	800369a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	332a      	adds	r3, #42	@ 0x2a
 8003696:	2202      	movs	r2, #2
 8003698:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800369a:	787b      	ldrb	r3, [r7, #1]
 800369c:	2b03      	cmp	r3, #3
 800369e:	f200 8102 	bhi.w	80038a6 <HAL_HCD_HC_SubmitRequest+0x292>
 80036a2:	a201      	add	r2, pc, #4	@ (adr r2, 80036a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	08003891 	.word	0x08003891
 80036b0:	0800377d 	.word	0x0800377d
 80036b4:	08003807 	.word	0x08003807
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80036b8:	7c3b      	ldrb	r3, [r7, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	f040 80f5 	bne.w	80038aa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80036c0:	78bb      	ldrb	r3, [r7, #2]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d12d      	bne.n	8003722 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80036c6:	8b3b      	ldrh	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	333d      	adds	r3, #61	@ 0x3d
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	333d      	adds	r3, #61	@ 0x3d
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	332a      	adds	r3, #42	@ 0x2a
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800370a:	e0ce      	b.n	80038aa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	332a      	adds	r3, #42	@ 0x2a
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
      break;
 8003720:	e0c3      	b.n	80038aa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	331a      	adds	r3, #26
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	f040 80b8 	bne.w	80038aa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	333c      	adds	r3, #60	@ 0x3c
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	332a      	adds	r3, #42	@ 0x2a
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
      break;
 8003764:	e0a1      	b.n	80038aa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	332a      	adds	r3, #42	@ 0x2a
 8003776:	2202      	movs	r2, #2
 8003778:	701a      	strb	r2, [r3, #0]
      break;
 800377a:	e096      	b.n	80038aa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800377c:	78bb      	ldrb	r3, [r7, #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d120      	bne.n	80037c4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	333d      	adds	r3, #61	@ 0x3d
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	332a      	adds	r3, #42	@ 0x2a
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80037ac:	e07e      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	332a      	adds	r3, #42	@ 0x2a
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
      break;
 80037c2:	e073      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	333c      	adds	r3, #60	@ 0x3c
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	332a      	adds	r3, #42	@ 0x2a
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
      break;
 80037ee:	e05d      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	332a      	adds	r3, #42	@ 0x2a
 8003800:	2202      	movs	r2, #2
 8003802:	701a      	strb	r2, [r3, #0]
      break;
 8003804:	e052      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003806:	78bb      	ldrb	r3, [r7, #2]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d120      	bne.n	800384e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	333d      	adds	r3, #61	@ 0x3d
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	332a      	adds	r3, #42	@ 0x2a
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003836:	e039      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	332a      	adds	r3, #42	@ 0x2a
 8003848:	2202      	movs	r2, #2
 800384a:	701a      	strb	r2, [r3, #0]
      break;
 800384c:	e02e      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	333c      	adds	r3, #60	@ 0x3c
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	332a      	adds	r3, #42	@ 0x2a
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
      break;
 8003878:	e018      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	332a      	adds	r3, #42	@ 0x2a
 800388a:	2202      	movs	r2, #2
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e00d      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	332a      	adds	r3, #42	@ 0x2a
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
      break;
 80038a4:	e002      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80038aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	332c      	adds	r3, #44	@ 0x2c
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	8b39      	ldrh	r1, [r7, #24]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4403      	add	r3, r0
 80038d0:	3334      	adds	r3, #52	@ 0x34
 80038d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	334c      	adds	r3, #76	@ 0x4c
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3338      	adds	r3, #56	@ 0x38
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3315      	adds	r3, #21
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	334d      	adds	r3, #77	@ 0x4d
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	3310      	adds	r3, #16
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	1d19      	adds	r1, r3, #4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	799b      	ldrb	r3, [r3, #6]
 800393e:	461a      	mov	r2, r3
 8003940:	f004 fe14 	bl	800856c <USB_HC_StartXfer>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop

08003950 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f004 fb02 	bl	8007f70 <USB_GetMode>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	f040 80fb 	bne.w	8003b6a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f004 fac5 	bl	8007f08 <USB_ReadInterrupts>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80f1 	beq.w	8003b68 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f004 fabc 	bl	8007f08 <USB_ReadInterrupts>
 8003990:	4603      	mov	r3, r0
 8003992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800399a:	d104      	bne.n	80039a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80039a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 faac 	bl	8007f08 <USB_ReadInterrupts>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ba:	d104      	bne.n	80039c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80039c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fa9c 	bl	8007f08 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039da:	d104      	bne.n	80039e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f004 fa8c 	bl	8007f08 <USB_ReadInterrupts>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d103      	bne.n	8003a02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2202      	movs	r2, #2
 8003a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 fa7e 	bl	8007f08 <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a16:	d120      	bne.n	8003a5a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003a20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d113      	bne.n	8003a5a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a32:	2110      	movs	r1, #16
 8003a34:	6938      	ldr	r0, [r7, #16]
 8003a36:	f004 f971 	bl	8007d1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003a3a:	6938      	ldr	r0, [r7, #16]
 8003a3c:	f004 f9a0 	bl	8007d80 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7a5b      	ldrb	r3, [r3, #9]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d105      	bne.n	8003a54 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 fb98 	bl	8008184 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f007 fb65 	bl	800b124 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f004 fa52 	bl	8007f08 <USB_ReadInterrupts>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a6e:	d102      	bne.n	8003a76 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f001 fd4d 	bl	8005510 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 fa44 	bl	8007f08 <USB_ReadInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d106      	bne.n	8003a98 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f007 fb2e 	bl	800b0ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2208      	movs	r2, #8
 8003a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f004 fa33 	bl	8007f08 <USB_ReadInterrupts>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aac:	d139      	bne.n	8003b22 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 ffd4 	bl	8008a60 <USB_HC_ReadInterrupt>
 8003ab8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e025      	b.n	8003b0c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d018      	beq.n	8003b06 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aea:	d106      	bne.n	8003afa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f905 	bl	8003d02 <HCD_HC_IN_IRQHandler>
 8003af8:	e005      	b.n	8003b06 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 ff67 	bl	80049d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	795b      	ldrb	r3, [r3, #5]
 8003b10:	461a      	mov	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d3d3      	bcc.n	8003ac0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f004 f9ee 	bl	8007f08 <USB_ReadInterrupts>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d101      	bne.n	8003b3a <HAL_HCD_IRQHandler+0x1ea>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_HCD_IRQHandler+0x1ec>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d014      	beq.n	8003b6a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0210 	bic.w	r2, r2, #16
 8003b4e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f001 fbfe 	bl	8005352 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0210 	orr.w	r2, r2, #16
 8003b64:	619a      	str	r2, [r3, #24]
 8003b66:	e000      	b.n	8003b6a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003b68:	bf00      	nop
    }
  }
}
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_HCD_Start+0x16>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e013      	b.n	8003bae <HAL_HCD_Start+0x3e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 fb5c 	bl	8008252 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f004 f84e 	bl	8007c40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_HCD_Stop+0x16>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e00d      	b.n	8003be8 <HAL_HCD_Stop+0x32>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f005 f8af 	bl	8008d3c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 fafe 	bl	80081fe <USB_ResetPort>
 8003c02:	4603      	mov	r3, r0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	334c      	adds	r3, #76	@ 0x4c
 8003c28:	781b      	ldrb	r3, [r3, #0]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3338      	adds	r3, #56	@ 0x38
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f004 fb40 	bl	80082f2 <USB_GetCurrentFrame>
 8003c72:	4603      	mov	r3, r0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f004 fb1b 	bl	80082c4 <USB_GetHostSpeed>
 8003c8e:	4603      	mov	r3, r0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	331a      	adds	r3, #26
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	331b      	adds	r3, #27
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3325      	adds	r3, #37	@ 0x25
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3324      	adds	r3, #36	@ 0x24
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f004 f904 	bl	8007f2e <USB_ReadChInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d11a      	bne.n	8003d66 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2304      	movs	r3, #4
 8003d40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	334d      	adds	r3, #77	@ 0x4d
 8003d52:	2207      	movs	r2, #7
 8003d54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f004 fe8f 	bl	8008a82 <USB_HC_Halt>
 8003d64:	e09e      	b.n	8003ea4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f004 f8dd 	bl	8007f2e <USB_ReadChInterrupts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d7e:	d11b      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	334d      	adds	r3, #77	@ 0x4d
 8003da4:	2208      	movs	r2, #8
 8003da6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f004 fe66 	bl	8008a82 <USB_HC_Halt>
 8003db6:	e075      	b.n	8003ea4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f004 f8b4 	bl	8007f2e <USB_ReadChInterrupts>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d11a      	bne.n	8003e06 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2308      	movs	r3, #8
 8003de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	334d      	adds	r3, #77	@ 0x4d
 8003df2:	2206      	movs	r2, #6
 8003df4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 fe3f 	bl	8008a82 <USB_HC_Halt>
 8003e04:	e04e      	b.n	8003ea4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 f88d 	bl	8007f2e <USB_ReadChInterrupts>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1e:	d11b      	bne.n	8003e58 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334d      	adds	r3, #77	@ 0x4d
 8003e44:	2209      	movs	r2, #9
 8003e46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fe16 	bl	8008a82 <USB_HC_Halt>
 8003e56:	e025      	b.n	8003ea4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f004 f864 	bl	8007f2e <USB_ReadChInterrupts>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6c:	2b80      	cmp	r3, #128	@ 0x80
 8003e6e:	d119      	bne.n	8003ea4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	334d      	adds	r3, #77	@ 0x4d
 8003e92:	2207      	movs	r2, #7
 8003e94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f004 fdef 	bl	8008a82 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 f83e 	bl	8007f2e <USB_ReadChInterrupts>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ebc:	d112      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f004 fddb 	bl	8008a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ede:	6093      	str	r3, [r2, #8]
 8003ee0:	f000 bd75 	b.w	80049ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f004 f81e 	bl	8007f2e <USB_ReadChInterrupts>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 8128 	bne.w	800414e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	331b      	adds	r3, #27
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d119      	bne.n	8003f5a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	331b      	adds	r3, #27
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f58:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	799b      	ldrb	r3, [r3, #6]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01b      	beq.n	8003f9a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3330      	adds	r3, #48	@ 0x30
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	1ac9      	subs	r1, r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4403      	add	r3, r0
 8003f96:	3338      	adds	r3, #56	@ 0x38
 8003f98:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	334d      	adds	r3, #77	@ 0x4d
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	3344      	adds	r3, #68	@ 0x44
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3326      	adds	r3, #38	@ 0x26
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3326      	adds	r3, #38	@ 0x26
 8003ffa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d110      	bne.n	8004022 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f004 fd3a 	bl	8008a82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800401a:	461a      	mov	r2, r3
 800401c:	2310      	movs	r3, #16
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	e03d      	b.n	800409e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3326      	adds	r3, #38	@ 0x26
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d00a      	beq.n	800404e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	3326      	adds	r3, #38	@ 0x26
 8004048:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800404a:	2b01      	cmp	r3, #1
 800404c:	d127      	bne.n	800409e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	440a      	add	r2, r1
 8004064:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004068:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800406c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	334c      	adds	r3, #76	@ 0x4c
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	334c      	adds	r3, #76	@ 0x4c
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f007 f851 	bl	800b140 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	799b      	ldrb	r3, [r3, #6]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d13b      	bne.n	800411e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3338      	adds	r3, #56	@ 0x38
 80040b6:	6819      	ldr	r1, [r3, #0]
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4403      	add	r3, r0
 80040c6:	3328      	adds	r3, #40	@ 0x28
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	440b      	add	r3, r1
 80040cc:	1e59      	subs	r1, r3, #1
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4403      	add	r3, r0
 80040dc:	3328      	adds	r3, #40	@ 0x28
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8470 	beq.w	80049ce <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	333c      	adds	r3, #60	@ 0x3c
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	f083 0301 	eor.w	r3, r3, #1
 8004106:	b2d8      	uxtb	r0, r3
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	333c      	adds	r3, #60	@ 0x3c
 8004116:	4602      	mov	r2, r0
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	f000 bc58 	b.w	80049ce <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	333c      	adds	r3, #60	@ 0x3c
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	f083 0301 	eor.w	r3, r3, #1
 8004136:	b2d8      	uxtb	r0, r3
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	333c      	adds	r3, #60	@ 0x3c
 8004146:	4602      	mov	r2, r0
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	f000 bc40 	b.w	80049ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fee9 	bl	8007f2e <USB_ReadChInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d131      	bne.n	80041ca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004172:	461a      	mov	r2, r3
 8004174:	2320      	movs	r3, #32
 8004176:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	331a      	adds	r3, #26
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	f040 841f 	bne.w	80049ce <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	331b      	adds	r3, #27
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	334d      	adds	r3, #77	@ 0x4d
 80041b4:	2203      	movs	r2, #3
 80041b6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 fc5e 	bl	8008a82 <USB_HC_Halt>
 80041c6:	f000 bc02 	b.w	80049ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f003 feab 	bl	8007f2e <USB_ReadChInterrupts>
 80041d8:	4603      	mov	r3, r0
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	f040 8305 	bne.w	80047ee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	2302      	movs	r3, #2
 80041f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	334d      	adds	r3, #77	@ 0x4d
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d114      	bne.n	8004236 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	334d      	adds	r3, #77	@ 0x4d
 800421c:	2202      	movs	r2, #2
 800421e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	334c      	adds	r3, #76	@ 0x4c
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e2cc      	b.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	334d      	adds	r3, #77	@ 0x4d
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b06      	cmp	r3, #6
 800424a:	d114      	bne.n	8004276 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	334d      	adds	r3, #77	@ 0x4d
 800425c:	2202      	movs	r2, #2
 800425e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	334c      	adds	r3, #76	@ 0x4c
 8004270:	2205      	movs	r2, #5
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e2ac      	b.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	334d      	adds	r3, #77	@ 0x4d
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b07      	cmp	r3, #7
 800428a:	d00b      	beq.n	80042a4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	334d      	adds	r3, #77	@ 0x4d
 800429c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800429e:	2b09      	cmp	r3, #9
 80042a0:	f040 80a6 	bne.w	80043f0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334d      	adds	r3, #77	@ 0x4d
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	3344      	adds	r3, #68	@ 0x44
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4403      	add	r3, r0
 80042d8:	3344      	adds	r3, #68	@ 0x44
 80042da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	3344      	adds	r3, #68	@ 0x44
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d943      	bls.n	800437a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	3344      	adds	r3, #68	@ 0x44
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	331a      	adds	r3, #26
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d123      	bne.n	8004364 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	331b      	adds	r3, #27
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	331c      	adds	r3, #28
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4413      	add	r3, r2
 800434c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	440a      	add	r2, r1
 800435a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334c      	adds	r3, #76	@ 0x4c
 8004374:	2204      	movs	r2, #4
 8004376:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004378:	e229      	b.n	80047ce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	334c      	adds	r3, #76	@ 0x4c
 800438a:	2202      	movs	r2, #2
 800438c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3326      	adds	r3, #38	@ 0x26
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00b      	beq.n	80043bc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3326      	adds	r3, #38	@ 0x26
 80043b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	f040 8209 	bne.w	80047ce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e8:	461a      	mov	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043ee:	e1ee      	b.n	80047ce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	334d      	adds	r3, #77	@ 0x4d
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b05      	cmp	r3, #5
 8004404:	f040 80c8 	bne.w	8004598 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	334d      	adds	r3, #77	@ 0x4d
 8004418:	2202      	movs	r2, #2
 800441a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	331b      	adds	r3, #27
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	f040 81ce 	bne.w	80047d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3326      	adds	r3, #38	@ 0x26
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d16b      	bne.n	8004522 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3348      	adds	r3, #72	@ 0x48
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	1c59      	adds	r1, r3, #1
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4403      	add	r3, r0
 800446a:	3348      	adds	r3, #72	@ 0x48
 800446c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3348      	adds	r3, #72	@ 0x48
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d943      	bls.n	800450c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3348      	adds	r3, #72	@ 0x48
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	331b      	adds	r3, #27
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	3344      	adds	r3, #68	@ 0x44
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d809      	bhi.n	80044d6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	331c      	adds	r3, #28
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	0151      	lsls	r1, r2, #5
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	440a      	add	r2, r1
 80044ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	334c      	adds	r3, #76	@ 0x4c
 8004506:	2204      	movs	r2, #4
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e014      	b.n	8004536 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	334c      	adds	r3, #76	@ 0x4c
 800451c:	2202      	movs	r2, #2
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e009      	b.n	8004536 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	334c      	adds	r3, #76	@ 0x4c
 8004532:	2202      	movs	r2, #2
 8004534:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3326      	adds	r3, #38	@ 0x26
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00b      	beq.n	8004564 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	3326      	adds	r3, #38	@ 0x26
 800455c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800455e:	2b02      	cmp	r3, #2
 8004560:	f040 8136 	bne.w	80047d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800457a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004582:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004590:	461a      	mov	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e11b      	b.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	334d      	adds	r3, #77	@ 0x4d
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	f040 8081 	bne.w	80046b2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	334d      	adds	r3, #77	@ 0x4d
 80045c0:	2202      	movs	r2, #2
 80045c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	331b      	adds	r3, #27
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	f040 80fa 	bne.w	80047d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	334c      	adds	r3, #76	@ 0x4c
 80045ec:	2202      	movs	r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	440a      	add	r2, r1
 8004606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800460a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800460e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	440a      	add	r2, r1
 8004626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800462a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800462e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	440a      	add	r2, r1
 8004646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800464a:	f023 0320 	bic.w	r3, r3, #32
 800464e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3326      	adds	r3, #38	@ 0x26
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	3326      	adds	r3, #38	@ 0x26
 8004676:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004678:	2b02      	cmp	r3, #2
 800467a:	f040 80a9 	bne.w	80047d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4413      	add	r3, r2
 8004686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004694:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800469c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e08e      	b.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	334d      	adds	r3, #77	@ 0x4d
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d143      	bne.n	8004750 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334d      	adds	r3, #77	@ 0x4d
 80046d8:	2202      	movs	r2, #2
 80046da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	334c      	adds	r3, #76	@ 0x4c
 80046ec:	2202      	movs	r2, #2
 80046ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	3326      	adds	r3, #38	@ 0x26
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	3326      	adds	r3, #38	@ 0x26
 8004716:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004718:	2b02      	cmp	r3, #2
 800471a:	d159      	bne.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004732:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800473a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004748:	461a      	mov	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e03f      	b.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	334d      	adds	r3, #77	@ 0x4d
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b08      	cmp	r3, #8
 8004764:	d126      	bne.n	80047b4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	334d      	adds	r3, #77	@ 0x4d
 8004776:	2202      	movs	r2, #2
 8004778:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3344      	adds	r3, #68	@ 0x44
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	1c59      	adds	r1, r3, #1
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4403      	add	r3, r0
 800479a:	3344      	adds	r3, #68	@ 0x44
 800479c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	334c      	adds	r3, #76	@ 0x4c
 80047ae:	2204      	movs	r2, #4
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e00d      	b.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	334d      	adds	r3, #77	@ 0x4d
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	f000 8100 	beq.w	80049cc <HCD_HC_IN_IRQHandler+0xcca>
 80047cc:	e000      	b.n	80047d0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	334c      	adds	r3, #76	@ 0x4c
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f006 fcaa 	bl	800b140 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047ec:	e0ef      	b.n	80049ce <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 fb99 	bl	8007f2e <USB_ReadChInterrupts>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004802:	2b40      	cmp	r3, #64	@ 0x40
 8004804:	d12f      	bne.n	8004866 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004812:	461a      	mov	r2, r3
 8004814:	2340      	movs	r3, #64	@ 0x40
 8004816:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	334d      	adds	r3, #77	@ 0x4d
 8004828:	2205      	movs	r2, #5
 800482a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	331a      	adds	r3, #26
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	3344      	adds	r3, #68	@ 0x44
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f004 f90f 	bl	8008a82 <USB_HC_Halt>
 8004864:	e0b3      	b.n	80049ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f003 fb5d 	bl	8007f2e <USB_ReadChInterrupts>
 8004874:	4603      	mov	r3, r0
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b10      	cmp	r3, #16
 800487c:	f040 80a7 	bne.w	80049ce <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	3326      	adds	r3, #38	@ 0x26
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d11b      	bne.n	80048ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	3344      	adds	r3, #68	@ 0x44
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	334d      	adds	r3, #77	@ 0x4d
 80048ba:	2204      	movs	r2, #4
 80048bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f004 f8db 	bl	8008a82 <USB_HC_Halt>
 80048cc:	e03f      	b.n	800494e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	3326      	adds	r3, #38	@ 0x26
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	3326      	adds	r3, #38	@ 0x26
 80048f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d129      	bne.n	800494e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3344      	adds	r3, #68	@ 0x44
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	799b      	ldrb	r3, [r3, #6]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HCD_HC_IN_IRQHandler+0xc2a>
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	331b      	adds	r3, #27
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d110      	bne.n	800494e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	334d      	adds	r3, #77	@ 0x4d
 800493c:	2204      	movs	r2, #4
 800493e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	4611      	mov	r1, r2
 8004948:	4618      	mov	r0, r3
 800494a:	f004 f89a 	bl	8008a82 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	331b      	adds	r3, #27
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d129      	bne.n	80049b8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	331b      	adds	r3, #27
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	440a      	add	r2, r1
 800498e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004996:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049b2:	f043 0320 	orr.w	r3, r3, #32
 80049b6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c4:	461a      	mov	r2, r3
 80049c6:	2310      	movs	r3, #16
 80049c8:	6093      	str	r3, [r2, #8]
 80049ca:	e000      	b.n	80049ce <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80049cc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f003 fa9b 	bl	8007f2e <USB_ReadChInterrupts>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d11b      	bne.n	8004a3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2304      	movs	r3, #4
 8004a12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	334d      	adds	r3, #77	@ 0x4d
 8004a24:	2207      	movs	r2, #7
 8004a26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f004 f826 	bl	8008a82 <USB_HC_Halt>
 8004a36:	f000 bc89 	b.w	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f003 fa73 	bl	8007f2e <USB_ReadChInterrupts>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	f040 8082 	bne.w	8004b58 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a60:	461a      	mov	r2, r3
 8004a62:	2320      	movs	r3, #32
 8004a64:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004a66:	78fa      	ldrb	r2, [r7, #3]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	3319      	adds	r3, #25
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d124      	bne.n	8004ac6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	3319      	adds	r3, #25
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	334c      	adds	r3, #76	@ 0x4c
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004aa4:	78fa      	ldrb	r2, [r7, #3]
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	334d      	adds	r3, #77	@ 0x4d
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f003 ffde 	bl	8008a82 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	331a      	adds	r3, #26
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	f040 8437 	bne.w	800534c <HCD_HC_OUT_IRQHandler+0x978>
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	331b      	adds	r3, #27
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f040 842b 	bne.w	800534c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3326      	adds	r3, #38	@ 0x26
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d009      	beq.n	8004b20 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	331b      	adds	r3, #27
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	334d      	adds	r3, #77	@ 0x4d
 8004b30:	2203      	movs	r2, #3
 8004b32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	78fa      	ldrb	r2, [r7, #3]
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f003 ffa0 	bl	8008a82 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	3344      	adds	r3, #68	@ 0x44
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	e3f9      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f003 f9e4 	bl	8007f2e <USB_ReadChInterrupts>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b70:	d111      	bne.n	8004b96 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f003 ff77 	bl	8008a82 <USB_HC_Halt>
 8004b94:	e3da      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f003 f9c5 	bl	8007f2e <USB_ReadChInterrupts>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d168      	bne.n	8004c80 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	3344      	adds	r3, #68	@ 0x44
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 f9af 	bl	8007f2e <USB_ReadChInterrupts>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	2b40      	cmp	r3, #64	@ 0x40
 8004bd8:	d112      	bne.n	8004c00 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	3319      	adds	r3, #25
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2340      	movs	r3, #64	@ 0x40
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	331b      	adds	r3, #27
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d019      	beq.n	8004c4a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	331b      	adds	r3, #27
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c48:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c56:	461a      	mov	r2, r3
 8004c58:	2301      	movs	r3, #1
 8004c5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004c5c:	78fa      	ldrb	r2, [r7, #3]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	334d      	adds	r3, #77	@ 0x4d
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f003 ff02 	bl	8008a82 <USB_HC_Halt>
 8004c7e:	e365      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f003 f950 	bl	8007f2e <USB_ReadChInterrupts>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c94:	2b40      	cmp	r3, #64	@ 0x40
 8004c96:	d139      	bne.n	8004d0c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	334d      	adds	r3, #77	@ 0x4d
 8004ca8:	2205      	movs	r2, #5
 8004caa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	331a      	adds	r3, #26
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3319      	adds	r3, #25
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3344      	adds	r3, #68	@ 0x44
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f003 fec5 	bl	8008a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d04:	461a      	mov	r2, r3
 8004d06:	2340      	movs	r3, #64	@ 0x40
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	e31f      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f003 f90a 	bl	8007f2e <USB_ReadChInterrupts>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d11a      	bne.n	8004d5a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d30:	461a      	mov	r2, r3
 8004d32:	2308      	movs	r3, #8
 8004d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	334d      	adds	r3, #77	@ 0x4d
 8004d46:	2206      	movs	r2, #6
 8004d48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	78fa      	ldrb	r2, [r7, #3]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 fe95 	bl	8008a82 <USB_HC_Halt>
 8004d58:	e2f8      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f003 f8e3 	bl	8007f2e <USB_ReadChInterrupts>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d144      	bne.n	8004dfc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3344      	adds	r3, #68	@ 0x44
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	334d      	adds	r3, #77	@ 0x4d
 8004d96:	2204      	movs	r2, #4
 8004d98:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	3319      	adds	r3, #25
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d114      	bne.n	8004dda <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	3318      	adds	r3, #24
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3319      	adds	r3, #25
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f003 fe4d 	bl	8008a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df4:	461a      	mov	r2, r3
 8004df6:	2310      	movs	r3, #16
 8004df8:	6093      	str	r3, [r2, #8]
 8004dfa:	e2a7      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f003 f892 	bl	8007f2e <USB_ReadChInterrupts>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	f040 8083 	bne.w	8004f1c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	799b      	ldrb	r3, [r3, #6]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d111      	bne.n	8004e42 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	334d      	adds	r3, #77	@ 0x4d
 8004e2e:	2207      	movs	r2, #7
 8004e30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f003 fe21 	bl	8008a82 <USB_HC_Halt>
 8004e40:	e062      	b.n	8004f08 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	3344      	adds	r3, #68	@ 0x44
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	1c59      	adds	r1, r3, #1
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4403      	add	r3, r0
 8004e62:	3344      	adds	r3, #68	@ 0x44
 8004e64:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3344      	adds	r3, #68	@ 0x44
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d922      	bls.n	8004ec2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	3344      	adds	r3, #68	@ 0x44
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	334c      	adds	r3, #76	@ 0x4c
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ea4:	78fa      	ldrb	r2, [r7, #3]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	334c      	adds	r3, #76	@ 0x4c
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f006 f940 	bl	800b140 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ec0:	e022      	b.n	8004f08 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	334c      	adds	r3, #76	@ 0x4c
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004eec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ef4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	6093      	str	r3, [r2, #8]
 8004f1a:	e217      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f003 f802 	bl	8007f2e <USB_ReadChInterrupts>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f34:	d11b      	bne.n	8004f6e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	334d      	adds	r3, #77	@ 0x4d
 8004f46:	2209      	movs	r2, #9
 8004f48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f003 fd95 	bl	8008a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f64:	461a      	mov	r2, r3
 8004f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f6a:	6093      	str	r3, [r2, #8]
 8004f6c:	e1ee      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f002 ffd9 	bl	8007f2e <USB_ReadChInterrupts>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	f040 81df 	bne.w	8005346 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f94:	461a      	mov	r2, r3
 8004f96:	2302      	movs	r3, #2
 8004f98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	334d      	adds	r3, #77	@ 0x4d
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	f040 8093 	bne.w	80050d8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	334d      	adds	r3, #77	@ 0x4d
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	334c      	adds	r3, #76	@ 0x4c
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3326      	adds	r3, #38	@ 0x26
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d00b      	beq.n	8005008 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3326      	adds	r3, #38	@ 0x26
 8005000:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005002:	2b03      	cmp	r3, #3
 8005004:	f040 8190 	bne.w	8005328 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	799b      	ldrb	r3, [r3, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d115      	bne.n	800503c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	333d      	adds	r3, #61	@ 0x3d
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	f083 0301 	eor.w	r3, r3, #1
 8005028:	b2d8      	uxtb	r0, r3
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	333d      	adds	r3, #61	@ 0x3d
 8005038:	4602      	mov	r2, r0
 800503a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	799b      	ldrb	r3, [r3, #6]
 8005040:	2b01      	cmp	r3, #1
 8005042:	f040 8171 	bne.w	8005328 <HCD_HC_OUT_IRQHandler+0x954>
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3334      	adds	r3, #52	@ 0x34
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8165 	beq.w	8005328 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3334      	adds	r3, #52	@ 0x34
 800506e:	6819      	ldr	r1, [r3, #0]
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4403      	add	r3, r0
 800507e:	3328      	adds	r3, #40	@ 0x28
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	440b      	add	r3, r1
 8005084:	1e59      	subs	r1, r3, #1
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4403      	add	r3, r0
 8005094:	3328      	adds	r3, #40	@ 0x28
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	fbb1 f3f3 	udiv	r3, r1, r3
 800509c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 813f 	beq.w	8005328 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	333d      	adds	r3, #61	@ 0x3d
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	78fa      	ldrb	r2, [r7, #3]
 80050be:	f083 0301 	eor.w	r3, r3, #1
 80050c2:	b2d8      	uxtb	r0, r3
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	333d      	adds	r3, #61	@ 0x3d
 80050d2:	4602      	mov	r2, r0
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e127      	b.n	8005328 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	334d      	adds	r3, #77	@ 0x4d
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d120      	bne.n	8005130 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	334d      	adds	r3, #77	@ 0x4d
 80050fe:	2202      	movs	r2, #2
 8005100:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	331b      	adds	r3, #27
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 8107 	bne.w	8005328 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	334c      	adds	r3, #76	@ 0x4c
 800512a:	2202      	movs	r2, #2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e0fb      	b.n	8005328 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	334d      	adds	r3, #77	@ 0x4d
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d13a      	bne.n	80051bc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	334d      	adds	r3, #77	@ 0x4d
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	334c      	adds	r3, #76	@ 0x4c
 800516a:	2202      	movs	r2, #2
 800516c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	331b      	adds	r3, #27
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 80d1 	bne.w	8005328 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	331b      	adds	r3, #27
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b8:	6053      	str	r3, [r2, #4]
 80051ba:	e0b5      	b.n	8005328 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	334d      	adds	r3, #77	@ 0x4d
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d114      	bne.n	80051fc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	334d      	adds	r3, #77	@ 0x4d
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	334c      	adds	r3, #76	@ 0x4c
 80051f6:	2202      	movs	r2, #2
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e095      	b.n	8005328 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	334d      	adds	r3, #77	@ 0x4d
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b06      	cmp	r3, #6
 8005210:	d114      	bne.n	800523c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	334d      	adds	r3, #77	@ 0x4d
 8005222:	2202      	movs	r2, #2
 8005224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	334c      	adds	r3, #76	@ 0x4c
 8005236:	2205      	movs	r2, #5
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e075      	b.n	8005328 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	334d      	adds	r3, #77	@ 0x4d
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b07      	cmp	r3, #7
 8005250:	d00a      	beq.n	8005268 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	334d      	adds	r3, #77	@ 0x4d
 8005262:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005264:	2b09      	cmp	r3, #9
 8005266:	d170      	bne.n	800534a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	334d      	adds	r3, #77	@ 0x4d
 8005278:	2202      	movs	r2, #2
 800527a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3344      	adds	r3, #68	@ 0x44
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	3344      	adds	r3, #68	@ 0x44
 800529e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3344      	adds	r3, #68	@ 0x44
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d914      	bls.n	80052e0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	3344      	adds	r3, #68	@ 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	334c      	adds	r3, #76	@ 0x4c
 80052da:	2204      	movs	r2, #4
 80052dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052de:	e022      	b.n	8005326 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334c      	adds	r3, #76	@ 0x4c
 80052f0:	2202      	movs	r2, #2
 80052f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800530a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005312:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005320:	461a      	mov	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005326:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	334c      	adds	r3, #76	@ 0x4c
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f005 fefe 	bl	800b140 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005344:	e002      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800534a:	bf00      	nop
  }
}
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b08a      	sub	sp, #40	@ 0x28
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	0c5b      	lsrs	r3, r3, #17
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005386:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d004      	beq.n	8005398 <HCD_RXQLVL_IRQHandler+0x46>
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b05      	cmp	r3, #5
 8005392:	f000 80b6 	beq.w	8005502 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005396:	e0b7      	b.n	8005508 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80b3 	beq.w	8005506 <HCD_RXQLVL_IRQHandler+0x1b4>
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	332c      	adds	r3, #44	@ 0x2c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80a7 	beq.w	8005506 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4613      	mov	r3, r2
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	3338      	adds	r3, #56	@ 0x38
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	18d1      	adds	r1, r2, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4403      	add	r3, r0
 80053dc:	3334      	adds	r3, #52	@ 0x34
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4299      	cmp	r1, r3
 80053e2:	f200 8083 	bhi.w	80054ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4613      	mov	r3, r2
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	332c      	adds	r3, #44	@ 0x2c
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	b292      	uxth	r2, r2
 8005400:	4619      	mov	r1, r3
 8005402:	f002 fd29 	bl	8007e58 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4613      	mov	r3, r2
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	332c      	adds	r3, #44	@ 0x2c
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	18d1      	adds	r1, r2, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4613      	mov	r3, r2
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4403      	add	r3, r0
 800542a:	332c      	adds	r3, #44	@ 0x2c
 800542c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4613      	mov	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3338      	adds	r3, #56	@ 0x38
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	18d1      	adds	r1, r2, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4613      	mov	r3, r2
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4403      	add	r3, r0
 8005452:	3338      	adds	r3, #56	@ 0x38
 8005454:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	0cdb      	lsrs	r3, r3, #19
 8005466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800546a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4613      	mov	r3, r2
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	3328      	adds	r3, #40	@ 0x28
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4293      	cmp	r3, r2
 8005484:	d13f      	bne.n	8005506 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d03c      	beq.n	8005506 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	333c      	adds	r3, #60	@ 0x3c
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2d8      	uxtb	r0, r3
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4613      	mov	r3, r2
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	333c      	adds	r3, #60	@ 0x3c
 80054e6:	4602      	mov	r2, r0
 80054e8:	701a      	strb	r2, [r3, #0]
      break;
 80054ea:	e00c      	b.n	8005506 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4613      	mov	r3, r2
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	334c      	adds	r3, #76	@ 0x4c
 80054fc:	2204      	movs	r2, #4
 80054fe:	701a      	strb	r2, [r3, #0]
      break;
 8005500:	e001      	b.n	8005506 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005506:	bf00      	nop
  }
}
 8005508:	bf00      	nop
 800550a:	3728      	adds	r7, #40	@ 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800553c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d10b      	bne.n	8005560 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	d102      	bne.n	8005558 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f005 fdd8 	bl	800b108 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b08      	cmp	r3, #8
 8005568:	d132      	bne.n	80055d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f043 0308 	orr.w	r3, r3, #8
 8005570:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b04      	cmp	r3, #4
 800557a:	d126      	bne.n	80055ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7a5b      	ldrb	r3, [r3, #9]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d113      	bne.n	80055ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800558a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800558e:	d106      	bne.n	800559e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2102      	movs	r1, #2
 8005596:	4618      	mov	r0, r3
 8005598:	f002 fdf4 	bl	8008184 <USB_InitFSLSPClkSel>
 800559c:	e011      	b.n	80055c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2101      	movs	r1, #1
 80055a4:	4618      	mov	r0, r3
 80055a6:	f002 fded 	bl	8008184 <USB_InitFSLSPClkSel>
 80055aa:	e00a      	b.n	80055c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	79db      	ldrb	r3, [r3, #7]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d106      	bne.n	80055c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055ba:	461a      	mov	r2, r3
 80055bc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80055c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f005 fdca 	bl	800b15c <HAL_HCD_PortEnabled_Callback>
 80055c8:	e002      	b.n	80055d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f005 fdd4 	bl	800b178 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d103      	bne.n	80055e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f043 0320 	orr.w	r3, r3, #32
 80055e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055e8:	461a      	mov	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6013      	str	r3, [r2, #0]
}
 80055ee:	bf00      	nop
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e12b      	b.n	8005862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc f9ac 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	@ 0x24
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800564a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800565a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800565c:	f001 fa20 	bl	8006aa0 <HAL_RCC_GetPCLK1Freq>
 8005660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4a81      	ldr	r2, [pc, #516]	@ (800586c <HAL_I2C_Init+0x274>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d807      	bhi.n	800567c <HAL_I2C_Init+0x84>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a80      	ldr	r2, [pc, #512]	@ (8005870 <HAL_I2C_Init+0x278>)
 8005670:	4293      	cmp	r3, r2
 8005672:	bf94      	ite	ls
 8005674:	2301      	movls	r3, #1
 8005676:	2300      	movhi	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e006      	b.n	800568a <HAL_I2C_Init+0x92>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a7d      	ldr	r2, [pc, #500]	@ (8005874 <HAL_I2C_Init+0x27c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	bf94      	ite	ls
 8005684:	2301      	movls	r3, #1
 8005686:	2300      	movhi	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0e7      	b.n	8005862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a78      	ldr	r2, [pc, #480]	@ (8005878 <HAL_I2C_Init+0x280>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	0c9b      	lsrs	r3, r3, #18
 800569c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a6a      	ldr	r2, [pc, #424]	@ (800586c <HAL_I2C_Init+0x274>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d802      	bhi.n	80056cc <HAL_I2C_Init+0xd4>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3301      	adds	r3, #1
 80056ca:	e009      	b.n	80056e0 <HAL_I2C_Init+0xe8>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	4a69      	ldr	r2, [pc, #420]	@ (800587c <HAL_I2C_Init+0x284>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	099b      	lsrs	r3, r3, #6
 80056de:	3301      	adds	r3, #1
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80056f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	495c      	ldr	r1, [pc, #368]	@ (800586c <HAL_I2C_Init+0x274>)
 80056fc:	428b      	cmp	r3, r1
 80056fe:	d819      	bhi.n	8005734 <HAL_I2C_Init+0x13c>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	1e59      	subs	r1, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	fbb1 f3f3 	udiv	r3, r1, r3
 800570e:	1c59      	adds	r1, r3, #1
 8005710:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005714:	400b      	ands	r3, r1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_I2C_Init+0x138>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1e59      	subs	r1, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fbb1 f3f3 	udiv	r3, r1, r3
 8005728:	3301      	adds	r3, #1
 800572a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572e:	e051      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 8005730:	2304      	movs	r3, #4
 8005732:	e04f      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d111      	bne.n	8005760 <HAL_I2C_Init+0x168>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1e58      	subs	r0, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	440b      	add	r3, r1
 800574a:	fbb0 f3f3 	udiv	r3, r0, r3
 800574e:	3301      	adds	r3, #1
 8005750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e012      	b.n	8005786 <HAL_I2C_Init+0x18e>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1e58      	subs	r0, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	0099      	lsls	r1, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	fbb0 f3f3 	udiv	r3, r0, r3
 8005776:	3301      	adds	r3, #1
 8005778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Init+0x196>
 800578a:	2301      	movs	r3, #1
 800578c:	e022      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10e      	bne.n	80057b4 <HAL_I2C_Init+0x1bc>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1e58      	subs	r0, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	440b      	add	r3, r1
 80057a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b2:	e00f      	b.n	80057d4 <HAL_I2C_Init+0x1dc>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1e58      	subs	r0, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6859      	ldr	r1, [r3, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	0099      	lsls	r1, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ca:	3301      	adds	r3, #1
 80057cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	6809      	ldr	r1, [r1, #0]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005802:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6911      	ldr	r1, [r2, #16]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68d2      	ldr	r2, [r2, #12]
 800580e:	4311      	orrs	r1, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	430b      	orrs	r3, r1
 8005816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	000186a0 	.word	0x000186a0
 8005870:	001e847f 	.word	0x001e847f
 8005874:	003d08ff 	.word	0x003d08ff
 8005878:	431bde83 	.word	0x431bde83
 800587c:	10624dd3 	.word	0x10624dd3

08005880 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e128      	b.n	8005ae4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a90      	ldr	r2, [pc, #576]	@ (8005aec <HAL_I2S_Init+0x26c>)
 80058aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fc f8ad 	bl	8001a0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80058c8:	f023 030f 	bic.w	r3, r3, #15
 80058cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2202      	movs	r2, #2
 80058d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d060      	beq.n	80059a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80058e6:	2310      	movs	r3, #16
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e001      	b.n	80058f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80058ec:	2320      	movs	r3, #32
 80058ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d802      	bhi.n	80058fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80058fe:	2001      	movs	r0, #1
 8005900:	f001 f9c4 	bl	8006c8c <HAL_RCCEx_GetPeriphCLKFreq>
 8005904:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800590e:	d125      	bne.n	800595c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	3305      	adds	r3, #5
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e01f      	b.n	800597a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	fbb2 f2f3 	udiv	r2, r2, r3
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	461a      	mov	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	3305      	adds	r3, #5
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e00e      	b.n	800597a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	fbb2 f2f3 	udiv	r2, r2, r3
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	461a      	mov	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	3305      	adds	r3, #5
 8005978:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4a5c      	ldr	r2, [pc, #368]	@ (8005af0 <HAL_I2S_Init+0x270>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e003      	b.n	80059a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059a0:	2302      	movs	r3, #2
 80059a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d902      	bls.n	80059b4 <HAL_I2S_Init+0x134>
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2bff      	cmp	r3, #255	@ 0xff
 80059b2:	d907      	bls.n	80059c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b8:	f043 0210 	orr.w	r2, r3, #16
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e08f      	b.n	8005ae4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	ea42 0103 	orr.w	r1, r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80059e2:	f023 030f 	bic.w	r3, r3, #15
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6851      	ldr	r1, [r2, #4]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6892      	ldr	r2, [r2, #8]
 80059ee:	4311      	orrs	r1, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68d2      	ldr	r2, [r2, #12]
 80059f4:	4311      	orrs	r1, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6992      	ldr	r2, [r2, #24]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d161      	bne.n	8005ad4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a38      	ldr	r2, [pc, #224]	@ (8005af4 <HAL_I2S_Init+0x274>)
 8005a14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a37      	ldr	r2, [pc, #220]	@ (8005af8 <HAL_I2S_Init+0x278>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_I2S_Init+0x1a4>
 8005a20:	4b36      	ldr	r3, [pc, #216]	@ (8005afc <HAL_I2S_Init+0x27c>)
 8005a22:	e001      	b.n	8005a28 <HAL_I2S_Init+0x1a8>
 8005a24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	4932      	ldr	r1, [pc, #200]	@ (8005af8 <HAL_I2S_Init+0x278>)
 8005a30:	428a      	cmp	r2, r1
 8005a32:	d101      	bne.n	8005a38 <HAL_I2S_Init+0x1b8>
 8005a34:	4a31      	ldr	r2, [pc, #196]	@ (8005afc <HAL_I2S_Init+0x27c>)
 8005a36:	e001      	b.n	8005a3c <HAL_I2S_Init+0x1bc>
 8005a38:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005a3c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a40:	f023 030f 	bic.w	r3, r3, #15
 8005a44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005af8 <HAL_I2S_Init+0x278>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2S_Init+0x1d4>
 8005a50:	4b2a      	ldr	r3, [pc, #168]	@ (8005afc <HAL_I2S_Init+0x27c>)
 8005a52:	e001      	b.n	8005a58 <HAL_I2S_Init+0x1d8>
 8005a54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a58:	2202      	movs	r2, #2
 8005a5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a25      	ldr	r2, [pc, #148]	@ (8005af8 <HAL_I2S_Init+0x278>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_I2S_Init+0x1ea>
 8005a66:	4b25      	ldr	r3, [pc, #148]	@ (8005afc <HAL_I2S_Init+0x27c>)
 8005a68:	e001      	b.n	8005a6e <HAL_I2S_Init+0x1ee>
 8005a6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a7a:	d003      	beq.n	8005a84 <HAL_I2S_Init+0x204>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	e001      	b.n	8005a90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005abc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8005af8 <HAL_I2S_Init+0x278>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d101      	bne.n	8005acc <HAL_I2S_Init+0x24c>
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <HAL_I2S_Init+0x27c>)
 8005aca:	e001      	b.n	8005ad0 <HAL_I2S_Init+0x250>
 8005acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad0:	897a      	ldrh	r2, [r7, #10]
 8005ad2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	08005bf7 	.word	0x08005bf7
 8005af0:	cccccccd 	.word	0xcccccccd
 8005af4:	08005d0d 	.word	0x08005d0d
 8005af8:	40003800 	.word	0x40003800
 8005afc:	40003400 	.word	0x40003400

08005b00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10e      	bne.n	8005b90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ffb8 	bl	8005b00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005baa:	b292      	uxth	r2, r2
 8005bac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10e      	bne.n	8005bee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff ff93 	bl	8005b14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d13a      	bne.n	8005c88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d109      	bne.n	8005c30 <I2S_IRQHandler+0x3a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c26:	2b40      	cmp	r3, #64	@ 0x40
 8005c28:	d102      	bne.n	8005c30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff ffb4 	bl	8005b98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	d126      	bne.n	8005c88 <I2S_IRQHandler+0x92>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d11f      	bne.n	8005c88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f043 0202 	orr.w	r2, r3, #2
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff ff50 	bl	8005b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d136      	bne.n	8005d02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d109      	bne.n	8005cb2 <I2S_IRQHandler+0xbc>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca8:	2b80      	cmp	r3, #128	@ 0x80
 8005caa:	d102      	bne.n	8005cb2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ff45 	bl	8005b3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d122      	bne.n	8005d02 <I2S_IRQHandler+0x10c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d11b      	bne.n	8005d02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf4:	f043 0204 	orr.w	r2, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff13 	bl	8005b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d02:	bf00      	nop
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a92      	ldr	r2, [pc, #584]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d101      	bne.n	8005d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d26:	4b92      	ldr	r3, [pc, #584]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d28:	e001      	b.n	8005d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a8b      	ldr	r2, [pc, #556]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d101      	bne.n	8005d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d44:	4b8a      	ldr	r3, [pc, #552]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d46:	e001      	b.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d58:	d004      	beq.n	8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 8099 	bne.w	8005e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d107      	bne.n	8005d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f925 	bl	8005fc8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d107      	bne.n	8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9c8 	bl	8006128 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	d13a      	bne.n	8005e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d035      	beq.n	8005e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6e      	ldr	r2, [pc, #440]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005db6:	4b6e      	ldr	r3, [pc, #440]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005db8:	e001      	b.n	8005dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005dba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4969      	ldr	r1, [pc, #420]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dc6:	428b      	cmp	r3, r1
 8005dc8:	d101      	bne.n	8005dce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005dca:	4b69      	ldr	r3, [pc, #420]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dcc:	e001      	b.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005dce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dd2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dd6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005de6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fe88 	bl	8005b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	f040 80c3 	bne.w	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80bd 	beq.w	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a49      	ldr	r2, [pc, #292]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d101      	bne.n	8005e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e4a:	4b49      	ldr	r3, [pc, #292]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e4c:	e001      	b.n	8005e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4944      	ldr	r1, [pc, #272]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e5a:	428b      	cmp	r3, r1
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e5e:	4b44      	ldr	r3, [pc, #272]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e60:	e001      	b.n	8005e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e86:	f043 0204 	orr.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff fe4a 	bl	8005b28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e94:	e089      	b.n	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d107      	bne.n	8005eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8be 	bl	800602c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8fd 	bl	80060c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	d12f      	bne.n	8005f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02a      	beq.n	8005f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005eec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005efa:	e001      	b.n	8005f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005efc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4919      	ldr	r1, [pc, #100]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	d101      	bne.n	8005f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f0c:	4b18      	ldr	r3, [pc, #96]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f0e:	e001      	b.n	8005f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	f043 0202 	orr.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fdfa 	bl	8005b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d136      	bne.n	8005fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d031      	beq.n	8005fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a07      	ldr	r2, [pc, #28]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d101      	bne.n	8005f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f52:	4b07      	ldr	r3, [pc, #28]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f54:	e001      	b.n	8005f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4902      	ldr	r1, [pc, #8]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f62:	428b      	cmp	r3, r1
 8005f64:	d106      	bne.n	8005f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f66:	4b02      	ldr	r3, [pc, #8]	@ (8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f68:	e006      	b.n	8005f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f6a:	bf00      	nop
 8005f6c:	40003800 	.word	0x40003800
 8005f70:	40003400 	.word	0x40003400
 8005f74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f7c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	f043 0204 	orr.w	r2, r3, #4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff fdc0 	bl	8005b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fa8:	e000      	b.n	8005fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005faa:	bf00      	nop
}
 8005fac:	bf00      	nop
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	1c99      	adds	r1, r3, #2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6251      	str	r1, [r2, #36]	@ 0x24
 8005fda:	881a      	ldrh	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d113      	bne.n	8006022 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006008:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ffc9 	bl	8005fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	1c99      	adds	r1, r3, #2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6251      	str	r1, [r2, #36]	@ 0x24
 800603e:	8819      	ldrh	r1, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <I2SEx_TxISR_I2SExt+0x90>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <I2SEx_TxISR_I2SExt+0x22>
 800604a:	4b1d      	ldr	r3, [pc, #116]	@ (80060c0 <I2SEx_TxISR_I2SExt+0x94>)
 800604c:	e001      	b.n	8006052 <I2SEx_TxISR_I2SExt+0x26>
 800604e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006052:	460a      	mov	r2, r1
 8006054:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d121      	bne.n	80060b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a12      	ldr	r2, [pc, #72]	@ (80060bc <I2SEx_TxISR_I2SExt+0x90>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d101      	bne.n	800607c <I2SEx_TxISR_I2SExt+0x50>
 8006078:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <I2SEx_TxISR_I2SExt+0x94>)
 800607a:	e001      	b.n	8006080 <I2SEx_TxISR_I2SExt+0x54>
 800607c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	490d      	ldr	r1, [pc, #52]	@ (80060bc <I2SEx_TxISR_I2SExt+0x90>)
 8006088:	428b      	cmp	r3, r1
 800608a:	d101      	bne.n	8006090 <I2SEx_TxISR_I2SExt+0x64>
 800608c:	4b0c      	ldr	r3, [pc, #48]	@ (80060c0 <I2SEx_TxISR_I2SExt+0x94>)
 800608e:	e001      	b.n	8006094 <I2SEx_TxISR_I2SExt+0x68>
 8006090:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006094:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006098:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ff81 	bl	8005fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40003800 	.word	0x40003800
 80060c0:	40003400 	.word	0x40003400

080060c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68d8      	ldr	r0, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	1c99      	adds	r1, r3, #2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80060dc:	b282      	uxth	r2, r0
 80060de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d113      	bne.n	8006120 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006106:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ff4a 	bl	8005fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a20      	ldr	r2, [pc, #128]	@ (80061b8 <I2SEx_RxISR_I2SExt+0x90>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <I2SEx_RxISR_I2SExt+0x16>
 800613a:	4b20      	ldr	r3, [pc, #128]	@ (80061bc <I2SEx_RxISR_I2SExt+0x94>)
 800613c:	e001      	b.n	8006142 <I2SEx_RxISR_I2SExt+0x1a>
 800613e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006142:	68d8      	ldr	r0, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	1c99      	adds	r1, r3, #2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800614e:	b282      	uxth	r2, r0
 8006150:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d121      	bne.n	80061ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a12      	ldr	r2, [pc, #72]	@ (80061b8 <I2SEx_RxISR_I2SExt+0x90>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d101      	bne.n	8006178 <I2SEx_RxISR_I2SExt+0x50>
 8006174:	4b11      	ldr	r3, [pc, #68]	@ (80061bc <I2SEx_RxISR_I2SExt+0x94>)
 8006176:	e001      	b.n	800617c <I2SEx_RxISR_I2SExt+0x54>
 8006178:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	490d      	ldr	r1, [pc, #52]	@ (80061b8 <I2SEx_RxISR_I2SExt+0x90>)
 8006184:	428b      	cmp	r3, r1
 8006186:	d101      	bne.n	800618c <I2SEx_RxISR_I2SExt+0x64>
 8006188:	4b0c      	ldr	r3, [pc, #48]	@ (80061bc <I2SEx_RxISR_I2SExt+0x94>)
 800618a:	e001      	b.n	8006190 <I2SEx_RxISR_I2SExt+0x68>
 800618c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006190:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006194:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff ff03 	bl	8005fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40003800 	.word	0x40003800
 80061bc:	40003400 	.word	0x40003400

080061c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e267      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d075      	beq.n	80062ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061de:	4b88      	ldr	r3, [pc, #544]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 030c 	and.w	r3, r3, #12
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d00c      	beq.n	8006204 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ea:	4b85      	ldr	r3, [pc, #532]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d112      	bne.n	800621c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061f6:	4b82      	ldr	r3, [pc, #520]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006202:	d10b      	bne.n	800621c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006204:	4b7e      	ldr	r3, [pc, #504]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d05b      	beq.n	80062c8 <HAL_RCC_OscConfig+0x108>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d157      	bne.n	80062c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e242      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006224:	d106      	bne.n	8006234 <HAL_RCC_OscConfig+0x74>
 8006226:	4b76      	ldr	r3, [pc, #472]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a75      	ldr	r2, [pc, #468]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e01d      	b.n	8006270 <HAL_RCC_OscConfig+0xb0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0x98>
 800623e:	4b70      	ldr	r3, [pc, #448]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a6f      	ldr	r2, [pc, #444]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4b6d      	ldr	r3, [pc, #436]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a6c      	ldr	r2, [pc, #432]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e00b      	b.n	8006270 <HAL_RCC_OscConfig+0xb0>
 8006258:	4b69      	ldr	r3, [pc, #420]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a68      	ldr	r2, [pc, #416]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4b66      	ldr	r3, [pc, #408]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a65      	ldr	r2, [pc, #404]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800626a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800626e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006278:	f7fb fe08 	bl	8001e8c <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006280:	f7fb fe04 	bl	8001e8c <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	@ 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e207      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b5b      	ldr	r3, [pc, #364]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0xc0>
 800629e:	e014      	b.n	80062ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7fb fdf4 	bl	8001e8c <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a8:	f7fb fdf0 	bl	8001e8c <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	@ 0x64
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e1f3      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ba:	4b51      	ldr	r3, [pc, #324]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0xe8>
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d063      	beq.n	800639e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e2:	4b47      	ldr	r3, [pc, #284]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d11c      	bne.n	8006328 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ee:	4b44      	ldr	r3, [pc, #272]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d116      	bne.n	8006328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fa:	4b41      	ldr	r3, [pc, #260]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <HAL_RCC_OscConfig+0x152>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d001      	beq.n	8006312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e1c7      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006312:	4b3b      	ldr	r3, [pc, #236]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4937      	ldr	r1, [pc, #220]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006326:	e03a      	b.n	800639e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d020      	beq.n	8006372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006330:	4b34      	ldr	r3, [pc, #208]	@ (8006404 <HAL_RCC_OscConfig+0x244>)
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006336:	f7fb fda9 	bl	8001e8c <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633e:	f7fb fda5 	bl	8001e8c <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1a8      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006350:	4b2b      	ldr	r3, [pc, #172]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635c:	4b28      	ldr	r3, [pc, #160]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4925      	ldr	r1, [pc, #148]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 800636c:	4313      	orrs	r3, r2
 800636e:	600b      	str	r3, [r1, #0]
 8006370:	e015      	b.n	800639e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006372:	4b24      	ldr	r3, [pc, #144]	@ (8006404 <HAL_RCC_OscConfig+0x244>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb fd88 	bl	8001e8c <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006380:	f7fb fd84 	bl	8001e8c <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e187      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006392:	4b1b      	ldr	r3, [pc, #108]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d036      	beq.n	8006418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b2:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <HAL_RCC_OscConfig+0x248>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b8:	f7fb fd68 	bl	8001e8c <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c0:	f7fb fd64 	bl	8001e8c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e167      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <HAL_RCC_OscConfig+0x240>)
 80063d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f0      	beq.n	80063c0 <HAL_RCC_OscConfig+0x200>
 80063de:	e01b      	b.n	8006418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e0:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <HAL_RCC_OscConfig+0x248>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e6:	f7fb fd51 	bl	8001e8c <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ec:	e00e      	b.n	800640c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ee:	f7fb fd4d 	bl	8001e8c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d907      	bls.n	800640c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e150      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
 8006400:	40023800 	.word	0x40023800
 8006404:	42470000 	.word	0x42470000
 8006408:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800640c:	4b88      	ldr	r3, [pc, #544]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800640e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ea      	bne.n	80063ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8097 	beq.w	8006554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642a:	4b81      	ldr	r3, [pc, #516]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10f      	bne.n	8006456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	4b7d      	ldr	r3, [pc, #500]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	4a7c      	ldr	r2, [pc, #496]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006444:	6413      	str	r3, [r2, #64]	@ 0x40
 8006446:	4b7a      	ldr	r3, [pc, #488]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800644e:	60bb      	str	r3, [r7, #8]
 8006450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006456:	4b77      	ldr	r3, [pc, #476]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d118      	bne.n	8006494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006462:	4b74      	ldr	r3, [pc, #464]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a73      	ldr	r2, [pc, #460]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 8006468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646e:	f7fb fd0d 	bl	8001e8c <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006476:	f7fb fd09 	bl	8001e8c <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e10c      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006488:	4b6a      	ldr	r3, [pc, #424]	@ (8006634 <HAL_RCC_OscConfig+0x474>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0f0      	beq.n	8006476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d106      	bne.n	80064aa <HAL_RCC_OscConfig+0x2ea>
 800649c:	4b64      	ldr	r3, [pc, #400]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a0:	4a63      	ldr	r2, [pc, #396]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064a8:	e01c      	b.n	80064e4 <HAL_RCC_OscConfig+0x324>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	d10c      	bne.n	80064cc <HAL_RCC_OscConfig+0x30c>
 80064b2:	4b5f      	ldr	r3, [pc, #380]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b6:	4a5e      	ldr	r2, [pc, #376]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064b8:	f043 0304 	orr.w	r3, r3, #4
 80064bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064be:	4b5c      	ldr	r3, [pc, #368]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ca:	e00b      	b.n	80064e4 <HAL_RCC_OscConfig+0x324>
 80064cc:	4b58      	ldr	r3, [pc, #352]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d0:	4a57      	ldr	r2, [pc, #348]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d8:	4b55      	ldr	r3, [pc, #340]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064dc:	4a54      	ldr	r2, [pc, #336]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80064de:	f023 0304 	bic.w	r3, r3, #4
 80064e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d015      	beq.n	8006518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fb fcce 	bl	8001e8c <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f2:	e00a      	b.n	800650a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f4:	f7fb fcca 	bl	8001e8c <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e0cb      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650a:	4b49      	ldr	r3, [pc, #292]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0ee      	beq.n	80064f4 <HAL_RCC_OscConfig+0x334>
 8006516:	e014      	b.n	8006542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006518:	f7fb fcb8 	bl	8001e8c <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800651e:	e00a      	b.n	8006536 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006520:	f7fb fcb4 	bl	8001e8c <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800652e:	4293      	cmp	r3, r2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e0b5      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006536:	4b3e      	ldr	r3, [pc, #248]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1ee      	bne.n	8006520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d105      	bne.n	8006554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006548:	4b39      	ldr	r3, [pc, #228]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	4a38      	ldr	r2, [pc, #224]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 800654e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006552:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80a1 	beq.w	80066a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800655e:	4b34      	ldr	r3, [pc, #208]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b08      	cmp	r3, #8
 8006568:	d05c      	beq.n	8006624 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d141      	bne.n	80065f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006572:	4b31      	ldr	r3, [pc, #196]	@ (8006638 <HAL_RCC_OscConfig+0x478>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fb fc88 	bl	8001e8c <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006580:	f7fb fc84 	bl	8001e8c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e087      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	4b27      	ldr	r3, [pc, #156]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69da      	ldr	r2, [r3, #28]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	3b01      	subs	r3, #1
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	491b      	ldr	r1, [pc, #108]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006638 <HAL_RCC_OscConfig+0x478>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ce:	f7fb fc5d 	bl	8001e8c <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d6:	f7fb fc59 	bl	8001e8c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e05c      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e8:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0x416>
 80065f4:	e054      	b.n	80066a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f6:	4b10      	ldr	r3, [pc, #64]	@ (8006638 <HAL_RCC_OscConfig+0x478>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fc:	f7fb fc46 	bl	8001e8c <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006604:	f7fb fc42 	bl	8001e8c <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e045      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006616:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <HAL_RCC_OscConfig+0x470>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x444>
 8006622:	e03d      	b.n	80066a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e038      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
 8006630:	40023800 	.word	0x40023800
 8006634:	40007000 	.word	0x40007000
 8006638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <HAL_RCC_OscConfig+0x4ec>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d028      	beq.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d121      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d11a      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800666c:	4013      	ands	r3, r2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006674:	4293      	cmp	r3, r2
 8006676:	d111      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	3b01      	subs	r3, #1
 8006686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006688:	429a      	cmp	r2, r3
 800668a:	d107      	bne.n	800669c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800

080066b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0cc      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066c4:	4b68      	ldr	r3, [pc, #416]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d90c      	bls.n	80066ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d2:	4b65      	ldr	r3, [pc, #404]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066da:	4b63      	ldr	r3, [pc, #396]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0b8      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d020      	beq.n	800673a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006704:	4b59      	ldr	r3, [pc, #356]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4a58      	ldr	r2, [pc, #352]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800670e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800671c:	4b53      	ldr	r3, [pc, #332]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a52      	ldr	r2, [pc, #328]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006728:	4b50      	ldr	r3, [pc, #320]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	494d      	ldr	r1, [pc, #308]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d044      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674e:	4b47      	ldr	r3, [pc, #284]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d119      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e07f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d003      	beq.n	800676e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676a:	2b03      	cmp	r3, #3
 800676c:	d107      	bne.n	800677e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676e:	4b3f      	ldr	r3, [pc, #252]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e06f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677e:	4b3b      	ldr	r3, [pc, #236]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e067      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800678e:	4b37      	ldr	r3, [pc, #220]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f023 0203 	bic.w	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4934      	ldr	r1, [pc, #208]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	4313      	orrs	r3, r2
 800679e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a0:	f7fb fb74 	bl	8001e8c <HAL_GetTick>
 80067a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a6:	e00a      	b.n	80067be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a8:	f7fb fb70 	bl	8001e8c <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e04f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067be:	4b2b      	ldr	r3, [pc, #172]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 020c 	and.w	r2, r3, #12
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d1eb      	bne.n	80067a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067d0:	4b25      	ldr	r3, [pc, #148]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20c      	bcs.n	80067f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b22      	ldr	r3, [pc, #136]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e6:	4b20      	ldr	r3, [pc, #128]	@ (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e032      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006804:	4b19      	ldr	r3, [pc, #100]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4916      	ldr	r1, [pc, #88]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006822:	4b12      	ldr	r3, [pc, #72]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	490e      	ldr	r1, [pc, #56]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	4313      	orrs	r3, r2
 8006834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006836:	f000 f821 	bl	800687c <HAL_RCC_GetSysClockFreq>
 800683a:	4602      	mov	r2, r0
 800683c:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	490a      	ldr	r1, [pc, #40]	@ (8006870 <HAL_RCC_ClockConfig+0x1c0>)
 8006848:	5ccb      	ldrb	r3, [r1, r3]
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	4a09      	ldr	r2, [pc, #36]	@ (8006874 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006852:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <HAL_RCC_ClockConfig+0x1c8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7fb fad4 	bl	8001e04 <HAL_InitTick>

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40023c00 	.word	0x40023c00
 800686c:	40023800 	.word	0x40023800
 8006870:	0800b834 	.word	0x0800b834
 8006874:	20000014 	.word	0x20000014
 8006878:	20000018 	.word	0x20000018

0800687c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800687c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006880:	b094      	sub	sp, #80	@ 0x50
 8006882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006894:	4b79      	ldr	r3, [pc, #484]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 030c 	and.w	r3, r3, #12
 800689c:	2b08      	cmp	r3, #8
 800689e:	d00d      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x40>
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	f200 80e1 	bhi.w	8006a68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0x34>
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d003      	beq.n	80068b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ae:	e0db      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b0:	4b73      	ldr	r3, [pc, #460]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x204>)
 80068b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b4:	e0db      	b.n	8006a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068b6:	4b73      	ldr	r3, [pc, #460]	@ (8006a84 <HAL_RCC_GetSysClockFreq+0x208>)
 80068b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ba:	e0d8      	b.n	8006a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068bc:	4b6f      	ldr	r3, [pc, #444]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068c6:	4b6d      	ldr	r3, [pc, #436]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d063      	beq.n	800699a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d2:	4b6a      	ldr	r3, [pc, #424]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	2200      	movs	r2, #0
 80068da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80068de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068e6:	2300      	movs	r3, #0
 80068e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068ee:	4622      	mov	r2, r4
 80068f0:	462b      	mov	r3, r5
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f04f 0100 	mov.w	r1, #0
 80068fa:	0159      	lsls	r1, r3, #5
 80068fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006900:	0150      	lsls	r0, r2, #5
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4621      	mov	r1, r4
 8006908:	1a51      	subs	r1, r2, r1
 800690a:	6139      	str	r1, [r7, #16]
 800690c:	4629      	mov	r1, r5
 800690e:	eb63 0301 	sbc.w	r3, r3, r1
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006920:	4659      	mov	r1, fp
 8006922:	018b      	lsls	r3, r1, #6
 8006924:	4651      	mov	r1, sl
 8006926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800692a:	4651      	mov	r1, sl
 800692c:	018a      	lsls	r2, r1, #6
 800692e:	4651      	mov	r1, sl
 8006930:	ebb2 0801 	subs.w	r8, r2, r1
 8006934:	4659      	mov	r1, fp
 8006936:	eb63 0901 	sbc.w	r9, r3, r1
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800694e:	4690      	mov	r8, r2
 8006950:	4699      	mov	r9, r3
 8006952:	4623      	mov	r3, r4
 8006954:	eb18 0303 	adds.w	r3, r8, r3
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	462b      	mov	r3, r5
 800695c:	eb49 0303 	adc.w	r3, r9, r3
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800696e:	4629      	mov	r1, r5
 8006970:	024b      	lsls	r3, r1, #9
 8006972:	4621      	mov	r1, r4
 8006974:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006978:	4621      	mov	r1, r4
 800697a:	024a      	lsls	r2, r1, #9
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006982:	2200      	movs	r2, #0
 8006984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800698c:	f7f9 fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4613      	mov	r3, r2
 8006996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006998:	e058      	b.n	8006a4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699a:	4b38      	ldr	r3, [pc, #224]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	099b      	lsrs	r3, r3, #6
 80069a0:	2200      	movs	r2, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	4611      	mov	r1, r2
 80069a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069aa:	623b      	str	r3, [r7, #32]
 80069ac:	2300      	movs	r3, #0
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	f04f 0000 	mov.w	r0, #0
 80069bc:	f04f 0100 	mov.w	r1, #0
 80069c0:	0159      	lsls	r1, r3, #5
 80069c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069c6:	0150      	lsls	r0, r2, #5
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4641      	mov	r1, r8
 80069ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80069d2:	4649      	mov	r1, r9
 80069d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069ec:	ebb2 040a 	subs.w	r4, r2, sl
 80069f0:	eb63 050b 	sbc.w	r5, r3, fp
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	00eb      	lsls	r3, r5, #3
 80069fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a02:	00e2      	lsls	r2, r4, #3
 8006a04:	4614      	mov	r4, r2
 8006a06:	461d      	mov	r5, r3
 8006a08:	4643      	mov	r3, r8
 8006a0a:	18e3      	adds	r3, r4, r3
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	464b      	mov	r3, r9
 8006a10:	eb45 0303 	adc.w	r3, r5, r3
 8006a14:	607b      	str	r3, [r7, #4]
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a22:	4629      	mov	r1, r5
 8006a24:	028b      	lsls	r3, r1, #10
 8006a26:	4621      	mov	r1, r4
 8006a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	028a      	lsls	r2, r1, #10
 8006a30:	4610      	mov	r0, r2
 8006a32:	4619      	mov	r1, r3
 8006a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a36:	2200      	movs	r2, #0
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	61fa      	str	r2, [r7, #28]
 8006a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a40:	f7f9 fbc2 	bl	80001c8 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4613      	mov	r3, r2
 8006a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	3301      	adds	r3, #1
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a66:	e002      	b.n	8006a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3750      	adds	r7, #80	@ 0x50
 8006a74:	46bd      	mov	sp, r7
 8006a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	00f42400 	.word	0x00f42400
 8006a84:	007a1200 	.word	0x007a1200

08006a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a8c:	4b03      	ldr	r3, [pc, #12]	@ (8006a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000014 	.word	0x20000014

08006aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aa4:	f7ff fff0 	bl	8006a88 <HAL_RCC_GetHCLKFreq>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	0a9b      	lsrs	r3, r3, #10
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	4903      	ldr	r1, [pc, #12]	@ (8006ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab6:	5ccb      	ldrb	r3, [r1, r3]
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	0800b844 	.word	0x0800b844

08006ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d035      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006af0:	4b62      	ldr	r3, [pc, #392]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006af6:	f7fb f9c9 	bl	8001e8c <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006afc:	e008      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006afe:	f7fb f9c5 	bl	8001e8c <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e0b0      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b10:	4b5b      	ldr	r3, [pc, #364]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f0      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	019a      	lsls	r2, r3, #6
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	071b      	lsls	r3, r3, #28
 8006b28:	4955      	ldr	r1, [pc, #340]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b30:	4b52      	ldr	r3, [pc, #328]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b36:	f7fb f9a9 	bl	8001e8c <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b3e:	f7fb f9a5 	bl	8001e8c <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e090      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b50:	4b4b      	ldr	r3, [pc, #300]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8083 	beq.w	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	4b44      	ldr	r3, [pc, #272]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b72:	4a43      	ldr	r2, [pc, #268]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b7a:	4b41      	ldr	r3, [pc, #260]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b86:	4b3f      	ldr	r3, [pc, #252]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b92:	f7fb f97b 	bl	8001e8c <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006b98:	e008      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b9a:	f7fb f977 	bl	8001e8c <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e062      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006bac:	4b35      	ldr	r3, [pc, #212]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0f0      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bb8:	4b31      	ldr	r3, [pc, #196]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d02f      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d028      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006be0:	4b29      	ldr	r3, [pc, #164]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006be6:	4b28      	ldr	r3, [pc, #160]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bec:	4a24      	ldr	r2, [pc, #144]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bf2:	4b23      	ldr	r3, [pc, #140]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d114      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bfe:	f7fb f945 	bl	8001e8c <HAL_GetTick>
 8006c02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c04:	e00a      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c06:	f7fb f941 	bl	8001e8c <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e02a      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c1c:	4b18      	ldr	r3, [pc, #96]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0ee      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c34:	d10d      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c36:	4b12      	ldr	r3, [pc, #72]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c4a:	490d      	ldr	r1, [pc, #52]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	608b      	str	r3, [r1, #8]
 8006c50:	e005      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c52:	4b0b      	ldr	r3, [pc, #44]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	4a0a      	ldr	r2, [pc, #40]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c5c:	6093      	str	r3, [r2, #8]
 8006c5e:	4b08      	ldr	r3, [pc, #32]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c6a:	4905      	ldr	r1, [pc, #20]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	42470068 	.word	0x42470068
 8006c80:	40023800 	.word	0x40023800
 8006c84:	40007000 	.word	0x40007000
 8006c88:	42470e40 	.word	0x42470e40

08006c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d13f      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006caa:	4b24      	ldr	r3, [pc, #144]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d006      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006cc0:	d12f      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006cc4:	617b      	str	r3, [r7, #20]
          break;
 8006cc6:	e02f      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cd4:	d108      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cd6:	4b19      	ldr	r3, [pc, #100]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cde:	4a19      	ldr	r2, [pc, #100]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	e007      	b.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ce8:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf0:	4a15      	ldr	r2, [pc, #84]	@ (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006cf8:	4b10      	ldr	r3, [pc, #64]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cfe:	099b      	lsrs	r3, r3, #6
 8006d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d12:	0f1b      	lsrs	r3, r3, #28
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1e:	617b      	str	r3, [r7, #20]
          break;
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]
          break;
 8006d26:	bf00      	nop
        }
      }
      break;
 8006d28:	e000      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006d2a:	bf00      	nop
    }
  }
  return frequency;
 8006d2c:	697b      	ldr	r3, [r7, #20]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	00bb8000 	.word	0x00bb8000
 8006d44:	007a1200 	.word	0x007a1200
 8006d48:	00f42400 	.word	0x00f42400

08006d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e07b      	b.n	8006e56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d108      	bne.n	8006d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d6e:	d009      	beq.n	8006d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	61da      	str	r2, [r3, #28]
 8006d76:	e005      	b.n	8006d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fa feb4 	bl	8001b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e08:	ea42 0103 	orr.w	r1, r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	0c1b      	lsrs	r3, r3, #16
 8006e22:	f003 0104 	and.w	r1, r3, #4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	f003 0210 	and.w	r2, r3, #16
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69da      	ldr	r2, [r3, #28]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e041      	b.n	8006ef4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fa fe89 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f000 fad9 	bl	8007454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e041      	b.n	8006f92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f839 	bl	8006f9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f000 fa8a 	bl	8007454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <HAL_TIM_PWM_Start+0x24>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	bf14      	ite	ne
 8006fcc:	2301      	movne	r3, #1
 8006fce:	2300      	moveq	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	e022      	b.n	800701a <HAL_TIM_PWM_Start+0x6a>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d109      	bne.n	8006fee <HAL_TIM_PWM_Start+0x3e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	bf14      	ite	ne
 8006fe6:	2301      	movne	r3, #1
 8006fe8:	2300      	moveq	r3, #0
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	e015      	b.n	800701a <HAL_TIM_PWM_Start+0x6a>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d109      	bne.n	8007008 <HAL_TIM_PWM_Start+0x58>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	bf14      	ite	ne
 8007000:	2301      	movne	r3, #1
 8007002:	2300      	moveq	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	e008      	b.n	800701a <HAL_TIM_PWM_Start+0x6a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	bf14      	ite	ne
 8007014:	2301      	movne	r3, #1
 8007016:	2300      	moveq	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e07c      	b.n	800711c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <HAL_TIM_PWM_Start+0x82>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007030:	e013      	b.n	800705a <HAL_TIM_PWM_Start+0xaa>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b04      	cmp	r3, #4
 8007036:	d104      	bne.n	8007042 <HAL_TIM_PWM_Start+0x92>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007040:	e00b      	b.n	800705a <HAL_TIM_PWM_Start+0xaa>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d104      	bne.n	8007052 <HAL_TIM_PWM_Start+0xa2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007050:	e003      	b.n	800705a <HAL_TIM_PWM_Start+0xaa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2201      	movs	r2, #1
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fce6 	bl	8007a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2d      	ldr	r2, [pc, #180]	@ (8007124 <HAL_TIM_PWM_Start+0x174>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_TIM_PWM_Start+0xcc>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a2c      	ldr	r2, [pc, #176]	@ (8007128 <HAL_TIM_PWM_Start+0x178>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d101      	bne.n	8007080 <HAL_TIM_PWM_Start+0xd0>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_TIM_PWM_Start+0xd2>
 8007080:	2300      	movs	r3, #0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007094:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a22      	ldr	r2, [pc, #136]	@ (8007124 <HAL_TIM_PWM_Start+0x174>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d022      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x136>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a8:	d01d      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x136>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1f      	ldr	r2, [pc, #124]	@ (800712c <HAL_TIM_PWM_Start+0x17c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x136>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007130 <HAL_TIM_PWM_Start+0x180>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x136>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007134 <HAL_TIM_PWM_Start+0x184>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x136>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <HAL_TIM_PWM_Start+0x178>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x136>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a18      	ldr	r2, [pc, #96]	@ (8007138 <HAL_TIM_PWM_Start+0x188>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x136>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a16      	ldr	r2, [pc, #88]	@ (800713c <HAL_TIM_PWM_Start+0x18c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d111      	bne.n	800710a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b06      	cmp	r3, #6
 80070f6:	d010      	beq.n	800711a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007108:	e007      	b.n	800711a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40014000 	.word	0x40014000
 800713c:	40001800 	.word	0x40001800

08007140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800715a:	2302      	movs	r3, #2
 800715c:	e0ae      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b0c      	cmp	r3, #12
 800716a:	f200 809f 	bhi.w	80072ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	080071a9 	.word	0x080071a9
 8007178:	080072ad 	.word	0x080072ad
 800717c:	080072ad 	.word	0x080072ad
 8007180:	080072ad 	.word	0x080072ad
 8007184:	080071e9 	.word	0x080071e9
 8007188:	080072ad 	.word	0x080072ad
 800718c:	080072ad 	.word	0x080072ad
 8007190:	080072ad 	.word	0x080072ad
 8007194:	0800722b 	.word	0x0800722b
 8007198:	080072ad 	.word	0x080072ad
 800719c:	080072ad 	.word	0x080072ad
 80071a0:	080072ad 	.word	0x080072ad
 80071a4:	0800726b 	.word	0x0800726b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f9f6 	bl	80075a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0208 	orr.w	r2, r2, #8
 80071c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0204 	bic.w	r2, r2, #4
 80071d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6999      	ldr	r1, [r3, #24]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	691a      	ldr	r2, [r3, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	619a      	str	r2, [r3, #24]
      break;
 80071e6:	e064      	b.n	80072b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fa46 	bl	8007680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6999      	ldr	r1, [r3, #24]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	021a      	lsls	r2, r3, #8
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	619a      	str	r2, [r3, #24]
      break;
 8007228:	e043      	b.n	80072b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fa9b 	bl	800776c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0208 	orr.w	r2, r2, #8
 8007244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69da      	ldr	r2, [r3, #28]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0204 	bic.w	r2, r2, #4
 8007254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69d9      	ldr	r1, [r3, #28]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	691a      	ldr	r2, [r3, #16]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	61da      	str	r2, [r3, #28]
      break;
 8007268:	e023      	b.n	80072b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 faef 	bl	8007854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69d9      	ldr	r1, [r3, #28]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	021a      	lsls	r2, r3, #8
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	61da      	str	r2, [r3, #28]
      break;
 80072aa:	e002      	b.n	80072b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
      break;
 80072b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_TIM_ConfigClockSource+0x1c>
 80072dc:	2302      	movs	r3, #2
 80072de:	e0b4      	b.n	800744a <HAL_TIM_ConfigClockSource+0x186>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007318:	d03e      	beq.n	8007398 <HAL_TIM_ConfigClockSource+0xd4>
 800731a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800731e:	f200 8087 	bhi.w	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007326:	f000 8086 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x172>
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732e:	d87f      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b70      	cmp	r3, #112	@ 0x70
 8007332:	d01a      	beq.n	800736a <HAL_TIM_ConfigClockSource+0xa6>
 8007334:	2b70      	cmp	r3, #112	@ 0x70
 8007336:	d87b      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007338:	2b60      	cmp	r3, #96	@ 0x60
 800733a:	d050      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x11a>
 800733c:	2b60      	cmp	r3, #96	@ 0x60
 800733e:	d877      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007340:	2b50      	cmp	r3, #80	@ 0x50
 8007342:	d03c      	beq.n	80073be <HAL_TIM_ConfigClockSource+0xfa>
 8007344:	2b50      	cmp	r3, #80	@ 0x50
 8007346:	d873      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007348:	2b40      	cmp	r3, #64	@ 0x40
 800734a:	d058      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x13a>
 800734c:	2b40      	cmp	r3, #64	@ 0x40
 800734e:	d86f      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007350:	2b30      	cmp	r3, #48	@ 0x30
 8007352:	d064      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15a>
 8007354:	2b30      	cmp	r3, #48	@ 0x30
 8007356:	d86b      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007358:	2b20      	cmp	r3, #32
 800735a:	d060      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15a>
 800735c:	2b20      	cmp	r3, #32
 800735e:	d867      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d05c      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15a>
 8007364:	2b10      	cmp	r3, #16
 8007366:	d05a      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15a>
 8007368:	e062      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800737a:	f000 fb3b 	bl	80079f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800738c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	609a      	str	r2, [r3, #8]
      break;
 8007396:	e04f      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073a8:	f000 fb24 	bl	80079f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073ba:	609a      	str	r2, [r3, #8]
      break;
 80073bc:	e03c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ca:	461a      	mov	r2, r3
 80073cc:	f000 fa98 	bl	8007900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2150      	movs	r1, #80	@ 0x50
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 faf1 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 80073dc:	e02c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ea:	461a      	mov	r2, r3
 80073ec:	f000 fab7 	bl	800795e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2160      	movs	r1, #96	@ 0x60
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fae1 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 80073fc:	e01c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800740a:	461a      	mov	r2, r3
 800740c:	f000 fa78 	bl	8007900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2140      	movs	r1, #64	@ 0x40
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fad1 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 800741c:	e00c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f000 fac8 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 800742e:	e003      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
      break;
 8007434:	e000      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a43      	ldr	r2, [pc, #268]	@ (8007574 <TIM_Base_SetConfig+0x120>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007472:	d00f      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a40      	ldr	r2, [pc, #256]	@ (8007578 <TIM_Base_SetConfig+0x124>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00b      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a3f      	ldr	r2, [pc, #252]	@ (800757c <TIM_Base_SetConfig+0x128>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a3e      	ldr	r2, [pc, #248]	@ (8007580 <TIM_Base_SetConfig+0x12c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a3d      	ldr	r2, [pc, #244]	@ (8007584 <TIM_Base_SetConfig+0x130>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d108      	bne.n	80074a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a32      	ldr	r2, [pc, #200]	@ (8007574 <TIM_Base_SetConfig+0x120>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d02b      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b4:	d027      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2f      	ldr	r2, [pc, #188]	@ (8007578 <TIM_Base_SetConfig+0x124>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d023      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2e      	ldr	r2, [pc, #184]	@ (800757c <TIM_Base_SetConfig+0x128>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01f      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2d      	ldr	r2, [pc, #180]	@ (8007580 <TIM_Base_SetConfig+0x12c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01b      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007584 <TIM_Base_SetConfig+0x130>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d017      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007588 <TIM_Base_SetConfig+0x134>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2a      	ldr	r2, [pc, #168]	@ (800758c <TIM_Base_SetConfig+0x138>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00f      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a29      	ldr	r2, [pc, #164]	@ (8007590 <TIM_Base_SetConfig+0x13c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00b      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a28      	ldr	r2, [pc, #160]	@ (8007594 <TIM_Base_SetConfig+0x140>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d007      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a27      	ldr	r2, [pc, #156]	@ (8007598 <TIM_Base_SetConfig+0x144>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d003      	beq.n	8007506 <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a26      	ldr	r2, [pc, #152]	@ (800759c <TIM_Base_SetConfig+0x148>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d108      	bne.n	8007518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800750c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a0e      	ldr	r2, [pc, #56]	@ (8007574 <TIM_Base_SetConfig+0x120>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0xf2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a10      	ldr	r2, [pc, #64]	@ (8007584 <TIM_Base_SetConfig+0x130>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d103      	bne.n	800754e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f043 0204 	orr.w	r2, r3, #4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40010000 	.word	0x40010000
 8007578:	40000400 	.word	0x40000400
 800757c:	40000800 	.word	0x40000800
 8007580:	40000c00 	.word	0x40000c00
 8007584:	40010400 	.word	0x40010400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800
 8007594:	40001800 	.word	0x40001800
 8007598:	40001c00 	.word	0x40001c00
 800759c:	40002000 	.word	0x40002000

080075a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	f023 0201 	bic.w	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0303 	bic.w	r3, r3, #3
 80075d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f023 0302 	bic.w	r3, r3, #2
 80075e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a20      	ldr	r2, [pc, #128]	@ (8007678 <TIM_OC1_SetConfig+0xd8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC1_SetConfig+0x64>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a1f      	ldr	r2, [pc, #124]	@ (800767c <TIM_OC1_SetConfig+0xdc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d10c      	bne.n	800761e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f023 0308 	bic.w	r3, r3, #8
 800760a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 0304 	bic.w	r3, r3, #4
 800761c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a15      	ldr	r2, [pc, #84]	@ (8007678 <TIM_OC1_SetConfig+0xd8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d003      	beq.n	800762e <TIM_OC1_SetConfig+0x8e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a14      	ldr	r2, [pc, #80]	@ (800767c <TIM_OC1_SetConfig+0xdc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d111      	bne.n	8007652 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800763c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	621a      	str	r2, [r3, #32]
}
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	40010000 	.word	0x40010000
 800767c:	40010400 	.word	0x40010400

08007680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f023 0210 	bic.w	r2, r3, #16
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0320 	bic.w	r3, r3, #32
 80076ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a22      	ldr	r2, [pc, #136]	@ (8007764 <TIM_OC2_SetConfig+0xe4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC2_SetConfig+0x68>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a21      	ldr	r2, [pc, #132]	@ (8007768 <TIM_OC2_SetConfig+0xe8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10d      	bne.n	8007704 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a17      	ldr	r2, [pc, #92]	@ (8007764 <TIM_OC2_SetConfig+0xe4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <TIM_OC2_SetConfig+0x94>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a16      	ldr	r2, [pc, #88]	@ (8007768 <TIM_OC2_SetConfig+0xe8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d113      	bne.n	800773c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800771a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	621a      	str	r2, [r3, #32]
}
 8007756:	bf00      	nop
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40010000 	.word	0x40010000
 8007768:	40010400 	.word	0x40010400

0800776c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a21      	ldr	r2, [pc, #132]	@ (800784c <TIM_OC3_SetConfig+0xe0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_OC3_SetConfig+0x66>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a20      	ldr	r2, [pc, #128]	@ (8007850 <TIM_OC3_SetConfig+0xe4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d10d      	bne.n	80077ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a16      	ldr	r2, [pc, #88]	@ (800784c <TIM_OC3_SetConfig+0xe0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC3_SetConfig+0x92>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a15      	ldr	r2, [pc, #84]	@ (8007850 <TIM_OC3_SetConfig+0xe4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d113      	bne.n	8007826 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	621a      	str	r2, [r3, #32]
}
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40010000 	.word	0x40010000
 8007850:	40010400 	.word	0x40010400

08007854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800788a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800789e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	031b      	lsls	r3, r3, #12
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a12      	ldr	r2, [pc, #72]	@ (80078f8 <TIM_OC4_SetConfig+0xa4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_OC4_SetConfig+0x68>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a11      	ldr	r2, [pc, #68]	@ (80078fc <TIM_OC4_SetConfig+0xa8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d109      	bne.n	80078d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	019b      	lsls	r3, r3, #6
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40010400 	.word	0x40010400

08007900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f023 0201 	bic.w	r2, r3, #1
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800792a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 030a 	bic.w	r3, r3, #10
 800793c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795e:	b480      	push	{r7}
 8007960:	b087      	sub	sp, #28
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	f023 0210 	bic.w	r2, r3, #16
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	031b      	lsls	r3, r3, #12
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800799a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	f043 0307 	orr.w	r3, r3, #7
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	609a      	str	r2, [r3, #8]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	021a      	lsls	r2, r3, #8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	609a      	str	r2, [r3, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 031f 	and.w	r3, r3, #31
 8007a46:	2201      	movs	r2, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	43db      	mvns	r3, r3
 8007a56:	401a      	ands	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a1a      	ldr	r2, [r3, #32]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f003 031f 	and.w	r3, r3, #31
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
	...

08007a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e05a      	b.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a21      	ldr	r2, [pc, #132]	@ (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d022      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ae4:	d01d      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1d      	ldr	r2, [pc, #116]	@ (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d018      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1a      	ldr	r2, [pc, #104]	@ (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00e      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d009      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a17      	ldr	r2, [pc, #92]	@ (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d004      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	@ (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d10c      	bne.n	8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40010000 	.word	0x40010000
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40000c00 	.word	0x40000c00
 8007b6c:	40010400 	.word	0x40010400
 8007b70:	40014000 	.word	0x40014000
 8007b74:	40001800 	.word	0x40001800

08007b78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b78:	b084      	sub	sp, #16
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	f107 001c 	add.w	r0, r7, #28
 8007b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d123      	bne.n	8007bda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d105      	bne.n	8007bce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f9dc 	bl	8007f8c <USB_CoreReset>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
 8007bd8:	e01b      	b.n	8007c12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9d0 	bl	8007f8c <USB_CoreReset>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007bf0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c04:	e005      	b.n	8007c12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c12:	7fbb      	ldrb	r3, [r7, #30]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d10b      	bne.n	8007c30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f043 0206 	orr.w	r2, r3, #6
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f043 0220 	orr.w	r2, r3, #32
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c3c:	b004      	add	sp, #16
 8007c3e:	4770      	bx	lr

08007c40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f043 0201 	orr.w	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f023 0201 	bic.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d115      	bne.n	8007cd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007cb2:	200a      	movs	r0, #10
 8007cb4:	f7fa f8f6 	bl	8001ea4 <HAL_Delay>
      ms += 10U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	330a      	adds	r3, #10
 8007cbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f956 	bl	8007f70 <USB_GetMode>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d01e      	beq.n	8007d08 <USB_SetCurrentMode+0x84>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cce:	d9f0      	bls.n	8007cb2 <USB_SetCurrentMode+0x2e>
 8007cd0:	e01a      	b.n	8007d08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d115      	bne.n	8007d04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ce4:	200a      	movs	r0, #10
 8007ce6:	f7fa f8dd 	bl	8001ea4 <HAL_Delay>
      ms += 10U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	330a      	adds	r3, #10
 8007cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f93d 	bl	8007f70 <USB_GetMode>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <USB_SetCurrentMode+0x84>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d00:	d9f0      	bls.n	8007ce4 <USB_SetCurrentMode+0x60>
 8007d02:	e001      	b.n	8007d08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e005      	b.n	8007d14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d0c:	d101      	bne.n	8007d12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d36:	d901      	bls.n	8007d3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e01b      	b.n	8007d74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	daf2      	bge.n	8007d2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	019b      	lsls	r3, r3, #6
 8007d4c:	f043 0220 	orr.w	r2, r3, #32
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d60:	d901      	bls.n	8007d66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e006      	b.n	8007d74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d0f0      	beq.n	8007d54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d98:	d901      	bls.n	8007d9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e018      	b.n	8007dd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	daf2      	bge.n	8007d8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2210      	movs	r2, #16
 8007dae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dbc:	d901      	bls.n	8007dc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e006      	b.n	8007dd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0310 	and.w	r3, r3, #16
 8007dca:	2b10      	cmp	r3, #16
 8007dcc:	d0f0      	beq.n	8007db0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b089      	sub	sp, #36	@ 0x24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4611      	mov	r1, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	460b      	mov	r3, r1
 8007dec:	71fb      	strb	r3, [r7, #7]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d123      	bne.n	8007e4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e02:	88bb      	ldrh	r3, [r7, #4]
 8007e04:	3303      	adds	r3, #3
 8007e06:	089b      	lsrs	r3, r3, #2
 8007e08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	e018      	b.n	8007e42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	031a      	lsls	r2, r3, #12
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	3301      	adds	r3, #1
 8007e28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	3301      	adds	r3, #1
 8007e34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d3e2      	bcc.n	8007e10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3724      	adds	r7, #36	@ 0x24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b08b      	sub	sp, #44	@ 0x2c
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	089b      	lsrs	r3, r3, #2
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e7e:	2300      	movs	r3, #0
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	e014      	b.n	8007eae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	3301      	adds	r3, #1
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	3301      	adds	r3, #1
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	623b      	str	r3, [r7, #32]
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3e6      	bcc.n	8007e84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007eb6:	8bfb      	ldrh	r3, [r7, #30]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01e      	beq.n	8007efa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f107 0310 	add.w	r3, r7, #16
 8007ecc:	6812      	ldr	r2, [r2, #0]
 8007ece:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	701a      	strb	r2, [r3, #0]
      i++;
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	3301      	adds	r3, #1
 8007eec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007eee:	8bfb      	ldrh	r3, [r7, #30]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ef4:	8bfb      	ldrh	r3, [r7, #30]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ea      	bne.n	8007ed0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	372c      	adds	r7, #44	@ 0x2c
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f20:	68fb      	ldr	r3, [r7, #12]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007f4e:	78fb      	ldrb	r3, [r7, #3]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f62:	68bb      	ldr	r3, [r7, #8]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fa4:	d901      	bls.n	8007faa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e022      	b.n	8007ff0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	daf2      	bge.n	8007f98 <USB_CoreReset+0xc>

  count = 10U;
 8007fb2:	230a      	movs	r3, #10
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007fb6:	e002      	b.n	8007fbe <USB_CoreReset+0x32>
  {
    count--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f9      	bne.n	8007fb8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f043 0201 	orr.w	r2, r3, #1
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fdc:	d901      	bls.n	8007fe2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e006      	b.n	8007ff0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d0f0      	beq.n	8007fd0 <USB_CoreReset+0x44>

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b086      	sub	sp, #24
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800800a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800801c:	461a      	mov	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008026:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008032:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d119      	bne.n	8008086 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008056:	2b01      	cmp	r3, #1
 8008058:	d10a      	bne.n	8008070 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008068:	f043 0304 	orr.w	r3, r3, #4
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	e014      	b.n	800809a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800807e:	f023 0304 	bic.w	r3, r3, #4
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	e009      	b.n	800809a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008094:	f023 0304 	bic.w	r3, r3, #4
 8008098:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800809a:	2110      	movs	r1, #16
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff fe3d 	bl	8007d1c <USB_FlushTxFifo>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff fe67 	bl	8007d80 <USB_FlushRxFifo>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80080bc:	2300      	movs	r3, #0
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	e015      	b.n	80080ee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ce:	461a      	mov	r2, r3
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080d4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e2:	461a      	mov	r2, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	3301      	adds	r3, #1
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80080f2:	461a      	mov	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d3e3      	bcc.n	80080c2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008106:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a18      	ldr	r2, [pc, #96]	@ (800816c <USB_HostInit+0x170>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10b      	bne.n	8008128 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008116:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <USB_HostInit+0x174>)
 800811c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a14      	ldr	r2, [pc, #80]	@ (8008174 <USB_HostInit+0x178>)
 8008122:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008126:	e009      	b.n	800813c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2280      	movs	r2, #128	@ 0x80
 800812c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a11      	ldr	r2, [pc, #68]	@ (8008178 <USB_HostInit+0x17c>)
 8008132:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a11      	ldr	r2, [pc, #68]	@ (800817c <USB_HostInit+0x180>)
 8008138:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800813c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	f043 0210 	orr.w	r2, r3, #16
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <USB_HostInit+0x184>)
 8008156:	4313      	orrs	r3, r2
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008168:	b004      	add	sp, #16
 800816a:	4770      	bx	lr
 800816c:	40040000 	.word	0x40040000
 8008170:	01000200 	.word	0x01000200
 8008174:	00e00300 	.word	0x00e00300
 8008178:	00600080 	.word	0x00600080
 800817c:	004000e0 	.word	0x004000e0
 8008180:	a3200008 	.word	0xa3200008

08008184 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80081bc:	4313      	orrs	r3, r2
 80081be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d107      	bne.n	80081d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081cc:	461a      	mov	r2, r3
 80081ce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80081d2:	6053      	str	r3, [r2, #4]
 80081d4:	e00c      	b.n	80081f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80081d6:	78fb      	ldrb	r3, [r7, #3]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d107      	bne.n	80081ec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081e2:	461a      	mov	r2, r3
 80081e4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80081e8:	6053      	str	r3, [r2, #4]
 80081ea:	e001      	b.n	80081f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e000      	b.n	80081f2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800821e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800822c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800822e:	2064      	movs	r0, #100	@ 0x64
 8008230:	f7f9 fe38 	bl	8001ea4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800823c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008240:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008242:	200a      	movs	r0, #10
 8008244:	f7f9 fe2e 	bl	8001ea4 <HAL_Delay>

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008276:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <USB_DriveVbus+0x44>
 8008282:	78fb      	ldrb	r3, [r7, #3]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d106      	bne.n	8008296 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008290:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008294:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800829c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a0:	d109      	bne.n	80082b6 <USB_DriveVbus+0x64>
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d106      	bne.n	80082b6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082b4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	0c5b      	lsrs	r3, r3, #17
 80082e2:	f003 0303 	and.w	r3, r3, #3
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	b29b      	uxth	r3, r3
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	4608      	mov	r0, r1
 800831e:	4611      	mov	r1, r2
 8008320:	461a      	mov	r2, r3
 8008322:	4603      	mov	r3, r0
 8008324:	70fb      	strb	r3, [r7, #3]
 8008326:	460b      	mov	r3, r1
 8008328:	70bb      	strb	r3, [r7, #2]
 800832a:	4613      	mov	r3, r2
 800832c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4413      	add	r3, r2
 800833e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008342:	461a      	mov	r2, r3
 8008344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008348:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800834a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800834e:	2b03      	cmp	r3, #3
 8008350:	d87c      	bhi.n	800844c <USB_HC_Init+0x138>
 8008352:	a201      	add	r2, pc, #4	@ (adr r2, 8008358 <USB_HC_Init+0x44>)
 8008354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008358:	08008369 	.word	0x08008369
 800835c:	0800840f 	.word	0x0800840f
 8008360:	08008369 	.word	0x08008369
 8008364:	080083d1 	.word	0x080083d1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008374:	461a      	mov	r2, r3
 8008376:	f240 439d 	movw	r3, #1181	@ 0x49d
 800837a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800837c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	da10      	bge.n	80083a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	4413      	add	r3, r2
 800838c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	78fa      	ldrb	r2, [r7, #3]
 8008394:	0151      	lsls	r1, r2, #5
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	440a      	add	r2, r1
 800839a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800839e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083a2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80083a4:	e055      	b.n	8008452 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a6f      	ldr	r2, [pc, #444]	@ (8008568 <USB_HC_Init+0x254>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d151      	bne.n	8008452 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	78fa      	ldrb	r2, [r7, #3]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80083cc:	60d3      	str	r3, [r2, #12]
      break;
 80083ce:	e040      	b.n	8008452 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083dc:	461a      	mov	r2, r3
 80083de:	f240 639d 	movw	r3, #1693	@ 0x69d
 80083e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80083e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	da34      	bge.n	8008456 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	440a      	add	r2, r1
 8008402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800840c:	e023      	b.n	8008456 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841a:	461a      	mov	r2, r3
 800841c:	f240 2325 	movw	r3, #549	@ 0x225
 8008420:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008422:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008426:	2b00      	cmp	r3, #0
 8008428:	da17      	bge.n	800845a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	4413      	add	r3, r2
 8008432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	78fa      	ldrb	r2, [r7, #3]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	440a      	add	r2, r1
 8008440:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008444:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008448:	60d3      	str	r3, [r2, #12]
      }
      break;
 800844a:	e006      	b.n	800845a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	77fb      	strb	r3, [r7, #31]
      break;
 8008450:	e004      	b.n	800845c <USB_HC_Init+0x148>
      break;
 8008452:	bf00      	nop
 8008454:	e002      	b.n	800845c <USB_HC_Init+0x148>
      break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <USB_HC_Init+0x148>
      break;
 800845a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	4413      	add	r3, r2
 8008464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008468:	461a      	mov	r2, r3
 800846a:	2300      	movs	r3, #0
 800846c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	4413      	add	r3, r2
 8008476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	440a      	add	r2, r1
 8008484:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008488:	f043 0302 	orr.w	r3, r3, #2
 800848c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008494:	699a      	ldr	r2, [r3, #24]
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	f003 030f 	and.w	r3, r3, #15
 800849c:	2101      	movs	r1, #1
 800849e:	fa01 f303 	lsl.w	r3, r1, r3
 80084a2:	6939      	ldr	r1, [r7, #16]
 80084a4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80084a8:	4313      	orrs	r3, r2
 80084aa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80084b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	da03      	bge.n	80084c8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80084c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	e001      	b.n	80084cc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff fef9 	bl	80082c4 <USB_GetHostSpeed>
 80084d2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80084d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d106      	bne.n	80084ea <USB_HC_Init+0x1d6>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d003      	beq.n	80084ea <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80084e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e001      	b.n	80084ee <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084ee:	787b      	ldrb	r3, [r7, #1]
 80084f0:	059b      	lsls	r3, r3, #22
 80084f2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084f6:	78bb      	ldrb	r3, [r7, #2]
 80084f8:	02db      	lsls	r3, r3, #11
 80084fa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084fe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008500:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008504:	049b      	lsls	r3, r3, #18
 8008506:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800850a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800850c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800850e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008512:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	431a      	orrs	r2, r3
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	440a      	add	r2, r1
 8008524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800852c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800852e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008532:	2b03      	cmp	r3, #3
 8008534:	d003      	beq.n	800853e <USB_HC_Init+0x22a>
 8008536:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800853a:	2b01      	cmp	r3, #1
 800853c:	d10f      	bne.n	800855e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	4413      	add	r3, r2
 8008546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	440a      	add	r2, r1
 8008554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008558:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800855c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800855e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	40040000 	.word	0x40040000

0800856c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08c      	sub	sp, #48	@ 0x30
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008588:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4a5d      	ldr	r2, [pc, #372]	@ (8008704 <USB_HC_StartXfer+0x198>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d12f      	bne.n	80085f2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d11c      	bne.n	80085d2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	7c9b      	ldrb	r3, [r3, #18]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <USB_HC_StartXfer+0x3c>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	7c9b      	ldrb	r3, [r3, #18]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d124      	bne.n	80085f2 <USB_HC_StartXfer+0x86>
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	799b      	ldrb	r3, [r3, #6]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d120      	bne.n	80085f2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	6a3a      	ldr	r2, [r7, #32]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ce:	60d3      	str	r3, [r2, #12]
 80085d0:	e00f      	b.n	80085f2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	791b      	ldrb	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <USB_HC_StartXfer+0x86>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	795b      	ldrb	r3, [r3, #5]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d107      	bne.n	80085f2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	4619      	mov	r1, r3
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 fb6b 	bl	8008cc4 <USB_DoPing>
        return HAL_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e232      	b.n	8008a58 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	799b      	ldrb	r3, [r3, #6]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d158      	bne.n	80086ac <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80085fa:	2301      	movs	r3, #1
 80085fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	78db      	ldrb	r3, [r3, #3]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008606:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	8a92      	ldrh	r2, [r2, #20]
 800860c:	fb03 f202 	mul.w	r2, r3, r2
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	61da      	str	r2, [r3, #28]
 8008614:	e07c      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	7c9b      	ldrb	r3, [r3, #18]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d130      	bne.n	8008680 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	2bbc      	cmp	r3, #188	@ 0xbc
 8008624:	d918      	bls.n	8008658 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	8a9b      	ldrh	r3, [r3, #20]
 800862a:	461a      	mov	r2, r3
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	69da      	ldr	r2, [r3, #28]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d003      	beq.n	8008648 <USB_HC_StartXfer+0xdc>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d103      	bne.n	8008650 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2202      	movs	r2, #2
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	e05f      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2201      	movs	r2, #1
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	e05b      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6a1a      	ldr	r2, [r3, #32]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d007      	beq.n	8008678 <USB_HC_StartXfer+0x10c>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d003      	beq.n	8008678 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2204      	movs	r2, #4
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	e04b      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2203      	movs	r2, #3
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	e047      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d10d      	bne.n	80086a2 <USB_HC_StartXfer+0x136>
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	8a92      	ldrh	r2, [r2, #20]
 800868e:	4293      	cmp	r3, r2
 8008690:	d907      	bls.n	80086a2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008692:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	8a92      	ldrh	r2, [r2, #20]
 8008698:	fb03 f202 	mul.w	r2, r3, r2
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	61da      	str	r2, [r3, #28]
 80086a0:	e036      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6a1a      	ldr	r2, [r3, #32]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	61da      	str	r2, [r3, #28]
 80086aa:	e031      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d018      	beq.n	80086e6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	8a92      	ldrh	r2, [r2, #20]
 80086bc:	4413      	add	r3, r2
 80086be:	3b01      	subs	r3, #1
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	8a92      	ldrh	r2, [r2, #20]
 80086c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80086ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80086cc:	8b7b      	ldrh	r3, [r7, #26]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d90b      	bls.n	80086ea <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80086d2:	8b7b      	ldrh	r3, [r7, #26]
 80086d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	8a92      	ldrh	r2, [r2, #20]
 80086dc:	fb03 f202 	mul.w	r2, r3, r2
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	61da      	str	r2, [r3, #28]
 80086e4:	e001      	b.n	80086ea <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80086e6:	2301      	movs	r3, #1
 80086e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	78db      	ldrb	r3, [r3, #3]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	8a92      	ldrh	r2, [r2, #20]
 80086f8:	fb03 f202 	mul.w	r2, r3, r2
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	61da      	str	r2, [r3, #28]
 8008700:	e006      	b.n	8008710 <USB_HC_StartXfer+0x1a4>
 8008702:	bf00      	nop
 8008704:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008718:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800871a:	04d9      	lsls	r1, r3, #19
 800871c:	4ba3      	ldr	r3, [pc, #652]	@ (80089ac <USB_HC_StartXfer+0x440>)
 800871e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008720:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	7d9b      	ldrb	r3, [r3, #22]
 8008726:	075b      	lsls	r3, r3, #29
 8008728:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800872c:	69f9      	ldr	r1, [r7, #28]
 800872e:	0148      	lsls	r0, r1, #5
 8008730:	6a39      	ldr	r1, [r7, #32]
 8008732:	4401      	add	r1, r0
 8008734:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008738:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800873a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d009      	beq.n	8008756 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6999      	ldr	r1, [r3, #24]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	4413      	add	r3, r2
 800874e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008752:	460a      	mov	r2, r1
 8008754:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	bf0c      	ite	eq
 8008766:	2301      	moveq	r3, #1
 8008768:	2300      	movne	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	4413      	add	r3, r2
 8008776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	6a3a      	ldr	r2, [r7, #32]
 8008782:	440a      	add	r2, r1
 8008784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008788:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800878c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	7e7b      	ldrb	r3, [r7, #25]
 800879e:	075b      	lsls	r3, r3, #29
 80087a0:	69f9      	ldr	r1, [r7, #28]
 80087a2:	0148      	lsls	r0, r1, #5
 80087a4:	6a39      	ldr	r1, [r7, #32]
 80087a6:	4401      	add	r1, r0
 80087a8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80087ac:	4313      	orrs	r3, r2
 80087ae:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	799b      	ldrb	r3, [r3, #6]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	f040 80c3 	bne.w	8008940 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	7c5b      	ldrb	r3, [r3, #17]
 80087be:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80087c4:	4313      	orrs	r3, r2
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	0151      	lsls	r1, r2, #5
 80087ca:	6a3a      	ldr	r2, [r7, #32]
 80087cc:	440a      	add	r2, r1
 80087ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80087d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80087d6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	6a3a      	ldr	r2, [r7, #32]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80087f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	79db      	ldrb	r3, [r3, #7]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d123      	bne.n	8008848 <USB_HC_StartXfer+0x2dc>
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	78db      	ldrb	r3, [r3, #3]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d11f      	bne.n	8008848 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	4413      	add	r3, r2
 8008810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	6a3a      	ldr	r2, [r7, #32]
 800881c:	440a      	add	r2, r1
 800881e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008826:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	4413      	add	r3, r2
 8008830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	6a3a      	ldr	r2, [r7, #32]
 800883c:	440a      	add	r2, r1
 800883e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008846:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	7c9b      	ldrb	r3, [r3, #18]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d003      	beq.n	8008858 <USB_HC_StartXfer+0x2ec>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	7c9b      	ldrb	r3, [r3, #18]
 8008854:	2b03      	cmp	r3, #3
 8008856:	d117      	bne.n	8008888 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800885c:	2b01      	cmp	r3, #1
 800885e:	d113      	bne.n	8008888 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	78db      	ldrb	r3, [r3, #3]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d10f      	bne.n	8008888 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	4413      	add	r3, r2
 8008870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	6a3a      	ldr	r2, [r7, #32]
 800887c:	440a      	add	r2, r1
 800887e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008886:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	7c9b      	ldrb	r3, [r3, #18]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d162      	bne.n	8008956 <USB_HC_StartXfer+0x3ea>
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	78db      	ldrb	r3, [r3, #3]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d15e      	bne.n	8008956 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	3b01      	subs	r3, #1
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d858      	bhi.n	8008954 <USB_HC_StartXfer+0x3e8>
 80088a2:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <USB_HC_StartXfer+0x33c>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088db 	.word	0x080088db
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	0800891f 	.word	0x0800891f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	6a3a      	ldr	r2, [r7, #32]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088d6:	6053      	str	r3, [r2, #4]
          break;
 80088d8:	e03d      	b.n	8008956 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088f4:	f043 030e 	orr.w	r3, r3, #14
 80088f8:	6053      	str	r3, [r2, #4]
          break;
 80088fa:	e02c      	b.n	8008956 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	4413      	add	r3, r2
 8008904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	6a3a      	ldr	r2, [r7, #32]
 8008910:	440a      	add	r2, r1
 8008912:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008916:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800891a:	6053      	str	r3, [r2, #4]
          break;
 800891c:	e01b      	b.n	8008956 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	440a      	add	r2, r1
 8008934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008938:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800893c:	6053      	str	r3, [r2, #4]
          break;
 800893e:	e00a      	b.n	8008956 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800894c:	461a      	mov	r2, r3
 800894e:	2300      	movs	r3, #0
 8008950:	6053      	str	r3, [r2, #4]
 8008952:	e000      	b.n	8008956 <USB_HC_StartXfer+0x3ea>
          break;
 8008954:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	4413      	add	r3, r2
 800895e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800896c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	78db      	ldrb	r3, [r3, #3]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800897c:	613b      	str	r3, [r7, #16]
 800897e:	e003      	b.n	8008988 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008986:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800898e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	4413      	add	r3, r2
 8008998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899c:	461a      	mov	r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e055      	b.n	8008a58 <USB_HC_StartXfer+0x4ec>
 80089ac:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	78db      	ldrb	r3, [r3, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d14e      	bne.n	8008a56 <USB_HC_StartXfer+0x4ea>
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d04a      	beq.n	8008a56 <USB_HC_StartXfer+0x4ea>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	79db      	ldrb	r3, [r3, #7]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d146      	bne.n	8008a56 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	7c9b      	ldrb	r3, [r3, #18]
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d831      	bhi.n	8008a34 <USB_HC_StartXfer+0x4c8>
 80089d0:	a201      	add	r2, pc, #4	@ (adr r2, 80089d8 <USB_HC_StartXfer+0x46c>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	080089e9 	.word	0x080089e9
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	080089e9 	.word	0x080089e9
 80089e4:	08008a0d 	.word	0x08008a0d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	3303      	adds	r3, #3
 80089ee:	089b      	lsrs	r3, r3, #2
 80089f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80089f2:	8afa      	ldrh	r2, [r7, #22]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d91c      	bls.n	8008a38 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a0a:	e015      	b.n	8008a38 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	3303      	adds	r3, #3
 8008a12:	089b      	lsrs	r3, r3, #2
 8008a14:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a16:	8afa      	ldrh	r2, [r7, #22]
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d90a      	bls.n	8008a3c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a32:	e003      	b.n	8008a3c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008a34:	bf00      	nop
 8008a36:	e002      	b.n	8008a3e <USB_HC_StartXfer+0x4d2>
        break;
 8008a38:	bf00      	nop
 8008a3a:	e000      	b.n	8008a3e <USB_HC_StartXfer+0x4d2>
        break;
 8008a3c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6999      	ldr	r1, [r3, #24]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	785a      	ldrb	r2, [r3, #1]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	9000      	str	r0, [sp, #0]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff f9c3 	bl	8007ddc <USB_WritePacket>
  }

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3728      	adds	r7, #40	@ 0x28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	b29b      	uxth	r3, r3
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b089      	sub	sp, #36	@ 0x24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	0c9b      	lsrs	r3, r3, #18
 8008aaa:	f003 0303 	and.w	r3, r3, #3
 8008aae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	0fdb      	lsrs	r3, r3, #31
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	0fdb      	lsrs	r3, r3, #31
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d10d      	bne.n	8008b04 <USB_HC_Halt+0x82>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <USB_HC_Halt+0x82>
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d002      	beq.n	8008b00 <USB_HC_Halt+0x7e>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d101      	bne.n	8008b04 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e0d8      	b.n	8008cb6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <USB_HC_Halt+0x8e>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d173      	bne.n	8008bf8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d14a      	bne.n	8008bd2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d133      	bne.n	8008bb0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b66:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b86:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b94:	d82e      	bhi.n	8008bf4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bac:	d0ec      	beq.n	8008b88 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bae:	e081      	b.n	8008cb4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bd0:	e070      	b.n	8008cb4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	0151      	lsls	r1, r2, #5
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	440a      	add	r2, r1
 8008be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bf0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bf2:	e05f      	b.n	8008cb4 <USB_HC_Halt+0x232>
            break;
 8008bf4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bf6:	e05d      	b.n	8008cb4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d133      	bne.n	8008c90 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c66:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c74:	d81d      	bhi.n	8008cb2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c8c:	d0ec      	beq.n	8008c68 <USB_HC_Halt+0x1e6>
 8008c8e:	e011      	b.n	8008cb4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008caa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e000      	b.n	8008cb4 <USB_HC_Halt+0x232>
          break;
 8008cb2:	bf00      	nop
    }
  }

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3724      	adds	r7, #36	@ 0x24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	04da      	lsls	r2, r3, #19
 8008ce0:	4b15      	ldr	r3, [pc, #84]	@ (8008d38 <USB_DoPing+0x74>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	0151      	lsls	r1, r2, #5
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	440a      	add	r2, r1
 8008cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cf0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cf4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d0c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d14:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d22:	461a      	mov	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	1ff80000 	.word	0x1ff80000

08008d3c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7fe ff86 	bl	8007c62 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d56:	2110      	movs	r1, #16
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fe ffdf 	bl	8007d1c <USB_FlushTxFifo>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff f809 	bl	8007d80 <USB_FlushRxFifo>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	e01f      	b.n	8008dbe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008da4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008db2:	461a      	mov	r2, r3
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b0f      	cmp	r3, #15
 8008dc2:	d9dc      	bls.n	8008d7e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e034      	b.n	8008e34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008de0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008de8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008df0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dfe:	461a      	mov	r2, r3
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e10:	d80c      	bhi.n	8008e2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e28:	d0ec      	beq.n	8008e04 <USB_StopHost+0xc8>
 8008e2a:	e000      	b.n	8008e2e <USB_StopHost+0xf2>
        break;
 8008e2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	3301      	adds	r3, #1
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2b0f      	cmp	r3, #15
 8008e38:	d9c7      	bls.n	8008dca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e40:	461a      	mov	r2, r3
 8008e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fe fef5 	bl	8007c40 <USB_EnableGlobalInt>

  return ret;
 8008e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b089      	sub	sp, #36	@ 0x24
 8008e64:	af04      	add	r7, sp, #16
 8008e66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008e68:	2301      	movs	r3, #1
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fc83 	bl	800977a <USBH_FindInterface>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	2bff      	cmp	r3, #255	@ 0xff
 8008e7c:	d002      	beq.n	8008e84 <USBH_CDC_InterfaceInit+0x24>
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d901      	bls.n	8008e88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e84:	2302      	movs	r3, #2
 8008e86:	e13d      	b.n	8009104 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fc58 	bl	8009742 <USBH_SelectInterface>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e131      	b.n	8009104 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008ea6:	2050      	movs	r0, #80	@ 0x50
 8008ea8:	f002 fb6a 	bl	800b580 <malloc>
 8008eac:	4603      	mov	r3, r0
 8008eae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	e11f      	b.n	8009104 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008ec4:	2250      	movs	r2, #80	@ 0x50
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	68b8      	ldr	r0, [r7, #8]
 8008eca:	f002 fc17 	bl	800b6fc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	211a      	movs	r1, #26
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	b25b      	sxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	da15      	bge.n	8008f12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	211a      	movs	r1, #26
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ef6:	781a      	ldrb	r2, [r3, #0]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	211a      	movs	r1, #26
 8008f02:	fb01 f303 	mul.w	r3, r1, r3
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008f0c:	881a      	ldrh	r2, [r3, #0]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 ffc4 	bl	800aea6 <USBH_AllocPipe>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	461a      	mov	r2, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	7819      	ldrb	r1, [r3, #0]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	7858      	ldrb	r0, [r3, #1]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	8952      	ldrh	r2, [r2, #10]
 8008f3e:	9202      	str	r2, [sp, #8]
 8008f40:	2203      	movs	r2, #3
 8008f42:	9201      	str	r2, [sp, #4]
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	4623      	mov	r3, r4
 8008f48:	4602      	mov	r2, r0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 ff7c 	bl	800ae48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2200      	movs	r2, #0
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f002 fa8b 	bl	800b474 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2200      	movs	r2, #0
 8008f62:	210a      	movs	r1, #10
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fc08 	bl	800977a <USBH_FindInterface>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	2bff      	cmp	r3, #255	@ 0xff
 8008f72:	d002      	beq.n	8008f7a <USBH_CDC_InterfaceInit+0x11a>
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d901      	bls.n	8008f7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e0c2      	b.n	8009104 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	211a      	movs	r1, #26
 8008f84:	fb01 f303 	mul.w	r3, r1, r3
 8008f88:	4413      	add	r3, r2
 8008f8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da16      	bge.n	8008fc4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	211a      	movs	r1, #26
 8008f9c:	fb01 f303 	mul.w	r3, r1, r3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fa6:	781a      	ldrb	r2, [r3, #0]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	211a      	movs	r1, #26
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008fbc:	881a      	ldrh	r2, [r3, #0]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	835a      	strh	r2, [r3, #26]
 8008fc2:	e015      	b.n	8008ff0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	211a      	movs	r1, #26
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fd4:	781a      	ldrb	r2, [r3, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	211a      	movs	r1, #26
 8008fe0:	fb01 f303 	mul.w	r3, r1, r3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008fea:	881a      	ldrh	r2, [r3, #0]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	211a      	movs	r1, #26
 8008ff6:	fb01 f303 	mul.w	r3, r1, r3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	b25b      	sxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	da16      	bge.n	8009036 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	211a      	movs	r1, #26
 800900e:	fb01 f303 	mul.w	r3, r1, r3
 8009012:	4413      	add	r3, r2
 8009014:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	211a      	movs	r1, #26
 8009024:	fb01 f303 	mul.w	r3, r1, r3
 8009028:	4413      	add	r3, r2
 800902a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800902e:	881a      	ldrh	r2, [r3, #0]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	835a      	strh	r2, [r3, #26]
 8009034:	e015      	b.n	8009062 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	211a      	movs	r1, #26
 800903c:	fb01 f303 	mul.w	r3, r1, r3
 8009040:	4413      	add	r3, r2
 8009042:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009046:	781a      	ldrb	r2, [r3, #0]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	211a      	movs	r1, #26
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800905c:	881a      	ldrh	r2, [r3, #0]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	7b9b      	ldrb	r3, [r3, #14]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 ff1c 	bl	800aea6 <USBH_AllocPipe>
 800906e:	4603      	mov	r3, r0
 8009070:	461a      	mov	r2, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	7bdb      	ldrb	r3, [r3, #15]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 ff12 	bl	800aea6 <USBH_AllocPipe>
 8009082:	4603      	mov	r3, r0
 8009084:	461a      	mov	r2, r3
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	7b59      	ldrb	r1, [r3, #13]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	7b98      	ldrb	r0, [r3, #14]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	8b12      	ldrh	r2, [r2, #24]
 80090a2:	9202      	str	r2, [sp, #8]
 80090a4:	2202      	movs	r2, #2
 80090a6:	9201      	str	r2, [sp, #4]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	4623      	mov	r3, r4
 80090ac:	4602      	mov	r2, r0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 feca 	bl	800ae48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	7b19      	ldrb	r1, [r3, #12]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	7bd8      	ldrb	r0, [r3, #15]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	8b52      	ldrh	r2, [r2, #26]
 80090cc:	9202      	str	r2, [sp, #8]
 80090ce:	2202      	movs	r2, #2
 80090d0:	9201      	str	r2, [sp, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	4623      	mov	r3, r4
 80090d6:	4602      	mov	r2, r0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 feb5 	bl	800ae48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7b5b      	ldrb	r3, [r3, #13]
 80090ea:	2200      	movs	r2, #0
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f002 f9c0 	bl	800b474 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	7b1b      	ldrb	r3, [r3, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f002 f9b9 	bl	800b474 <USBH_LL_SetToggle>

  return USBH_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	bd90      	pop	{r4, r7, pc}

0800910c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00e      	beq.n	8009144 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 feaa 	bl	800ae86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 fed5 	bl	800aee8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	7b1b      	ldrb	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00e      	beq.n	800916a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	7b1b      	ldrb	r3, [r3, #12]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fe97 	bl	800ae86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	7b1b      	ldrb	r3, [r3, #12]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fec2 	bl	800aee8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	7b5b      	ldrb	r3, [r3, #13]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00e      	beq.n	8009190 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	7b5b      	ldrb	r3, [r3, #13]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fe84 	bl	800ae86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	7b5b      	ldrb	r3, [r3, #13]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 feaf 	bl	800aee8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f002 f9f3 	bl	800b590 <free>
    phost->pActiveClass->pData = 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091b0:	2200      	movs	r2, #0
 80091b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3340      	adds	r3, #64	@ 0x40
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f8b1 	bl	800933e <GetLineCoding>
 80091dc:	4603      	mov	r3, r0
 80091de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d105      	bne.n	80091f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091ec:	2102      	movs	r1, #2
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80091f2:	7afb      	ldrb	r3, [r7, #11]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009204:	2301      	movs	r3, #1
 8009206:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800921c:	2b04      	cmp	r3, #4
 800921e:	d877      	bhi.n	8009310 <USBH_CDC_Process+0x114>
 8009220:	a201      	add	r2, pc, #4	@ (adr r2, 8009228 <USBH_CDC_Process+0x2c>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	0800923d 	.word	0x0800923d
 800922c:	08009243 	.word	0x08009243
 8009230:	08009273 	.word	0x08009273
 8009234:	080092e7 	.word	0x080092e7
 8009238:	080092f5 	.word	0x080092f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
      break;
 8009240:	e06d      	b.n	800931e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f897 	bl	800937c <SetLineCoding>
 800924e:	4603      	mov	r3, r0
 8009250:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d104      	bne.n	8009262 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009260:	e058      	b.n	8009314 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d055      	beq.n	8009314 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2204      	movs	r2, #4
 800926c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009270:	e050      	b.n	8009314 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	3340      	adds	r3, #64	@ 0x40
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f860 	bl	800933e <GetLineCoding>
 800927e:	4603      	mov	r3, r0
 8009280:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d126      	bne.n	80092d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800929a:	791b      	ldrb	r3, [r3, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d13b      	bne.n	8009318 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d133      	bne.n	8009318 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80092bc:	429a      	cmp	r2, r3
 80092be:	d12b      	bne.n	8009318 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d124      	bne.n	8009318 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f958 	bl	8009584 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80092d4:	e020      	b.n	8009318 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d01d      	beq.n	8009318 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2204      	movs	r2, #4
 80092e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80092e4:	e018      	b.n	8009318 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f867 	bl	80093ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f8da 	bl	80094a6 <CDC_ProcessReception>
      break;
 80092f2:	e014      	b.n	800931e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80092f4:	2100      	movs	r1, #0
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f81e 	bl	800a338 <USBH_ClrFeature>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800930e:	e005      	b.n	800931c <USBH_CDC_Process+0x120>

    default:
      break;
 8009310:	bf00      	nop
 8009312:	e004      	b.n	800931e <USBH_CDC_Process+0x122>
      break;
 8009314:	bf00      	nop
 8009316:	e002      	b.n	800931e <USBH_CDC_Process+0x122>
      break;
 8009318:	bf00      	nop
 800931a:	e000      	b.n	800931e <USBH_CDC_Process+0x122>
      break;
 800931c:	bf00      	nop

  }

  return status;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	22a1      	movs	r2, #161	@ 0xa1
 800934c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2221      	movs	r2, #33	@ 0x21
 8009352:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2207      	movs	r2, #7
 8009364:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2207      	movs	r2, #7
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 fb17 	bl	800a9a0 <USBH_CtlReq>
 8009372:	4603      	mov	r3, r0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2221      	movs	r2, #33	@ 0x21
 800938a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2207      	movs	r2, #7
 80093a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2207      	movs	r2, #7
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 faf8 	bl	800a9a0 <USBH_CtlReq>
 80093b0:	4603      	mov	r3, r0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b086      	sub	sp, #24
 80093be:	af02      	add	r7, sp, #8
 80093c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d002      	beq.n	80093e0 <CDC_ProcessTransmission+0x26>
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d023      	beq.n	8009426 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80093de:	e05e      	b.n	800949e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	8b12      	ldrh	r2, [r2, #24]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d90b      	bls.n	8009404 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8b1a      	ldrh	r2, [r3, #24]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	7b5b      	ldrb	r3, [r3, #13]
 80093f8:	2001      	movs	r0, #1
 80093fa:	9000      	str	r0, [sp, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fce0 	bl	800adc2 <USBH_BulkSendData>
 8009402:	e00b      	b.n	800941c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	7b5b      	ldrb	r3, [r3, #13]
 8009412:	2001      	movs	r0, #1
 8009414:	9000      	str	r0, [sp, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 fcd3 	bl	800adc2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009424:	e03b      	b.n	800949e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	7b5b      	ldrb	r3, [r3, #13]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 fff7 	bl	800b420 <USBH_LL_GetURBState>
 8009432:	4603      	mov	r3, r0
 8009434:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d128      	bne.n	800948e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	8b12      	ldrh	r2, [r2, #24]
 8009444:	4293      	cmp	r3, r2
 8009446:	d90e      	bls.n	8009466 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	8b12      	ldrh	r2, [r2, #24]
 8009450:	1a9a      	subs	r2, r3, r2
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	8b12      	ldrh	r2, [r2, #24]
 800945e:	441a      	add	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	61da      	str	r2, [r3, #28]
 8009464:	e002      	b.n	800946c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800947c:	e00e      	b.n	800949c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f868 	bl	800955c <USBH_CDC_TransmitCallback>
      break;
 800948c:	e006      	b.n	800949c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800948e:	7afb      	ldrb	r3, [r7, #11]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d103      	bne.n	800949c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800949c:	bf00      	nop
  }
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b086      	sub	sp, #24
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d002      	beq.n	80094cc <CDC_ProcessReception+0x26>
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d00e      	beq.n	80094e8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80094ca:	e043      	b.n	8009554 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	6a19      	ldr	r1, [r3, #32]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	8b5a      	ldrh	r2, [r3, #26]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	7b1b      	ldrb	r3, [r3, #12]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 fc97 	bl	800ae0c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2204      	movs	r2, #4
 80094e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80094e6:	e035      	b.n	8009554 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	7b1b      	ldrb	r3, [r3, #12]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 ff96 	bl	800b420 <USBH_LL_GetURBState>
 80094f4:	4603      	mov	r3, r0
 80094f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80094f8:	7cfb      	ldrb	r3, [r7, #19]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d129      	bne.n	8009552 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	7b1b      	ldrb	r3, [r3, #12]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 fef9 	bl	800b2fc <USBH_LL_GetLastXferSize>
 800950a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	429a      	cmp	r2, r3
 8009514:	d016      	beq.n	8009544 <CDC_ProcessReception+0x9e>
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	8b5b      	ldrh	r3, [r3, #26]
 800951a:	461a      	mov	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4293      	cmp	r3, r2
 8009520:	d110      	bne.n	8009544 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1ad2      	subs	r2, r2, r3
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	6a1a      	ldr	r2, [r3, #32]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	441a      	add	r2, r3
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2203      	movs	r2, #3
 800953e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009542:	e006      	b.n	8009552 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f80f 	bl	8009570 <USBH_CDC_ReceiveCallback>
      break;
 8009552:	bf00      	nop
  }
}
 8009554:	bf00      	nop
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80095ac:	2302      	movs	r3, #2
 80095ae:	e029      	b.n	8009604 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	79fa      	ldrb	r2, [r7, #7]
 80095b4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f81f 	bl	800960c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f001 fdc9 	bl	800b194 <USBH_LL_Init>

  return USBH_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	e009      	b.n	800962e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	33e0      	adds	r3, #224	@ 0xe0
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	2200      	movs	r2, #0
 8009626:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b0f      	cmp	r3, #15
 8009632:	d9f2      	bls.n	800961a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e009      	b.n	800964e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009644:	2200      	movs	r2, #0
 8009646:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009654:	d3f1      	bcc.n	800963a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2240      	movs	r2, #64	@ 0x40
 800967a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	331c      	adds	r3, #28
 80096a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096aa:	2100      	movs	r1, #0
 80096ac:	4618      	mov	r0, r3
 80096ae:	f002 f825 	bl	800b6fc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80096b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096bc:	2100      	movs	r1, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f002 f81c 	bl	800b6fc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80096ca:	2212      	movs	r2, #18
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f002 f814 	bl	800b6fc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80096da:	223e      	movs	r2, #62	@ 0x3e
 80096dc:	2100      	movs	r1, #0
 80096de:	4618      	mov	r0, r3
 80096e0:	f002 f80c 	bl	800b6fc <memset>

  return USBH_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d016      	beq.n	8009730 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10e      	bne.n	800972a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009712:	1c59      	adds	r1, r3, #1
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	33de      	adds	r3, #222	@ 0xde
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
 8009728:	e004      	b.n	8009734 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800972a:	2302      	movs	r3, #2
 800972c:	73fb      	strb	r3, [r7, #15]
 800972e:	e001      	b.n	8009734 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009730:	2302      	movs	r3, #2
 8009732:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009742:	b480      	push	{r7}
 8009744:	b085      	sub	sp, #20
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	429a      	cmp	r2, r3
 800975c:	d204      	bcs.n	8009768 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009766:	e001      	b.n	800976c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009768:	2302      	movs	r3, #2
 800976a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800977a:	b480      	push	{r7}
 800977c:	b087      	sub	sp, #28
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	461a      	mov	r2, r3
 8009788:	4603      	mov	r3, r0
 800978a:	70fb      	strb	r3, [r7, #3]
 800978c:	460b      	mov	r3, r1
 800978e:	70bb      	strb	r3, [r7, #2]
 8009790:	4613      	mov	r3, r2
 8009792:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80097a2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80097a4:	e025      	b.n	80097f2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	221a      	movs	r2, #26
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	3308      	adds	r3, #8
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	3302      	adds	r3, #2
 80097b6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	795b      	ldrb	r3, [r3, #5]
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d002      	beq.n	80097c8 <USBH_FindInterface+0x4e>
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	2bff      	cmp	r3, #255	@ 0xff
 80097c6:	d111      	bne.n	80097ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097cc:	78ba      	ldrb	r2, [r7, #2]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d002      	beq.n	80097d8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097d2:	78bb      	ldrb	r3, [r7, #2]
 80097d4:	2bff      	cmp	r3, #255	@ 0xff
 80097d6:	d109      	bne.n	80097ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097dc:	787a      	ldrb	r2, [r7, #1]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d002      	beq.n	80097e8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097e2:	787b      	ldrb	r3, [r7, #1]
 80097e4:	2bff      	cmp	r3, #255	@ 0xff
 80097e6:	d101      	bne.n	80097ec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	e006      	b.n	80097fa <USBH_FindInterface+0x80>
    }
    if_ix++;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	3301      	adds	r3, #1
 80097f0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d9d6      	bls.n	80097a6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80097f8:	23ff      	movs	r3, #255	@ 0xff
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 fcfc 	bl	800b20c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009814:	2101      	movs	r1, #1
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 fe15 	bl	800b446 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af04      	add	r7, sp, #16
 800982e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009830:	2302      	movs	r3, #2
 8009832:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b01      	cmp	r3, #1
 8009842:	d102      	bne.n	800984a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2203      	movs	r2, #3
 8009848:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b0b      	cmp	r3, #11
 8009852:	f200 81bc 	bhi.w	8009bce <USBH_Process+0x3a6>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <USBH_Process+0x34>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	0800988d 	.word	0x0800988d
 8009860:	080098bf 	.word	0x080098bf
 8009864:	08009929 	.word	0x08009929
 8009868:	08009b69 	.word	0x08009b69
 800986c:	08009bcf 	.word	0x08009bcf
 8009870:	080099c9 	.word	0x080099c9
 8009874:	08009b0f 	.word	0x08009b0f
 8009878:	080099ff 	.word	0x080099ff
 800987c:	08009a1f 	.word	0x08009a1f
 8009880:	08009a3d 	.word	0x08009a3d
 8009884:	08009a81 	.word	0x08009a81
 8009888:	08009b51 	.word	0x08009b51
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 819c 	beq.w	8009bd2 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80098a0:	20c8      	movs	r0, #200	@ 0xc8
 80098a2:	f001 fe1a 	bl	800b4da <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 fd0d 	bl	800b2c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80098bc:	e189      	b.n	8009bd2 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d107      	bne.n	80098da <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2202      	movs	r2, #2
 80098d6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80098d8:	e18a      	b.n	8009bf0 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80098e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098e4:	d914      	bls.n	8009910 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80098ec:	3301      	adds	r3, #1
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d903      	bls.n	8009908 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	220d      	movs	r2, #13
 8009904:	701a      	strb	r2, [r3, #0]
      break;
 8009906:	e173      	b.n	8009bf0 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	701a      	strb	r2, [r3, #0]
      break;
 800990e:	e16f      	b.n	8009bf0 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009916:	f103 020a 	add.w	r2, r3, #10
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009920:	200a      	movs	r0, #10
 8009922:	f001 fdda 	bl	800b4da <USBH_Delay>
      break;
 8009926:	e163      	b.n	8009bf0 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009938:	2104      	movs	r1, #4
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800993e:	2064      	movs	r0, #100	@ 0x64
 8009940:	f001 fdcb 	bl	800b4da <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 fc97 	bl	800b278 <USBH_LL_GetSpeed>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2205      	movs	r2, #5
 8009958:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800995a:	2100      	movs	r1, #0
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 faa2 	bl	800aea6 <USBH_AllocPipe>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800996a:	2180      	movs	r1, #128	@ 0x80
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 fa9a 	bl	800aea6 <USBH_AllocPipe>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	7919      	ldrb	r1, [r3, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800998e:	9202      	str	r2, [sp, #8]
 8009990:	2200      	movs	r2, #0
 8009992:	9201      	str	r2, [sp, #4]
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	4603      	mov	r3, r0
 8009998:	2280      	movs	r2, #128	@ 0x80
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 fa54 	bl	800ae48 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	7959      	ldrb	r1, [r3, #5]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099b4:	9202      	str	r2, [sp, #8]
 80099b6:	2200      	movs	r2, #0
 80099b8:	9201      	str	r2, [sp, #4]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	4603      	mov	r3, r0
 80099be:	2200      	movs	r2, #0
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 fa41 	bl	800ae48 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80099c6:	e113      	b.n	8009bf0 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f917 	bl	8009bfc <USBH_HandleEnum>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f040 80fd 	bne.w	8009bd6 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d103      	bne.n	80099f6 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2208      	movs	r2, #8
 80099f2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80099f4:	e0ef      	b.n	8009bd6 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2207      	movs	r2, #7
 80099fa:	701a      	strb	r2, [r3, #0]
      break;
 80099fc:	e0eb      	b.n	8009bd6 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 80e8 	beq.w	8009bda <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a10:	2101      	movs	r1, #1
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2208      	movs	r2, #8
 8009a1a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009a1c:	e0dd      	b.n	8009bda <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fc3f 	bl	800a2aa <USBH_SetCfg>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f040 80d5 	bne.w	8009bde <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2209      	movs	r2, #9
 8009a38:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009a3a:	e0d0      	b.n	8009bde <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d016      	beq.n	8009a78 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fc4f 	bl	800a2f0 <USBH_SetFeature>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d103      	bne.n	8009a66 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	220a      	movs	r2, #10
 8009a62:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009a64:	e0bd      	b.n	8009be2 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	f040 80b9 	bne.w	8009be2 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	220a      	movs	r2, #10
 8009a74:	701a      	strb	r2, [r3, #0]
      break;
 8009a76:	e0b4      	b.n	8009be2 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	220a      	movs	r2, #10
 8009a7c:	701a      	strb	r2, [r3, #0]
      break;
 8009a7e:	e0b0      	b.n	8009be2 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 80ad 	beq.w	8009be6 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
 8009a98:	e016      	b.n	8009ac8 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009a9a:	7bfa      	ldrb	r2, [r7, #15]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	32de      	adds	r2, #222	@ 0xde
 8009aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa4:	791a      	ldrb	r2, [r3, #4]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d108      	bne.n	8009ac2 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009ab0:	7bfa      	ldrb	r2, [r7, #15]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	32de      	adds	r2, #222	@ 0xde
 8009ab6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009ac0:	e005      	b.n	8009ace <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	73fb      	strb	r3, [r7, #15]
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0e5      	beq.n	8009a9a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d016      	beq.n	8009b06 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	4798      	blx	r3
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d109      	bne.n	8009afe <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2206      	movs	r2, #6
 8009aee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009af6:	2103      	movs	r1, #3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009afc:	e073      	b.n	8009be6 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	220d      	movs	r2, #13
 8009b02:	701a      	strb	r2, [r3, #0]
      break;
 8009b04:	e06f      	b.n	8009be6 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	220d      	movs	r2, #13
 8009b0a:	701a      	strb	r2, [r3, #0]
      break;
 8009b0c:	e06b      	b.n	8009be6 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d017      	beq.n	8009b48 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	4798      	blx	r3
 8009b24:	4603      	mov	r3, r0
 8009b26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d103      	bne.n	8009b38 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	220b      	movs	r2, #11
 8009b34:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009b36:	e058      	b.n	8009bea <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d154      	bne.n	8009bea <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	220d      	movs	r2, #13
 8009b44:	701a      	strb	r2, [r3, #0]
      break;
 8009b46:	e050      	b.n	8009bea <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	220d      	movs	r2, #13
 8009b4c:	701a      	strb	r2, [r3, #0]
      break;
 8009b4e:	e04c      	b.n	8009bea <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d049      	beq.n	8009bee <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
      }
      break;
 8009b66:	e042      	b.n	8009bee <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff fd4b 	bl	800960c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d009      	beq.n	8009b94 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ba4:	2105      	movs	r1, #5
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d107      	bne.n	8009bc6 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff fe21 	bl	8009806 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009bc4:	e014      	b.n	8009bf0 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 fb20 	bl	800b20c <USBH_LL_Start>
      break;
 8009bcc:	e010      	b.n	8009bf0 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009bce:	bf00      	nop
 8009bd0:	e00e      	b.n	8009bf0 <USBH_Process+0x3c8>
      break;
 8009bd2:	bf00      	nop
 8009bd4:	e00c      	b.n	8009bf0 <USBH_Process+0x3c8>
      break;
 8009bd6:	bf00      	nop
 8009bd8:	e00a      	b.n	8009bf0 <USBH_Process+0x3c8>
    break;
 8009bda:	bf00      	nop
 8009bdc:	e008      	b.n	8009bf0 <USBH_Process+0x3c8>
      break;
 8009bde:	bf00      	nop
 8009be0:	e006      	b.n	8009bf0 <USBH_Process+0x3c8>
      break;
 8009be2:	bf00      	nop
 8009be4:	e004      	b.n	8009bf0 <USBH_Process+0x3c8>
      break;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <USBH_Process+0x3c8>
      break;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <USBH_Process+0x3c8>
      break;
 8009bee:	bf00      	nop
  }
  return USBH_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop

08009bfc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af04      	add	r7, sp, #16
 8009c02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009c04:	2301      	movs	r3, #1
 8009c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	785b      	ldrb	r3, [r3, #1]
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	f200 81bd 	bhi.w	8009f90 <USBH_HandleEnum+0x394>
 8009c16:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <USBH_HandleEnum+0x20>)
 8009c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1c:	08009c3d 	.word	0x08009c3d
 8009c20:	08009cf7 	.word	0x08009cf7
 8009c24:	08009d61 	.word	0x08009d61
 8009c28:	08009deb 	.word	0x08009deb
 8009c2c:	08009e55 	.word	0x08009e55
 8009c30:	08009ec5 	.word	0x08009ec5
 8009c34:	08009f0b 	.word	0x08009f0b
 8009c38:	08009f51 	.word	0x08009f51
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009c3c:	2108      	movs	r1, #8
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa50 	bl	800a0e4 <USBH_Get_DevDesc>
 8009c44:	4603      	mov	r3, r0
 8009c46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d12e      	bne.n	8009cac <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7919      	ldrb	r1, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c72:	9202      	str	r2, [sp, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	9201      	str	r2, [sp, #4]
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2280      	movs	r2, #128	@ 0x80
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 f8e2 	bl	800ae48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	7959      	ldrb	r1, [r3, #5]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c98:	9202      	str	r2, [sp, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	9201      	str	r2, [sp, #4]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f8cf 	bl	800ae48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009caa:	e173      	b.n	8009f94 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	f040 8170 	bne.w	8009f94 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009cba:	3301      	adds	r3, #1
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d903      	bls.n	8009cd6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	220d      	movs	r2, #13
 8009cd2:	701a      	strb	r2, [r3, #0]
      break;
 8009cd4:	e15e      	b.n	8009f94 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	795b      	ldrb	r3, [r3, #5]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 f903 	bl	800aee8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	791b      	ldrb	r3, [r3, #4]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f8fd 	bl	800aee8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	701a      	strb	r2, [r3, #0]
      break;
 8009cf4:	e14e      	b.n	8009f94 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009cf6:	2112      	movs	r1, #18
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f9f3 	bl	800a0e4 <USBH_Get_DevDesc>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d0e:	e143      	b.n	8009f98 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	f040 8140 	bne.w	8009f98 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d1e:	3301      	adds	r3, #1
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d903      	bls.n	8009d3a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	220d      	movs	r2, #13
 8009d36:	701a      	strb	r2, [r3, #0]
      break;
 8009d38:	e12e      	b.n	8009f98 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	795b      	ldrb	r3, [r3, #5]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 f8d1 	bl	800aee8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	791b      	ldrb	r3, [r3, #4]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 f8cb 	bl	800aee8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	701a      	strb	r2, [r3, #0]
      break;
 8009d5e:	e11b      	b.n	8009f98 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009d60:	2101      	movs	r1, #1
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa7d 	bl	800a262 <USBH_SetAddress>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d130      	bne.n	8009dd4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009d72:	2002      	movs	r0, #2
 8009d74:	f001 fbb1 	bl	800b4da <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2203      	movs	r2, #3
 8009d84:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	7919      	ldrb	r1, [r3, #4]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009d9a:	9202      	str	r2, [sp, #8]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	9201      	str	r2, [sp, #4]
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	4603      	mov	r3, r0
 8009da4:	2280      	movs	r2, #128	@ 0x80
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 f84e 	bl	800ae48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	7959      	ldrb	r1, [r3, #5]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009dc0:	9202      	str	r2, [sp, #8]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	9201      	str	r2, [sp, #4]
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f001 f83b 	bl	800ae48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009dd2:	e0e3      	b.n	8009f9c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	f040 80e0 	bne.w	8009f9c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220d      	movs	r2, #13
 8009de0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	705a      	strb	r2, [r3, #1]
      break;
 8009de8:	e0d8      	b.n	8009f9c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009dea:	2109      	movs	r1, #9
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9a5 	bl	800a13c <USBH_Get_CfgDesc>
 8009df2:	4603      	mov	r3, r0
 8009df4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009df6:	7bbb      	ldrb	r3, [r7, #14]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d103      	bne.n	8009e04 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2204      	movs	r2, #4
 8009e00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e02:	e0cd      	b.n	8009fa0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	f040 80ca 	bne.w	8009fa0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e12:	3301      	adds	r3, #1
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d903      	bls.n	8009e2e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	220d      	movs	r2, #13
 8009e2a:	701a      	strb	r2, [r3, #0]
      break;
 8009e2c:	e0b8      	b.n	8009fa0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	795b      	ldrb	r3, [r3, #5]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f857 	bl	800aee8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	791b      	ldrb	r3, [r3, #4]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 f851 	bl	800aee8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
      break;
 8009e52:	e0a5      	b.n	8009fa0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f96d 	bl	800a13c <USBH_Get_CfgDesc>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d103      	bne.n	8009e74 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2205      	movs	r2, #5
 8009e70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e72:	e097      	b.n	8009fa4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	f040 8094 	bne.w	8009fa4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e82:	3301      	adds	r3, #1
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d903      	bls.n	8009e9e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	220d      	movs	r2, #13
 8009e9a:	701a      	strb	r2, [r3, #0]
      break;
 8009e9c:	e082      	b.n	8009fa4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	795b      	ldrb	r3, [r3, #5]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 f81f 	bl	800aee8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	791b      	ldrb	r3, [r3, #4]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f819 	bl	800aee8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
      break;
 8009ec2:	e06f      	b.n	8009fa4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d019      	beq.n	8009f02 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009eda:	23ff      	movs	r3, #255	@ 0xff
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f957 	bl	800a190 <USBH_Get_StringDesc>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2206      	movs	r2, #6
 8009ef0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ef2:	e059      	b.n	8009fa8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d156      	bne.n	8009fa8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2206      	movs	r2, #6
 8009efe:	705a      	strb	r2, [r3, #1]
      break;
 8009f00:	e052      	b.n	8009fa8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2206      	movs	r2, #6
 8009f06:	705a      	strb	r2, [r3, #1]
      break;
 8009f08:	e04e      	b.n	8009fa8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d019      	beq.n	8009f48 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f20:	23ff      	movs	r3, #255	@ 0xff
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f934 	bl	800a190 <USBH_Get_StringDesc>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2207      	movs	r2, #7
 8009f36:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009f38:	e038      	b.n	8009fac <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d135      	bne.n	8009fac <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2207      	movs	r2, #7
 8009f44:	705a      	strb	r2, [r3, #1]
      break;
 8009f46:	e031      	b.n	8009fac <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2207      	movs	r2, #7
 8009f4c:	705a      	strb	r2, [r3, #1]
      break;
 8009f4e:	e02d      	b.n	8009fac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d017      	beq.n	8009f8a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009f66:	23ff      	movs	r3, #255	@ 0xff
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f911 	bl	800a190 <USBH_Get_StringDesc>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d102      	bne.n	8009f7e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009f7c:	e018      	b.n	8009fb0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d115      	bne.n	8009fb0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
      break;
 8009f88:	e012      	b.n	8009fb0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8e:	e00f      	b.n	8009fb0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009f90:	bf00      	nop
 8009f92:	e00e      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009f94:	bf00      	nop
 8009f96:	e00c      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009f98:	bf00      	nop
 8009f9a:	e00a      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009f9c:	bf00      	nop
 8009f9e:	e008      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009fa0:	bf00      	nop
 8009fa2:	e006      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009fa4:	bf00      	nop
 8009fa6:	e004      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009fa8:	bf00      	nop
 8009faa:	e002      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009fac:	bf00      	nop
 8009fae:	e000      	b.n	8009fb2 <USBH_HandleEnum+0x3b6>
      break;
 8009fb0:	bf00      	nop
  }
  return Status;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009fce:	bf00      	nop
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f804 	bl	8009ffe <USBH_HandleSof>
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b082      	sub	sp, #8
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b0b      	cmp	r3, #11
 800a00e:	d10a      	bne.n	800a026 <USBH_HandleSof+0x28>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
  }
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a03e:	bf00      	nop
}
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a062:	bf00      	nop
}
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f001 f8c0 	bl	800b242 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	791b      	ldrb	r3, [r3, #4]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 ff0d 	bl	800aee8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	795b      	ldrb	r3, [r3, #5]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 ff07 	bl	800aee8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a0f0:	887b      	ldrh	r3, [r7, #2]
 800a0f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0f6:	d901      	bls.n	800a0fc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e01b      	b.n	800a134 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a102:	887b      	ldrh	r3, [r7, #2]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	4613      	mov	r3, r2
 800a108:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a10c:	2100      	movs	r1, #0
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f872 	bl	800a1f8 <USBH_GetDescriptor>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d109      	bne.n	800a132 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a124:	887a      	ldrh	r2, [r7, #2]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f929 	bl	800a380 <USBH_ParseDevDesc>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a132:	7bfb      	ldrb	r3, [r7, #15]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af02      	add	r7, sp, #8
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	331c      	adds	r3, #28
 800a14c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a14e:	887b      	ldrh	r3, [r7, #2]
 800a150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a154:	d901      	bls.n	800a15a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a156:	2303      	movs	r3, #3
 800a158:	e016      	b.n	800a188 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a15a:	887b      	ldrh	r3, [r7, #2]
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a164:	2100      	movs	r1, #0
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f846 	bl	800a1f8 <USBH_GetDescriptor>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d107      	bne.n	800a186 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a176:	887b      	ldrh	r3, [r7, #2]
 800a178:	461a      	mov	r2, r3
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f9af 	bl	800a4e0 <USBH_ParseCfgDesc>
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af02      	add	r7, sp, #8
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	607a      	str	r2, [r7, #4]
 800a19a:	461a      	mov	r2, r3
 800a19c:	460b      	mov	r3, r1
 800a19e:	72fb      	strb	r3, [r7, #11]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a1a4:	893b      	ldrh	r3, [r7, #8]
 800a1a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1aa:	d802      	bhi.n	800a1b2 <USBH_Get_StringDesc+0x22>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e01c      	b.n	800a1f0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a1be:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a1c6:	893b      	ldrh	r3, [r7, #8]
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 f812 	bl	800a1f8 <USBH_GetDescriptor>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d107      	bne.n	800a1ee <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1e4:	893a      	ldrh	r2, [r7, #8]
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fb8c 	bl	800a906 <USBH_ParseStringDesc>
  }

  return status;
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	607b      	str	r3, [r7, #4]
 800a202:	460b      	mov	r3, r1
 800a204:	72fb      	strb	r3, [r7, #11]
 800a206:	4613      	mov	r3, r2
 800a208:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	789b      	ldrb	r3, [r3, #2]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d11c      	bne.n	800a24c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2206      	movs	r2, #6
 800a222:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	893a      	ldrh	r2, [r7, #8]
 800a228:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a22a:	893b      	ldrh	r3, [r7, #8]
 800a22c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a234:	d104      	bne.n	800a240 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f240 4209 	movw	r2, #1033	@ 0x409
 800a23c:	829a      	strh	r2, [r3, #20]
 800a23e:	e002      	b.n	800a246 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	8b3a      	ldrh	r2, [r7, #24]
 800a24a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a24c:	8b3b      	ldrh	r3, [r7, #24]
 800a24e:	461a      	mov	r2, r3
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fba4 	bl	800a9a0 <USBH_CtlReq>
 800a258:	4603      	mov	r3, r0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b082      	sub	sp, #8
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	789b      	ldrb	r3, [r3, #2]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d10f      	bne.n	800a296 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2205      	movs	r2, #5
 800a280:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a282:	78fb      	ldrb	r3, [r7, #3]
 800a284:	b29a      	uxth	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a296:	2200      	movs	r2, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fb80 	bl	800a9a0 <USBH_CtlReq>
 800a2a0:	4603      	mov	r3, r0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	789b      	ldrb	r3, [r3, #2]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d10e      	bne.n	800a2dc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2209      	movs	r2, #9
 800a2c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	887a      	ldrh	r2, [r7, #2]
 800a2ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2100      	movs	r1, #0
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fb5d 	bl	800a9a0 <USBH_CtlReq>
 800a2e6:	4603      	mov	r3, r0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	789b      	ldrb	r3, [r3, #2]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10f      	bne.n	800a324 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2203      	movs	r2, #3
 800a30e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	b29a      	uxth	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a324:	2200      	movs	r2, #0
 800a326:	2100      	movs	r1, #0
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fb39 	bl	800a9a0 <USBH_CtlReq>
 800a32e:	4603      	mov	r3, r0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	789b      	ldrb	r3, [r3, #2]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d10f      	bne.n	800a36c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	b29a      	uxth	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fb15 	bl	800a9a0 <USBH_CtlReq>
 800a376:	4603      	mov	r3, r0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	4613      	mov	r3, r2
 800a38c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a394:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	e094      	b.n	800a4ce <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	781a      	ldrb	r2, [r3, #0]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	785a      	ldrb	r2, [r3, #1]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	3303      	adds	r3, #3
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	791a      	ldrb	r2, [r3, #4]
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	795a      	ldrb	r2, [r3, #5]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	799a      	ldrb	r2, [r3, #6]
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	79da      	ldrb	r2, [r3, #7]
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d11b      	bne.n	800a43a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	79db      	ldrb	r3, [r3, #7]
 800a406:	2b20      	cmp	r3, #32
 800a408:	dc0f      	bgt.n	800a42a <USBH_ParseDevDesc+0xaa>
 800a40a:	2b08      	cmp	r3, #8
 800a40c:	db0f      	blt.n	800a42e <USBH_ParseDevDesc+0xae>
 800a40e:	3b08      	subs	r3, #8
 800a410:	4a32      	ldr	r2, [pc, #200]	@ (800a4dc <USBH_ParseDevDesc+0x15c>)
 800a412:	fa22 f303 	lsr.w	r3, r2, r3
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2301      	movne	r3, #1
 800a420:	2300      	moveq	r3, #0
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b00      	cmp	r3, #0
 800a426:	d106      	bne.n	800a436 <USBH_ParseDevDesc+0xb6>
 800a428:	e001      	b.n	800a42e <USBH_ParseDevDesc+0xae>
 800a42a:	2b40      	cmp	r3, #64	@ 0x40
 800a42c:	d003      	beq.n	800a436 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2208      	movs	r2, #8
 800a432:	71da      	strb	r2, [r3, #7]
        break;
 800a434:	e000      	b.n	800a438 <USBH_ParseDevDesc+0xb8>
        break;
 800a436:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a438:	e00e      	b.n	800a458 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a440:	2b02      	cmp	r3, #2
 800a442:	d107      	bne.n	800a454 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	79db      	ldrb	r3, [r3, #7]
 800a448:	2b08      	cmp	r3, #8
 800a44a:	d005      	beq.n	800a458 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2208      	movs	r2, #8
 800a450:	71da      	strb	r2, [r3, #7]
 800a452:	e001      	b.n	800a458 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a454:	2303      	movs	r3, #3
 800a456:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	2b08      	cmp	r3, #8
 800a45c:	d936      	bls.n	800a4cc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	3308      	adds	r3, #8
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	461a      	mov	r2, r3
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	3309      	adds	r3, #9
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	b29a      	uxth	r2, r3
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	330a      	adds	r3, #10
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	330b      	adds	r3, #11
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	021b      	lsls	r3, r3, #8
 800a488:	b29b      	uxth	r3, r3
 800a48a:	4313      	orrs	r3, r2
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	330c      	adds	r3, #12
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	330d      	adds	r3, #13
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	021b      	lsls	r3, r3, #8
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	7b9a      	ldrb	r2, [r3, #14]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	7bda      	ldrb	r2, [r3, #15]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	7c1a      	ldrb	r2, [r3, #16]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	7c5a      	ldrb	r2, [r3, #17]
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	371c      	adds	r7, #28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	01000101 	.word	0x01000101

0800a4e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08c      	sub	sp, #48	@ 0x30
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a4f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a50e:	2302      	movs	r3, #2
 800a510:	e0de      	b.n	800a6d0 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b09      	cmp	r3, #9
 800a51c:	d002      	beq.n	800a524 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	2209      	movs	r2, #9
 800a522:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	781a      	ldrb	r2, [r3, #0]
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	785a      	ldrb	r2, [r3, #1]
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	3302      	adds	r3, #2
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	3303      	adds	r3, #3
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	b29b      	uxth	r3, r3
 800a546:	4313      	orrs	r3, r2
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a54e:	bf28      	it	cs
 800a550:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a554:	b29a      	uxth	r2, r3
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	791a      	ldrb	r2, [r3, #4]
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	795a      	ldrb	r2, [r3, #5]
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	799a      	ldrb	r2, [r3, #6]
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	79da      	ldrb	r2, [r3, #7]
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	7a1a      	ldrb	r2, [r3, #8]
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a582:	88fb      	ldrh	r3, [r7, #6]
 800a584:	2b09      	cmp	r3, #9
 800a586:	f240 80a1 	bls.w	800a6cc <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a58a:	2309      	movs	r3, #9
 800a58c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a592:	e085      	b.n	800a6a0 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a594:	f107 0316 	add.w	r3, r7, #22
 800a598:	4619      	mov	r1, r3
 800a59a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a59c:	f000 f9e6 	bl	800a96c <USBH_GetNextDesc>
 800a5a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	785b      	ldrb	r3, [r3, #1]
 800a5a6:	2b04      	cmp	r3, #4
 800a5a8:	d17a      	bne.n	800a6a0 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d002      	beq.n	800a5b8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	2209      	movs	r2, #9
 800a5b6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5bc:	221a      	movs	r2, #26
 800a5be:	fb02 f303 	mul.w	r3, r2, r3
 800a5c2:	3308      	adds	r3, #8
 800a5c4:	6a3a      	ldr	r2, [r7, #32]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3302      	adds	r3, #2
 800a5ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a5cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5ce:	69f8      	ldr	r0, [r7, #28]
 800a5d0:	f000 f882 	bl	800a6d8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a5de:	e043      	b.n	800a668 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a5e0:	f107 0316 	add.w	r3, r7, #22
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e8:	f000 f9c0 	bl	800a96c <USBH_GetNextDesc>
 800a5ec:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	2b05      	cmp	r3, #5
 800a5f4:	d138      	bne.n	800a668 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	795b      	ldrb	r3, [r3, #5]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d113      	bne.n	800a626 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a602:	2b02      	cmp	r3, #2
 800a604:	d003      	beq.n	800a60e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	799b      	ldrb	r3, [r3, #6]
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d10b      	bne.n	800a626 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	79db      	ldrb	r3, [r3, #7]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10b      	bne.n	800a62e <USBH_ParseCfgDesc+0x14e>
 800a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d007      	beq.n	800a62e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a620:	2209      	movs	r2, #9
 800a622:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a624:	e003      	b.n	800a62e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a628:	2207      	movs	r2, #7
 800a62a:	701a      	strb	r2, [r3, #0]
 800a62c:	e000      	b.n	800a630 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a62e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a634:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a638:	3201      	adds	r2, #1
 800a63a:	00d2      	lsls	r2, r2, #3
 800a63c:	211a      	movs	r1, #26
 800a63e:	fb01 f303 	mul.w	r3, r1, r3
 800a642:	4413      	add	r3, r2
 800a644:	3308      	adds	r3, #8
 800a646:	6a3a      	ldr	r2, [r7, #32]
 800a648:	4413      	add	r3, r2
 800a64a:	3304      	adds	r3, #4
 800a64c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a64e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a650:	69b9      	ldr	r1, [r7, #24]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 f86f 	bl	800a736 <USBH_ParseEPDesc>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a65e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a662:	3301      	adds	r3, #1
 800a664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a668:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d80a      	bhi.n	800a686 <USBH_ParseCfgDesc+0x1a6>
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	791b      	ldrb	r3, [r3, #4]
 800a674:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a678:	429a      	cmp	r2, r3
 800a67a:	d204      	bcs.n	800a686 <USBH_ParseCfgDesc+0x1a6>
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	885a      	ldrh	r2, [r3, #2]
 800a680:	8afb      	ldrh	r3, [r7, #22]
 800a682:	429a      	cmp	r2, r3
 800a684:	d8ac      	bhi.n	800a5e0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	791b      	ldrb	r3, [r3, #4]
 800a68a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a68e:	429a      	cmp	r2, r3
 800a690:	d201      	bcs.n	800a696 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a692:	2303      	movs	r3, #3
 800a694:	e01c      	b.n	800a6d0 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a69a:	3301      	adds	r3, #1
 800a69c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d805      	bhi.n	800a6b4 <USBH_ParseCfgDesc+0x1d4>
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	885a      	ldrh	r2, [r3, #2]
 800a6ac:	8afb      	ldrh	r3, [r7, #22]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	f63f af70 	bhi.w	800a594 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	791b      	ldrb	r3, [r3, #4]
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	bf28      	it	cs
 800a6bc:	2302      	movcs	r3, #2
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d201      	bcs.n	800a6cc <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e001      	b.n	800a6d0 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3730      	adds	r7, #48	@ 0x30
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	781a      	ldrb	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	785a      	ldrb	r2, [r3, #1]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	789a      	ldrb	r2, [r3, #2]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	78da      	ldrb	r2, [r3, #3]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	791a      	ldrb	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	795a      	ldrb	r2, [r3, #5]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	799a      	ldrb	r2, [r3, #6]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	79da      	ldrb	r2, [r3, #7]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	7a1a      	ldrb	r2, [r3, #8]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	721a      	strb	r2, [r3, #8]
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a736:	b480      	push	{r7}
 800a738:	b087      	sub	sp, #28
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	781a      	ldrb	r2, [r3, #0]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	785a      	ldrb	r2, [r3, #1]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	789a      	ldrb	r2, [r3, #2]
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	78da      	ldrb	r2, [r3, #3]
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3304      	adds	r3, #4
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3305      	adds	r3, #5
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	b29b      	uxth	r3, r3
 800a778:	4313      	orrs	r3, r2
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	799a      	ldrb	r2, [r3, #6]
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	889b      	ldrh	r3, [r3, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d009      	beq.n	800a7a4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a798:	d804      	bhi.n	800a7a4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a79e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7a2:	d901      	bls.n	800a7a8 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d136      	bne.n	800a820 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	78db      	ldrb	r3, [r3, #3]
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d108      	bne.n	800a7d0 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	889b      	ldrh	r3, [r3, #4]
 800a7c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7c6:	f240 8097 	bls.w	800a8f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	75fb      	strb	r3, [r7, #23]
 800a7ce:	e093      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	78db      	ldrb	r3, [r3, #3]
 800a7d4:	f003 0303 	and.w	r3, r3, #3
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d107      	bne.n	800a7ec <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	889b      	ldrh	r3, [r3, #4]
 800a7e0:	2b40      	cmp	r3, #64	@ 0x40
 800a7e2:	f240 8089 	bls.w	800a8f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	75fb      	strb	r3, [r7, #23]
 800a7ea:	e085      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	78db      	ldrb	r3, [r3, #3]
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d005      	beq.n	800a804 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	78db      	ldrb	r3, [r3, #3]
 800a7fc:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a800:	2b03      	cmp	r3, #3
 800a802:	d10a      	bne.n	800a81a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	799b      	ldrb	r3, [r3, #6]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <USBH_ParseEPDesc+0xde>
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	799b      	ldrb	r3, [r3, #6]
 800a810:	2b10      	cmp	r3, #16
 800a812:	d970      	bls.n	800a8f6 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a814:	2303      	movs	r3, #3
 800a816:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a818:	e06d      	b.n	800a8f6 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a81a:	2303      	movs	r3, #3
 800a81c:	75fb      	strb	r3, [r7, #23]
 800a81e:	e06b      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a826:	2b01      	cmp	r3, #1
 800a828:	d13c      	bne.n	800a8a4 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	78db      	ldrb	r3, [r3, #3]
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b02      	cmp	r3, #2
 800a834:	d005      	beq.n	800a842 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	78db      	ldrb	r3, [r3, #3]
 800a83a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d106      	bne.n	800a850 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	889b      	ldrh	r3, [r3, #4]
 800a846:	2b40      	cmp	r3, #64	@ 0x40
 800a848:	d956      	bls.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a84a:	2303      	movs	r3, #3
 800a84c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a84e:	e053      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	78db      	ldrb	r3, [r3, #3]
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d10e      	bne.n	800a87a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	799b      	ldrb	r3, [r3, #6]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a868:	2b10      	cmp	r3, #16
 800a86a:	d803      	bhi.n	800a874 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a870:	2b40      	cmp	r3, #64	@ 0x40
 800a872:	d941      	bls.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a874:	2303      	movs	r3, #3
 800a876:	75fb      	strb	r3, [r7, #23]
 800a878:	e03e      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	78db      	ldrb	r3, [r3, #3]
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b03      	cmp	r3, #3
 800a884:	d10b      	bne.n	800a89e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	799b      	ldrb	r3, [r3, #6]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d004      	beq.n	800a898 <USBH_ParseEPDesc+0x162>
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	889b      	ldrh	r3, [r3, #4]
 800a892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a896:	d32f      	bcc.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a898:	2303      	movs	r3, #3
 800a89a:	75fb      	strb	r3, [r7, #23]
 800a89c:	e02c      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	75fb      	strb	r3, [r7, #23]
 800a8a2:	e029      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d120      	bne.n	800a8f0 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	78db      	ldrb	r3, [r3, #3]
 800a8b2:	f003 0303 	and.w	r3, r3, #3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	889b      	ldrh	r3, [r3, #4]
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d01a      	beq.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	75fb      	strb	r3, [r7, #23]
 800a8c6:	e017      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	78db      	ldrb	r3, [r3, #3]
 800a8cc:	f003 0303 	and.w	r3, r3, #3
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d10a      	bne.n	800a8ea <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	799b      	ldrb	r3, [r3, #6]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <USBH_ParseEPDesc+0x1ae>
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	889b      	ldrh	r3, [r3, #4]
 800a8e0:	2b08      	cmp	r3, #8
 800a8e2:	d909      	bls.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	75fb      	strb	r3, [r7, #23]
 800a8e8:	e006      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	75fb      	strb	r3, [r7, #23]
 800a8ee:	e003      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	75fb      	strb	r3, [r7, #23]
 800a8f4:	e000      	b.n	800a8f8 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8f6:	bf00      	nop
  }

  return status;
 800a8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a906:	b480      	push	{r7}
 800a908:	b087      	sub	sp, #28
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	4613      	mov	r3, r2
 800a912:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	3301      	adds	r3, #1
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d120      	bne.n	800a960 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	1e9a      	subs	r2, r3, #2
 800a924:	88fb      	ldrh	r3, [r7, #6]
 800a926:	4293      	cmp	r3, r2
 800a928:	bf28      	it	cs
 800a92a:	4613      	movcs	r3, r2
 800a92c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3302      	adds	r3, #2
 800a932:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a934:	2300      	movs	r3, #0
 800a936:	82fb      	strh	r3, [r7, #22]
 800a938:	e00b      	b.n	800a952 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a93a:	8afb      	ldrh	r3, [r7, #22]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	4413      	add	r3, r2
 800a940:	781a      	ldrb	r2, [r3, #0]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	3301      	adds	r3, #1
 800a94a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a94c:	8afb      	ldrh	r3, [r7, #22]
 800a94e:	3302      	adds	r3, #2
 800a950:	82fb      	strh	r3, [r7, #22]
 800a952:	8afa      	ldrh	r2, [r7, #22]
 800a954:	8abb      	ldrh	r3, [r7, #20]
 800a956:	429a      	cmp	r2, r3
 800a958:	d3ef      	bcc.n	800a93a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2200      	movs	r2, #0
 800a95e:	701a      	strb	r2, [r3, #0]
  }
}
 800a960:	bf00      	nop
 800a962:	371c      	adds	r7, #28
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	7812      	ldrb	r2, [r2, #0]
 800a97e:	4413      	add	r3, r2
 800a980:	b29a      	uxth	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4413      	add	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a992:	68fb      	ldr	r3, [r7, #12]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	789b      	ldrb	r3, [r3, #2]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d002      	beq.n	800a9c0 <USBH_CtlReq+0x20>
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d00f      	beq.n	800a9de <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800a9be:	e027      	b.n	800aa10 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	88fa      	ldrh	r2, [r7, #6]
 800a9ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	75fb      	strb	r3, [r7, #23]
      break;
 800a9dc:	e018      	b.n	800aa10 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f000 f81c 	bl	800aa1c <USBH_HandleControl>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <USBH_CtlReq+0x54>
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d106      	bne.n	800aa02 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	761a      	strb	r2, [r3, #24]
      break;
 800aa00:	e005      	b.n	800aa0e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d102      	bne.n	800aa0e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	709a      	strb	r2, [r3, #2]
      break;
 800aa0e:	bf00      	nop
  }
  return status;
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af02      	add	r7, sp, #8
 800aa22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa24:	2301      	movs	r3, #1
 800aa26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7e1b      	ldrb	r3, [r3, #24]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	2b0a      	cmp	r3, #10
 800aa34:	f200 8157 	bhi.w	800ace6 <USBH_HandleControl+0x2ca>
 800aa38:	a201      	add	r2, pc, #4	@ (adr r2, 800aa40 <USBH_HandleControl+0x24>)
 800aa3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3e:	bf00      	nop
 800aa40:	0800aa6d 	.word	0x0800aa6d
 800aa44:	0800aa87 	.word	0x0800aa87
 800aa48:	0800aaf1 	.word	0x0800aaf1
 800aa4c:	0800ab17 	.word	0x0800ab17
 800aa50:	0800ab51 	.word	0x0800ab51
 800aa54:	0800ab7b 	.word	0x0800ab7b
 800aa58:	0800abcd 	.word	0x0800abcd
 800aa5c:	0800abef 	.word	0x0800abef
 800aa60:	0800ac2b 	.word	0x0800ac2b
 800aa64:	0800ac51 	.word	0x0800ac51
 800aa68:	0800ac8f 	.word	0x0800ac8f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f103 0110 	add.w	r1, r3, #16
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	795b      	ldrb	r3, [r3, #5]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f945 	bl	800ad08 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2202      	movs	r2, #2
 800aa82:	761a      	strb	r2, [r3, #24]
      break;
 800aa84:	e13a      	b.n	800acfc <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	795b      	ldrb	r3, [r3, #5]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fcc7 	bl	800b420 <USBH_LL_GetURBState>
 800aa92:	4603      	mov	r3, r0
 800aa94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d11e      	bne.n	800aada <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	7c1b      	ldrb	r3, [r3, #16]
 800aaa0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aaa4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8adb      	ldrh	r3, [r3, #22]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aaae:	7b7b      	ldrb	r3, [r7, #13]
 800aab0:	2b80      	cmp	r3, #128	@ 0x80
 800aab2:	d103      	bne.n	800aabc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2203      	movs	r2, #3
 800aab8:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800aaba:	e116      	b.n	800acea <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2205      	movs	r2, #5
 800aac0:	761a      	strb	r2, [r3, #24]
      break;
 800aac2:	e112      	b.n	800acea <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800aac4:	7b7b      	ldrb	r3, [r7, #13]
 800aac6:	2b80      	cmp	r3, #128	@ 0x80
 800aac8:	d103      	bne.n	800aad2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2209      	movs	r2, #9
 800aace:	761a      	strb	r2, [r3, #24]
      break;
 800aad0:	e10b      	b.n	800acea <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2207      	movs	r2, #7
 800aad6:	761a      	strb	r2, [r3, #24]
      break;
 800aad8:	e107      	b.n	800acea <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d003      	beq.n	800aae8 <USBH_HandleControl+0xcc>
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	f040 8101 	bne.w	800acea <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	220b      	movs	r2, #11
 800aaec:	761a      	strb	r2, [r3, #24]
      break;
 800aaee:	e0fc      	b.n	800acea <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6899      	ldr	r1, [r3, #8]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	899a      	ldrh	r2, [r3, #12]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	791b      	ldrb	r3, [r3, #4]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f93c 	bl	800ad86 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2204      	movs	r2, #4
 800ab12:	761a      	strb	r2, [r3, #24]
      break;
 800ab14:	e0f2      	b.n	800acfc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	791b      	ldrb	r3, [r3, #4]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc7f 	bl	800b420 <USBH_LL_GetURBState>
 800ab22:	4603      	mov	r3, r0
 800ab24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d103      	bne.n	800ab34 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2209      	movs	r2, #9
 800ab30:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ab32:	e0dc      	b.n	800acee <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	2b05      	cmp	r3, #5
 800ab38:	d102      	bne.n	800ab40 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab3e:	e0d6      	b.n	800acee <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	2b04      	cmp	r3, #4
 800ab44:	f040 80d3 	bne.w	800acee <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	220b      	movs	r2, #11
 800ab4c:	761a      	strb	r2, [r3, #24]
      break;
 800ab4e:	e0ce      	b.n	800acee <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6899      	ldr	r1, [r3, #8]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	899a      	ldrh	r2, [r3, #12]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	795b      	ldrb	r3, [r3, #5]
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	9000      	str	r0, [sp, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f8eb 	bl	800ad3c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2206      	movs	r2, #6
 800ab76:	761a      	strb	r2, [r3, #24]
      break;
 800ab78:	e0c0      	b.n	800acfc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	795b      	ldrb	r3, [r3, #5]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fc4d 	bl	800b420 <USBH_LL_GetURBState>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d103      	bne.n	800ab98 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2207      	movs	r2, #7
 800ab94:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ab96:	e0ac      	b.n	800acf2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b05      	cmp	r3, #5
 800ab9c:	d105      	bne.n	800abaa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	220c      	movs	r2, #12
 800aba2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aba4:	2303      	movs	r3, #3
 800aba6:	73fb      	strb	r3, [r7, #15]
      break;
 800aba8:	e0a3      	b.n	800acf2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d103      	bne.n	800abb8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2205      	movs	r2, #5
 800abb4:	761a      	strb	r2, [r3, #24]
      break;
 800abb6:	e09c      	b.n	800acf2 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	2b04      	cmp	r3, #4
 800abbc:	f040 8099 	bne.w	800acf2 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	220b      	movs	r2, #11
 800abc4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800abc6:	2302      	movs	r3, #2
 800abc8:	73fb      	strb	r3, [r7, #15]
      break;
 800abca:	e092      	b.n	800acf2 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	791b      	ldrb	r3, [r3, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	2100      	movs	r1, #0
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f8d6 	bl	800ad86 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2208      	movs	r2, #8
 800abea:	761a      	strb	r2, [r3, #24]

      break;
 800abec:	e086      	b.n	800acfc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	791b      	ldrb	r3, [r3, #4]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fc13 	bl	800b420 <USBH_LL_GetURBState>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d105      	bne.n	800ac10 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	220d      	movs	r2, #13
 800ac08:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ac0e:	e072      	b.n	800acf6 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d103      	bne.n	800ac1e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	220b      	movs	r2, #11
 800ac1a:	761a      	strb	r2, [r3, #24]
      break;
 800ac1c:	e06b      	b.n	800acf6 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	2b05      	cmp	r3, #5
 800ac22:	d168      	bne.n	800acf6 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800ac24:	2303      	movs	r3, #3
 800ac26:	73fb      	strb	r3, [r7, #15]
      break;
 800ac28:	e065      	b.n	800acf6 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	795b      	ldrb	r3, [r3, #5]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	9200      	str	r2, [sp, #0]
 800ac32:	2200      	movs	r2, #0
 800ac34:	2100      	movs	r1, #0
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f880 	bl	800ad3c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	220a      	movs	r2, #10
 800ac4c:	761a      	strb	r2, [r3, #24]
      break;
 800ac4e:	e055      	b.n	800acfc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	795b      	ldrb	r3, [r3, #5]
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fbe2 	bl	800b420 <USBH_LL_GetURBState>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d105      	bne.n	800ac72 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	220d      	movs	r2, #13
 800ac6e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ac70:	e043      	b.n	800acfa <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d103      	bne.n	800ac80 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2209      	movs	r2, #9
 800ac7c:	761a      	strb	r2, [r3, #24]
      break;
 800ac7e:	e03c      	b.n	800acfa <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800ac80:	7bbb      	ldrb	r3, [r7, #14]
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d139      	bne.n	800acfa <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	220b      	movs	r2, #11
 800ac8a:	761a      	strb	r2, [r3, #24]
      break;
 800ac8c:	e035      	b.n	800acfa <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	7e5b      	ldrb	r3, [r3, #25]
 800ac92:	3301      	adds	r3, #1
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	765a      	strb	r2, [r3, #25]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	7e5b      	ldrb	r3, [r3, #25]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d806      	bhi.n	800acb0 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800acae:	e025      	b.n	800acfc <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800acb6:	2106      	movs	r1, #6
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	795b      	ldrb	r3, [r3, #5]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f90d 	bl	800aee8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	791b      	ldrb	r3, [r3, #4]
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f907 	bl	800aee8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ace0:	2302      	movs	r3, #2
 800ace2:	73fb      	strb	r3, [r7, #15]
      break;
 800ace4:	e00a      	b.n	800acfc <USBH_HandleControl+0x2e0>

    default:
      break;
 800ace6:	bf00      	nop
 800ace8:	e008      	b.n	800acfc <USBH_HandleControl+0x2e0>
      break;
 800acea:	bf00      	nop
 800acec:	e006      	b.n	800acfc <USBH_HandleControl+0x2e0>
      break;
 800acee:	bf00      	nop
 800acf0:	e004      	b.n	800acfc <USBH_HandleControl+0x2e0>
      break;
 800acf2:	bf00      	nop
 800acf4:	e002      	b.n	800acfc <USBH_HandleControl+0x2e0>
      break;
 800acf6:	bf00      	nop
 800acf8:	e000      	b.n	800acfc <USBH_HandleControl+0x2e0>
      break;
 800acfa:	bf00      	nop
  }

  return status;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop

0800ad08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	4613      	mov	r3, r2
 800ad14:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad16:	79f9      	ldrb	r1, [r7, #7]
 800ad18:	2300      	movs	r3, #0
 800ad1a:	9303      	str	r3, [sp, #12]
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	9302      	str	r3, [sp, #8]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	2300      	movs	r3, #0
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 fb46 	bl	800b3be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af04      	add	r7, sp, #16
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4611      	mov	r1, r2
 800ad48:	461a      	mov	r2, r3
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	80fb      	strh	r3, [r7, #6]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad60:	7979      	ldrb	r1, [r7, #5]
 800ad62:	7e3b      	ldrb	r3, [r7, #24]
 800ad64:	9303      	str	r3, [sp, #12]
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	9302      	str	r3, [sp, #8]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	2301      	movs	r3, #1
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	2300      	movs	r3, #0
 800ad74:	2200      	movs	r2, #0
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 fb21 	bl	800b3be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b088      	sub	sp, #32
 800ad8a:	af04      	add	r7, sp, #16
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	4611      	mov	r1, r2
 800ad92:	461a      	mov	r2, r3
 800ad94:	460b      	mov	r3, r1
 800ad96:	80fb      	strh	r3, [r7, #6]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad9c:	7979      	ldrb	r1, [r7, #5]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	9303      	str	r3, [sp, #12]
 800ada2:	88fb      	ldrh	r3, [r7, #6]
 800ada4:	9302      	str	r3, [sp, #8]
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	2301      	movs	r3, #1
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	2300      	movs	r3, #0
 800adb0:	2201      	movs	r2, #1
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f000 fb03 	bl	800b3be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800adb8:	2300      	movs	r3, #0

}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b088      	sub	sp, #32
 800adc6:	af04      	add	r7, sp, #16
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	4611      	mov	r1, r2
 800adce:	461a      	mov	r2, r3
 800add0:	460b      	mov	r3, r1
 800add2:	80fb      	strh	r3, [r7, #6]
 800add4:	4613      	mov	r3, r2
 800add6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ade6:	7979      	ldrb	r1, [r7, #5]
 800ade8:	7e3b      	ldrb	r3, [r7, #24]
 800adea:	9303      	str	r3, [sp, #12]
 800adec:	88fb      	ldrh	r3, [r7, #6]
 800adee:	9302      	str	r3, [sp, #8]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	2301      	movs	r3, #1
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	2302      	movs	r3, #2
 800adfa:	2200      	movs	r2, #0
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 fade 	bl	800b3be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af04      	add	r7, sp, #16
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	4611      	mov	r1, r2
 800ae18:	461a      	mov	r2, r3
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	80fb      	strh	r3, [r7, #6]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae22:	7979      	ldrb	r1, [r7, #5]
 800ae24:	2300      	movs	r3, #0
 800ae26:	9303      	str	r3, [sp, #12]
 800ae28:	88fb      	ldrh	r3, [r7, #6]
 800ae2a:	9302      	str	r3, [sp, #8]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	2301      	movs	r3, #1
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	2302      	movs	r3, #2
 800ae36:	2201      	movs	r2, #1
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f000 fac0 	bl	800b3be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af04      	add	r7, sp, #16
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	4608      	mov	r0, r1
 800ae52:	4611      	mov	r1, r2
 800ae54:	461a      	mov	r2, r3
 800ae56:	4603      	mov	r3, r0
 800ae58:	70fb      	strb	r3, [r7, #3]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70bb      	strb	r3, [r7, #2]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ae62:	7878      	ldrb	r0, [r7, #1]
 800ae64:	78ba      	ldrb	r2, [r7, #2]
 800ae66:	78f9      	ldrb	r1, [r7, #3]
 800ae68:	8b3b      	ldrh	r3, [r7, #24]
 800ae6a:	9302      	str	r3, [sp, #8]
 800ae6c:	7d3b      	ldrb	r3, [r7, #20]
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	7c3b      	ldrb	r3, [r7, #16]
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	4603      	mov	r3, r0
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fa53 	bl	800b322 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ae92:	78fb      	ldrb	r3, [r7, #3]
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fa72 	bl	800b380 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f836 	bl	800af24 <USBH_GetFreePipe>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aebc:	89fb      	ldrh	r3, [r7, #14]
 800aebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d00a      	beq.n	800aedc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800aec6:	78fa      	ldrb	r2, [r7, #3]
 800aec8:	89fb      	ldrh	r3, [r7, #14]
 800aeca:	f003 030f 	and.w	r3, r3, #15
 800aece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aed2:	6879      	ldr	r1, [r7, #4]
 800aed4:	33e0      	adds	r3, #224	@ 0xe0
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	440b      	add	r3, r1
 800aeda:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aedc:	89fb      	ldrh	r3, [r7, #14]
 800aede:	b2db      	uxtb	r3, r3
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aef4:	78fb      	ldrb	r3, [r7, #3]
 800aef6:	2b0f      	cmp	r3, #15
 800aef8:	d80d      	bhi.n	800af16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aefa:	78fb      	ldrb	r3, [r7, #3]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	33e0      	adds	r3, #224	@ 0xe0
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	78fb      	ldrb	r3, [r7, #3]
 800af08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	33e0      	adds	r3, #224	@ 0xe0
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	440b      	add	r3, r1
 800af14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
 800af34:	e00f      	b.n	800af56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	33e0      	adds	r3, #224	@ 0xe0
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d102      	bne.n	800af50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	e007      	b.n	800af60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	3301      	adds	r3, #1
 800af54:	73fb      	strb	r3, [r7, #15]
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	2b0f      	cmp	r3, #15
 800af5a:	d9ec      	bls.n	800af36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800af5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800af70:	2201      	movs	r2, #1
 800af72:	490e      	ldr	r1, [pc, #56]	@ (800afac <MX_USB_HOST_Init+0x40>)
 800af74:	480e      	ldr	r0, [pc, #56]	@ (800afb0 <MX_USB_HOST_Init+0x44>)
 800af76:	f7fe fb0f 	bl	8009598 <USBH_Init>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800af80:	f7f6 fbc6 	bl	8001710 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800af84:	490b      	ldr	r1, [pc, #44]	@ (800afb4 <MX_USB_HOST_Init+0x48>)
 800af86:	480a      	ldr	r0, [pc, #40]	@ (800afb0 <MX_USB_HOST_Init+0x44>)
 800af88:	f7fe fbb1 	bl	80096ee <USBH_RegisterClass>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800af92:	f7f6 fbbd 	bl	8001710 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800af96:	4806      	ldr	r0, [pc, #24]	@ (800afb0 <MX_USB_HOST_Init+0x44>)
 800af98:	f7fe fc35 	bl	8009806 <USBH_Start>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800afa2:	f7f6 fbb5 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800afa6:	bf00      	nop
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	0800afcd 	.word	0x0800afcd
 800afb0:	200004c8 	.word	0x200004c8
 800afb4:	20000020 	.word	0x20000020

0800afb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800afbc:	4802      	ldr	r0, [pc, #8]	@ (800afc8 <MX_USB_HOST_Process+0x10>)
 800afbe:	f7fe fc33 	bl	8009828 <USBH_Process>
}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	200004c8 	.word	0x200004c8

0800afcc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800afd8:	78fb      	ldrb	r3, [r7, #3]
 800afda:	3b01      	subs	r3, #1
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d819      	bhi.n	800b014 <USBH_UserProcess+0x48>
 800afe0:	a201      	add	r2, pc, #4	@ (adr r2, 800afe8 <USBH_UserProcess+0x1c>)
 800afe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe6:	bf00      	nop
 800afe8:	0800b015 	.word	0x0800b015
 800afec:	0800b005 	.word	0x0800b005
 800aff0:	0800b015 	.word	0x0800b015
 800aff4:	0800b00d 	.word	0x0800b00d
 800aff8:	0800affd 	.word	0x0800affd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800affc:	4b09      	ldr	r3, [pc, #36]	@ (800b024 <USBH_UserProcess+0x58>)
 800affe:	2203      	movs	r2, #3
 800b000:	701a      	strb	r2, [r3, #0]
  break;
 800b002:	e008      	b.n	800b016 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b004:	4b07      	ldr	r3, [pc, #28]	@ (800b024 <USBH_UserProcess+0x58>)
 800b006:	2202      	movs	r2, #2
 800b008:	701a      	strb	r2, [r3, #0]
  break;
 800b00a:	e004      	b.n	800b016 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b00c:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <USBH_UserProcess+0x58>)
 800b00e:	2201      	movs	r2, #1
 800b010:	701a      	strb	r2, [r3, #0]
  break;
 800b012:	e000      	b.n	800b016 <USBH_UserProcess+0x4a>

  default:
  break;
 800b014:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	200008a0 	.word	0x200008a0

0800b028 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	@ 0x28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b030:	f107 0314 	add.w	r3, r7, #20
 800b034:	2200      	movs	r2, #0
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	609a      	str	r2, [r3, #8]
 800b03c:	60da      	str	r2, [r3, #12]
 800b03e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b048:	d147      	bne.n	800b0da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
 800b04e:	4b25      	ldr	r3, [pc, #148]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b052:	4a24      	ldr	r2, [pc, #144]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b054:	f043 0301 	orr.w	r3, r3, #1
 800b058:	6313      	str	r3, [r2, #48]	@ 0x30
 800b05a:	4b22      	ldr	r3, [pc, #136]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	613b      	str	r3, [r7, #16]
 800b064:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b06a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b06c:	2300      	movs	r3, #0
 800b06e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b074:	f107 0314 	add.w	r3, r7, #20
 800b078:	4619      	mov	r1, r3
 800b07a:	481b      	ldr	r0, [pc, #108]	@ (800b0e8 <HAL_HCD_MspInit+0xc0>)
 800b07c:	f7f7 ffba 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b080:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b086:	2302      	movs	r3, #2
 800b088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b08e:	2300      	movs	r3, #0
 800b090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b092:	230a      	movs	r3, #10
 800b094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b096:	f107 0314 	add.w	r3, r7, #20
 800b09a:	4619      	mov	r1, r3
 800b09c:	4812      	ldr	r0, [pc, #72]	@ (800b0e8 <HAL_HCD_MspInit+0xc0>)
 800b09e:	f7f7 ffa9 	bl	8002ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b0a2:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b0a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ac:	6353      	str	r3, [r2, #52]	@ 0x34
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0b6:	4a0b      	ldr	r2, [pc, #44]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b0b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b0bc:	6453      	str	r3, [r2, #68]	@ 0x44
 800b0be:	4b09      	ldr	r3, [pc, #36]	@ (800b0e4 <HAL_HCD_MspInit+0xbc>)
 800b0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	2043      	movs	r0, #67	@ 0x43
 800b0d0:	f7f7 fbe9 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0d4:	2043      	movs	r0, #67	@ 0x43
 800b0d6:	f7f7 fc02 	bl	80028de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0da:	bf00      	nop
 800b0dc:	3728      	adds	r7, #40	@ 0x28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	40023800 	.word	0x40023800
 800b0e8:	40020000 	.word	0x40020000

0800b0ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe ff6d 	bl	8009fda <USBH_LL_IncTimer>
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b116:	4618      	mov	r0, r3
 800b118:	f7fe ffa9 	bl	800a06e <USBH_LL_Connect>
}
 800b11c:	bf00      	nop
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe ffb2 	bl	800a09c <USBH_LL_Disconnect>
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
 800b14c:	4613      	mov	r3, r2
 800b14e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe ff5f 	bl	800a02e <USBH_LL_PortEnabled>
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe ff5f 	bl	800a04a <USBH_LL_PortDisabled>
}
 800b18c:	bf00      	nop
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d12a      	bne.n	800b1fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b1a6:	4a18      	ldr	r2, [pc, #96]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a15      	ldr	r2, [pc, #84]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1b2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1b6:	4b14      	ldr	r3, [pc, #80]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b1bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b1be:	4b12      	ldr	r3, [pc, #72]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1c0:	2208      	movs	r2, #8
 800b1c2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b1c4:	4b10      	ldr	r3, [pc, #64]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b1d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b1dc:	480a      	ldr	r0, [pc, #40]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1de:	f7f8 f8d6 	bl	800338e <HAL_HCD_Init>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b1e8:	f7f6 fa92 	bl	8001710 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b1ec:	4806      	ldr	r0, [pc, #24]	@ (800b208 <USBH_LL_Init+0x74>)
 800b1ee:	f7f8 fd37 	bl	8003c60 <HAL_HCD_GetCurrentFrame>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7fe fee0 	bl	8009fbc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	200008a4 	.word	0x200008a4

0800b20c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b222:	4618      	mov	r0, r3
 800b224:	f7f8 fca4 	bl	8003b70 <HAL_HCD_Start>
 800b228:	4603      	mov	r3, r0
 800b22a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 f95e 	bl	800b4f0 <USBH_Get_USB_Status>
 800b234:	4603      	mov	r3, r0
 800b236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b238:	7bbb      	ldrb	r3, [r7, #14]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b258:	4618      	mov	r0, r3
 800b25a:	f7f8 fcac 	bl	8003bb6 <HAL_HCD_Stop>
 800b25e:	4603      	mov	r3, r0
 800b260:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b262:	7bfb      	ldrb	r3, [r7, #15]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 f943 	bl	800b4f0 <USBH_Get_USB_Status>
 800b26a:	4603      	mov	r3, r0
 800b26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b280:	2301      	movs	r3, #1
 800b282:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f8 fcf6 	bl	8003c7c <HAL_HCD_GetCurrentSpeed>
 800b290:	4603      	mov	r3, r0
 800b292:	2b02      	cmp	r3, #2
 800b294:	d00c      	beq.n	800b2b0 <USBH_LL_GetSpeed+0x38>
 800b296:	2b02      	cmp	r3, #2
 800b298:	d80d      	bhi.n	800b2b6 <USBH_LL_GetSpeed+0x3e>
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <USBH_LL_GetSpeed+0x2c>
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d003      	beq.n	800b2aa <USBH_LL_GetSpeed+0x32>
 800b2a2:	e008      	b.n	800b2b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a8:	e008      	b.n	800b2bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ae:	e005      	b.n	800b2bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b4:	e002      	b.n	800b2bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ba:	bf00      	nop
  }
  return  speed;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7f8 fc87 	bl	8003bf0 <HAL_HCD_ResetPort>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 f901 	bl	800b4f0 <USBH_Get_USB_Status>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	4611      	mov	r1, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f7f8 fc8f 	bl	8003c36 <HAL_HCD_HC_GetXferCount>
 800b318:	4603      	mov	r3, r0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b322:	b590      	push	{r4, r7, lr}
 800b324:	b089      	sub	sp, #36	@ 0x24
 800b326:	af04      	add	r7, sp, #16
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	4608      	mov	r0, r1
 800b32c:	4611      	mov	r1, r2
 800b32e:	461a      	mov	r2, r3
 800b330:	4603      	mov	r3, r0
 800b332:	70fb      	strb	r3, [r7, #3]
 800b334:	460b      	mov	r3, r1
 800b336:	70bb      	strb	r3, [r7, #2]
 800b338:	4613      	mov	r3, r2
 800b33a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b34a:	787c      	ldrb	r4, [r7, #1]
 800b34c:	78ba      	ldrb	r2, [r7, #2]
 800b34e:	78f9      	ldrb	r1, [r7, #3]
 800b350:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b352:	9302      	str	r3, [sp, #8]
 800b354:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	4623      	mov	r3, r4
 800b362:	f7f8 f87b 	bl	800345c <HAL_HCD_HC_Init>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b36a:	7bfb      	ldrb	r3, [r7, #15]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 f8bf 	bl	800b4f0 <USBH_Get_USB_Status>
 800b372:	4603      	mov	r3, r0
 800b374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b376:	7bbb      	ldrb	r3, [r7, #14]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd90      	pop	{r4, r7, pc}

0800b380 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b39a:	78fa      	ldrb	r2, [r7, #3]
 800b39c:	4611      	mov	r1, r2
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7f8 f914 	bl	80035cc <HAL_HCD_HC_Halt>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 f8a0 	bl	800b4f0 <USBH_Get_USB_Status>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b3be:	b590      	push	{r4, r7, lr}
 800b3c0:	b089      	sub	sp, #36	@ 0x24
 800b3c2:	af04      	add	r7, sp, #16
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	4608      	mov	r0, r1
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	70fb      	strb	r3, [r7, #3]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	70bb      	strb	r3, [r7, #2]
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b3e6:	787c      	ldrb	r4, [r7, #1]
 800b3e8:	78ba      	ldrb	r2, [r7, #2]
 800b3ea:	78f9      	ldrb	r1, [r7, #3]
 800b3ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b3f0:	9303      	str	r3, [sp, #12]
 800b3f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3f4:	9302      	str	r3, [sp, #8]
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	4623      	mov	r3, r4
 800b402:	f7f8 f907 	bl	8003614 <HAL_HCD_HC_SubmitRequest>
 800b406:	4603      	mov	r3, r0
 800b408:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f86f 	bl	800b4f0 <USBH_Get_USB_Status>
 800b412:	4603      	mov	r3, r0
 800b414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b416:	7bbb      	ldrb	r3, [r7, #14]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd90      	pop	{r4, r7, pc}

0800b420 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f7f8 fbe8 	bl	8003c0c <HAL_HCD_HC_GetURBState>
 800b43c:	4603      	mov	r3, r0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	460b      	mov	r3, r1
 800b450:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d103      	bne.n	800b464 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f872 	bl	800b548 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b464:	20c8      	movs	r0, #200	@ 0xc8
 800b466:	f7f6 fd1d 	bl	8001ea4 <HAL_Delay>
  return USBH_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
 800b480:	4613      	mov	r3, r2
 800b482:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b48a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b48c:	78fa      	ldrb	r2, [r7, #3]
 800b48e:	68f9      	ldr	r1, [r7, #12]
 800b490:	4613      	mov	r3, r2
 800b492:	011b      	lsls	r3, r3, #4
 800b494:	1a9b      	subs	r3, r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	440b      	add	r3, r1
 800b49a:	3317      	adds	r3, #23
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00a      	beq.n	800b4b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b4a2:	78fa      	ldrb	r2, [r7, #3]
 800b4a4:	68f9      	ldr	r1, [r7, #12]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	011b      	lsls	r3, r3, #4
 800b4aa:	1a9b      	subs	r3, r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	440b      	add	r3, r1
 800b4b0:	333c      	adds	r3, #60	@ 0x3c
 800b4b2:	78ba      	ldrb	r2, [r7, #2]
 800b4b4:	701a      	strb	r2, [r3, #0]
 800b4b6:	e009      	b.n	800b4cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b4b8:	78fa      	ldrb	r2, [r7, #3]
 800b4ba:	68f9      	ldr	r1, [r7, #12]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	011b      	lsls	r3, r3, #4
 800b4c0:	1a9b      	subs	r3, r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	440b      	add	r3, r1
 800b4c6:	333d      	adds	r3, #61	@ 0x3d
 800b4c8:	78ba      	ldrb	r2, [r7, #2]
 800b4ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7f6 fcde 	bl	8001ea4 <HAL_Delay>
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4fe:	79fb      	ldrb	r3, [r7, #7]
 800b500:	2b03      	cmp	r3, #3
 800b502:	d817      	bhi.n	800b534 <USBH_Get_USB_Status+0x44>
 800b504:	a201      	add	r2, pc, #4	@ (adr r2, 800b50c <USBH_Get_USB_Status+0x1c>)
 800b506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50a:	bf00      	nop
 800b50c:	0800b51d 	.word	0x0800b51d
 800b510:	0800b523 	.word	0x0800b523
 800b514:	0800b529 	.word	0x0800b529
 800b518:	0800b52f 	.word	0x0800b52f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]
    break;
 800b520:	e00b      	b.n	800b53a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b522:	2302      	movs	r3, #2
 800b524:	73fb      	strb	r3, [r7, #15]
    break;
 800b526:	e008      	b.n	800b53a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b528:	2301      	movs	r3, #1
 800b52a:	73fb      	strb	r3, [r7, #15]
    break;
 800b52c:	e005      	b.n	800b53a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b52e:	2302      	movs	r3, #2
 800b530:	73fb      	strb	r3, [r7, #15]
    break;
 800b532:	e002      	b.n	800b53a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b534:	2302      	movs	r3, #2
 800b536:	73fb      	strb	r3, [r7, #15]
    break;
 800b538:	bf00      	nop
  }
  return usb_status;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b552:	79fb      	ldrb	r3, [r7, #7]
 800b554:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
 800b560:	e001      	b.n	800b566 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b562:	2301      	movs	r3, #1
 800b564:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b566:	7bfb      	ldrb	r3, [r7, #15]
 800b568:	461a      	mov	r2, r3
 800b56a:	2101      	movs	r1, #1
 800b56c:	4803      	ldr	r0, [pc, #12]	@ (800b57c <MX_DriverVbusFS+0x34>)
 800b56e:	f7f7 fef5 	bl	800335c <HAL_GPIO_WritePin>
}
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	40020800 	.word	0x40020800

0800b580 <malloc>:
 800b580:	4b02      	ldr	r3, [pc, #8]	@ (800b58c <malloc+0xc>)
 800b582:	4601      	mov	r1, r0
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f000 b82d 	b.w	800b5e4 <_malloc_r>
 800b58a:	bf00      	nop
 800b58c:	20000040 	.word	0x20000040

0800b590 <free>:
 800b590:	4b02      	ldr	r3, [pc, #8]	@ (800b59c <free+0xc>)
 800b592:	4601      	mov	r1, r0
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f000 b8f5 	b.w	800b784 <_free_r>
 800b59a:	bf00      	nop
 800b59c:	20000040 	.word	0x20000040

0800b5a0 <sbrk_aligned>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4e0f      	ldr	r6, [pc, #60]	@ (800b5e0 <sbrk_aligned+0x40>)
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	6831      	ldr	r1, [r6, #0]
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	b911      	cbnz	r1, 800b5b2 <sbrk_aligned+0x12>
 800b5ac:	f000 f8ae 	bl	800b70c <_sbrk_r>
 800b5b0:	6030      	str	r0, [r6, #0]
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f000 f8a9 	bl	800b70c <_sbrk_r>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d103      	bne.n	800b5c6 <sbrk_aligned+0x26>
 800b5be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
 800b5c6:	1cc4      	adds	r4, r0, #3
 800b5c8:	f024 0403 	bic.w	r4, r4, #3
 800b5cc:	42a0      	cmp	r0, r4
 800b5ce:	d0f8      	beq.n	800b5c2 <sbrk_aligned+0x22>
 800b5d0:	1a21      	subs	r1, r4, r0
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f000 f89a 	bl	800b70c <_sbrk_r>
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d1f2      	bne.n	800b5c2 <sbrk_aligned+0x22>
 800b5dc:	e7ef      	b.n	800b5be <sbrk_aligned+0x1e>
 800b5de:	bf00      	nop
 800b5e0:	20000c84 	.word	0x20000c84

0800b5e4 <_malloc_r>:
 800b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e8:	1ccd      	adds	r5, r1, #3
 800b5ea:	f025 0503 	bic.w	r5, r5, #3
 800b5ee:	3508      	adds	r5, #8
 800b5f0:	2d0c      	cmp	r5, #12
 800b5f2:	bf38      	it	cc
 800b5f4:	250c      	movcc	r5, #12
 800b5f6:	2d00      	cmp	r5, #0
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	db01      	blt.n	800b600 <_malloc_r+0x1c>
 800b5fc:	42a9      	cmp	r1, r5
 800b5fe:	d904      	bls.n	800b60a <_malloc_r+0x26>
 800b600:	230c      	movs	r3, #12
 800b602:	6033      	str	r3, [r6, #0]
 800b604:	2000      	movs	r0, #0
 800b606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6e0 <_malloc_r+0xfc>
 800b60e:	f000 f869 	bl	800b6e4 <__malloc_lock>
 800b612:	f8d8 3000 	ldr.w	r3, [r8]
 800b616:	461c      	mov	r4, r3
 800b618:	bb44      	cbnz	r4, 800b66c <_malloc_r+0x88>
 800b61a:	4629      	mov	r1, r5
 800b61c:	4630      	mov	r0, r6
 800b61e:	f7ff ffbf 	bl	800b5a0 <sbrk_aligned>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	4604      	mov	r4, r0
 800b626:	d158      	bne.n	800b6da <_malloc_r+0xf6>
 800b628:	f8d8 4000 	ldr.w	r4, [r8]
 800b62c:	4627      	mov	r7, r4
 800b62e:	2f00      	cmp	r7, #0
 800b630:	d143      	bne.n	800b6ba <_malloc_r+0xd6>
 800b632:	2c00      	cmp	r4, #0
 800b634:	d04b      	beq.n	800b6ce <_malloc_r+0xea>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	4639      	mov	r1, r7
 800b63a:	4630      	mov	r0, r6
 800b63c:	eb04 0903 	add.w	r9, r4, r3
 800b640:	f000 f864 	bl	800b70c <_sbrk_r>
 800b644:	4581      	cmp	r9, r0
 800b646:	d142      	bne.n	800b6ce <_malloc_r+0xea>
 800b648:	6821      	ldr	r1, [r4, #0]
 800b64a:	1a6d      	subs	r5, r5, r1
 800b64c:	4629      	mov	r1, r5
 800b64e:	4630      	mov	r0, r6
 800b650:	f7ff ffa6 	bl	800b5a0 <sbrk_aligned>
 800b654:	3001      	adds	r0, #1
 800b656:	d03a      	beq.n	800b6ce <_malloc_r+0xea>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	442b      	add	r3, r5
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	f8d8 3000 	ldr.w	r3, [r8]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	bb62      	cbnz	r2, 800b6c0 <_malloc_r+0xdc>
 800b666:	f8c8 7000 	str.w	r7, [r8]
 800b66a:	e00f      	b.n	800b68c <_malloc_r+0xa8>
 800b66c:	6822      	ldr	r2, [r4, #0]
 800b66e:	1b52      	subs	r2, r2, r5
 800b670:	d420      	bmi.n	800b6b4 <_malloc_r+0xd0>
 800b672:	2a0b      	cmp	r2, #11
 800b674:	d917      	bls.n	800b6a6 <_malloc_r+0xc2>
 800b676:	1961      	adds	r1, r4, r5
 800b678:	42a3      	cmp	r3, r4
 800b67a:	6025      	str	r5, [r4, #0]
 800b67c:	bf18      	it	ne
 800b67e:	6059      	strne	r1, [r3, #4]
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	bf08      	it	eq
 800b684:	f8c8 1000 	streq.w	r1, [r8]
 800b688:	5162      	str	r2, [r4, r5]
 800b68a:	604b      	str	r3, [r1, #4]
 800b68c:	4630      	mov	r0, r6
 800b68e:	f000 f82f 	bl	800b6f0 <__malloc_unlock>
 800b692:	f104 000b 	add.w	r0, r4, #11
 800b696:	1d23      	adds	r3, r4, #4
 800b698:	f020 0007 	bic.w	r0, r0, #7
 800b69c:	1ac2      	subs	r2, r0, r3
 800b69e:	bf1c      	itt	ne
 800b6a0:	1a1b      	subne	r3, r3, r0
 800b6a2:	50a3      	strne	r3, [r4, r2]
 800b6a4:	e7af      	b.n	800b606 <_malloc_r+0x22>
 800b6a6:	6862      	ldr	r2, [r4, #4]
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	bf0c      	ite	eq
 800b6ac:	f8c8 2000 	streq.w	r2, [r8]
 800b6b0:	605a      	strne	r2, [r3, #4]
 800b6b2:	e7eb      	b.n	800b68c <_malloc_r+0xa8>
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	6864      	ldr	r4, [r4, #4]
 800b6b8:	e7ae      	b.n	800b618 <_malloc_r+0x34>
 800b6ba:	463c      	mov	r4, r7
 800b6bc:	687f      	ldr	r7, [r7, #4]
 800b6be:	e7b6      	b.n	800b62e <_malloc_r+0x4a>
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d1fb      	bne.n	800b6c0 <_malloc_r+0xdc>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	6053      	str	r3, [r2, #4]
 800b6cc:	e7de      	b.n	800b68c <_malloc_r+0xa8>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 f80c 	bl	800b6f0 <__malloc_unlock>
 800b6d8:	e794      	b.n	800b604 <_malloc_r+0x20>
 800b6da:	6005      	str	r5, [r0, #0]
 800b6dc:	e7d6      	b.n	800b68c <_malloc_r+0xa8>
 800b6de:	bf00      	nop
 800b6e0:	20000c88 	.word	0x20000c88

0800b6e4 <__malloc_lock>:
 800b6e4:	4801      	ldr	r0, [pc, #4]	@ (800b6ec <__malloc_lock+0x8>)
 800b6e6:	f000 b84b 	b.w	800b780 <__retarget_lock_acquire_recursive>
 800b6ea:	bf00      	nop
 800b6ec:	20000dc4 	.word	0x20000dc4

0800b6f0 <__malloc_unlock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	@ (800b6f8 <__malloc_unlock+0x8>)
 800b6f2:	f000 b846 	b.w	800b782 <__retarget_lock_release_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	20000dc4 	.word	0x20000dc4

0800b6fc <memset>:
 800b6fc:	4402      	add	r2, r0
 800b6fe:	4603      	mov	r3, r0
 800b700:	4293      	cmp	r3, r2
 800b702:	d100      	bne.n	800b706 <memset+0xa>
 800b704:	4770      	bx	lr
 800b706:	f803 1b01 	strb.w	r1, [r3], #1
 800b70a:	e7f9      	b.n	800b700 <memset+0x4>

0800b70c <_sbrk_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d06      	ldr	r5, [pc, #24]	@ (800b728 <_sbrk_r+0x1c>)
 800b710:	2300      	movs	r3, #0
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	602b      	str	r3, [r5, #0]
 800b718:	f7f6 fae0 	bl	8001cdc <_sbrk>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_sbrk_r+0x1a>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_sbrk_r+0x1a>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000dc8 	.word	0x20000dc8

0800b72c <__errno>:
 800b72c:	4b01      	ldr	r3, [pc, #4]	@ (800b734 <__errno+0x8>)
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20000040 	.word	0x20000040

0800b738 <__libc_init_array>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4d0d      	ldr	r5, [pc, #52]	@ (800b770 <__libc_init_array+0x38>)
 800b73c:	4c0d      	ldr	r4, [pc, #52]	@ (800b774 <__libc_init_array+0x3c>)
 800b73e:	1b64      	subs	r4, r4, r5
 800b740:	10a4      	asrs	r4, r4, #2
 800b742:	2600      	movs	r6, #0
 800b744:	42a6      	cmp	r6, r4
 800b746:	d109      	bne.n	800b75c <__libc_init_array+0x24>
 800b748:	4d0b      	ldr	r5, [pc, #44]	@ (800b778 <__libc_init_array+0x40>)
 800b74a:	4c0c      	ldr	r4, [pc, #48]	@ (800b77c <__libc_init_array+0x44>)
 800b74c:	f000 f864 	bl	800b818 <_init>
 800b750:	1b64      	subs	r4, r4, r5
 800b752:	10a4      	asrs	r4, r4, #2
 800b754:	2600      	movs	r6, #0
 800b756:	42a6      	cmp	r6, r4
 800b758:	d105      	bne.n	800b766 <__libc_init_array+0x2e>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b760:	4798      	blx	r3
 800b762:	3601      	adds	r6, #1
 800b764:	e7ee      	b.n	800b744 <__libc_init_array+0xc>
 800b766:	f855 3b04 	ldr.w	r3, [r5], #4
 800b76a:	4798      	blx	r3
 800b76c:	3601      	adds	r6, #1
 800b76e:	e7f2      	b.n	800b756 <__libc_init_array+0x1e>
 800b770:	0800b85c 	.word	0x0800b85c
 800b774:	0800b85c 	.word	0x0800b85c
 800b778:	0800b85c 	.word	0x0800b85c
 800b77c:	0800b860 	.word	0x0800b860

0800b780 <__retarget_lock_acquire_recursive>:
 800b780:	4770      	bx	lr

0800b782 <__retarget_lock_release_recursive>:
 800b782:	4770      	bx	lr

0800b784 <_free_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4605      	mov	r5, r0
 800b788:	2900      	cmp	r1, #0
 800b78a:	d041      	beq.n	800b810 <_free_r+0x8c>
 800b78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b790:	1f0c      	subs	r4, r1, #4
 800b792:	2b00      	cmp	r3, #0
 800b794:	bfb8      	it	lt
 800b796:	18e4      	addlt	r4, r4, r3
 800b798:	f7ff ffa4 	bl	800b6e4 <__malloc_lock>
 800b79c:	4a1d      	ldr	r2, [pc, #116]	@ (800b814 <_free_r+0x90>)
 800b79e:	6813      	ldr	r3, [r2, #0]
 800b7a0:	b933      	cbnz	r3, 800b7b0 <_free_r+0x2c>
 800b7a2:	6063      	str	r3, [r4, #4]
 800b7a4:	6014      	str	r4, [r2, #0]
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ac:	f7ff bfa0 	b.w	800b6f0 <__malloc_unlock>
 800b7b0:	42a3      	cmp	r3, r4
 800b7b2:	d908      	bls.n	800b7c6 <_free_r+0x42>
 800b7b4:	6820      	ldr	r0, [r4, #0]
 800b7b6:	1821      	adds	r1, r4, r0
 800b7b8:	428b      	cmp	r3, r1
 800b7ba:	bf01      	itttt	eq
 800b7bc:	6819      	ldreq	r1, [r3, #0]
 800b7be:	685b      	ldreq	r3, [r3, #4]
 800b7c0:	1809      	addeq	r1, r1, r0
 800b7c2:	6021      	streq	r1, [r4, #0]
 800b7c4:	e7ed      	b.n	800b7a2 <_free_r+0x1e>
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	b10b      	cbz	r3, 800b7d0 <_free_r+0x4c>
 800b7cc:	42a3      	cmp	r3, r4
 800b7ce:	d9fa      	bls.n	800b7c6 <_free_r+0x42>
 800b7d0:	6811      	ldr	r1, [r2, #0]
 800b7d2:	1850      	adds	r0, r2, r1
 800b7d4:	42a0      	cmp	r0, r4
 800b7d6:	d10b      	bne.n	800b7f0 <_free_r+0x6c>
 800b7d8:	6820      	ldr	r0, [r4, #0]
 800b7da:	4401      	add	r1, r0
 800b7dc:	1850      	adds	r0, r2, r1
 800b7de:	4283      	cmp	r3, r0
 800b7e0:	6011      	str	r1, [r2, #0]
 800b7e2:	d1e0      	bne.n	800b7a6 <_free_r+0x22>
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	6053      	str	r3, [r2, #4]
 800b7ea:	4408      	add	r0, r1
 800b7ec:	6010      	str	r0, [r2, #0]
 800b7ee:	e7da      	b.n	800b7a6 <_free_r+0x22>
 800b7f0:	d902      	bls.n	800b7f8 <_free_r+0x74>
 800b7f2:	230c      	movs	r3, #12
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	e7d6      	b.n	800b7a6 <_free_r+0x22>
 800b7f8:	6820      	ldr	r0, [r4, #0]
 800b7fa:	1821      	adds	r1, r4, r0
 800b7fc:	428b      	cmp	r3, r1
 800b7fe:	bf04      	itt	eq
 800b800:	6819      	ldreq	r1, [r3, #0]
 800b802:	685b      	ldreq	r3, [r3, #4]
 800b804:	6063      	str	r3, [r4, #4]
 800b806:	bf04      	itt	eq
 800b808:	1809      	addeq	r1, r1, r0
 800b80a:	6021      	streq	r1, [r4, #0]
 800b80c:	6054      	str	r4, [r2, #4]
 800b80e:	e7ca      	b.n	800b7a6 <_free_r+0x22>
 800b810:	bd38      	pop	{r3, r4, r5, pc}
 800b812:	bf00      	nop
 800b814:	20000c88 	.word	0x20000c88

0800b818 <_init>:
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81a:	bf00      	nop
 800b81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81e:	bc08      	pop	{r3}
 800b820:	469e      	mov	lr, r3
 800b822:	4770      	bx	lr

0800b824 <_fini>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	bf00      	nop
 800b828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82a:	bc08      	pop	{r3}
 800b82c:	469e      	mov	lr, r3
 800b82e:	4770      	bx	lr
