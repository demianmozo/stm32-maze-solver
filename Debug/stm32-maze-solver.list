
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800aa34  0800aa34  0000ba34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa58  0800aa58  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa58  0800aa58  0000ba58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa60  0800aa60  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa60  0800aa60  0000ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa64  0800aa64  0000ba64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800aa68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000b10  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b8c  20000b8c  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc20  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044ce  00000000  00000000  00027ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012fc  00000000  00000000  0002da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005aab  00000000  00000000  0002ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020e93  00000000  00000000  000347d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1160  00000000  00000000  0005566a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001367ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b68  00000000  00000000  00136810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0013d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aa1c 	.word	0x0800aa1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800aa1c 	.word	0x0800aa1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80004f8:	2108      	movs	r1, #8
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <control_motor_init+0x1c>)
 80004fc:	f005 fe5a 	bl	80061b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000500:	210c      	movs	r1, #12
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <control_motor_init+0x1c>)
 8000504:	f005 fe56 	bl	80061b4 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000508:	f000 f88c 	bl	8000624 <avanza>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000234 	.word	0x20000234

08000514 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <set_motor_izq+0x1c>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d00d      	beq.n	800054a <set_motor_izq+0x36>
 800052e:	e019      	b.n	8000564 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000536:	4817      	ldr	r0, [pc, #92]	@ (8000594 <set_motor_izq+0x80>)
 8000538:	f002 f812 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000542:	4814      	ldr	r0, [pc, #80]	@ (8000594 <set_motor_izq+0x80>)
 8000544:	f002 f80c 	bl	8002560 <HAL_GPIO_WritePin>
        break;
 8000548:	e01b      	b.n	8000582 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000550:	4810      	ldr	r0, [pc, #64]	@ (8000594 <set_motor_izq+0x80>)
 8000552:	f002 f805 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <set_motor_izq+0x80>)
 800055e:	f001 ffff 	bl	8002560 <HAL_GPIO_WritePin>
        break;
 8000562:	e00e      	b.n	8000582 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056a:	480a      	ldr	r0, [pc, #40]	@ (8000594 <set_motor_izq+0x80>)
 800056c:	f001 fff8 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000576:	4807      	ldr	r0, [pc, #28]	@ (8000594 <set_motor_izq+0x80>)
 8000578:	f001 fff2 	bl	8002560 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800057c:	2300      	movs	r3, #0
 800057e:	80bb      	strh	r3, [r7, #4]
        break;
 8000580:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <set_motor_izq+0x84>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	88ba      	ldrh	r2, [r7, #4]
 8000588:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020400 	.word	0x40020400
 8000598:	20000234 	.word	0x20000234

0800059c <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <set_motor_der+0x1c>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00d      	beq.n	80005d2 <set_motor_der+0x36>
 80005b6:	e019      	b.n	80005ec <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	4817      	ldr	r0, [pc, #92]	@ (800061c <set_motor_der+0x80>)
 80005c0:	f001 ffce 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ca:	4814      	ldr	r0, [pc, #80]	@ (800061c <set_motor_der+0x80>)
 80005cc:	f001 ffc8 	bl	8002560 <HAL_GPIO_WritePin>
        break;
 80005d0:	e01b      	b.n	800060a <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d8:	4810      	ldr	r0, [pc, #64]	@ (800061c <set_motor_der+0x80>)
 80005da:	f001 ffc1 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <set_motor_der+0x80>)
 80005e6:	f001 ffbb 	bl	8002560 <HAL_GPIO_WritePin>
        break;
 80005ea:	e00e      	b.n	800060a <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f2:	480a      	ldr	r0, [pc, #40]	@ (800061c <set_motor_der+0x80>)
 80005f4:	f001 ffb4 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4807      	ldr	r0, [pc, #28]	@ (800061c <set_motor_der+0x80>)
 8000600:	f001 ffae 	bl	8002560 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000604:	2300      	movs	r3, #0
 8000606:	80bb      	strh	r3, [r7, #4]
        break;
 8000608:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <set_motor_der+0x84>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020400 	.word	0x40020400
 8000620:	20000234 	.word	0x20000234

08000624 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000628:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff71 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000632:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffb0 	bl	800059c <set_motor_der>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800064a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ff60 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000654:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ff9f 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 800065e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000662:	f000 ff5f 	bl	8001524 <HAL_Delay>
    switch(sentido)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d817      	bhi.n	800069c <gira90izq+0x5c>
 800066c:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <gira90izq+0x34>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000685 	.word	0x08000685
 8000678:	0800068b 	.word	0x0800068b
 800067c:	08000691 	.word	0x08000691
 8000680:	08000697 	.word	0x08000697
    {
    	case norte:
    	sentido = oeste;
 8000684:	2303      	movs	r3, #3
 8000686:	71fb      	strb	r3, [r7, #7]
    	break;
 8000688:	e008      	b.n	800069c <gira90izq+0x5c>

    	case este:
    	sentido = norte;
 800068a:	2300      	movs	r3, #0
 800068c:	71fb      	strb	r3, [r7, #7]
    	break;
 800068e:	e005      	b.n	800069c <gira90izq+0x5c>

    	case sur:
    	sentido = este;
 8000690:	2301      	movs	r3, #1
 8000692:	71fb      	strb	r3, [r7, #7]
    	break;
 8000694:	e002      	b.n	800069c <gira90izq+0x5c>

    	case oeste:
    	sentido = sur;
 8000696:	2302      	movs	r3, #2
 8000698:	71fb      	strb	r3, [r7, #7]
    	break;
 800069a:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 800069c:	f7ff ffc2 	bl	8000624 <avanza>
    return sentido;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop

080006ac <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 80006b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ff2a 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 80006c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff69 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80006ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ce:	f000 ff29 	bl	8001524 <HAL_Delay>
    switch(sentido)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d817      	bhi.n	8000708 <gira90der+0x5c>
 80006d8:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <gira90der+0x34>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	080006f1 	.word	0x080006f1
 80006e4:	080006f7 	.word	0x080006f7
 80006e8:	080006fd 	.word	0x080006fd
 80006ec:	08000703 	.word	0x08000703
    {
    	case norte:
    	sentido = este;
 80006f0:	2301      	movs	r3, #1
 80006f2:	71fb      	strb	r3, [r7, #7]
    	break;
 80006f4:	e008      	b.n	8000708 <gira90der+0x5c>

    	case este:
    	sentido = sur;
 80006f6:	2302      	movs	r3, #2
 80006f8:	71fb      	strb	r3, [r7, #7]
    	break;
 80006fa:	e005      	b.n	8000708 <gira90der+0x5c>

    	case sur:
    	sentido = oeste;
 80006fc:	2303      	movs	r3, #3
 80006fe:	71fb      	strb	r3, [r7, #7]
    	break;
 8000700:	e002      	b.n	8000708 <gira90der+0x5c>

    	case oeste:
    	sentido = norte;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
    	break;
 8000706:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000708:	f7ff ff8c 	bl	8000624 <avanza>
    return sentido;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop

08000718 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000722:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fef4 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800072c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff33 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000736:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073a:	f000 fef3 	bl	8001524 <HAL_Delay>
    switch(sentido)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d817      	bhi.n	8000774 <gira180+0x5c>
 8000744:	a201      	add	r2, pc, #4	@ (adr r2, 800074c <gira180+0x34>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	0800075d 	.word	0x0800075d
 8000750:	08000763 	.word	0x08000763
 8000754:	08000769 	.word	0x08000769
 8000758:	0800076f 	.word	0x0800076f
    {
    	case norte:
    	sentido = sur;
 800075c:	2302      	movs	r3, #2
 800075e:	71fb      	strb	r3, [r7, #7]
    	break;
 8000760:	e008      	b.n	8000774 <gira180+0x5c>

    	case este:
    	sentido = oeste;
 8000762:	2303      	movs	r3, #3
 8000764:	71fb      	strb	r3, [r7, #7]
    	break;
 8000766:	e005      	b.n	8000774 <gira180+0x5c>

    	case sur:
    	sentido = norte;
 8000768:	2300      	movs	r3, #0
 800076a:	71fb      	strb	r3, [r7, #7]
    	break;
 800076c:	e002      	b.n	8000774 <gira180+0x5c>

    	case oeste:
    	sentido = este;
 800076e:	2301      	movs	r3, #1
 8000770:	71fb      	strb	r3, [r7, #7]
    	break;
 8000772:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000774:	f7ff ff56 	bl	8000624 <avanza>
    return sentido;
 8000778:	79fb      	ldrb	r3, [r7, #7]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop

08000784 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000788:	2100      	movs	r1, #0
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fec2 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff ff02 	bl	800059c <set_motor_der>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fe4e 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f868 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f000 fa64 	bl	8000c74 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ac:	f000 fa42 	bl	8000c34 <MX_DMA_Init>
  MX_I2C1_Init();
 80007b0:	f000 f92c 	bl	8000a0c <MX_I2C1_Init>
  MX_I2S3_Init();
 80007b4:	f000 f958 	bl	8000a68 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007b8:	f000 f984 	bl	8000ac4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007bc:	f009 fcd8 	bl	800a170 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80007c0:	f000 f8c4 	bl	800094c <MX_ADC1_Init>
  MX_TIM3_Init();
 80007c4:	f000 f9b4 	bl	8000b30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Inicializar el módulo de motores
  control_motor_init();
 80007c8:	f7ff fe94 	bl	80004f4 <control_motor_init>

  sentido = norte;			//empieza apuntando al norte
 80007cc:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <main+0xd4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007d2:	f009 fcf3 	bl	800a1bc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // OJO SOLO PARA PROBAR EL LUNES LOS TIEMPOS DE LOS GIROS
    avanza(); // Comenzar avanzando 1 SEGUNDO
 80007d6:	f7ff ff25 	bl	8000624 <avanza>
    HAL_GPIO_WritePin(puerto_leds, verde, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e0:	4824      	ldr	r0, [pc, #144]	@ (8000874 <main+0xd8>)
 80007e2:	f001 febd 	bl	8002560 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ea:	f000 fe9b 	bl	8001524 <HAL_Delay>

    // Simular detección de pared - girar a la derecha
    sentido = gira90der(sentido); // Gira Y SIGUE AVANZANDO POR 2 SEGUNDOS
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <main+0xd4>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff5a 	bl	80006ac <gira90der>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <main+0xd4>)
 80007fe:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(puerto_leds, naranja, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000806:	481b      	ldr	r0, [pc, #108]	@ (8000874 <main+0xd8>)
 8000808:	f001 feaa 	bl	8002560 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 800080c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000810:	f000 fe88 	bl	8001524 <HAL_Delay>

    // Otro obstáculo - girar a la izquierda
    sentido = gira90izq(sentido); // Gira Y SIGUE AVANZANDO
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <main+0xd4>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff11 	bl	8000640 <gira90izq>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <main+0xd4>)
 8000824:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(puerto_leds, rojo, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800082c:	4811      	ldr	r0, [pc, #68]	@ (8000874 <main+0xd8>)
 800082e:	f001 fe97 	bl	8002560 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8000832:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000836:	f000 fe75 	bl	8001524 <HAL_Delay>

    // Callejón sin salida - dar media vuelta
    sentido = gira180(sentido); // Gira Y SIGUE AVANZANDO POR 3 SEGUNDOS
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <main+0xd4>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff6a 	bl	8000718 <gira180>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <main+0xd4>)
 800084a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(puerto_leds, azul, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <main+0xd8>)
 8000854:	f001 fe84 	bl	8002560 <HAL_GPIO_WritePin>
    HAL_Delay(3000);
 8000858:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800085c:	f000 fe62 	bl	8001524 <HAL_Delay>

    // SIMULA QUE TERMINÓ
    termino();
 8000860:	f7ff ff90 	bl	8000784 <termino>
    HAL_Delay(5000); // Pausa antes de reiniciar
 8000864:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000868:	f000 fe5c 	bl	8001524 <HAL_Delay>
    MX_USB_HOST_Process();
 800086c:	bf00      	nop
 800086e:	e7b0      	b.n	80007d2 <main+0x36>
 8000870:	2000027c 	.word	0x2000027c
 8000874:	40020c00 	.word	0x40020c00

08000878 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	@ 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	@ 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f00a f83a 	bl	800a900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <SystemClock_Config+0xcc>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	4a27      	ldr	r2, [pc, #156]	@ (8000944 <SystemClock_Config+0xcc>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ac:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <SystemClock_Config+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <SystemClock_Config+0xd0>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e8:	2308      	movs	r3, #8
 80008ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f6:	2307      	movs	r3, #7
 80008f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fd60 	bl	80053c4 <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800090a:	f000 fad1 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800090e:	230f      	movs	r3, #15
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2302      	movs	r3, #2
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800091a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000924:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2105      	movs	r1, #5
 800092c:	4618      	mov	r0, r3
 800092e:	f004 ffc1 	bl	80058b4 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000938:	f000 faba 	bl	8000eb0 <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3750      	adds	r7, #80	@ 0x50
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 8000960:	4a28      	ldr	r2, [pc, #160]	@ (8000a04 <MX_ADC1_Init+0xb8>)
 8000962:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000964:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 8000966:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800096a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096c:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000972:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 8000974:	2201      	movs	r2, #1
 8000976:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000978:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 800097a:	2201      	movs	r2, #1
 800097c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000986:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 8000988:	2200      	movs	r2, #0
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 800098e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a08 <MX_ADC1_Init+0xbc>)
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000992:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 800099a:	2202      	movs	r2, #2
 800099c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ac:	4814      	ldr	r0, [pc, #80]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 80009ae:	f000 fddd 	bl	800156c <HAL_ADC_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009b8:	f000 fa7a 	bl	8000eb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 80009bc:	2308      	movs	r3, #8
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80009c4:	2305      	movs	r3, #5
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 80009ce:	f000 fe11 	bl	80015f4 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009d8:	f000 fa6a 	bl	8000eb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80009dc:	2309      	movs	r3, #9
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_ADC1_Init+0xb4>)
 80009ea:	f000 fe03 	bl	80015f4 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009f4:	f000 fa5c 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000098 	.word	0x20000098
 8000a04:	40012000 	.word	0x40012000
 8000a08:	0f000001 	.word	0x0f000001

08000a0c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a12:	4a13      	ldr	r2, [pc, #76]	@ (8000a60 <MX_I2C1_Init+0x54>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a18:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <MX_I2C1_Init+0x58>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a4a:	f003 fed7 	bl	80047fc <HAL_I2C_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f000 fa2c 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000140 	.word	0x20000140
 8000a60:	40005400 	.word	0x40005400
 8000a64:	000186a0 	.word	0x000186a0

08000a68 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <MX_I2S3_Init+0x58>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a78:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a8e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000a92:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_I2S3_Init+0x54>)
 8000aa8:	f003 ffec 	bl	8004a84 <HAL_I2S_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ab2:	f000 f9fd 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000194 	.word	0x20000194
 8000ac0:	40003c00 	.word	0x40003c00

08000ac4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000aca:	4a18      	ldr	r2, [pc, #96]	@ (8000b2c <MX_SPI1_Init+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b10:	220a      	movs	r2, #10
 8000b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_SPI1_Init+0x64>)
 8000b16:	f005 fa1b 	bl	8005f50 <HAL_SPI_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b20:	f000 f9c6 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001dc 	.word	0x200001dc
 8000b2c:	40013000 	.word	0x40013000

08000b30 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b60:	4b32      	ldr	r3, [pc, #200]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000b62:	4a33      	ldr	r2, [pc, #204]	@ (8000c30 <MX_TIM3_Init+0x100>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000b66:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000b68:	2253      	movs	r2, #83	@ 0x53
 8000b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b72:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000b74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b86:	4829      	ldr	r0, [pc, #164]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000b88:	f005 fa6b 	bl	8006062 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b92:	f000 f98d 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4822      	ldr	r0, [pc, #136]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000ba4:	f005 fc90 	bl	80064c8 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bae:	f000 f97f 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bb2:	481e      	ldr	r0, [pc, #120]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000bb4:	f005 faa4 	bl	8006100 <HAL_TIM_PWM_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bbe:	f000 f977 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000bd2:	f006 f857 	bl	8006c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bdc:	f000 f968 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be0:	2360      	movs	r3, #96	@ 0x60
 8000be2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000bf8:	f005 fba4 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c02:	f000 f955 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	220c      	movs	r2, #12
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000c0e:	f005 fb99 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c18:	f000 f94a 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c1c:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <MX_TIM3_Init+0xfc>)
 8000c1e:	f000 fb1f 	bl	8001260 <HAL_TIM_MspPostInit>
}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	@ 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000234 	.word	0x20000234
 8000c30:	40000400 	.word	0x40000400

08000c34 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_DMA_Init+0x3c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <MX_DMA_Init+0x3c>)
 8000c44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_DMA_Init+0x3c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2038      	movs	r0, #56	@ 0x38
 8000c5c:	f000 ffc3 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c60:	2038      	movs	r0, #56	@ 0x38
 8000c62:	f000 ffdc 	bl	8001c1e <HAL_NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	4b82      	ldr	r3, [pc, #520]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a81      	ldr	r2, [pc, #516]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	4b7b      	ldr	r3, [pc, #492]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a7a      	ldr	r2, [pc, #488]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b78      	ldr	r3, [pc, #480]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b74      	ldr	r3, [pc, #464]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a73      	ldr	r2, [pc, #460]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b71      	ldr	r3, [pc, #452]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a6c      	ldr	r2, [pc, #432]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b6a      	ldr	r3, [pc, #424]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b66      	ldr	r3, [pc, #408]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a65      	ldr	r2, [pc, #404]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b63      	ldr	r3, [pc, #396]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b5c      	ldr	r3, [pc, #368]	@ (8000e98 <MX_GPIO_Init+0x224>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2108      	movs	r1, #8
 8000d36:	4859      	ldr	r0, [pc, #356]	@ (8000e9c <MX_GPIO_Init+0x228>)
 8000d38:	f001 fc12 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4857      	ldr	r0, [pc, #348]	@ (8000ea0 <MX_GPIO_Init+0x22c>)
 8000d42:	f001 fc0d 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000d4c:	4855      	ldr	r0, [pc, #340]	@ (8000ea4 <MX_GPIO_Init+0x230>)
 8000d4e:	f001 fc07 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d58:	4853      	ldr	r0, [pc, #332]	@ (8000ea8 <MX_GPIO_Init+0x234>)
 8000d5a:	f001 fc01 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4849      	ldr	r0, [pc, #292]	@ (8000e9c <MX_GPIO_Init+0x228>)
 8000d76:	f001 fa57 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4843      	ldr	r0, [pc, #268]	@ (8000ea0 <MX_GPIO_Init+0x22c>)
 8000d92:	f001 fa49 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da6:	2305      	movs	r3, #5
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	483b      	ldr	r0, [pc, #236]	@ (8000ea0 <MX_GPIO_Init+0x22c>)
 8000db2:	f001 fa39 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4838      	ldr	r0, [pc, #224]	@ (8000eac <MX_GPIO_Init+0x238>)
 8000dcc:	f001 fa2c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4830      	ldr	r0, [pc, #192]	@ (8000ea4 <MX_GPIO_Init+0x230>)
 8000de4:	f001 fa20 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4827      	ldr	r0, [pc, #156]	@ (8000ea4 <MX_GPIO_Init+0x230>)
 8000e06:	f001 fa0f 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8000e0a:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4820      	ldr	r0, [pc, #128]	@ (8000ea4 <MX_GPIO_Init+0x230>)
 8000e24:	f001 fa00 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000e28:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4819      	ldr	r0, [pc, #100]	@ (8000ea8 <MX_GPIO_Init+0x234>)
 8000e42:	f001 f9f1 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 8000e46:	23c0      	movs	r3, #192	@ 0xc0
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4811      	ldr	r0, [pc, #68]	@ (8000ea0 <MX_GPIO_Init+0x22c>)
 8000e5a:	f001 f9e5 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e5e:	2320      	movs	r3, #32
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_GPIO_Init+0x234>)
 8000e72:	f001 f9d9 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e7a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <MX_GPIO_Init+0x228>)
 8000e8c:	f001 f9cc 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	@ 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40020000 	.word	0x40020000

08000eb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <Error_Handler+0x8>

08000ebc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efa:	2007      	movs	r0, #7
 8000efc:	f000 fe68 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	@ 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe8 <HAL_ADC_MspInit+0xdc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d157      	bne.n	8000fde <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	4a2d      	ldr	r2, [pc, #180]	@ (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <HAL_ADC_MspInit+0xe0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8000f66:	2303      	movs	r3, #3
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	481d      	ldr	r0, [pc, #116]	@ (8000ff0 <HAL_ADC_MspInit+0xe4>)
 8000f7a:	f001 f955 	bl	8002228 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <HAL_ADC_MspInit+0xec>)
 8000f82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f96:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000f98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fa4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fc2:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fc4:	f000 fe46 	bl	8001c54 <HAL_DMA_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fce:	f7ff ff6f 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fd8:	4a06      	ldr	r2, [pc, #24]	@ (8000ff4 <HAL_ADC_MspInit+0xe8>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012000 	.word	0x40012000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	200000e0 	.word	0x200000e0
 8000ff8:	40026410 	.word	0x40026410

08000ffc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	@ (8001080 <HAL_I2C_MspInit+0x84>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12c      	bne.n	8001078 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <HAL_I2C_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <HAL_I2C_MspInit+0x88>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_I2C_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800103a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001040:	2312      	movs	r3, #18
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104c:	2304      	movs	r3, #4
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	480c      	ldr	r0, [pc, #48]	@ (8001088 <HAL_I2C_MspInit+0x8c>)
 8001058:	f001 f8e6 	bl	8002228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_I2C_MspInit+0x88>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_I2C_MspInit+0x88>)
 8001066:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106a:	6413      	str	r3, [r2, #64]	@ 0x40
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_I2C_MspInit+0x88>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001078:	bf00      	nop
 800107a:	3728      	adds	r7, #40	@ 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005400 	.word	0x40005400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400

0800108c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	@ 0x38
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a31      	ldr	r2, [pc, #196]	@ (800117c <HAL_I2S_MspInit+0xf0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d15a      	bne.n	8001172 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010bc:	2301      	movs	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010c0:	23c0      	movs	r3, #192	@ 0xc0
 80010c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fdfd 	bl	8005ccc <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80010d8:	f7ff feea 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	4a26      	ldr	r2, [pc, #152]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 80010e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001100:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6313      	str	r3, [r2, #48]	@ 0x30
 8001108:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	4a18      	ldr	r2, [pc, #96]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6313      	str	r3, [r2, #48]	@ 0x30
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_I2S_MspInit+0xf4>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001130:	2310      	movs	r3, #16
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001140:	2306      	movs	r3, #6
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	480e      	ldr	r0, [pc, #56]	@ (8001184 <HAL_I2S_MspInit+0xf8>)
 800114c:	f001 f86c 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001150:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001162:	2306      	movs	r3, #6
 8001164:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	4806      	ldr	r0, [pc, #24]	@ (8001188 <HAL_I2S_MspInit+0xfc>)
 800116e:	f001 f85b 	bl	8002228 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001172:	bf00      	nop
 8001174:	3738      	adds	r7, #56	@ 0x38
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40003c00 	.word	0x40003c00
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020800 	.word	0x40020800

0800118c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	@ (8001210 <HAL_SPI_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12b      	bne.n	8001206 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_SPI_MspInit+0x88>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_SPI_MspInit+0x88>)
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_SPI_MspInit+0x88>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_SPI_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	@ (8001214 <HAL_SPI_MspInit+0x88>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_SPI_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011e6:	23e0      	movs	r3, #224	@ 0xe0
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f6:	2305      	movs	r3, #5
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <HAL_SPI_MspInit+0x8c>)
 8001202:	f001 f811 	bl	8002228 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40013000 	.word	0x40013000
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000

0800121c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_TIM_Base_MspInit+0x3c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10d      	bne.n	800124a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a09      	ldr	r2, [pc, #36]	@ (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40000400 	.word	0x40000400
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <HAL_TIM_MspPostInit+0x68>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d11e      	bne.n	80012c0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_TIM_MspPostInit+0x6c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a10      	ldr	r2, [pc, #64]	@ (80012cc <HAL_TIM_MspPostInit+0x6c>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_TIM_MspPostInit+0x6c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 800129e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <HAL_TIM_MspPostInit+0x70>)
 80012bc:	f000 ffb4 	bl	8002228 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020800 	.word	0x40020800

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <NMI_Handler+0x4>

080012dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 f8db 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA2_Stream0_IRQHandler+0x10>)
 800133a:	f000 fd39 	bl	8001db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000e0 	.word	0x200000e0

08001348 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <OTG_FS_IRQHandler+0x10>)
 800134e:	f001 fc01 	bl	8002b54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000664 	.word	0x20000664

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	@ (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f009 fad0 	bl	800a930 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20020000 	.word	0x20020000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	20000280 	.word	0x20000280
 80013c4:	20000b90 	.word	0x20000b90

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001424 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013f0:	f7ff ffea 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013f6:	490d      	ldr	r1, [pc, #52]	@ (800142c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800140c:	4c0a      	ldr	r4, [pc, #40]	@ (8001438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141a:	f009 fa8f 	bl	800a93c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141e:	f7ff f9bd 	bl	800079c <main>
  bx  lr    
 8001422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001430:	0800aa68 	.word	0x0800aa68
  ldr r2, =_sbss
 8001434:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001438:	20000b8c 	.word	0x20000b8c

0800143c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <HAL_Init+0x40>)
 800144a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800144e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <HAL_Init+0x40>)
 8001456:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <HAL_Init+0x40>)
 8001462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f000 fbb1 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f808 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001474:	f7ff fd22 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023c00 	.word	0x40023c00

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fbc9 	bl	8001c3a <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 fb91 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008
 8001508:	20000284 	.word	0x20000284

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000284 	.word	0x20000284

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008

0800156c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e033      	b.n	80015ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fcbe 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015b2:	f023 0302 	bic.w	r3, r3, #2
 80015b6:	f043 0202 	orr.w	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f93a 	bl	8001838 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f023 0303 	bic.w	r3, r3, #3
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015da:	e001      	b.n	80015e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x1c>
 800160c:	2302      	movs	r3, #2
 800160e:	e105      	b.n	800181c <HAL_ADC_ConfigChannel+0x228>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b09      	cmp	r3, #9
 800161e:	d925      	bls.n	800166c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68d9      	ldr	r1, [r3, #12]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	3b1e      	subs	r3, #30
 8001636:	2207      	movs	r2, #7
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43da      	mvns	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	400a      	ands	r2, r1
 8001644:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68d9      	ldr	r1, [r3, #12]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	4603      	mov	r3, r0
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4403      	add	r3, r0
 800165e:	3b1e      	subs	r3, #30
 8001660:	409a      	lsls	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	e022      	b.n	80016b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6919      	ldr	r1, [r3, #16]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	2207      	movs	r2, #7
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	400a      	ands	r2, r1
 800168e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6919      	ldr	r1, [r3, #16]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4403      	add	r3, r0
 80016a8:	409a      	lsls	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d824      	bhi.n	8001704 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b05      	subs	r3, #5
 80016cc:	221f      	movs	r2, #31
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	400a      	ands	r2, r1
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b05      	subs	r3, #5
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	635a      	str	r2, [r3, #52]	@ 0x34
 8001702:	e04c      	b.n	800179e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b0c      	cmp	r3, #12
 800170a:	d824      	bhi.n	8001756 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b23      	subs	r3, #35	@ 0x23
 800171e:	221f      	movs	r2, #31
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b23      	subs	r3, #35	@ 0x23
 8001748:	fa00 f203 	lsl.w	r2, r0, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	631a      	str	r2, [r3, #48]	@ 0x30
 8001754:	e023      	b.n	800179e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	3b41      	subs	r3, #65	@ 0x41
 8001768:	221f      	movs	r2, #31
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	400a      	ands	r2, r1
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	4618      	mov	r0, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b41      	subs	r3, #65	@ 0x41
 8001792:	fa00 f203 	lsl.w	r2, r0, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <HAL_ADC_ConfigChannel+0x234>)
 80017a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <HAL_ADC_ConfigChannel+0x238>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d109      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1cc>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a19      	ldr	r2, [pc, #100]	@ (800182c <HAL_ADC_ConfigChannel+0x238>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d123      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x21e>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d003      	beq.n	80017da <HAL_ADC_ConfigChannel+0x1e6>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b11      	cmp	r3, #17
 80017d8:	d11b      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d111      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_ADC_ConfigChannel+0x23c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <HAL_ADC_ConfigChannel+0x240>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	0c9a      	lsrs	r2, r3, #18
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001804:	e002      	b.n	800180c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3b01      	subs	r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f9      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40012300 	.word	0x40012300
 800182c:	40012000 	.word	0x40012000
 8001830:	20000000 	.word	0x20000000
 8001834:	431bde83 	.word	0x431bde83

08001838 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001840:	4b79      	ldr	r3, [pc, #484]	@ (8001a28 <ADC_Init+0x1f0>)
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	431a      	orrs	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800186c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ca:	4a58      	ldr	r2, [pc, #352]	@ (8001a2c <ADC_Init+0x1f4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d022      	beq.n	8001916 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6899      	ldr	r1, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e00f      	b.n	8001936 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001934:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0202 	bic.w	r2, r2, #2
 8001944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7e1b      	ldrb	r3, [r3, #24]
 8001950:	005a      	lsls	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01b      	beq.n	800199c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001972:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001982:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6859      	ldr	r1, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	3b01      	subs	r3, #1
 8001990:	035a      	lsls	r2, r3, #13
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	e007      	b.n	80019ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	051a      	lsls	r2, r3, #20
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6899      	ldr	r1, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019ee:	025a      	lsls	r2, r3, #9
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6899      	ldr	r1, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	029a      	lsls	r2, r3, #10
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	609a      	str	r2, [r3, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	0f000001 	.word	0x0f000001

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff3e 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff31 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff fc54 	bl	800150c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e099      	b.n	8001da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c90:	e00f      	b.n	8001cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c92:	f7ff fc3b 	bl	800150c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d908      	bls.n	8001cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e078      	b.n	8001da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e8      	bne.n	8001c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4b38      	ldr	r3, [pc, #224]	@ (8001dac <HAL_DMA_Init+0x158>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d107      	bne.n	8001d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	4313      	orrs	r3, r2
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f023 0307 	bic.w	r3, r3, #7
 8001d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d117      	bne.n	8001d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f9e9 	bl	8002130 <DMA_CheckFifoParam>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d72:	2301      	movs	r3, #1
 8001d74:	e016      	b.n	8001da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f9a0 	bl	80020c4 <DMA_CalcBaseAndBitshift>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	223f      	movs	r2, #63	@ 0x3f
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	f010803f 	.word	0xf010803f

08001db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001ff8 <HAL_DMA_IRQHandler+0x248>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a8e      	ldr	r2, [pc, #568]	@ (8001ffc <HAL_DMA_IRQHandler+0x24c>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0a9b      	lsrs	r3, r3, #10
 8001dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	2208      	movs	r2, #8
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01a      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	2208      	movs	r2, #8
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e20:	2201      	movs	r2, #1
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d012      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	2201      	movs	r2, #1
 8001e40:	409a      	lsls	r2, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	f043 0202 	orr.w	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	2204      	movs	r2, #4
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	2204      	movs	r2, #4
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	f043 0204 	orr.w	r2, r3, #4
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d043      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03c      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2210      	movs	r2, #16
 8001eac:	409a      	lsls	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d018      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d108      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d024      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
 8001ede:	e01f      	b.n	8001f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01b      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e016      	b.n	8001f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0208 	bic.w	r2, r2, #8
 8001f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f24:	2220      	movs	r2, #32
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 808f 	beq.w	8002050 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8087 	beq.w	8002050 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	2220      	movs	r2, #32
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d136      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0216 	bic.w	r2, r2, #22
 8001f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d103      	bne.n	8001f8a <HAL_DMA_IRQHandler+0x1da>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0208 	bic.w	r2, r2, #8
 8001f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9e:	223f      	movs	r2, #63	@ 0x3f
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d07e      	beq.n	80020bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
        }
        return;
 8001fc6:	e079      	b.n	80020bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10d      	bne.n	8002000 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d031      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e02c      	b.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e01e      	b.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10f      	bne.n	8002040 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0210 	bic.w	r2, r2, #16
 800202e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	2b00      	cmp	r3, #0
 8002056:	d032      	beq.n	80020be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d022      	beq.n	80020aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2205      	movs	r2, #5
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3301      	adds	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	d307      	bcc.n	8002098 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f2      	bne.n	800207c <HAL_DMA_IRQHandler+0x2cc>
 8002096:	e000      	b.n	800209a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002098:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
 80020ba:	e000      	b.n	80020be <HAL_DMA_IRQHandler+0x30e>
        return;
 80020bc:	bf00      	nop
    }
  }
}
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3b10      	subs	r3, #16
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <DMA_CalcBaseAndBitshift+0x64>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020de:	4a13      	ldr	r2, [pc, #76]	@ (800212c <DMA_CalcBaseAndBitshift+0x68>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d909      	bls.n	8002106 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	1d1a      	adds	r2, r3, #4
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	@ 0x58
 8002104:	e007      	b.n	8002116 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	aaaaaaab 	.word	0xaaaaaaab
 800212c:	0800aa50 	.word	0x0800aa50

08002130 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11f      	bne.n	800218a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d856      	bhi.n	80021fe <DMA_CheckFifoParam+0xce>
 8002150:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <DMA_CheckFifoParam+0x28>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	08002169 	.word	0x08002169
 800215c:	0800217b 	.word	0x0800217b
 8002160:	08002169 	.word	0x08002169
 8002164:	080021ff 	.word	0x080021ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d046      	beq.n	8002202 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002178:	e043      	b.n	8002202 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002182:	d140      	bne.n	8002206 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002188:	e03d      	b.n	8002206 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002192:	d121      	bne.n	80021d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d837      	bhi.n	800220a <DMA_CheckFifoParam+0xda>
 800219a:	a201      	add	r2, pc, #4	@ (adr r2, 80021a0 <DMA_CheckFifoParam+0x70>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021b7 	.word	0x080021b7
 80021a8:	080021b1 	.word	0x080021b1
 80021ac:	080021c9 	.word	0x080021c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      break;
 80021b4:	e030      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d025      	beq.n	800220e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c6:	e022      	b.n	800220e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021d0:	d11f      	bne.n	8002212 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021d6:	e01c      	b.n	8002212 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d903      	bls.n	80021e6 <DMA_CheckFifoParam+0xb6>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d003      	beq.n	80021ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e4:	e018      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ea:	e015      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00e      	beq.n	8002216 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      break;
 80021fc:	e00b      	b.n	8002216 <DMA_CheckFifoParam+0xe6>
      break;
 80021fe:	bf00      	nop
 8002200:	e00a      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 8002202:	bf00      	nop
 8002204:	e008      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e006      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e004      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e002      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;   
 8002212:	bf00      	nop
 8002214:	e000      	b.n	8002218 <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
    }
  } 
  
  return status; 
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e16b      	b.n	800251c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 815a 	bne.w	8002516 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d005      	beq.n	800227a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	2b02      	cmp	r3, #2
 8002278:	d130      	bne.n	80022dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 0201 	and.w	r2, r3, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d017      	beq.n	8002318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d123      	bne.n	800236c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	69b9      	ldr	r1, [r7, #24]
 8002368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0203 	and.w	r2, r3, #3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80b4 	beq.w	8002516 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b60      	ldr	r3, [pc, #384]	@ (8002534 <HAL_GPIO_Init+0x30c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002534 <HAL_GPIO_Init+0x30c>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023be:	4b5d      	ldr	r3, [pc, #372]	@ (8002534 <HAL_GPIO_Init+0x30c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002538 <HAL_GPIO_Init+0x310>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a52      	ldr	r2, [pc, #328]	@ (800253c <HAL_GPIO_Init+0x314>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02b      	beq.n	800244e <HAL_GPIO_Init+0x226>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a51      	ldr	r2, [pc, #324]	@ (8002540 <HAL_GPIO_Init+0x318>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d025      	beq.n	800244a <HAL_GPIO_Init+0x222>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a50      	ldr	r2, [pc, #320]	@ (8002544 <HAL_GPIO_Init+0x31c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01f      	beq.n	8002446 <HAL_GPIO_Init+0x21e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4f      	ldr	r2, [pc, #316]	@ (8002548 <HAL_GPIO_Init+0x320>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x21a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4e      	ldr	r2, [pc, #312]	@ (800254c <HAL_GPIO_Init+0x324>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x216>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4d      	ldr	r2, [pc, #308]	@ (8002550 <HAL_GPIO_Init+0x328>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x212>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4c      	ldr	r2, [pc, #304]	@ (8002554 <HAL_GPIO_Init+0x32c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x20e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4b      	ldr	r2, [pc, #300]	@ (8002558 <HAL_GPIO_Init+0x330>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x20a>
 800242e:	2307      	movs	r3, #7
 8002430:	e00e      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002432:	2308      	movs	r3, #8
 8002434:	e00c      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002436:	2306      	movs	r3, #6
 8002438:	e00a      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800243a:	2305      	movs	r3, #5
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800243e:	2304      	movs	r3, #4
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x228>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x228>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	@ (8002538 <HAL_GPIO_Init+0x310>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b3b      	ldr	r3, [pc, #236]	@ (800255c <HAL_GPIO_Init+0x334>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a32      	ldr	r2, [pc, #200]	@ (800255c <HAL_GPIO_Init+0x334>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b30      	ldr	r3, [pc, #192]	@ (800255c <HAL_GPIO_Init+0x334>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a27      	ldr	r2, [pc, #156]	@ (800255c <HAL_GPIO_Init+0x334>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b26      	ldr	r3, [pc, #152]	@ (800255c <HAL_GPIO_Init+0x334>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1d      	ldr	r2, [pc, #116]	@ (800255c <HAL_GPIO_Init+0x334>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_GPIO_Init+0x334>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a12      	ldr	r2, [pc, #72]	@ (800255c <HAL_GPIO_Init+0x334>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f ae90 	bls.w	8002244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40021400 	.word	0x40021400
 8002554:	40021800 	.word	0x40021800
 8002558:	40021c00 	.word	0x40021c00
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af02      	add	r7, sp, #8
 8002598:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e059      	b.n	8002658 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f007 fe34 	bl	800a22c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d2:	d102      	bne.n	80025da <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fc41 	bl	8006e66 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7c1a      	ldrb	r2, [r3, #16]
 80025ec:	f88d 2000 	strb.w	r2, [sp]
 80025f0:	3304      	adds	r3, #4
 80025f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f4:	f004 fbc2 	bl	8006d7c <USB_CoreInit>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e026      	b.n	8002658 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f004 fc39 	bl	8006e88 <USB_SetCurrentMode>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e017      	b.n	8002658 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7c1a      	ldrb	r2, [r3, #16]
 8002630:	f88d 2000 	strb.w	r2, [sp]
 8002634:	3304      	adds	r3, #4
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	f004 fde2 	bl	8007200 <USB_HostInit>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e004      	b.n	8002658 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b08b      	sub	sp, #44	@ 0x2c
 8002664:	af04      	add	r7, sp, #16
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	4603      	mov	r3, r0
 8002670:	70fb      	strb	r3, [r7, #3]
 8002672:	460b      	mov	r3, r1
 8002674:	70bb      	strb	r3, [r7, #2]
 8002676:	4613      	mov	r3, r2
 8002678:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800267a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800267c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_HCD_HC_Init+0x2c>
 8002688:	2302      	movs	r3, #2
 800268a:	e09d      	b.n	80027c8 <HAL_HCD_HC_Init+0x168>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3319      	adds	r3, #25
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3314      	adds	r3, #20
 80026b8:	787a      	ldrb	r2, [r7, #1]
 80026ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3315      	adds	r3, #21
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3326      	adds	r3, #38	@ 0x26
 80026e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	78bb      	ldrb	r3, [r7, #2]
 80026ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ee:	b2d8      	uxtb	r0, r3
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3316      	adds	r3, #22
 80026fe:	4602      	mov	r2, r0
 8002700:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fbc8 	bl	8002e9c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800270c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002710:	2b00      	cmp	r3, #0
 8002712:	da0a      	bge.n	800272a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3317      	adds	r3, #23
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e009      	b.n	800273e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3317      	adds	r3, #23
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fec0 	bl	80074c8 <USB_GetHostSpeed>
 8002748:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800274a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10b      	bne.n	800276a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002752:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_HCD_HC_Init+0x10a>
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2bbc      	cmp	r3, #188	@ 0xbc
 8002764:	d901      	bls.n	800276a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002766:	23bc      	movs	r3, #188	@ 0xbc
 8002768:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3318      	adds	r3, #24
 800277a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800277e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	b298      	uxth	r0, r3
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3328      	adds	r3, #40	@ 0x28
 8002794:	4602      	mov	r2, r0
 8002796:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	787c      	ldrb	r4, [r7, #1]
 80027a2:	78ba      	ldrb	r2, [r7, #2]
 80027a4:	78f9      	ldrb	r1, [r7, #3]
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	4623      	mov	r3, r4
 80027b6:	f004 feaf 	bl	8007518 <USB_HC_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_HCD_HC_Halt+0x1e>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e00f      	b.n	800280e <HAL_HCD_HC_Halt+0x3e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f005 fa41 	bl	8007c86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	70fb      	strb	r3, [r7, #3]
 800282a:	460b      	mov	r3, r1
 800282c:	70bb      	strb	r3, [r7, #2]
 800282e:	4613      	mov	r3, r2
 8002830:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	3317      	adds	r3, #23
 8002842:	78ba      	ldrb	r2, [r7, #2]
 8002844:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	3326      	adds	r3, #38	@ 0x26
 8002856:	787a      	ldrb	r2, [r7, #1]
 8002858:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800285a:	7c3b      	ldrb	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d114      	bne.n	800288a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	332a      	adds	r3, #42	@ 0x2a
 8002870:	2203      	movs	r2, #3
 8002872:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3319      	adds	r3, #25
 8002884:	7f3a      	ldrb	r2, [r7, #28]
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	e009      	b.n	800289e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	332a      	adds	r3, #42	@ 0x2a
 800289a:	2202      	movs	r2, #2
 800289c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800289e:	787b      	ldrb	r3, [r7, #1]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	f200 8102 	bhi.w	8002aaa <HAL_HCD_HC_SubmitRequest+0x292>
 80028a6:	a201      	add	r2, pc, #4	@ (adr r2, 80028ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	08002a95 	.word	0x08002a95
 80028b4:	08002981 	.word	0x08002981
 80028b8:	08002a0b 	.word	0x08002a0b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80028bc:	7c3b      	ldrb	r3, [r7, #16]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 80f5 	bne.w	8002aae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80028c4:	78bb      	ldrb	r3, [r7, #2]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d12d      	bne.n	8002926 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80028ca:	8b3b      	ldrh	r3, [r7, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	333d      	adds	r3, #61	@ 0x3d
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	333d      	adds	r3, #61	@ 0x3d
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	332a      	adds	r3, #42	@ 0x2a
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800290e:	e0ce      	b.n	8002aae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	332a      	adds	r3, #42	@ 0x2a
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]
      break;
 8002924:	e0c3      	b.n	8002aae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	331a      	adds	r3, #26
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 80b8 	bne.w	8002aae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	333c      	adds	r3, #60	@ 0x3c
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	332a      	adds	r3, #42	@ 0x2a
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
      break;
 8002968:	e0a1      	b.n	8002aae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	332a      	adds	r3, #42	@ 0x2a
 800297a:	2202      	movs	r2, #2
 800297c:	701a      	strb	r2, [r3, #0]
      break;
 800297e:	e096      	b.n	8002aae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002980:	78bb      	ldrb	r3, [r7, #2]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d120      	bne.n	80029c8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	333d      	adds	r3, #61	@ 0x3d
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	332a      	adds	r3, #42	@ 0x2a
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80029b0:	e07e      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	332a      	adds	r3, #42	@ 0x2a
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
      break;
 80029c6:	e073      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	333c      	adds	r3, #60	@ 0x3c
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	332a      	adds	r3, #42	@ 0x2a
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
      break;
 80029f2:	e05d      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	332a      	adds	r3, #42	@ 0x2a
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
      break;
 8002a08:	e052      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a0a:	78bb      	ldrb	r3, [r7, #2]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d120      	bne.n	8002a52 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	333d      	adds	r3, #61	@ 0x3d
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	332a      	adds	r3, #42	@ 0x2a
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a3a:	e039      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	332a      	adds	r3, #42	@ 0x2a
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
      break;
 8002a50:	e02e      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	333c      	adds	r3, #60	@ 0x3c
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	332a      	adds	r3, #42	@ 0x2a
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
      break;
 8002a7c:	e018      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	332a      	adds	r3, #42	@ 0x2a
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
      break;
 8002a92:	e00d      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	332a      	adds	r3, #42	@ 0x2a
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
      break;
 8002aa8:	e002      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002aae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	332c      	adds	r3, #44	@ 0x2c
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	8b39      	ldrh	r1, [r7, #24]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4403      	add	r3, r0
 8002ad4:	3334      	adds	r3, #52	@ 0x34
 8002ad6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334c      	adds	r3, #76	@ 0x4c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3338      	adds	r3, #56	@ 0x38
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3315      	adds	r3, #21
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334d      	adds	r3, #77	@ 0x4d
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3310      	adds	r3, #16
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	1d19      	adds	r1, r3, #4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	799b      	ldrb	r3, [r3, #6]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f004 fe14 	bl	8007770 <USB_HC_StartXfer>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 fb02 	bl	8007174 <USB_GetMode>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f040 80fb 	bne.w	8002d6e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 fac5 	bl	800710c <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80f1 	beq.w	8002d6c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fabc 	bl	800710c <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b9e:	d104      	bne.n	8002baa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 faac 	bl	800710c <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bbe:	d104      	bne.n	8002bca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fa9c 	bl	800710c <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bde:	d104      	bne.n	8002bea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002be8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fa8c 	bl	800710c <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d103      	bne.n	8002c06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2202      	movs	r2, #2
 8002c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 fa7e 	bl	800710c <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c1a:	d120      	bne.n	8002c5e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002c24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d113      	bne.n	8002c5e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c36:	2110      	movs	r1, #16
 8002c38:	6938      	ldr	r0, [r7, #16]
 8002c3a:	f004 f971 	bl	8006f20 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c3e:	6938      	ldr	r0, [r7, #16]
 8002c40:	f004 f9a0 	bl	8006f84 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7a5b      	ldrb	r3, [r3, #9]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d105      	bne.n	8002c58 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fb98 	bl	8007388 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f007 fb65 	bl	800a328 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 fa52 	bl	800710c <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c72:	d102      	bne.n	8002c7a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f001 fd4d 	bl	8004714 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f004 fa44 	bl	800710c <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d106      	bne.n	8002c9c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f007 fb2e 	bl	800a2f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 fa33 	bl	800710c <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cb0:	d139      	bne.n	8002d26 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 ffd4 	bl	8007c64 <USB_HC_ReadInterrupt>
 8002cbc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e025      	b.n	8002d10 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d018      	beq.n	8002d0a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cee:	d106      	bne.n	8002cfe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f905 	bl	8002f06 <HCD_HC_IN_IRQHandler>
 8002cfc:	e005      	b.n	8002d0a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 ff67 	bl	8003bd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	795b      	ldrb	r3, [r3, #5]
 8002d14:	461a      	mov	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d3d3      	bcc.n	8002cc4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 f9ee 	bl	800710c <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d101      	bne.n	8002d3e <HAL_HCD_IRQHandler+0x1ea>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_HCD_IRQHandler+0x1ec>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d014      	beq.n	8002d6e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0210 	bic.w	r2, r2, #16
 8002d52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f001 fbfe 	bl	8004556 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0210 	orr.w	r2, r2, #16
 8002d68:	619a      	str	r2, [r3, #24]
 8002d6a:	e000      	b.n	8002d6e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d6c:	bf00      	nop
    }
  }
}
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_HCD_Start+0x16>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e013      	b.n	8002db2 <HAL_HCD_Start+0x3e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fb5c 	bl	8007456 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 f84e 	bl	8006e44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_HCD_Stop+0x16>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e00d      	b.n	8002dec <HAL_HCD_Stop+0x32>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f005 f8af 	bl	8007f40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 fafe 	bl	8007402 <USB_ResetPort>
 8002e06:	4603      	mov	r3, r0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	334c      	adds	r3, #76	@ 0x4c
 8002e2c:	781b      	ldrb	r3, [r3, #0]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3338      	adds	r3, #56	@ 0x38
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 fb40 	bl	80074f6 <USB_GetCurrentFrame>
 8002e76:	4603      	mov	r3, r0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fb1b 	bl	80074c8 <USB_GetHostSpeed>
 8002e92:	4603      	mov	r3, r0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	331a      	adds	r3, #26
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	331b      	adds	r3, #27
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3325      	adds	r3, #37	@ 0x25
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3324      	adds	r3, #36	@ 0x24
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 f904 	bl	8007132 <USB_ReadChInterrupts>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d11a      	bne.n	8002f6a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2304      	movs	r3, #4
 8002f44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	334d      	adds	r3, #77	@ 0x4d
 8002f56:	2207      	movs	r2, #7
 8002f58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f004 fe8f 	bl	8007c86 <USB_HC_Halt>
 8002f68:	e09e      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 f8dd 	bl	8007132 <USB_ReadChInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f82:	d11b      	bne.n	8002fbc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334d      	adds	r3, #77	@ 0x4d
 8002fa8:	2208      	movs	r2, #8
 8002faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 fe66 	bl	8007c86 <USB_HC_Halt>
 8002fba:	e075      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 f8b4 	bl	8007132 <USB_ReadChInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d11a      	bne.n	800300a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	334d      	adds	r3, #77	@ 0x4d
 8002ff6:	2206      	movs	r2, #6
 8002ff8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fe3f 	bl	8007c86 <USB_HC_Halt>
 8003008:	e04e      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f004 f88d 	bl	8007132 <USB_ReadChInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003022:	d11b      	bne.n	800305c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003036:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	334d      	adds	r3, #77	@ 0x4d
 8003048:	2209      	movs	r2, #9
 800304a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fe16 	bl	8007c86 <USB_HC_Halt>
 800305a:	e025      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f004 f864 	bl	8007132 <USB_ReadChInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003070:	2b80      	cmp	r3, #128	@ 0x80
 8003072:	d119      	bne.n	80030a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	461a      	mov	r2, r3
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334d      	adds	r3, #77	@ 0x4d
 8003096:	2207      	movs	r2, #7
 8003098:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 fdef 	bl	8007c86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 f83e 	bl	8007132 <USB_ReadChInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c0:	d112      	bne.n	80030e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fddb 	bl	8007c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030e2:	6093      	str	r3, [r2, #8]
 80030e4:	f000 bd75 	b.w	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f004 f81e 	bl	8007132 <USB_ReadChInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 8128 	bne.w	8003352 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	2320      	movs	r3, #32
 8003112:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	331b      	adds	r3, #27
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d119      	bne.n	800315e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	331b      	adds	r3, #27
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	440a      	add	r2, r1
 8003154:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	799b      	ldrb	r3, [r3, #6]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01b      	beq.n	800319e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3330      	adds	r3, #48	@ 0x30
 8003176:	6819      	ldr	r1, [r3, #0]
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	1ac9      	subs	r1, r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4403      	add	r3, r0
 800319a:	3338      	adds	r3, #56	@ 0x38
 800319c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	334d      	adds	r3, #77	@ 0x4d
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3344      	adds	r3, #68	@ 0x44
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d2:	461a      	mov	r2, r3
 80031d4:	2301      	movs	r3, #1
 80031d6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3326      	adds	r3, #38	@ 0x26
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3326      	adds	r3, #38	@ 0x26
 80031fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003200:	2b02      	cmp	r3, #2
 8003202:	d110      	bne.n	8003226 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f004 fd3a 	bl	8007c86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800321e:	461a      	mov	r2, r3
 8003220:	2310      	movs	r3, #16
 8003222:	6093      	str	r3, [r2, #8]
 8003224:	e03d      	b.n	80032a2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	3326      	adds	r3, #38	@ 0x26
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d00a      	beq.n	8003252 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3326      	adds	r3, #38	@ 0x26
 800324c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800324e:	2b01      	cmp	r3, #1
 8003250:	d127      	bne.n	80032a2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	0151      	lsls	r1, r2, #5
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	440a      	add	r2, r1
 8003268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800326c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003270:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	334c      	adds	r3, #76	@ 0x4c
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	334c      	adds	r3, #76	@ 0x4c
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f007 f851 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	799b      	ldrb	r3, [r3, #6]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d13b      	bne.n	8003322 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3338      	adds	r3, #56	@ 0x38
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4403      	add	r3, r0
 80032ca:	3328      	adds	r3, #40	@ 0x28
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	440b      	add	r3, r1
 80032d0:	1e59      	subs	r1, r3, #1
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4403      	add	r3, r0
 80032e0:	3328      	adds	r3, #40	@ 0x28
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8470 	beq.w	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	333c      	adds	r3, #60	@ 0x3c
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	f083 0301 	eor.w	r3, r3, #1
 800330a:	b2d8      	uxtb	r0, r3
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	333c      	adds	r3, #60	@ 0x3c
 800331a:	4602      	mov	r2, r0
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	f000 bc58 	b.w	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	333c      	adds	r3, #60	@ 0x3c
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	f083 0301 	eor.w	r3, r3, #1
 800333a:	b2d8      	uxtb	r0, r3
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	333c      	adds	r3, #60	@ 0x3c
 800334a:	4602      	mov	r2, r0
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	f000 bc40 	b.w	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fee9 	bl	8007132 <USB_ReadChInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b20      	cmp	r3, #32
 8003368:	d131      	bne.n	80033ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003376:	461a      	mov	r2, r3
 8003378:	2320      	movs	r3, #32
 800337a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	331a      	adds	r3, #26
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	f040 841f 	bne.w	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	331b      	adds	r3, #27
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	334d      	adds	r3, #77	@ 0x4d
 80033b8:	2203      	movs	r2, #3
 80033ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 fc5e 	bl	8007c86 <USB_HC_Halt>
 80033ca:	f000 bc02 	b.w	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 feab 	bl	8007132 <USB_ReadChInterrupts>
 80033dc:	4603      	mov	r3, r0
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	f040 8305 	bne.w	80039f2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	2302      	movs	r3, #2
 80033f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	334d      	adds	r3, #77	@ 0x4d
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d114      	bne.n	800343a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334d      	adds	r3, #77	@ 0x4d
 8003420:	2202      	movs	r2, #2
 8003422:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334c      	adds	r3, #76	@ 0x4c
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e2cc      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334d      	adds	r3, #77	@ 0x4d
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b06      	cmp	r3, #6
 800344e:	d114      	bne.n	800347a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	334d      	adds	r3, #77	@ 0x4d
 8003460:	2202      	movs	r2, #2
 8003462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334c      	adds	r3, #76	@ 0x4c
 8003474:	2205      	movs	r2, #5
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e2ac      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334d      	adds	r3, #77	@ 0x4d
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b07      	cmp	r3, #7
 800348e:	d00b      	beq.n	80034a8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334d      	adds	r3, #77	@ 0x4d
 80034a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034a2:	2b09      	cmp	r3, #9
 80034a4:	f040 80a6 	bne.w	80035f4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334d      	adds	r3, #77	@ 0x4d
 80034b8:	2202      	movs	r2, #2
 80034ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	3344      	adds	r3, #68	@ 0x44
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	3344      	adds	r3, #68	@ 0x44
 80034de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3344      	adds	r3, #68	@ 0x44
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d943      	bls.n	800357e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3344      	adds	r3, #68	@ 0x44
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	331a      	adds	r3, #26
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d123      	bne.n	8003568 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	331b      	adds	r3, #27
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	331c      	adds	r3, #28
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	440a      	add	r2, r1
 800355e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003566:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	334c      	adds	r3, #76	@ 0x4c
 8003578:	2204      	movs	r2, #4
 800357a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800357c:	e229      	b.n	80039d2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	334c      	adds	r3, #76	@ 0x4c
 800358e:	2202      	movs	r2, #2
 8003590:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3326      	adds	r3, #38	@ 0x26
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3326      	adds	r3, #38	@ 0x26
 80035b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	f040 8209 	bne.w	80039d2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035f2:	e1ee      	b.n	80039d2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334d      	adds	r3, #77	@ 0x4d
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b05      	cmp	r3, #5
 8003608:	f040 80c8 	bne.w	800379c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	334d      	adds	r3, #77	@ 0x4d
 800361c:	2202      	movs	r2, #2
 800361e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	331b      	adds	r3, #27
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	f040 81ce 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3326      	adds	r3, #38	@ 0x26
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d16b      	bne.n	8003726 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3348      	adds	r3, #72	@ 0x48
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1c59      	adds	r1, r3, #1
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4403      	add	r3, r0
 800366e:	3348      	adds	r3, #72	@ 0x48
 8003670:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3348      	adds	r3, #72	@ 0x48
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d943      	bls.n	8003710 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3348      	adds	r3, #72	@ 0x48
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	331b      	adds	r3, #27
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	3344      	adds	r3, #68	@ 0x44
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d809      	bhi.n	80036da <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	331c      	adds	r3, #28
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	0151      	lsls	r1, r2, #5
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	440a      	add	r2, r1
 80036f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	334c      	adds	r3, #76	@ 0x4c
 800370a:	2204      	movs	r2, #4
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e014      	b.n	800373a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	334c      	adds	r3, #76	@ 0x4c
 8003720:	2202      	movs	r2, #2
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e009      	b.n	800373a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	334c      	adds	r3, #76	@ 0x4c
 8003736:	2202      	movs	r2, #2
 8003738:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3326      	adds	r3, #38	@ 0x26
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00b      	beq.n	8003768 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3326      	adds	r3, #38	@ 0x26
 8003760:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003762:	2b02      	cmp	r3, #2
 8003764:	f040 8136 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800377e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003786:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e11b      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334d      	adds	r3, #77	@ 0x4d
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	f040 8081 	bne.w	80038b6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334d      	adds	r3, #77	@ 0x4d
 80037c4:	2202      	movs	r2, #2
 80037c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	331b      	adds	r3, #27
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f040 80fa 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334c      	adds	r3, #76	@ 0x4c
 80037f0:	2202      	movs	r2, #2
 80037f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800380e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003812:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	440a      	add	r2, r1
 800382a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800382e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003832:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	440a      	add	r2, r1
 800384a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800384e:	f023 0320 	bic.w	r3, r3, #32
 8003852:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3326      	adds	r3, #38	@ 0x26
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3326      	adds	r3, #38	@ 0x26
 800387a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800387c:	2b02      	cmp	r3, #2
 800387e:	f040 80a9 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003898:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038a0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e08e      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	334d      	adds	r3, #77	@ 0x4d
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d143      	bne.n	8003954 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334d      	adds	r3, #77	@ 0x4d
 80038dc:	2202      	movs	r2, #2
 80038de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	334c      	adds	r3, #76	@ 0x4c
 80038f0:	2202      	movs	r2, #2
 80038f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3326      	adds	r3, #38	@ 0x26
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3326      	adds	r3, #38	@ 0x26
 800391a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800391c:	2b02      	cmp	r3, #2
 800391e:	d159      	bne.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003936:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800393e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800394c:	461a      	mov	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e03f      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	334d      	adds	r3, #77	@ 0x4d
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b08      	cmp	r3, #8
 8003968:	d126      	bne.n	80039b8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	334d      	adds	r3, #77	@ 0x4d
 800397a:	2202      	movs	r2, #2
 800397c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3344      	adds	r3, #68	@ 0x44
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	1c59      	adds	r1, r3, #1
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4403      	add	r3, r0
 800399e:	3344      	adds	r3, #68	@ 0x44
 80039a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	334c      	adds	r3, #76	@ 0x4c
 80039b2:	2204      	movs	r2, #4
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e00d      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	334d      	adds	r3, #77	@ 0x4d
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	f000 8100 	beq.w	8003bd0 <HCD_HC_IN_IRQHandler+0xcca>
 80039d0:	e000      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039d2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	334c      	adds	r3, #76	@ 0x4c
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	78fb      	ldrb	r3, [r7, #3]
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f006 fcaa 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039f0:	e0ef      	b.n	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 fb99 	bl	8007132 <USB_ReadChInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d12f      	bne.n	8003a6a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a16:	461a      	mov	r2, r3
 8003a18:	2340      	movs	r3, #64	@ 0x40
 8003a1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	334d      	adds	r3, #77	@ 0x4d
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	331a      	adds	r3, #26
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3344      	adds	r3, #68	@ 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 f90f 	bl	8007c86 <USB_HC_Halt>
 8003a68:	e0b3      	b.n	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 fb5d 	bl	8007132 <USB_ReadChInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	f040 80a7 	bne.w	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3326      	adds	r3, #38	@ 0x26
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d11b      	bne.n	8003ad2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3344      	adds	r3, #68	@ 0x44
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	334d      	adds	r3, #77	@ 0x4d
 8003abe:	2204      	movs	r2, #4
 8003ac0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 f8db 	bl	8007c86 <USB_HC_Halt>
 8003ad0:	e03f      	b.n	8003b52 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3326      	adds	r3, #38	@ 0x26
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3326      	adds	r3, #38	@ 0x26
 8003af8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d129      	bne.n	8003b52 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3344      	adds	r3, #68	@ 0x44
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	799b      	ldrb	r3, [r3, #6]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HCD_HC_IN_IRQHandler+0xc2a>
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	331b      	adds	r3, #27
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d110      	bne.n	8003b52 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	334d      	adds	r3, #77	@ 0x4d
 8003b40:	2204      	movs	r2, #4
 8003b42:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 f89a 	bl	8007c86 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	331b      	adds	r3, #27
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d129      	bne.n	8003bbc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	331b      	adds	r3, #27
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bb6:	f043 0320 	orr.w	r3, r3, #32
 8003bba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2310      	movs	r3, #16
 8003bcc:	6093      	str	r3, [r2, #8]
 8003bce:	e000      	b.n	8003bd2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003bd0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 fa9b 	bl	8007132 <USB_ReadChInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d11b      	bne.n	8003c3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c12:	461a      	mov	r2, r3
 8003c14:	2304      	movs	r3, #4
 8003c16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	334d      	adds	r3, #77	@ 0x4d
 8003c28:	2207      	movs	r2, #7
 8003c2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 f826 	bl	8007c86 <USB_HC_Halt>
 8003c3a:	f000 bc89 	b.w	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 fa73 	bl	8007132 <USB_ReadChInterrupts>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	f040 8082 	bne.w	8003d5c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c64:	461a      	mov	r2, r3
 8003c66:	2320      	movs	r3, #32
 8003c68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3319      	adds	r3, #25
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d124      	bne.n	8003cca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3319      	adds	r3, #25
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	334c      	adds	r3, #76	@ 0x4c
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334d      	adds	r3, #77	@ 0x4d
 8003cb8:	2203      	movs	r2, #3
 8003cba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f003 ffde 	bl	8007c86 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	331a      	adds	r3, #26
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f040 8437 	bne.w	8004550 <HCD_HC_OUT_IRQHandler+0x978>
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	331b      	adds	r3, #27
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f040 842b 	bne.w	8004550 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3326      	adds	r3, #38	@ 0x26
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d009      	beq.n	8003d24 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	331b      	adds	r3, #27
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	334d      	adds	r3, #77	@ 0x4d
 8003d34:	2203      	movs	r2, #3
 8003d36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f003 ffa0 	bl	8007c86 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3344      	adds	r3, #68	@ 0x44
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e3f9      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f003 f9e4 	bl	8007132 <USB_ReadChInterrupts>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d74:	d111      	bne.n	8003d9a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d82:	461a      	mov	r2, r3
 8003d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 ff77 	bl	8007c86 <USB_HC_Halt>
 8003d98:	e3da      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 f9c5 	bl	8007132 <USB_ReadChInterrupts>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d168      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3344      	adds	r3, #68	@ 0x44
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 f9af 	bl	8007132 <USB_ReadChInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dda:	2b40      	cmp	r3, #64	@ 0x40
 8003ddc:	d112      	bne.n	8003e04 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3319      	adds	r3, #25
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2340      	movs	r3, #64	@ 0x40
 8003e02:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	331b      	adds	r3, #27
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d019      	beq.n	8003e4e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	331b      	adds	r3, #27
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	334d      	adds	r3, #77	@ 0x4d
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f003 ff02 	bl	8007c86 <USB_HC_Halt>
 8003e82:	e365      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 f950 	bl	8007132 <USB_ReadChInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e98:	2b40      	cmp	r3, #64	@ 0x40
 8003e9a:	d139      	bne.n	8003f10 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	334d      	adds	r3, #77	@ 0x4d
 8003eac:	2205      	movs	r2, #5
 8003eae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	331a      	adds	r3, #26
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3319      	adds	r3, #25
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3344      	adds	r3, #68	@ 0x44
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f003 fec5 	bl	8007c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2340      	movs	r3, #64	@ 0x40
 8003f0c:	6093      	str	r3, [r2, #8]
 8003f0e:	e31f      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 f90a 	bl	8007132 <USB_ReadChInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d11a      	bne.n	8003f5e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	2308      	movs	r3, #8
 8003f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	334d      	adds	r3, #77	@ 0x4d
 8003f4a:	2206      	movs	r2, #6
 8003f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 fe95 	bl	8007c86 <USB_HC_Halt>
 8003f5c:	e2f8      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f003 f8e3 	bl	8007132 <USB_ReadChInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d144      	bne.n	8004000 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3344      	adds	r3, #68	@ 0x44
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	334d      	adds	r3, #77	@ 0x4d
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3319      	adds	r3, #25
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d114      	bne.n	8003fde <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3319      	adds	r3, #25
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f003 fe4d 	bl	8007c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	6093      	str	r3, [r2, #8]
 8003ffe:	e2a7      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f003 f892 	bl	8007132 <USB_ReadChInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004014:	2b80      	cmp	r3, #128	@ 0x80
 8004016:	f040 8083 	bne.w	8004120 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	799b      	ldrb	r3, [r3, #6]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d111      	bne.n	8004046 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	334d      	adds	r3, #77	@ 0x4d
 8004032:	2207      	movs	r2, #7
 8004034:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f003 fe21 	bl	8007c86 <USB_HC_Halt>
 8004044:	e062      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3344      	adds	r3, #68	@ 0x44
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4403      	add	r3, r0
 8004066:	3344      	adds	r3, #68	@ 0x44
 8004068:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3344      	adds	r3, #68	@ 0x44
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d922      	bls.n	80040c6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3344      	adds	r3, #68	@ 0x44
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	334c      	adds	r3, #76	@ 0x4c
 80040a4:	2204      	movs	r2, #4
 80040a6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	334c      	adds	r3, #76	@ 0x4c
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f006 f940 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040c4:	e022      	b.n	800410c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334c      	adds	r3, #76	@ 0x4c
 80040d6:	2202      	movs	r2, #2
 80040d8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040f0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040f8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004118:	461a      	mov	r2, r3
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	6093      	str	r3, [r2, #8]
 800411e:	e217      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f003 f802 	bl	8007132 <USB_ReadChInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004138:	d11b      	bne.n	8004172 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	334d      	adds	r3, #77	@ 0x4d
 800414a:	2209      	movs	r2, #9
 800414c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fd95 	bl	8007c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004168:	461a      	mov	r2, r3
 800416a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800416e:	6093      	str	r3, [r2, #8]
 8004170:	e1ee      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f002 ffd9 	bl	8007132 <USB_ReadChInterrupts>
 8004180:	4603      	mov	r3, r0
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b02      	cmp	r3, #2
 8004188:	f040 81df 	bne.w	800454a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	2302      	movs	r3, #2
 800419c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	334d      	adds	r3, #77	@ 0x4d
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	f040 8093 	bne.w	80042dc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041b6:	78fa      	ldrb	r2, [r7, #3]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	334d      	adds	r3, #77	@ 0x4d
 80041c6:	2202      	movs	r2, #2
 80041c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	334c      	adds	r3, #76	@ 0x4c
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	3326      	adds	r3, #38	@ 0x26
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d00b      	beq.n	800420c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	3326      	adds	r3, #38	@ 0x26
 8004204:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004206:	2b03      	cmp	r3, #3
 8004208:	f040 8190 	bne.w	800452c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	799b      	ldrb	r3, [r3, #6]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d115      	bne.n	8004240 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	333d      	adds	r3, #61	@ 0x3d
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	f083 0301 	eor.w	r3, r3, #1
 800422c:	b2d8      	uxtb	r0, r3
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	333d      	adds	r3, #61	@ 0x3d
 800423c:	4602      	mov	r2, r0
 800423e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	799b      	ldrb	r3, [r3, #6]
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 8171 	bne.w	800452c <HCD_HC_OUT_IRQHandler+0x954>
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	3334      	adds	r3, #52	@ 0x34
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8165 	beq.w	800452c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3334      	adds	r3, #52	@ 0x34
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4403      	add	r3, r0
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	440b      	add	r3, r1
 8004288:	1e59      	subs	r1, r3, #1
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4403      	add	r3, r0
 8004298:	3328      	adds	r3, #40	@ 0x28
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 813f 	beq.w	800452c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	333d      	adds	r3, #61	@ 0x3d
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2d8      	uxtb	r0, r3
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	333d      	adds	r3, #61	@ 0x3d
 80042d6:	4602      	mov	r2, r0
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e127      	b.n	800452c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	334d      	adds	r3, #77	@ 0x4d
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d120      	bne.n	8004334 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	334d      	adds	r3, #77	@ 0x4d
 8004302:	2202      	movs	r2, #2
 8004304:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	331b      	adds	r3, #27
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	f040 8107 	bne.w	800452c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	334c      	adds	r3, #76	@ 0x4c
 800432e:	2202      	movs	r2, #2
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e0fb      	b.n	800452c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	334d      	adds	r3, #77	@ 0x4d
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d13a      	bne.n	80043c0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	334d      	adds	r3, #77	@ 0x4d
 800435a:	2202      	movs	r2, #2
 800435c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	334c      	adds	r3, #76	@ 0x4c
 800436e:	2202      	movs	r2, #2
 8004370:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	331b      	adds	r3, #27
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	f040 80d1 	bne.w	800452c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	331b      	adds	r3, #27
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043bc:	6053      	str	r3, [r2, #4]
 80043be:	e0b5      	b.n	800452c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	334d      	adds	r3, #77	@ 0x4d
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d114      	bne.n	8004400 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	334d      	adds	r3, #77	@ 0x4d
 80043e6:	2202      	movs	r2, #2
 80043e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	334c      	adds	r3, #76	@ 0x4c
 80043fa:	2202      	movs	r2, #2
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e095      	b.n	800452c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	334d      	adds	r3, #77	@ 0x4d
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d114      	bne.n	8004440 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004416:	78fa      	ldrb	r2, [r7, #3]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	334d      	adds	r3, #77	@ 0x4d
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	334c      	adds	r3, #76	@ 0x4c
 800443a:	2205      	movs	r2, #5
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e075      	b.n	800452c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	334d      	adds	r3, #77	@ 0x4d
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b07      	cmp	r3, #7
 8004454:	d00a      	beq.n	800446c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	334d      	adds	r3, #77	@ 0x4d
 8004466:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004468:	2b09      	cmp	r3, #9
 800446a:	d170      	bne.n	800454e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	334d      	adds	r3, #77	@ 0x4d
 800447c:	2202      	movs	r2, #2
 800447e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	3344      	adds	r3, #68	@ 0x44
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4403      	add	r3, r0
 80044a0:	3344      	adds	r3, #68	@ 0x44
 80044a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	3344      	adds	r3, #68	@ 0x44
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d914      	bls.n	80044e4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3344      	adds	r3, #68	@ 0x44
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	334c      	adds	r3, #76	@ 0x4c
 80044de:	2204      	movs	r2, #4
 80044e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044e2:	e022      	b.n	800452a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	334c      	adds	r3, #76	@ 0x4c
 80044f4:	2202      	movs	r2, #2
 80044f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800450e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004516:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004524:	461a      	mov	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800452a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	334c      	adds	r3, #76	@ 0x4c
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f005 fefe 	bl	800a344 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004548:	e002      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800454e:	bf00      	nop
  }
}
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b08a      	sub	sp, #40	@ 0x28
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	0c5b      	lsrs	r3, r3, #17
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800458a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d004      	beq.n	800459c <HCD_RXQLVL_IRQHandler+0x46>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b05      	cmp	r3, #5
 8004596:	f000 80b6 	beq.w	8004706 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800459a:	e0b7      	b.n	800470c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80b3 	beq.w	800470a <HCD_RXQLVL_IRQHandler+0x1b4>
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	332c      	adds	r3, #44	@ 0x2c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80a7 	beq.w	800470a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	3338      	adds	r3, #56	@ 0x38
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	18d1      	adds	r1, r2, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4403      	add	r3, r0
 80045e0:	3334      	adds	r3, #52	@ 0x34
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4299      	cmp	r1, r3
 80045e6:	f200 8083 	bhi.w	80046f0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	332c      	adds	r3, #44	@ 0x2c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	b292      	uxth	r2, r2
 8004604:	4619      	mov	r1, r3
 8004606:	f002 fd29 	bl	800705c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	332c      	adds	r3, #44	@ 0x2c
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	18d1      	adds	r1, r2, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4403      	add	r3, r0
 800462e:	332c      	adds	r3, #44	@ 0x2c
 8004630:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	3338      	adds	r3, #56	@ 0x38
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	18d1      	adds	r1, r2, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	3338      	adds	r3, #56	@ 0x38
 8004658:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	4413      	add	r3, r2
 8004662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	0cdb      	lsrs	r3, r3, #19
 800466a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	3328      	adds	r3, #40	@ 0x28
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4293      	cmp	r3, r2
 8004688:	d13f      	bne.n	800470a <HCD_RXQLVL_IRQHandler+0x1b4>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03c      	beq.n	800470a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	333c      	adds	r3, #60	@ 0x3c
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	f083 0301 	eor.w	r3, r3, #1
 80046d8:	b2d8      	uxtb	r0, r3
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	333c      	adds	r3, #60	@ 0x3c
 80046ea:	4602      	mov	r2, r0
 80046ec:	701a      	strb	r2, [r3, #0]
      break;
 80046ee:	e00c      	b.n	800470a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	334c      	adds	r3, #76	@ 0x4c
 8004700:	2204      	movs	r2, #4
 8004702:	701a      	strb	r2, [r3, #0]
      break;
 8004704:	e001      	b.n	800470a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800470a:	bf00      	nop
  }
}
 800470c:	bf00      	nop
 800470e:	3728      	adds	r7, #40	@ 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004740:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d10b      	bne.n	8004764 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d102      	bne.n	800475c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f005 fdd8 	bl	800a30c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f043 0302 	orr.w	r3, r3, #2
 8004762:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b08      	cmp	r3, #8
 800476c:	d132      	bne.n	80047d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f043 0308 	orr.w	r3, r3, #8
 8004774:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b04      	cmp	r3, #4
 800477e:	d126      	bne.n	80047ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7a5b      	ldrb	r3, [r3, #9]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d113      	bne.n	80047b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800478e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004792:	d106      	bne.n	80047a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f002 fdf4 	bl	8007388 <USB_InitFSLSPClkSel>
 80047a0:	e011      	b.n	80047c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f002 fded 	bl	8007388 <USB_InitFSLSPClkSel>
 80047ae:	e00a      	b.n	80047c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	79db      	ldrb	r3, [r3, #7]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d106      	bne.n	80047c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047be:	461a      	mov	r2, r3
 80047c0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80047c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f005 fdca 	bl	800a360 <HAL_HCD_PortEnabled_Callback>
 80047cc:	e002      	b.n	80047d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f005 fdd4 	bl	800a37c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d103      	bne.n	80047e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f043 0320 	orr.w	r3, r3, #32
 80047e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047ec:	461a      	mov	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6013      	str	r3, [r2, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e12b      	b.n	8004a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fbea 	bl	8000ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	@ 0x24
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800484e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800485e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004860:	f001 fa20 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8004864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4a81      	ldr	r2, [pc, #516]	@ (8004a70 <HAL_I2C_Init+0x274>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d807      	bhi.n	8004880 <HAL_I2C_Init+0x84>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a80      	ldr	r2, [pc, #512]	@ (8004a74 <HAL_I2C_Init+0x278>)
 8004874:	4293      	cmp	r3, r2
 8004876:	bf94      	ite	ls
 8004878:	2301      	movls	r3, #1
 800487a:	2300      	movhi	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e006      	b.n	800488e <HAL_I2C_Init+0x92>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a7d      	ldr	r2, [pc, #500]	@ (8004a78 <HAL_I2C_Init+0x27c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	bf94      	ite	ls
 8004888:	2301      	movls	r3, #1
 800488a:	2300      	movhi	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e0e7      	b.n	8004a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a78      	ldr	r2, [pc, #480]	@ (8004a7c <HAL_I2C_Init+0x280>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0c9b      	lsrs	r3, r3, #18
 80048a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004a70 <HAL_I2C_Init+0x274>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d802      	bhi.n	80048d0 <HAL_I2C_Init+0xd4>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3301      	adds	r3, #1
 80048ce:	e009      	b.n	80048e4 <HAL_I2C_Init+0xe8>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	4a69      	ldr	r2, [pc, #420]	@ (8004a80 <HAL_I2C_Init+0x284>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	3301      	adds	r3, #1
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	495c      	ldr	r1, [pc, #368]	@ (8004a70 <HAL_I2C_Init+0x274>)
 8004900:	428b      	cmp	r3, r1
 8004902:	d819      	bhi.n	8004938 <HAL_I2C_Init+0x13c>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e59      	subs	r1, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004912:	1c59      	adds	r1, r3, #1
 8004914:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004918:	400b      	ands	r3, r1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_I2C_Init+0x138>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1e59      	subs	r1, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fbb1 f3f3 	udiv	r3, r1, r3
 800492c:	3301      	adds	r3, #1
 800492e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004932:	e051      	b.n	80049d8 <HAL_I2C_Init+0x1dc>
 8004934:	2304      	movs	r3, #4
 8004936:	e04f      	b.n	80049d8 <HAL_I2C_Init+0x1dc>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d111      	bne.n	8004964 <HAL_I2C_Init+0x168>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1e58      	subs	r0, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	440b      	add	r3, r1
 800494e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004952:	3301      	adds	r3, #1
 8004954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e012      	b.n	800498a <HAL_I2C_Init+0x18e>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1e58      	subs	r0, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	0099      	lsls	r1, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	fbb0 f3f3 	udiv	r3, r0, r3
 800497a:	3301      	adds	r3, #1
 800497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_I2C_Init+0x196>
 800498e:	2301      	movs	r3, #1
 8004990:	e022      	b.n	80049d8 <HAL_I2C_Init+0x1dc>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10e      	bne.n	80049b8 <HAL_I2C_Init+0x1bc>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1e58      	subs	r0, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	440b      	add	r3, r1
 80049a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ac:	3301      	adds	r3, #1
 80049ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b6:	e00f      	b.n	80049d8 <HAL_I2C_Init+0x1dc>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1e58      	subs	r0, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	0099      	lsls	r1, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ce:	3301      	adds	r3, #1
 80049d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	6809      	ldr	r1, [r1, #0]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6911      	ldr	r1, [r2, #16]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	4311      	orrs	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	000186a0 	.word	0x000186a0
 8004a74:	001e847f 	.word	0x001e847f
 8004a78:	003d08ff 	.word	0x003d08ff
 8004a7c:	431bde83 	.word	0x431bde83
 8004a80:	10624dd3 	.word	0x10624dd3

08004a84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e128      	b.n	8004ce8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a90      	ldr	r2, [pc, #576]	@ (8004cf0 <HAL_I2S_Init+0x26c>)
 8004aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fc faeb 	bl	800108c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004acc:	f023 030f 	bic.w	r3, r3, #15
 8004ad0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d060      	beq.n	8004ba4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004aea:	2310      	movs	r3, #16
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e001      	b.n	8004af4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004af0:	2320      	movs	r3, #32
 8004af2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d802      	bhi.n	8004b02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b02:	2001      	movs	r0, #1
 8004b04:	f001 f9c4 	bl	8005e90 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b08:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b12:	d125      	bne.n	8004b60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	3305      	adds	r3, #5
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	e01f      	b.n	8004b7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	3305      	adds	r3, #5
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e00e      	b.n	8004b7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	461a      	mov	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	3305      	adds	r3, #5
 8004b7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4a5c      	ldr	r2, [pc, #368]	@ (8004cf4 <HAL_I2S_Init+0x270>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e003      	b.n	8004bac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d902      	bls.n	8004bb8 <HAL_I2S_Init+0x134>
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	2bff      	cmp	r3, #255	@ 0xff
 8004bb6:	d907      	bls.n	8004bc8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbc:	f043 0210 	orr.w	r2, r3, #16
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e08f      	b.n	8004ce8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	ea42 0103 	orr.w	r1, r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004be6:	f023 030f 	bic.w	r3, r3, #15
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6851      	ldr	r1, [r2, #4]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6892      	ldr	r2, [r2, #8]
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68d2      	ldr	r2, [r2, #12]
 8004bf8:	4311      	orrs	r1, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6992      	ldr	r2, [r2, #24]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d161      	bne.n	8004cd8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a38      	ldr	r2, [pc, #224]	@ (8004cf8 <HAL_I2S_Init+0x274>)
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a37      	ldr	r2, [pc, #220]	@ (8004cfc <HAL_I2S_Init+0x278>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_I2S_Init+0x1a4>
 8004c24:	4b36      	ldr	r3, [pc, #216]	@ (8004d00 <HAL_I2S_Init+0x27c>)
 8004c26:	e001      	b.n	8004c2c <HAL_I2S_Init+0x1a8>
 8004c28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	4932      	ldr	r1, [pc, #200]	@ (8004cfc <HAL_I2S_Init+0x278>)
 8004c34:	428a      	cmp	r2, r1
 8004c36:	d101      	bne.n	8004c3c <HAL_I2S_Init+0x1b8>
 8004c38:	4a31      	ldr	r2, [pc, #196]	@ (8004d00 <HAL_I2S_Init+0x27c>)
 8004c3a:	e001      	b.n	8004c40 <HAL_I2S_Init+0x1bc>
 8004c3c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c40:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c44:	f023 030f 	bic.w	r3, r3, #15
 8004c48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004cfc <HAL_I2S_Init+0x278>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_I2S_Init+0x1d4>
 8004c54:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <HAL_I2S_Init+0x27c>)
 8004c56:	e001      	b.n	8004c5c <HAL_I2S_Init+0x1d8>
 8004c58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a25      	ldr	r2, [pc, #148]	@ (8004cfc <HAL_I2S_Init+0x278>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_I2S_Init+0x1ea>
 8004c6a:	4b25      	ldr	r3, [pc, #148]	@ (8004d00 <HAL_I2S_Init+0x27c>)
 8004c6c:	e001      	b.n	8004c72 <HAL_I2S_Init+0x1ee>
 8004c6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c7e:	d003      	beq.n	8004c88 <HAL_I2S_Init+0x204>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d103      	bne.n	8004c90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	e001      	b.n	8004c94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004cc0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8004cfc <HAL_I2S_Init+0x278>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_I2S_Init+0x24c>
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <HAL_I2S_Init+0x27c>)
 8004cce:	e001      	b.n	8004cd4 <HAL_I2S_Init+0x250>
 8004cd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cd4:	897a      	ldrh	r2, [r7, #10]
 8004cd6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	08004dfb 	.word	0x08004dfb
 8004cf4:	cccccccd 	.word	0xcccccccd
 8004cf8:	08004f11 	.word	0x08004f11
 8004cfc:	40003800 	.word	0x40003800
 8004d00:	40003400 	.word	0x40003400

08004d04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10e      	bne.n	8004d94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ffb8 	bl	8004d04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	b292      	uxth	r2, r2
 8004db0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10e      	bne.n	8004df2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004de2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff ff93 	bl	8004d18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d13a      	bne.n	8004e8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d109      	bne.n	8004e34 <I2S_IRQHandler+0x3a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2a:	2b40      	cmp	r3, #64	@ 0x40
 8004e2c:	d102      	bne.n	8004e34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ffb4 	bl	8004d9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3a:	2b40      	cmp	r3, #64	@ 0x40
 8004e3c:	d126      	bne.n	8004e8c <I2S_IRQHandler+0x92>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d11f      	bne.n	8004e8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	f043 0202 	orr.w	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff ff50 	bl	8004d2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d136      	bne.n	8004f06 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d109      	bne.n	8004eb6 <I2S_IRQHandler+0xbc>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eac:	2b80      	cmp	r3, #128	@ 0x80
 8004eae:	d102      	bne.n	8004eb6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ff45 	bl	8004d40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d122      	bne.n	8004f06 <I2S_IRQHandler+0x10c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d11b      	bne.n	8004f06 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004edc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef8:	f043 0204 	orr.w	r2, r3, #4
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff13 	bl	8004d2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f06:	bf00      	nop
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a92      	ldr	r2, [pc, #584]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f2a:	4b92      	ldr	r3, [pc, #584]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f2c:	e001      	b.n	8004f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a8b      	ldr	r2, [pc, #556]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d101      	bne.n	8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f48:	4b8a      	ldr	r3, [pc, #552]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f4a:	e001      	b.n	8004f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f5c:	d004      	beq.n	8004f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f040 8099 	bne.w	800509a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d107      	bne.n	8004f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f925 	bl	80051cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d107      	bne.n	8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f9c8 	bl	800532c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa2:	2b40      	cmp	r3, #64	@ 0x40
 8004fa4:	d13a      	bne.n	800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d035      	beq.n	800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004fba:	4b6e      	ldr	r3, [pc, #440]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fbc:	e001      	b.n	8004fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004fbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4969      	ldr	r1, [pc, #420]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fca:	428b      	cmp	r3, r1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004fce:	4b69      	ldr	r3, [pc, #420]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fd0:	e001      	b.n	8004fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fe88 	bl	8004d2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b08      	cmp	r3, #8
 8005024:	f040 80c3 	bne.w	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80bd 	beq.w	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005042:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a49      	ldr	r2, [pc, #292]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800504e:	4b49      	ldr	r3, [pc, #292]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005050:	e001      	b.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005052:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4944      	ldr	r1, [pc, #272]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800505e:	428b      	cmp	r3, r1
 8005060:	d101      	bne.n	8005066 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005062:	4b44      	ldr	r3, [pc, #272]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005064:	e001      	b.n	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005066:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800506a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800506e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	f043 0204 	orr.w	r2, r3, #4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fe4a 	bl	8004d2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005098:	e089      	b.n	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d107      	bne.n	80050b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8be 	bl	8005230 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d107      	bne.n	80050ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f8fd 	bl	80052c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	d12f      	bne.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02a      	beq.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050fe:	e001      	b.n	8005104 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005100:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4919      	ldr	r1, [pc, #100]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800510c:	428b      	cmp	r3, r1
 800510e:	d101      	bne.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005110:	4b18      	ldr	r3, [pc, #96]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005112:	e001      	b.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005114:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005118:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800511c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	f043 0202 	orr.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fdfa 	bl	8004d2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b08      	cmp	r3, #8
 8005140:	d136      	bne.n	80051b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d031      	beq.n	80051b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a07      	ldr	r2, [pc, #28]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d101      	bne.n	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005156:	4b07      	ldr	r3, [pc, #28]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005158:	e001      	b.n	800515e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800515a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4902      	ldr	r1, [pc, #8]	@ (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005166:	428b      	cmp	r3, r1
 8005168:	d106      	bne.n	8005178 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800516a:	4b02      	ldr	r3, [pc, #8]	@ (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800516c:	e006      	b.n	800517c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800516e:	bf00      	nop
 8005170:	40003800 	.word	0x40003800
 8005174:	40003400 	.word	0x40003400
 8005178:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800517c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005180:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005190:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519e:	f043 0204 	orr.w	r2, r3, #4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fdc0 	bl	8004d2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051ac:	e000      	b.n	80051b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051ae:	bf00      	nop
}
 80051b0:	bf00      	nop
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	1c99      	adds	r1, r3, #2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6251      	str	r1, [r2, #36]	@ 0x24
 80051de:	881a      	ldrh	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d113      	bne.n	8005226 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800520c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ffc9 	bl	80051b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	1c99      	adds	r1, r3, #2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6251      	str	r1, [r2, #36]	@ 0x24
 8005242:	8819      	ldrh	r1, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1d      	ldr	r2, [pc, #116]	@ (80052c0 <I2SEx_TxISR_I2SExt+0x90>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <I2SEx_TxISR_I2SExt+0x22>
 800524e:	4b1d      	ldr	r3, [pc, #116]	@ (80052c4 <I2SEx_TxISR_I2SExt+0x94>)
 8005250:	e001      	b.n	8005256 <I2SEx_TxISR_I2SExt+0x26>
 8005252:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005256:	460a      	mov	r2, r1
 8005258:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d121      	bne.n	80052b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a12      	ldr	r2, [pc, #72]	@ (80052c0 <I2SEx_TxISR_I2SExt+0x90>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <I2SEx_TxISR_I2SExt+0x50>
 800527c:	4b11      	ldr	r3, [pc, #68]	@ (80052c4 <I2SEx_TxISR_I2SExt+0x94>)
 800527e:	e001      	b.n	8005284 <I2SEx_TxISR_I2SExt+0x54>
 8005280:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	490d      	ldr	r1, [pc, #52]	@ (80052c0 <I2SEx_TxISR_I2SExt+0x90>)
 800528c:	428b      	cmp	r3, r1
 800528e:	d101      	bne.n	8005294 <I2SEx_TxISR_I2SExt+0x64>
 8005290:	4b0c      	ldr	r3, [pc, #48]	@ (80052c4 <I2SEx_TxISR_I2SExt+0x94>)
 8005292:	e001      	b.n	8005298 <I2SEx_TxISR_I2SExt+0x68>
 8005294:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005298:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800529c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff81 	bl	80051b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40003800 	.word	0x40003800
 80052c4:	40003400 	.word	0x40003400

080052c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68d8      	ldr	r0, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	1c99      	adds	r1, r3, #2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80052e0:	b282      	uxth	r2, r0
 80052e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d113      	bne.n	8005324 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800530a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ff4a 	bl	80051b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a20      	ldr	r2, [pc, #128]	@ (80053bc <I2SEx_RxISR_I2SExt+0x90>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <I2SEx_RxISR_I2SExt+0x16>
 800533e:	4b20      	ldr	r3, [pc, #128]	@ (80053c0 <I2SEx_RxISR_I2SExt+0x94>)
 8005340:	e001      	b.n	8005346 <I2SEx_RxISR_I2SExt+0x1a>
 8005342:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005346:	68d8      	ldr	r0, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	1c99      	adds	r1, r3, #2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005352:	b282      	uxth	r2, r0
 8005354:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d121      	bne.n	80053b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a12      	ldr	r2, [pc, #72]	@ (80053bc <I2SEx_RxISR_I2SExt+0x90>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d101      	bne.n	800537c <I2SEx_RxISR_I2SExt+0x50>
 8005378:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <I2SEx_RxISR_I2SExt+0x94>)
 800537a:	e001      	b.n	8005380 <I2SEx_RxISR_I2SExt+0x54>
 800537c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	490d      	ldr	r1, [pc, #52]	@ (80053bc <I2SEx_RxISR_I2SExt+0x90>)
 8005388:	428b      	cmp	r3, r1
 800538a:	d101      	bne.n	8005390 <I2SEx_RxISR_I2SExt+0x64>
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <I2SEx_RxISR_I2SExt+0x94>)
 800538e:	e001      	b.n	8005394 <I2SEx_RxISR_I2SExt+0x68>
 8005390:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005394:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005398:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ff03 	bl	80051b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40003800 	.word	0x40003800
 80053c0:	40003400 	.word	0x40003400

080053c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e267      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d075      	beq.n	80054ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053e2:	4b88      	ldr	r3, [pc, #544]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d00c      	beq.n	8005408 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ee:	4b85      	ldr	r3, [pc, #532]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d112      	bne.n	8005420 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053fa:	4b82      	ldr	r3, [pc, #520]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005406:	d10b      	bne.n	8005420 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	4b7e      	ldr	r3, [pc, #504]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d05b      	beq.n	80054cc <HAL_RCC_OscConfig+0x108>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d157      	bne.n	80054cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e242      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005428:	d106      	bne.n	8005438 <HAL_RCC_OscConfig+0x74>
 800542a:	4b76      	ldr	r3, [pc, #472]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a75      	ldr	r2, [pc, #468]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e01d      	b.n	8005474 <HAL_RCC_OscConfig+0xb0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005440:	d10c      	bne.n	800545c <HAL_RCC_OscConfig+0x98>
 8005442:	4b70      	ldr	r3, [pc, #448]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a6f      	ldr	r2, [pc, #444]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4b6d      	ldr	r3, [pc, #436]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a6c      	ldr	r2, [pc, #432]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e00b      	b.n	8005474 <HAL_RCC_OscConfig+0xb0>
 800545c:	4b69      	ldr	r3, [pc, #420]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a68      	ldr	r2, [pc, #416]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	4b66      	ldr	r3, [pc, #408]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a65      	ldr	r2, [pc, #404]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 800546e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fc f846 	bl	800150c <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005484:	f7fc f842 	bl	800150c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	@ 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e207      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005496:	4b5b      	ldr	r3, [pc, #364]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0xc0>
 80054a2:	e014      	b.n	80054ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fc f832 	bl	800150c <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ac:	f7fc f82e 	bl	800150c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	@ 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e1f3      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054be:	4b51      	ldr	r3, [pc, #324]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0xe8>
 80054ca:	e000      	b.n	80054ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d063      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054da:	4b4a      	ldr	r3, [pc, #296]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054e6:	4b47      	ldr	r3, [pc, #284]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d11c      	bne.n	800552c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f2:	4b44      	ldr	r3, [pc, #272]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d116      	bne.n	800552c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fe:	4b41      	ldr	r3, [pc, #260]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_RCC_OscConfig+0x152>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d001      	beq.n	8005516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e1c7      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	4b3b      	ldr	r3, [pc, #236]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4937      	ldr	r1, [pc, #220]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005526:	4313      	orrs	r3, r2
 8005528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	e03a      	b.n	80055a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005534:	4b34      	ldr	r3, [pc, #208]	@ (8005608 <HAL_RCC_OscConfig+0x244>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fb ffe7 	bl	800150c <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005542:	f7fb ffe3 	bl	800150c <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e1a8      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005554:	4b2b      	ldr	r3, [pc, #172]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005560:	4b28      	ldr	r3, [pc, #160]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4925      	ldr	r1, [pc, #148]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005570:	4313      	orrs	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005576:	4b24      	ldr	r3, [pc, #144]	@ (8005608 <HAL_RCC_OscConfig+0x244>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fb ffc6 	bl	800150c <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005584:	f7fb ffc2 	bl	800150c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e187      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005596:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d036      	beq.n	800561c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b6:	4b15      	ldr	r3, [pc, #84]	@ (800560c <HAL_RCC_OscConfig+0x248>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fb ffa6 	bl	800150c <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fb ffa2 	bl	800150c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e167      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <HAL_RCC_OscConfig+0x240>)
 80055d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x200>
 80055e2:	e01b      	b.n	800561c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e4:	4b09      	ldr	r3, [pc, #36]	@ (800560c <HAL_RCC_OscConfig+0x248>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ea:	f7fb ff8f 	bl	800150c <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	e00e      	b.n	8005610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f2:	f7fb ff8b 	bl	800150c <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d907      	bls.n	8005610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e150      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
 8005604:	40023800 	.word	0x40023800
 8005608:	42470000 	.word	0x42470000
 800560c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005610:	4b88      	ldr	r3, [pc, #544]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1ea      	bne.n	80055f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8097 	beq.w	8005758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562e:	4b81      	ldr	r3, [pc, #516]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10f      	bne.n	800565a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	4b7d      	ldr	r3, [pc, #500]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	4a7c      	ldr	r2, [pc, #496]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005648:	6413      	str	r3, [r2, #64]	@ 0x40
 800564a:	4b7a      	ldr	r3, [pc, #488]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565a:	4b77      	ldr	r3, [pc, #476]	@ (8005838 <HAL_RCC_OscConfig+0x474>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d118      	bne.n	8005698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005666:	4b74      	ldr	r3, [pc, #464]	@ (8005838 <HAL_RCC_OscConfig+0x474>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a73      	ldr	r2, [pc, #460]	@ (8005838 <HAL_RCC_OscConfig+0x474>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005672:	f7fb ff4b 	bl	800150c <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567a:	f7fb ff47 	bl	800150c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e10c      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568c:	4b6a      	ldr	r3, [pc, #424]	@ (8005838 <HAL_RCC_OscConfig+0x474>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d106      	bne.n	80056ae <HAL_RCC_OscConfig+0x2ea>
 80056a0:	4b64      	ldr	r3, [pc, #400]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a4:	4a63      	ldr	r2, [pc, #396]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ac:	e01c      	b.n	80056e8 <HAL_RCC_OscConfig+0x324>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCC_OscConfig+0x30c>
 80056b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056bc:	f043 0304 	orr.w	r3, r3, #4
 80056c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ce:	e00b      	b.n	80056e8 <HAL_RCC_OscConfig+0x324>
 80056d0:	4b58      	ldr	r3, [pc, #352]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d4:	4a57      	ldr	r2, [pc, #348]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	6713      	str	r3, [r2, #112]	@ 0x70
 80056dc:	4b55      	ldr	r3, [pc, #340]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e0:	4a54      	ldr	r2, [pc, #336]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80056e2:	f023 0304 	bic.w	r3, r3, #4
 80056e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d015      	beq.n	800571c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fb ff0c 	bl	800150c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f8:	f7fb ff08 	bl	800150c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0cb      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570e:	4b49      	ldr	r3, [pc, #292]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0ee      	beq.n	80056f8 <HAL_RCC_OscConfig+0x334>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571c:	f7fb fef6 	bl	800150c <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005722:	e00a      	b.n	800573a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fb fef2 	bl	800150c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0b5      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573a:	4b3e      	ldr	r3, [pc, #248]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ee      	bne.n	8005724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800574c:	4b39      	ldr	r3, [pc, #228]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005750:	4a38      	ldr	r2, [pc, #224]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005756:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80a1 	beq.w	80058a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005762:	4b34      	ldr	r3, [pc, #208]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b08      	cmp	r3, #8
 800576c:	d05c      	beq.n	8005828 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d141      	bne.n	80057fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005776:	4b31      	ldr	r3, [pc, #196]	@ (800583c <HAL_RCC_OscConfig+0x478>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fb fec6 	bl	800150c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fb fec2 	bl	800150c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e087      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	3b01      	subs	r3, #1
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	491b      	ldr	r1, [pc, #108]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057cc:	4b1b      	ldr	r3, [pc, #108]	@ (800583c <HAL_RCC_OscConfig+0x478>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fb fe9b 	bl	800150c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057da:	f7fb fe97 	bl	800150c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e05c      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ec:	4b11      	ldr	r3, [pc, #68]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <HAL_RCC_OscConfig+0x416>
 80057f8:	e054      	b.n	80058a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b10      	ldr	r3, [pc, #64]	@ (800583c <HAL_RCC_OscConfig+0x478>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fb fe84 	bl	800150c <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005808:	f7fb fe80 	bl	800150c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e045      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581a:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <HAL_RCC_OscConfig+0x470>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0x444>
 8005826:	e03d      	b.n	80058a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d107      	bne.n	8005840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e038      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
 8005834:	40023800 	.word	0x40023800
 8005838:	40007000 	.word	0x40007000
 800583c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005840:	4b1b      	ldr	r3, [pc, #108]	@ (80058b0 <HAL_RCC_OscConfig+0x4ec>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d028      	beq.n	80058a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d121      	bne.n	80058a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d11a      	bne.n	80058a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005870:	4013      	ands	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005878:	4293      	cmp	r3, r2
 800587a:	d111      	bne.n	80058a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	3b01      	subs	r3, #1
 800588a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d001      	beq.n	80058a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023800 	.word	0x40023800

080058b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0cc      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c8:	4b68      	ldr	r3, [pc, #416]	@ (8005a6c <HAL_RCC_ClockConfig+0x1b8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d90c      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d6:	4b65      	ldr	r3, [pc, #404]	@ (8005a6c <HAL_RCC_ClockConfig+0x1b8>)
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	4b63      	ldr	r3, [pc, #396]	@ (8005a6c <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0b8      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d020      	beq.n	800593e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005908:	4b59      	ldr	r3, [pc, #356]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4a58      	ldr	r2, [pc, #352]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005912:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005920:	4b53      	ldr	r3, [pc, #332]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a52      	ldr	r2, [pc, #328]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800592a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592c:	4b50      	ldr	r3, [pc, #320]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	494d      	ldr	r1, [pc, #308]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d044      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d107      	bne.n	8005962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005952:	4b47      	ldr	r3, [pc, #284]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d119      	bne.n	8005992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e07f      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d003      	beq.n	8005972 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800596e:	2b03      	cmp	r3, #3
 8005970:	d107      	bne.n	8005982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005972:	4b3f      	ldr	r3, [pc, #252]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e06f      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005982:	4b3b      	ldr	r3, [pc, #236]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e067      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005992:	4b37      	ldr	r3, [pc, #220]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f023 0203 	bic.w	r2, r3, #3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4934      	ldr	r1, [pc, #208]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059a4:	f7fb fdb2 	bl	800150c <HAL_GetTick>
 80059a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059aa:	e00a      	b.n	80059c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ac:	f7fb fdae 	bl	800150c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e04f      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 020c 	and.w	r2, r3, #12
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d1eb      	bne.n	80059ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059d4:	4b25      	ldr	r3, [pc, #148]	@ (8005a6c <HAL_RCC_ClockConfig+0x1b8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d20c      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e2:	4b22      	ldr	r3, [pc, #136]	@ (8005a6c <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b20      	ldr	r3, [pc, #128]	@ (8005a6c <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e032      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a08:	4b19      	ldr	r3, [pc, #100]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4916      	ldr	r1, [pc, #88]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a26:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	490e      	ldr	r1, [pc, #56]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a3a:	f000 f821 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	490a      	ldr	r1, [pc, #40]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c0>)
 8005a4c:	5ccb      	ldrb	r3, [r1, r3]
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 8005a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a56:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fb fd12 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40023c00 	.word	0x40023c00
 8005a70:	40023800 	.word	0x40023800
 8005a74:	0800aa38 	.word	0x0800aa38
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	20000004 	.word	0x20000004

08005a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a84:	b094      	sub	sp, #80	@ 0x50
 8005a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a98:	4b79      	ldr	r3, [pc, #484]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	f200 80e1 	bhi.w	8005c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d003      	beq.n	8005aba <HAL_RCC_GetSysClockFreq+0x3a>
 8005ab2:	e0db      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ab4:	4b73      	ldr	r3, [pc, #460]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ab8:	e0db      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005aba:	4b73      	ldr	r3, [pc, #460]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8005abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005abe:	e0d8      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ac8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aca:	4b6d      	ldr	r3, [pc, #436]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d063      	beq.n	8005b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	099b      	lsrs	r3, r3, #6
 8005adc:	2200      	movs	r2, #0
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aea:	2300      	movs	r3, #0
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	f04f 0000 	mov.w	r0, #0
 8005afa:	f04f 0100 	mov.w	r1, #0
 8005afe:	0159      	lsls	r1, r3, #5
 8005b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b04:	0150      	lsls	r0, r2, #5
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	1a51      	subs	r1, r2, r1
 8005b0e:	6139      	str	r1, [r7, #16]
 8005b10:	4629      	mov	r1, r5
 8005b12:	eb63 0301 	sbc.w	r3, r3, r1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b24:	4659      	mov	r1, fp
 8005b26:	018b      	lsls	r3, r1, #6
 8005b28:	4651      	mov	r1, sl
 8005b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b2e:	4651      	mov	r1, sl
 8005b30:	018a      	lsls	r2, r1, #6
 8005b32:	4651      	mov	r1, sl
 8005b34:	ebb2 0801 	subs.w	r8, r2, r1
 8005b38:	4659      	mov	r1, fp
 8005b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b52:	4690      	mov	r8, r2
 8005b54:	4699      	mov	r9, r3
 8005b56:	4623      	mov	r3, r4
 8005b58:	eb18 0303 	adds.w	r3, r8, r3
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	462b      	mov	r3, r5
 8005b60:	eb49 0303 	adc.w	r3, r9, r3
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b72:	4629      	mov	r1, r5
 8005b74:	024b      	lsls	r3, r1, #9
 8005b76:	4621      	mov	r1, r4
 8005b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	024a      	lsls	r2, r1, #9
 8005b80:	4610      	mov	r0, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b86:	2200      	movs	r2, #0
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b90:	f7fa fb1a 	bl	80001c8 <__aeabi_uldivmod>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4613      	mov	r3, r2
 8005b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b9c:	e058      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9e:	4b38      	ldr	r3, [pc, #224]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	4611      	mov	r1, r2
 8005baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bae:	623b      	str	r3, [r7, #32]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	f04f 0000 	mov.w	r0, #0
 8005bc0:	f04f 0100 	mov.w	r1, #0
 8005bc4:	0159      	lsls	r1, r3, #5
 8005bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bca:	0150      	lsls	r0, r2, #5
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8005bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	00eb      	lsls	r3, r5, #3
 8005c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c06:	00e2      	lsls	r2, r4, #3
 8005c08:	4614      	mov	r4, r2
 8005c0a:	461d      	mov	r5, r3
 8005c0c:	4643      	mov	r3, r8
 8005c0e:	18e3      	adds	r3, r4, r3
 8005c10:	603b      	str	r3, [r7, #0]
 8005c12:	464b      	mov	r3, r9
 8005c14:	eb45 0303 	adc.w	r3, r5, r3
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c26:	4629      	mov	r1, r5
 8005c28:	028b      	lsls	r3, r1, #10
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c30:	4621      	mov	r1, r4
 8005c32:	028a      	lsls	r2, r1, #10
 8005c34:	4610      	mov	r0, r2
 8005c36:	4619      	mov	r1, r3
 8005c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	61fa      	str	r2, [r7, #28]
 8005c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c44:	f7fa fac0 	bl	80001c8 <__aeabi_uldivmod>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c50:	4b0b      	ldr	r3, [pc, #44]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c6a:	e002      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3750      	adds	r7, #80	@ 0x50
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	007a1200 	.word	0x007a1200

08005c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c90:	4b03      	ldr	r3, [pc, #12]	@ (8005ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c92:	681b      	ldr	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000000 	.word	0x20000000

08005ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ca8:	f7ff fff0 	bl	8005c8c <HAL_RCC_GetHCLKFreq>
 8005cac:	4602      	mov	r2, r0
 8005cae:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	0a9b      	lsrs	r3, r3, #10
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	4903      	ldr	r1, [pc, #12]	@ (8005cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cba:	5ccb      	ldrb	r3, [r1, r3]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	0800aa48 	.word	0x0800aa48

08005ccc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d035      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cf4:	4b62      	ldr	r3, [pc, #392]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cfa:	f7fb fc07 	bl	800150c <HAL_GetTick>
 8005cfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d00:	e008      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d02:	f7fb fc03 	bl	800150c <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e0b0      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d14:	4b5b      	ldr	r3, [pc, #364]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1f0      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	019a      	lsls	r2, r3, #6
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	071b      	lsls	r3, r3, #28
 8005d2c:	4955      	ldr	r1, [pc, #340]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d34:	4b52      	ldr	r3, [pc, #328]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d3a:	f7fb fbe7 	bl	800150c <HAL_GetTick>
 8005d3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d40:	e008      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d42:	f7fb fbe3 	bl	800150c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e090      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d54:	4b4b      	ldr	r3, [pc, #300]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f0      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8083 	beq.w	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b44      	ldr	r3, [pc, #272]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	4a43      	ldr	r2, [pc, #268]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d7e:	4b41      	ldr	r3, [pc, #260]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d96:	f7fb fbb9 	bl	800150c <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9e:	f7fb fbb5 	bl	800150c <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e062      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005db0:	4b35      	ldr	r3, [pc, #212]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dbc:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d02f      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d028      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dda:	4b2a      	ldr	r3, [pc, #168]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005de4:	4b29      	ldr	r3, [pc, #164]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dea:	4b28      	ldr	r3, [pc, #160]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005df0:	4a24      	ldr	r2, [pc, #144]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005df6:	4b23      	ldr	r3, [pc, #140]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d114      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e02:	f7fb fb83 	bl	800150c <HAL_GetTick>
 8005e06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e08:	e00a      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0a:	f7fb fb7f 	bl	800150c <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e02a      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e20:	4b18      	ldr	r3, [pc, #96]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0ee      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e38:	d10d      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e3a:	4b12      	ldr	r3, [pc, #72]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e4e:	490d      	ldr	r1, [pc, #52]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	608b      	str	r3, [r1, #8]
 8005e54:	e005      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e56:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e5c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e60:	6093      	str	r3, [r2, #8]
 8005e62:	4b08      	ldr	r3, [pc, #32]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6e:	4905      	ldr	r1, [pc, #20]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	42470068 	.word	0x42470068
 8005e84:	40023800 	.word	0x40023800
 8005e88:	40007000 	.word	0x40007000
 8005e8c:	42470e40 	.word	0x42470e40

08005e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d13f      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005eae:	4b24      	ldr	r3, [pc, #144]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eb6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ec4:	d12f      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ec8:	617b      	str	r3, [r7, #20]
          break;
 8005eca:	e02f      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ed8:	d108      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eda:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ee2:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	e007      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eec:	4b14      	ldr	r3, [pc, #80]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ef4:	4a15      	ldr	r2, [pc, #84]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005efc:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f16:	0f1b      	lsrs	r3, r3, #28
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	617b      	str	r3, [r7, #20]
          break;
 8005f24:	e002      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]
          break;
 8005f2a:	bf00      	nop
        }
      }
      break;
 8005f2c:	e000      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005f2e:	bf00      	nop
    }
  }
  return frequency;
 8005f30:	697b      	ldr	r3, [r7, #20]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800
 8005f44:	00bb8000 	.word	0x00bb8000
 8005f48:	007a1200 	.word	0x007a1200
 8005f4c:	00f42400 	.word	0x00f42400

08005f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07b      	b.n	800605a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f72:	d009      	beq.n	8005f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	61da      	str	r2, [r3, #28]
 8005f7a:	e005      	b.n	8005f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fb f8f2 	bl	800118c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600c:	ea42 0103 	orr.w	r1, r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	f003 0104 	and.w	r1, r3, #4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	f003 0210 	and.w	r2, r3, #16
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e041      	b.n	80060f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fb f8c7 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f000 fad9 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e041      	b.n	8006196 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f839 	bl	800619e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f000 fa8a 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <HAL_TIM_PWM_Start+0x24>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e022      	b.n	800621e <HAL_TIM_PWM_Start+0x6a>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d109      	bne.n	80061f2 <HAL_TIM_PWM_Start+0x3e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	e015      	b.n	800621e <HAL_TIM_PWM_Start+0x6a>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d109      	bne.n	800620c <HAL_TIM_PWM_Start+0x58>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e008      	b.n	800621e <HAL_TIM_PWM_Start+0x6a>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b01      	cmp	r3, #1
 8006216:	bf14      	ite	ne
 8006218:	2301      	movne	r3, #1
 800621a:	2300      	moveq	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e07c      	b.n	8006320 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <HAL_TIM_PWM_Start+0x82>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006234:	e013      	b.n	800625e <HAL_TIM_PWM_Start+0xaa>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b04      	cmp	r3, #4
 800623a:	d104      	bne.n	8006246 <HAL_TIM_PWM_Start+0x92>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006244:	e00b      	b.n	800625e <HAL_TIM_PWM_Start+0xaa>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d104      	bne.n	8006256 <HAL_TIM_PWM_Start+0xa2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006254:	e003      	b.n	800625e <HAL_TIM_PWM_Start+0xaa>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2202      	movs	r2, #2
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2201      	movs	r2, #1
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fce6 	bl	8006c38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2d      	ldr	r2, [pc, #180]	@ (8006328 <HAL_TIM_PWM_Start+0x174>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_PWM_Start+0xcc>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2c      	ldr	r2, [pc, #176]	@ (800632c <HAL_TIM_PWM_Start+0x178>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d101      	bne.n	8006284 <HAL_TIM_PWM_Start+0xd0>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <HAL_TIM_PWM_Start+0xd2>
 8006284:	2300      	movs	r3, #0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a22      	ldr	r2, [pc, #136]	@ (8006328 <HAL_TIM_PWM_Start+0x174>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_TIM_PWM_Start+0x136>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ac:	d01d      	beq.n	80062ea <HAL_TIM_PWM_Start+0x136>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006330 <HAL_TIM_PWM_Start+0x17c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_TIM_PWM_Start+0x136>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <HAL_TIM_PWM_Start+0x180>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIM_PWM_Start+0x136>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <HAL_TIM_PWM_Start+0x184>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIM_PWM_Start+0x136>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a16      	ldr	r2, [pc, #88]	@ (800632c <HAL_TIM_PWM_Start+0x178>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIM_PWM_Start+0x136>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a18      	ldr	r2, [pc, #96]	@ (800633c <HAL_TIM_PWM_Start+0x188>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIM_PWM_Start+0x136>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a16      	ldr	r2, [pc, #88]	@ (8006340 <HAL_TIM_PWM_Start+0x18c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d111      	bne.n	800630e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	d010      	beq.n	800631e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630c:	e007      	b.n	800631e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40010000 	.word	0x40010000
 800632c:	40010400 	.word	0x40010400
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40014000 	.word	0x40014000
 8006340:	40001800 	.word	0x40001800

08006344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800635e:	2302      	movs	r3, #2
 8006360:	e0ae      	b.n	80064c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	f200 809f 	bhi.w	80064b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080064b1 	.word	0x080064b1
 8006380:	080064b1 	.word	0x080064b1
 8006384:	080064b1 	.word	0x080064b1
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080064b1 	.word	0x080064b1
 8006390:	080064b1 	.word	0x080064b1
 8006394:	080064b1 	.word	0x080064b1
 8006398:	0800642f 	.word	0x0800642f
 800639c:	080064b1 	.word	0x080064b1
 80063a0:	080064b1 	.word	0x080064b1
 80063a4:	080064b1 	.word	0x080064b1
 80063a8:	0800646f 	.word	0x0800646f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 f9f6 	bl	80067a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]
      break;
 80063ea:	e064      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa46 	bl	8006884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
      break;
 800642c:	e043      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fa9b 	bl	8006970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0204 	bic.w	r2, r2, #4
 8006458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	61da      	str	r2, [r3, #28]
      break;
 800646c:	e023      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 faef 	bl	8006a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69d9      	ldr	r1, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	61da      	str	r2, [r3, #28]
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
      break;
 80064b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIM_ConfigClockSource+0x1c>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0b4      	b.n	800664e <HAL_TIM_ConfigClockSource+0x186>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800650a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800651c:	d03e      	beq.n	800659c <HAL_TIM_ConfigClockSource+0xd4>
 800651e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006522:	f200 8087 	bhi.w	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800652a:	f000 8086 	beq.w	800663a <HAL_TIM_ConfigClockSource+0x172>
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006532:	d87f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b70      	cmp	r3, #112	@ 0x70
 8006536:	d01a      	beq.n	800656e <HAL_TIM_ConfigClockSource+0xa6>
 8006538:	2b70      	cmp	r3, #112	@ 0x70
 800653a:	d87b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b60      	cmp	r3, #96	@ 0x60
 800653e:	d050      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006540:	2b60      	cmp	r3, #96	@ 0x60
 8006542:	d877      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b50      	cmp	r3, #80	@ 0x50
 8006546:	d03c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006548:	2b50      	cmp	r3, #80	@ 0x50
 800654a:	d873      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	d058      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x13a>
 8006550:	2b40      	cmp	r3, #64	@ 0x40
 8006552:	d86f      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b30      	cmp	r3, #48	@ 0x30
 8006556:	d064      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b30      	cmp	r3, #48	@ 0x30
 800655a:	d86b      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d060      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d867      	bhi.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05c      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 8006568:	2b10      	cmp	r3, #16
 800656a:	d05a      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x15a>
 800656c:	e062      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800657e:	f000 fb3b 	bl	8006bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
      break;
 800659a:	e04f      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ac:	f000 fb24 	bl	8006bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065be:	609a      	str	r2, [r3, #8]
      break;
 80065c0:	e03c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 fa98 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2150      	movs	r1, #80	@ 0x50
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 faf1 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 80065e0:	e02c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ee:	461a      	mov	r2, r3
 80065f0:	f000 fab7 	bl	8006b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2160      	movs	r1, #96	@ 0x60
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fae1 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006600:	e01c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	461a      	mov	r2, r3
 8006610:	f000 fa78 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2140      	movs	r1, #64	@ 0x40
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fad1 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006620:	e00c      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f000 fac8 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006632:	e003      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e000      	b.n	800663c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800663a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a43      	ldr	r2, [pc, #268]	@ (8006778 <TIM_Base_SetConfig+0x120>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d013      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006676:	d00f      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a40      	ldr	r2, [pc, #256]	@ (800677c <TIM_Base_SetConfig+0x124>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00b      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3f      	ldr	r2, [pc, #252]	@ (8006780 <TIM_Base_SetConfig+0x128>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d007      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a3e      	ldr	r2, [pc, #248]	@ (8006784 <TIM_Base_SetConfig+0x12c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a3d      	ldr	r2, [pc, #244]	@ (8006788 <TIM_Base_SetConfig+0x130>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d108      	bne.n	80066aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a32      	ldr	r2, [pc, #200]	@ (8006778 <TIM_Base_SetConfig+0x120>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02b      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b8:	d027      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2f      	ldr	r2, [pc, #188]	@ (800677c <TIM_Base_SetConfig+0x124>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d023      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006780 <TIM_Base_SetConfig+0x128>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01f      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006784 <TIM_Base_SetConfig+0x12c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d01b      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006788 <TIM_Base_SetConfig+0x130>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d017      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a2b      	ldr	r2, [pc, #172]	@ (800678c <TIM_Base_SetConfig+0x134>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006790 <TIM_Base_SetConfig+0x138>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00f      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a29      	ldr	r2, [pc, #164]	@ (8006794 <TIM_Base_SetConfig+0x13c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00b      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a28      	ldr	r2, [pc, #160]	@ (8006798 <TIM_Base_SetConfig+0x140>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d007      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a27      	ldr	r2, [pc, #156]	@ (800679c <TIM_Base_SetConfig+0x144>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d003      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a26      	ldr	r2, [pc, #152]	@ (80067a0 <TIM_Base_SetConfig+0x148>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d108      	bne.n	800671c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a0e      	ldr	r2, [pc, #56]	@ (8006778 <TIM_Base_SetConfig+0x120>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_Base_SetConfig+0xf2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a10      	ldr	r2, [pc, #64]	@ (8006788 <TIM_Base_SetConfig+0x130>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d103      	bne.n	8006752 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f043 0204 	orr.w	r2, r3, #4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800
 8006784:	40000c00 	.word	0x40000c00
 8006788:	40010400 	.word	0x40010400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800
 8006798:	40001800 	.word	0x40001800
 800679c:	40001c00 	.word	0x40001c00
 80067a0:	40002000 	.word	0x40002000

080067a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f023 0201 	bic.w	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0302 	bic.w	r3, r3, #2
 80067ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a20      	ldr	r2, [pc, #128]	@ (800687c <TIM_OC1_SetConfig+0xd8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_OC1_SetConfig+0x64>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a1f      	ldr	r2, [pc, #124]	@ (8006880 <TIM_OC1_SetConfig+0xdc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d10c      	bne.n	8006822 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0308 	bic.w	r3, r3, #8
 800680e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f023 0304 	bic.w	r3, r3, #4
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a15      	ldr	r2, [pc, #84]	@ (800687c <TIM_OC1_SetConfig+0xd8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC1_SetConfig+0x8e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a14      	ldr	r2, [pc, #80]	@ (8006880 <TIM_OC1_SetConfig+0xdc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d111      	bne.n	8006856 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40010000 	.word	0x40010000
 8006880:	40010400 	.word	0x40010400

08006884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f023 0210 	bic.w	r2, r3, #16
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0320 	bic.w	r3, r3, #32
 80068ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a22      	ldr	r2, [pc, #136]	@ (8006968 <TIM_OC2_SetConfig+0xe4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0x68>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a21      	ldr	r2, [pc, #132]	@ (800696c <TIM_OC2_SetConfig+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d10d      	bne.n	8006908 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006906:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a17      	ldr	r2, [pc, #92]	@ (8006968 <TIM_OC2_SetConfig+0xe4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_OC2_SetConfig+0x94>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a16      	ldr	r2, [pc, #88]	@ (800696c <TIM_OC2_SetConfig+0xe8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d113      	bne.n	8006940 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800691e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a21      	ldr	r2, [pc, #132]	@ (8006a50 <TIM_OC3_SetConfig+0xe0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC3_SetConfig+0x66>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a20      	ldr	r2, [pc, #128]	@ (8006a54 <TIM_OC3_SetConfig+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d10d      	bne.n	80069f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a16      	ldr	r2, [pc, #88]	@ (8006a50 <TIM_OC3_SetConfig+0xe0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_OC3_SetConfig+0x92>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a15      	ldr	r2, [pc, #84]	@ (8006a54 <TIM_OC3_SetConfig+0xe4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d113      	bne.n	8006a2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	621a      	str	r2, [r3, #32]
}
 8006a44:	bf00      	nop
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40010400 	.word	0x40010400

08006a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	031b      	lsls	r3, r3, #12
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a12      	ldr	r2, [pc, #72]	@ (8006afc <TIM_OC4_SetConfig+0xa4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC4_SetConfig+0x68>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a11      	ldr	r2, [pc, #68]	@ (8006b00 <TIM_OC4_SetConfig+0xa8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d109      	bne.n	8006ad4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	019b      	lsls	r3, r3, #6
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400

08006b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f023 030a 	bic.w	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f023 0210 	bic.w	r2, r3, #16
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f043 0307 	orr.w	r3, r3, #7
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a1a      	ldr	r2, [r3, #32]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1a      	ldr	r2, [r3, #32]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e05a      	b.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a21      	ldr	r2, [pc, #132]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d022      	beq.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce8:	d01d      	beq.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1d      	ldr	r2, [pc, #116]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d018      	beq.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1a      	ldr	r2, [pc, #104]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00e      	beq.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d009      	beq.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a17      	ldr	r2, [pc, #92]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a15      	ldr	r2, [pc, #84]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d10c      	bne.n	8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40010400 	.word	0x40010400
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40001800 	.word	0x40001800

08006d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	f107 001c 	add.w	r0, r7, #28
 8006d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d123      	bne.n	8006dde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d105      	bne.n	8006dd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9dc 	bl	8007190 <USB_CoreReset>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
 8006ddc:	e01b      	b.n	8006e16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9d0 	bl	8007190 <USB_CoreReset>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006df4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e08:	e005      	b.n	8006e16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e16:	7fbb      	ldrb	r3, [r7, #30]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d10b      	bne.n	8006e34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f043 0206 	orr.w	r2, r3, #6
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e40:	b004      	add	sp, #16
 8006e42:	4770      	bx	lr

08006e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f043 0201 	orr.w	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d115      	bne.n	8006ed6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006eb6:	200a      	movs	r0, #10
 8006eb8:	f7fa fb34 	bl	8001524 <HAL_Delay>
      ms += 10U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	330a      	adds	r3, #10
 8006ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f956 	bl	8007174 <USB_GetMode>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d01e      	beq.n	8006f0c <USB_SetCurrentMode+0x84>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ed2:	d9f0      	bls.n	8006eb6 <USB_SetCurrentMode+0x2e>
 8006ed4:	e01a      	b.n	8006f0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d115      	bne.n	8006f08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ee8:	200a      	movs	r0, #10
 8006eea:	f7fa fb1b 	bl	8001524 <HAL_Delay>
      ms += 10U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	330a      	adds	r3, #10
 8006ef2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f93d 	bl	8007174 <USB_GetMode>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <USB_SetCurrentMode+0x84>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f04:	d9f0      	bls.n	8006ee8 <USB_SetCurrentMode+0x60>
 8006f06:	e001      	b.n	8006f0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e005      	b.n	8006f18 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f10:	d101      	bne.n	8006f16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f3a:	d901      	bls.n	8006f40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e01b      	b.n	8006f78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	daf2      	bge.n	8006f2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	019b      	lsls	r3, r3, #6
 8006f50:	f043 0220 	orr.w	r2, r3, #32
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f64:	d901      	bls.n	8006f6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e006      	b.n	8006f78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d0f0      	beq.n	8006f58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f9c:	d901      	bls.n	8006fa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e018      	b.n	8006fd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	daf2      	bge.n	8006f90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2210      	movs	r2, #16
 8006fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fc0:	d901      	bls.n	8006fc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e006      	b.n	8006fd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d0f0      	beq.n	8006fb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b089      	sub	sp, #36	@ 0x24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4611      	mov	r1, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	460b      	mov	r3, r1
 8006ff0:	71fb      	strb	r3, [r7, #7]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d123      	bne.n	800704e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007006:	88bb      	ldrh	r3, [r7, #4]
 8007008:	3303      	adds	r3, #3
 800700a:	089b      	lsrs	r3, r3, #2
 800700c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	e018      	b.n	8007046 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	031a      	lsls	r2, r3, #12
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	4413      	add	r3, r2
 800701c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007020:	461a      	mov	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	3301      	adds	r3, #1
 800702c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	3301      	adds	r3, #1
 8007032:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	3301      	adds	r3, #1
 8007038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	3301      	adds	r3, #1
 800703e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	3301      	adds	r3, #1
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d3e2      	bcc.n	8007014 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3724      	adds	r7, #36	@ 0x24
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800705c:	b480      	push	{r7}
 800705e:	b08b      	sub	sp, #44	@ 0x2c
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	089b      	lsrs	r3, r3, #2
 8007076:	b29b      	uxth	r3, r3
 8007078:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007082:	2300      	movs	r3, #0
 8007084:	623b      	str	r3, [r7, #32]
 8007086:	e014      	b.n	80070b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	601a      	str	r2, [r3, #0]
    pDest++;
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	3301      	adds	r3, #1
 8007098:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	3301      	adds	r3, #1
 800709e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	3301      	adds	r3, #1
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	3301      	adds	r3, #1
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	3301      	adds	r3, #1
 80070b0:	623b      	str	r3, [r7, #32]
 80070b2:	6a3a      	ldr	r2, [r7, #32]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d3e6      	bcc.n	8007088 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070ba:	8bfb      	ldrh	r3, [r7, #30]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01e      	beq.n	80070fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ca:	461a      	mov	r2, r3
 80070cc:	f107 0310 	add.w	r3, r7, #16
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	701a      	strb	r2, [r3, #0]
      i++;
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	3301      	adds	r3, #1
 80070ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	3301      	adds	r3, #1
 80070f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80070f2:	8bfb      	ldrh	r3, [r7, #30]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070f8:	8bfb      	ldrh	r3, [r7, #30]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1ea      	bne.n	80070d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007100:	4618      	mov	r0, r3
 8007102:	372c      	adds	r7, #44	@ 0x2c
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007124:	68fb      	ldr	r3, [r7, #12]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007166:	68bb      	ldr	r3, [r7, #8]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	f003 0301 	and.w	r3, r3, #1
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071a8:	d901      	bls.n	80071ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e022      	b.n	80071f4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	daf2      	bge.n	800719c <USB_CoreReset+0xc>

  count = 10U;
 80071b6:	230a      	movs	r3, #10
 80071b8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80071ba:	e002      	b.n	80071c2 <USB_CoreReset+0x32>
  {
    count--;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3b01      	subs	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f9      	bne.n	80071bc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f043 0201 	orr.w	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071e0:	d901      	bls.n	80071e6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e006      	b.n	80071f4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d0f0      	beq.n	80071d4 <USB_CoreReset+0x44>

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007200:	b084      	sub	sp, #16
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800720e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007220:	461a      	mov	r2, r3
 8007222:	2300      	movs	r3, #0
 8007224:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007236:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007242:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d119      	bne.n	800728a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10a      	bne.n	8007274 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800726c:	f043 0304 	orr.w	r3, r3, #4
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	e014      	b.n	800729e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007282:	f023 0304 	bic.w	r3, r3, #4
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e009      	b.n	800729e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007298:	f023 0304 	bic.w	r3, r3, #4
 800729c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800729e:	2110      	movs	r1, #16
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff fe3d 	bl	8006f20 <USB_FlushTxFifo>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fe67 	bl	8006f84 <USB_FlushRxFifo>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	e015      	b.n	80072f2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072d2:	461a      	mov	r2, r3
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295
 80072d8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e6:	461a      	mov	r2, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	3301      	adds	r3, #1
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072f6:	461a      	mov	r2, r3
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d3e3      	bcc.n	80072c6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f04f 32ff 	mov.w	r2, #4294967295
 800730a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a18      	ldr	r2, [pc, #96]	@ (8007370 <USB_HostInit+0x170>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d10b      	bne.n	800732c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a15      	ldr	r2, [pc, #84]	@ (8007374 <USB_HostInit+0x174>)
 8007320:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a14      	ldr	r2, [pc, #80]	@ (8007378 <USB_HostInit+0x178>)
 8007326:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800732a:	e009      	b.n	8007340 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2280      	movs	r2, #128	@ 0x80
 8007330:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a11      	ldr	r2, [pc, #68]	@ (800737c <USB_HostInit+0x17c>)
 8007336:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a11      	ldr	r2, [pc, #68]	@ (8007380 <USB_HostInit+0x180>)
 800733c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f043 0210 	orr.w	r2, r3, #16
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699a      	ldr	r2, [r3, #24]
 8007358:	4b0a      	ldr	r3, [pc, #40]	@ (8007384 <USB_HostInit+0x184>)
 800735a:	4313      	orrs	r3, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800736c:	b004      	add	sp, #16
 800736e:	4770      	bx	lr
 8007370:	40040000 	.word	0x40040000
 8007374:	01000200 	.word	0x01000200
 8007378:	00e00300 	.word	0x00e00300
 800737c:	00600080 	.word	0x00600080
 8007380:	004000e0 	.word	0x004000e0
 8007384:	a3200008 	.word	0xa3200008

08007388 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80073c0:	4313      	orrs	r3, r2
 80073c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d107      	bne.n	80073da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073d0:	461a      	mov	r2, r3
 80073d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073d6:	6053      	str	r3, [r2, #4]
 80073d8:	e00c      	b.n	80073f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d107      	bne.n	80073f0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073e6:	461a      	mov	r2, r3
 80073e8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80073ec:	6053      	str	r3, [r2, #4]
 80073ee:	e001      	b.n	80073f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007422:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800742c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007430:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007432:	2064      	movs	r0, #100	@ 0x64
 8007434:	f7fa f876 	bl	8001524 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007444:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007446:	200a      	movs	r0, #10
 8007448:	f7fa f86c 	bl	8001524 <HAL_Delay>

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800747a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <USB_DriveVbus+0x44>
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d106      	bne.n	800749a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007498:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a4:	d109      	bne.n	80074ba <USB_DriveVbus+0x64>
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80074b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074b8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	0c5b      	lsrs	r3, r3, #17
 80074e6:	f003 0303 	and.w	r3, r3, #3
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	b29b      	uxth	r3, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	4608      	mov	r0, r1
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	4603      	mov	r3, r0
 8007528:	70fb      	strb	r3, [r7, #3]
 800752a:	460b      	mov	r3, r1
 800752c:	70bb      	strb	r3, [r7, #2]
 800752e:	4613      	mov	r3, r2
 8007530:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	4413      	add	r3, r2
 8007542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007546:	461a      	mov	r2, r3
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800754e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007552:	2b03      	cmp	r3, #3
 8007554:	d87c      	bhi.n	8007650 <USB_HC_Init+0x138>
 8007556:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <USB_HC_Init+0x44>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	0800756d 	.word	0x0800756d
 8007560:	08007613 	.word	0x08007613
 8007564:	0800756d 	.word	0x0800756d
 8007568:	080075d5 	.word	0x080075d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	4413      	add	r3, r2
 8007574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007578:	461a      	mov	r2, r3
 800757a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800757e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da10      	bge.n	80075aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	4413      	add	r3, r2
 8007590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	78fa      	ldrb	r2, [r7, #3]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	440a      	add	r2, r1
 800759e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075a6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80075a8:	e055      	b.n	8007656 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a6f      	ldr	r2, [pc, #444]	@ (800776c <USB_HC_Init+0x254>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d151      	bne.n	8007656 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075d0:	60d3      	str	r3, [r2, #12]
      break;
 80075d2:	e040      	b.n	8007656 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075e0:	461a      	mov	r2, r3
 80075e2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80075e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da34      	bge.n	800765a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	440a      	add	r2, r1
 8007606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800760a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800760e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007610:	e023      	b.n	800765a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	4413      	add	r3, r2
 800761a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761e:	461a      	mov	r2, r3
 8007620:	f240 2325 	movw	r3, #549	@ 0x225
 8007624:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007626:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800762a:	2b00      	cmp	r3, #0
 800762c:	da17      	bge.n	800765e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4413      	add	r3, r2
 8007636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	440a      	add	r2, r1
 8007644:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007648:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800764c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800764e:	e006      	b.n	800765e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	77fb      	strb	r3, [r7, #31]
      break;
 8007654:	e004      	b.n	8007660 <USB_HC_Init+0x148>
      break;
 8007656:	bf00      	nop
 8007658:	e002      	b.n	8007660 <USB_HC_Init+0x148>
      break;
 800765a:	bf00      	nop
 800765c:	e000      	b.n	8007660 <USB_HC_Init+0x148>
      break;
 800765e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4413      	add	r3, r2
 8007668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800766c:	461a      	mov	r2, r3
 800766e:	2300      	movs	r3, #0
 8007670:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007672:	78fb      	ldrb	r3, [r7, #3]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800768c:	f043 0302 	orr.w	r3, r3, #2
 8007690:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	2101      	movs	r1, #1
 80076a2:	fa01 f303 	lsl.w	r3, r1, r3
 80076a6:	6939      	ldr	r1, [r7, #16]
 80076a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076ac:	4313      	orrs	r3, r2
 80076ae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80076bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da03      	bge.n	80076cc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80076c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e001      	b.n	80076d0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff fef9 	bl	80074c8 <USB_GetHostSpeed>
 80076d6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80076d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d106      	bne.n	80076ee <USB_HC_Init+0x1d6>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d003      	beq.n	80076ee <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80076e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e001      	b.n	80076f2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076f2:	787b      	ldrb	r3, [r7, #1]
 80076f4:	059b      	lsls	r3, r3, #22
 80076f6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076fa:	78bb      	ldrb	r3, [r7, #2]
 80076fc:	02db      	lsls	r3, r3, #11
 80076fe:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007702:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007704:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007708:	049b      	lsls	r3, r3, #18
 800770a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800770e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007710:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007712:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007716:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	431a      	orrs	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	440a      	add	r2, r1
 8007728:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800772c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007730:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007732:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007736:	2b03      	cmp	r3, #3
 8007738:	d003      	beq.n	8007742 <USB_HC_Init+0x22a>
 800773a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10f      	bne.n	8007762 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	4413      	add	r3, r2
 800774a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	440a      	add	r2, r1
 8007758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800775c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007760:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007762:	7ffb      	ldrb	r3, [r7, #31]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3720      	adds	r7, #32
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	40040000 	.word	0x40040000

08007770 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08c      	sub	sp, #48	@ 0x30
 8007774:	af02      	add	r7, sp, #8
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800778c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4a5d      	ldr	r2, [pc, #372]	@ (8007908 <USB_HC_StartXfer+0x198>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d12f      	bne.n	80077f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d11c      	bne.n	80077d6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	7c9b      	ldrb	r3, [r3, #18]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <USB_HC_StartXfer+0x3c>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	7c9b      	ldrb	r3, [r3, #18]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d124      	bne.n	80077f6 <USB_HC_StartXfer+0x86>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	799b      	ldrb	r3, [r3, #6]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d120      	bne.n	80077f6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	6a3a      	ldr	r2, [r7, #32]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d2:	60d3      	str	r3, [r2, #12]
 80077d4:	e00f      	b.n	80077f6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <USB_HC_StartXfer+0x86>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d107      	bne.n	80077f6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	4619      	mov	r1, r3
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 fb6b 	bl	8007ec8 <USB_DoPing>
        return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e232      	b.n	8007c5c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	799b      	ldrb	r3, [r3, #6]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d158      	bne.n	80078b0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80077fe:	2301      	movs	r3, #1
 8007800:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	78db      	ldrb	r3, [r3, #3]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800780a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	8a92      	ldrh	r2, [r2, #20]
 8007810:	fb03 f202 	mul.w	r2, r3, r2
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	61da      	str	r2, [r3, #28]
 8007818:	e07c      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	7c9b      	ldrb	r3, [r3, #18]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d130      	bne.n	8007884 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	2bbc      	cmp	r3, #188	@ 0xbc
 8007828:	d918      	bls.n	800785c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	8a9b      	ldrh	r3, [r3, #20]
 800782e:	461a      	mov	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	69da      	ldr	r2, [r3, #28]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d003      	beq.n	800784c <USB_HC_StartXfer+0xdc>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d103      	bne.n	8007854 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2202      	movs	r2, #2
 8007850:	60da      	str	r2, [r3, #12]
 8007852:	e05f      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2201      	movs	r2, #1
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	e05b      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d007      	beq.n	800787c <USB_HC_StartXfer+0x10c>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b02      	cmp	r3, #2
 8007872:	d003      	beq.n	800787c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2204      	movs	r2, #4
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	e04b      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2203      	movs	r2, #3
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	e047      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d10d      	bne.n	80078a6 <USB_HC_StartXfer+0x136>
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	8a92      	ldrh	r2, [r2, #20]
 8007892:	4293      	cmp	r3, r2
 8007894:	d907      	bls.n	80078a6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007896:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	8a92      	ldrh	r2, [r2, #20]
 800789c:	fb03 f202 	mul.w	r2, r3, r2
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	61da      	str	r2, [r3, #28]
 80078a4:	e036      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	61da      	str	r2, [r3, #28]
 80078ae:	e031      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d018      	beq.n	80078ea <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	8a92      	ldrh	r2, [r2, #20]
 80078c0:	4413      	add	r3, r2
 80078c2:	3b01      	subs	r3, #1
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	8a92      	ldrh	r2, [r2, #20]
 80078c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80078ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80078d0:	8b7b      	ldrh	r3, [r7, #26]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d90b      	bls.n	80078ee <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80078d6:	8b7b      	ldrh	r3, [r7, #26]
 80078d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	8a92      	ldrh	r2, [r2, #20]
 80078e0:	fb03 f202 	mul.w	r2, r3, r2
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61da      	str	r2, [r3, #28]
 80078e8:	e001      	b.n	80078ee <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80078ea:	2301      	movs	r3, #1
 80078ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	78db      	ldrb	r3, [r3, #3]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	8a92      	ldrh	r2, [r2, #20]
 80078fc:	fb03 f202 	mul.w	r2, r3, r2
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	61da      	str	r2, [r3, #28]
 8007904:	e006      	b.n	8007914 <USB_HC_StartXfer+0x1a4>
 8007906:	bf00      	nop
 8007908:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	6a1a      	ldr	r2, [r3, #32]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800791c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800791e:	04d9      	lsls	r1, r3, #19
 8007920:	4ba3      	ldr	r3, [pc, #652]	@ (8007bb0 <USB_HC_StartXfer+0x440>)
 8007922:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007924:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	7d9b      	ldrb	r3, [r3, #22]
 800792a:	075b      	lsls	r3, r3, #29
 800792c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007930:	69f9      	ldr	r1, [r7, #28]
 8007932:	0148      	lsls	r0, r1, #5
 8007934:	6a39      	ldr	r1, [r7, #32]
 8007936:	4401      	add	r1, r0
 8007938:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800793c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800793e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6999      	ldr	r1, [r3, #24]
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	4413      	add	r3, r2
 8007952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007956:	460a      	mov	r2, r1
 8007958:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	bf0c      	ite	eq
 800796a:	2301      	moveq	r3, #1
 800796c:	2300      	movne	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	4413      	add	r3, r2
 800797a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	6a3a      	ldr	r2, [r7, #32]
 8007986:	440a      	add	r2, r1
 8007988:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800798c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007990:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	7e7b      	ldrb	r3, [r7, #25]
 80079a2:	075b      	lsls	r3, r3, #29
 80079a4:	69f9      	ldr	r1, [r7, #28]
 80079a6:	0148      	lsls	r0, r1, #5
 80079a8:	6a39      	ldr	r1, [r7, #32]
 80079aa:	4401      	add	r1, r0
 80079ac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80079b0:	4313      	orrs	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	799b      	ldrb	r3, [r3, #6]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	f040 80c3 	bne.w	8007b44 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	7c5b      	ldrb	r3, [r3, #17]
 80079c2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079c8:	4313      	orrs	r3, r2
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	6a3a      	ldr	r2, [r7, #32]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80079d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079da:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	6a3a      	ldr	r2, [r7, #32]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80079fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	79db      	ldrb	r3, [r3, #7]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d123      	bne.n	8007a4c <USB_HC_StartXfer+0x2dc>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d11f      	bne.n	8007a4c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a2a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	6a3a      	ldr	r2, [r7, #32]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	7c9b      	ldrb	r3, [r3, #18]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d003      	beq.n	8007a5c <USB_HC_StartXfer+0x2ec>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	7c9b      	ldrb	r3, [r3, #18]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d117      	bne.n	8007a8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d113      	bne.n	8007a8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	78db      	ldrb	r3, [r3, #3]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d10f      	bne.n	8007a8c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	6a3a      	ldr	r2, [r7, #32]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a8a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	7c9b      	ldrb	r3, [r3, #18]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d162      	bne.n	8007b5a <USB_HC_StartXfer+0x3ea>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	78db      	ldrb	r3, [r3, #3]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d15e      	bne.n	8007b5a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d858      	bhi.n	8007b58 <USB_HC_StartXfer+0x3e8>
 8007aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aac <USB_HC_StartXfer+0x33c>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007adf 	.word	0x08007adf
 8007ab4:	08007b01 	.word	0x08007b01
 8007ab8:	08007b23 	.word	0x08007b23
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	6a3a      	ldr	r2, [r7, #32]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ada:	6053      	str	r3, [r2, #4]
          break;
 8007adc:	e03d      	b.n	8007b5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	6a3a      	ldr	r2, [r7, #32]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007af8:	f043 030e 	orr.w	r3, r3, #14
 8007afc:	6053      	str	r3, [r2, #4]
          break;
 8007afe:	e02c      	b.n	8007b5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	6a3a      	ldr	r2, [r7, #32]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b1e:	6053      	str	r3, [r2, #4]
          break;
 8007b20:	e01b      	b.n	8007b5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	6a3a      	ldr	r2, [r7, #32]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b40:	6053      	str	r3, [r2, #4]
          break;
 8007b42:	e00a      	b.n	8007b5a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b50:	461a      	mov	r2, r3
 8007b52:	2300      	movs	r3, #0
 8007b54:	6053      	str	r3, [r2, #4]
 8007b56:	e000      	b.n	8007b5a <USB_HC_StartXfer+0x3ea>
          break;
 8007b58:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b70:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	78db      	ldrb	r3, [r3, #3]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	e003      	b.n	8007b8c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b8a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b92:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e055      	b.n	8007c5c <USB_HC_StartXfer+0x4ec>
 8007bb0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	78db      	ldrb	r3, [r3, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d14e      	bne.n	8007c5a <USB_HC_StartXfer+0x4ea>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d04a      	beq.n	8007c5a <USB_HC_StartXfer+0x4ea>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	79db      	ldrb	r3, [r3, #7]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d146      	bne.n	8007c5a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	7c9b      	ldrb	r3, [r3, #18]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d831      	bhi.n	8007c38 <USB_HC_StartXfer+0x4c8>
 8007bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <USB_HC_StartXfer+0x46c>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007bed 	.word	0x08007bed
 8007be0:	08007c11 	.word	0x08007c11
 8007be4:	08007bed 	.word	0x08007bed
 8007be8:	08007c11 	.word	0x08007c11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	3303      	adds	r3, #3
 8007bf2:	089b      	lsrs	r3, r3, #2
 8007bf4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007bf6:	8afa      	ldrh	r2, [r7, #22]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d91c      	bls.n	8007c3c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c0e:	e015      	b.n	8007c3c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	3303      	adds	r3, #3
 8007c16:	089b      	lsrs	r3, r3, #2
 8007c18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c1a:	8afa      	ldrh	r2, [r7, #22]
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d90a      	bls.n	8007c40 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c36:	e003      	b.n	8007c40 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007c38:	bf00      	nop
 8007c3a:	e002      	b.n	8007c42 <USB_HC_StartXfer+0x4d2>
        break;
 8007c3c:	bf00      	nop
 8007c3e:	e000      	b.n	8007c42 <USB_HC_StartXfer+0x4d2>
        break;
 8007c40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6999      	ldr	r1, [r3, #24]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	785a      	ldrb	r2, [r3, #1]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2000      	movs	r0, #0
 8007c52:	9000      	str	r0, [sp, #0]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff f9c3 	bl	8006fe0 <USB_WritePacket>
  }

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3728      	adds	r7, #40	@ 0x28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	b29b      	uxth	r3, r3
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b089      	sub	sp, #36	@ 0x24
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	0c9b      	lsrs	r3, r3, #18
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	0fdb      	lsrs	r3, r3, #31
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	0fdb      	lsrs	r3, r3, #31
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d10d      	bne.n	8007d08 <USB_HC_Halt+0x82>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <USB_HC_Halt+0x82>
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d002      	beq.n	8007d04 <USB_HC_Halt+0x7e>
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d101      	bne.n	8007d08 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	e0d8      	b.n	8007eba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <USB_HC_Halt+0x8e>
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d173      	bne.n	8007dfc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d32:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d14a      	bne.n	8007dd6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d133      	bne.n	8007db4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d6a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d8a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d98:	d82e      	bhi.n	8007df8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db0:	d0ec      	beq.n	8007d8c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007db2:	e081      	b.n	8007eb8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dd2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dd4:	e070      	b.n	8007eb8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007df0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007df4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007df6:	e05f      	b.n	8007eb8 <USB_HC_Halt+0x232>
            break;
 8007df8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dfa:	e05d      	b.n	8007eb8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	0151      	lsls	r1, r2, #5
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	440a      	add	r2, r1
 8007e12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e1a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d133      	bne.n	8007e94 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e6a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e78:	d81d      	bhi.n	8007eb6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e90:	d0ec      	beq.n	8007e6c <USB_HC_Halt+0x1e6>
 8007e92:	e011      	b.n	8007eb8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	e000      	b.n	8007eb8 <USB_HC_Halt+0x232>
          break;
 8007eb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3724      	adds	r7, #36	@ 0x24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007edc:	2301      	movs	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	04da      	lsls	r2, r3, #19
 8007ee4:	4b15      	ldr	r3, [pc, #84]	@ (8007f3c <USB_DoPing+0x74>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ef4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ef8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f26:	461a      	mov	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	1ff80000 	.word	0x1ff80000

08007f40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fe ff86 	bl	8006e66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f5a:	2110      	movs	r1, #16
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7fe ffdf 	bl	8006f20 <USB_FlushTxFifo>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff f809 	bl	8006f84 <USB_FlushRxFifo>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	e01f      	b.n	8007fc2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fa0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fa8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b0f      	cmp	r3, #15
 8007fc6:	d9dc      	bls.n	8007f82 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	e034      	b.n	8008038 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fe4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008002:	461a      	mov	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3301      	adds	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008014:	d80c      	bhi.n	8008030 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800802c:	d0ec      	beq.n	8008008 <USB_StopHost+0xc8>
 800802e:	e000      	b.n	8008032 <USB_StopHost+0xf2>
        break;
 8008030:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	3301      	adds	r3, #1
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d9c7      	bls.n	8007fce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008044:	461a      	mov	r2, r3
 8008046:	f04f 33ff 	mov.w	r3, #4294967295
 800804a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f04f 32ff 	mov.w	r2, #4294967295
 8008052:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe fef5 	bl	8006e44 <USB_EnableGlobalInt>

  return ret;
 800805a:	7ffb      	ldrb	r3, [r7, #31]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3720      	adds	r7, #32
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008064:	b590      	push	{r4, r7, lr}
 8008066:	b089      	sub	sp, #36	@ 0x24
 8008068:	af04      	add	r7, sp, #16
 800806a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800806c:	2301      	movs	r3, #1
 800806e:	2202      	movs	r2, #2
 8008070:	2102      	movs	r1, #2
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fc83 	bl	800897e <USBH_FindInterface>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2bff      	cmp	r3, #255	@ 0xff
 8008080:	d002      	beq.n	8008088 <USBH_CDC_InterfaceInit+0x24>
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d901      	bls.n	800808c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	e13d      	b.n	8008308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc58 	bl	8008946 <USBH_SelectInterface>
 8008096:	4603      	mov	r3, r0
 8008098:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80080a0:	2302      	movs	r3, #2
 80080a2:	e131      	b.n	8008308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80080aa:	2050      	movs	r0, #80	@ 0x50
 80080ac:	f002 fb6a 	bl	800a784 <malloc>
 80080b0:	4603      	mov	r3, r0
 80080b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80080c4:	2302      	movs	r3, #2
 80080c6:	e11f      	b.n	8008308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80080c8:	2250      	movs	r2, #80	@ 0x50
 80080ca:	2100      	movs	r1, #0
 80080cc:	68b8      	ldr	r0, [r7, #8]
 80080ce:	f002 fc17 	bl	800a900 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	211a      	movs	r1, #26
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	4413      	add	r3, r2
 80080de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b25b      	sxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da15      	bge.n	8008116 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	211a      	movs	r1, #26
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	211a      	movs	r1, #26
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	4413      	add	r3, r2
 800810c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008110:	881a      	ldrh	r2, [r3, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 ffc4 	bl	800a0aa <USBH_AllocPipe>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	7819      	ldrb	r1, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	7858      	ldrb	r0, [r3, #1]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	8952      	ldrh	r2, [r2, #10]
 8008142:	9202      	str	r2, [sp, #8]
 8008144:	2203      	movs	r2, #3
 8008146:	9201      	str	r2, [sp, #4]
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	4623      	mov	r3, r4
 800814c:	4602      	mov	r2, r0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 ff7c 	bl	800a04c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2200      	movs	r2, #0
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f002 fa8b 	bl	800a678 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008162:	2300      	movs	r3, #0
 8008164:	2200      	movs	r2, #0
 8008166:	210a      	movs	r1, #10
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fc08 	bl	800897e <USBH_FindInterface>
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2bff      	cmp	r3, #255	@ 0xff
 8008176:	d002      	beq.n	800817e <USBH_CDC_InterfaceInit+0x11a>
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d901      	bls.n	8008182 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800817e:	2302      	movs	r3, #2
 8008180:	e0c2      	b.n	8008308 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	211a      	movs	r1, #26
 8008188:	fb01 f303 	mul.w	r3, r1, r3
 800818c:	4413      	add	r3, r2
 800818e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	b25b      	sxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	da16      	bge.n	80081c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	211a      	movs	r1, #26
 80081a0:	fb01 f303 	mul.w	r3, r1, r3
 80081a4:	4413      	add	r3, r2
 80081a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	211a      	movs	r1, #26
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081c0:	881a      	ldrh	r2, [r3, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	835a      	strh	r2, [r3, #26]
 80081c6:	e015      	b.n	80081f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	211a      	movs	r1, #26
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	4413      	add	r3, r2
 80081d4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	211a      	movs	r1, #26
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081ee:	881a      	ldrh	r2, [r3, #0]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	211a      	movs	r1, #26
 80081fa:	fb01 f303 	mul.w	r3, r1, r3
 80081fe:	4413      	add	r3, r2
 8008200:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b25b      	sxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	da16      	bge.n	800823a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	211a      	movs	r1, #26
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	4413      	add	r3, r2
 8008218:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	211a      	movs	r1, #26
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	4413      	add	r3, r2
 800822e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008232:	881a      	ldrh	r2, [r3, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	835a      	strh	r2, [r3, #26]
 8008238:	e015      	b.n	8008266 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	211a      	movs	r1, #26
 8008240:	fb01 f303 	mul.w	r3, r1, r3
 8008244:	4413      	add	r3, r2
 8008246:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	211a      	movs	r1, #26
 8008256:	fb01 f303 	mul.w	r3, r1, r3
 800825a:	4413      	add	r3, r2
 800825c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008260:	881a      	ldrh	r2, [r3, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	7b9b      	ldrb	r3, [r3, #14]
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 ff1c 	bl	800a0aa <USBH_AllocPipe>
 8008272:	4603      	mov	r3, r0
 8008274:	461a      	mov	r2, r3
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	7bdb      	ldrb	r3, [r3, #15]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 ff12 	bl	800a0aa <USBH_AllocPipe>
 8008286:	4603      	mov	r3, r0
 8008288:	461a      	mov	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	7b59      	ldrb	r1, [r3, #13]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	7b98      	ldrb	r0, [r3, #14]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	8b12      	ldrh	r2, [r2, #24]
 80082a6:	9202      	str	r2, [sp, #8]
 80082a8:	2202      	movs	r2, #2
 80082aa:	9201      	str	r2, [sp, #4]
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	4623      	mov	r3, r4
 80082b0:	4602      	mov	r2, r0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 feca 	bl	800a04c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	7b19      	ldrb	r1, [r3, #12]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	7bd8      	ldrb	r0, [r3, #15]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	8b52      	ldrh	r2, [r2, #26]
 80082d0:	9202      	str	r2, [sp, #8]
 80082d2:	2202      	movs	r2, #2
 80082d4:	9201      	str	r2, [sp, #4]
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	4623      	mov	r3, r4
 80082da:	4602      	mov	r2, r0
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 feb5 	bl	800a04c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	7b5b      	ldrb	r3, [r3, #13]
 80082ee:	2200      	movs	r2, #0
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f002 f9c0 	bl	800a678 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	7b1b      	ldrb	r3, [r3, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f002 f9b9 	bl	800a678 <USBH_LL_SetToggle>

  return USBH_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	bd90      	pop	{r4, r7, pc}

08008310 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00e      	beq.n	8008348 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 feaa 	bl	800a08a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fed5 	bl	800a0ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	7b1b      	ldrb	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00e      	beq.n	800836e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	7b1b      	ldrb	r3, [r3, #12]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 fe97 	bl	800a08a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	7b1b      	ldrb	r3, [r3, #12]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 fec2 	bl	800a0ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	7b5b      	ldrb	r3, [r3, #13]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00e      	beq.n	8008394 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	7b5b      	ldrb	r3, [r3, #13]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 fe84 	bl	800a08a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	7b5b      	ldrb	r3, [r3, #13]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 feaf 	bl	800a0ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f002 f9f3 	bl	800a794 <free>
    phost->pActiveClass->pData = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083b4:	2200      	movs	r2, #0
 80083b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3340      	adds	r3, #64	@ 0x40
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f8b1 	bl	8008542 <GetLineCoding>
 80083e0:	4603      	mov	r3, r0
 80083e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80083f0:	2102      	movs	r1, #2
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80083f6:	7afb      	ldrb	r3, [r7, #11]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008408:	2301      	movs	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008420:	2b04      	cmp	r3, #4
 8008422:	d877      	bhi.n	8008514 <USBH_CDC_Process+0x114>
 8008424:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <USBH_CDC_Process+0x2c>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008441 	.word	0x08008441
 8008430:	08008447 	.word	0x08008447
 8008434:	08008477 	.word	0x08008477
 8008438:	080084eb 	.word	0x080084eb
 800843c:	080084f9 	.word	0x080084f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
      break;
 8008444:	e06d      	b.n	8008522 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f897 	bl	8008580 <SetLineCoding>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008464:	e058      	b.n	8008518 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d055      	beq.n	8008518 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2204      	movs	r2, #4
 8008470:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008474:	e050      	b.n	8008518 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	3340      	adds	r3, #64	@ 0x40
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f860 	bl	8008542 <GetLineCoding>
 8008482:	4603      	mov	r3, r0
 8008484:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d126      	bne.n	80084da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800849e:	791b      	ldrb	r3, [r3, #4]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d13b      	bne.n	800851c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d133      	bne.n	800851c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d12b      	bne.n	800851c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d124      	bne.n	800851c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f958 	bl	8008788 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084d8:	e020      	b.n	800851c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d01d      	beq.n	800851c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2204      	movs	r2, #4
 80084e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80084e8:	e018      	b.n	800851c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f867 	bl	80085be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8da 	bl	80086aa <CDC_ProcessReception>
      break;
 80084f6:	e014      	b.n	8008522 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80084f8:	2100      	movs	r1, #0
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 f81e 	bl	800953c <USBH_ClrFeature>
 8008500:	4603      	mov	r3, r0
 8008502:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10a      	bne.n	8008520 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008512:	e005      	b.n	8008520 <USBH_CDC_Process+0x120>

    default:
      break;
 8008514:	bf00      	nop
 8008516:	e004      	b.n	8008522 <USBH_CDC_Process+0x122>
      break;
 8008518:	bf00      	nop
 800851a:	e002      	b.n	8008522 <USBH_CDC_Process+0x122>
      break;
 800851c:	bf00      	nop
 800851e:	e000      	b.n	8008522 <USBH_CDC_Process+0x122>
      break;
 8008520:	bf00      	nop

  }

  return status;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	22a1      	movs	r2, #161	@ 0xa1
 8008550:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2221      	movs	r2, #33	@ 0x21
 8008556:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2207      	movs	r2, #7
 8008568:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2207      	movs	r2, #7
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 fb17 	bl	8009ba4 <USBH_CtlReq>
 8008576:	4603      	mov	r3, r0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2221      	movs	r2, #33	@ 0x21
 800858e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2207      	movs	r2, #7
 80085a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2207      	movs	r2, #7
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 faf8 	bl	8009ba4 <USBH_CtlReq>
 80085b4:	4603      	mov	r3, r0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b086      	sub	sp, #24
 80085c2:	af02      	add	r7, sp, #8
 80085c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d002      	beq.n	80085e4 <CDC_ProcessTransmission+0x26>
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d023      	beq.n	800862a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80085e2:	e05e      	b.n	80086a2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	8b12      	ldrh	r2, [r2, #24]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d90b      	bls.n	8008608 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	69d9      	ldr	r1, [r3, #28]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8b1a      	ldrh	r2, [r3, #24]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	7b5b      	ldrb	r3, [r3, #13]
 80085fc:	2001      	movs	r0, #1
 80085fe:	9000      	str	r0, [sp, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 fce0 	bl	8009fc6 <USBH_BulkSendData>
 8008606:	e00b      	b.n	8008620 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	7b5b      	ldrb	r3, [r3, #13]
 8008616:	2001      	movs	r0, #1
 8008618:	9000      	str	r0, [sp, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fcd3 	bl	8009fc6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008628:	e03b      	b.n	80086a2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	7b5b      	ldrb	r3, [r3, #13]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 fff7 	bl	800a624 <USBH_LL_GetURBState>
 8008636:	4603      	mov	r3, r0
 8008638:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800863a:	7afb      	ldrb	r3, [r7, #11]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d128      	bne.n	8008692 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	8b12      	ldrh	r2, [r2, #24]
 8008648:	4293      	cmp	r3, r2
 800864a:	d90e      	bls.n	800866a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	8b12      	ldrh	r2, [r2, #24]
 8008654:	1a9a      	subs	r2, r3, r2
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	8b12      	ldrh	r2, [r2, #24]
 8008662:	441a      	add	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	61da      	str	r2, [r3, #28]
 8008668:	e002      	b.n	8008670 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d004      	beq.n	8008682 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008680:	e00e      	b.n	80086a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f868 	bl	8008760 <USBH_CDC_TransmitCallback>
      break;
 8008690:	e006      	b.n	80086a0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d103      	bne.n	80086a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80086a0:	bf00      	nop
  }
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b086      	sub	sp, #24
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086bc:	2300      	movs	r3, #0
 80086be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d002      	beq.n	80086d0 <CDC_ProcessReception+0x26>
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d00e      	beq.n	80086ec <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80086ce:	e043      	b.n	8008758 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	6a19      	ldr	r1, [r3, #32]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	8b5a      	ldrh	r2, [r3, #26]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	7b1b      	ldrb	r3, [r3, #12]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fc97 	bl	800a010 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2204      	movs	r2, #4
 80086e6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80086ea:	e035      	b.n	8008758 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	7b1b      	ldrb	r3, [r3, #12]
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 ff96 	bl	800a624 <USBH_LL_GetURBState>
 80086f8:	4603      	mov	r3, r0
 80086fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80086fc:	7cfb      	ldrb	r3, [r7, #19]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d129      	bne.n	8008756 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	7b1b      	ldrb	r3, [r3, #12]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fef9 	bl	800a500 <USBH_LL_GetLastXferSize>
 800870e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	429a      	cmp	r2, r3
 8008718:	d016      	beq.n	8008748 <CDC_ProcessReception+0x9e>
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	8b5b      	ldrh	r3, [r3, #26]
 800871e:	461a      	mov	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4293      	cmp	r3, r2
 8008724:	d110      	bne.n	8008748 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	1ad2      	subs	r2, r2, r3
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	441a      	add	r2, r3
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2203      	movs	r2, #3
 8008742:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008746:	e006      	b.n	8008756 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f80f 	bl	8008774 <USBH_CDC_ReceiveCallback>
      break;
 8008756:	bf00      	nop
  }
}
 8008758:	bf00      	nop
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80087b0:	2302      	movs	r3, #2
 80087b2:	e029      	b.n	8008808 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	79fa      	ldrb	r2, [r7, #7]
 80087b8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f81f 	bl	8008810 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f001 fdc9 	bl	800a398 <USBH_LL_Init>

  return USBH_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e009      	b.n	8008832 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	33e0      	adds	r3, #224	@ 0xe0
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	2200      	movs	r2, #0
 800882a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b0f      	cmp	r3, #15
 8008836:	d9f2      	bls.n	800881e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	e009      	b.n	8008852 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008858:	d3f1      	bcc.n	800883e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2240      	movs	r2, #64	@ 0x40
 800887e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	331c      	adds	r3, #28
 80088aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088ae:	2100      	movs	r1, #0
 80088b0:	4618      	mov	r0, r3
 80088b2:	f002 f825 	bl	800a900 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80088bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f002 f81c 	bl	800a900 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80088ce:	2212      	movs	r2, #18
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f002 f814 	bl	800a900 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088de:	223e      	movs	r2, #62	@ 0x3e
 80088e0:	2100      	movs	r1, #0
 80088e2:	4618      	mov	r0, r3
 80088e4:	f002 f80c 	bl	800a900 <memset>

  return USBH_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b085      	sub	sp, #20
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d016      	beq.n	8008934 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10e      	bne.n	800892e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008916:	1c59      	adds	r1, r3, #1
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	33de      	adds	r3, #222	@ 0xde
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
 800892c:	e004      	b.n	8008938 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800892e:	2302      	movs	r3, #2
 8008930:	73fb      	strb	r3, [r7, #15]
 8008932:	e001      	b.n	8008938 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008934:	2302      	movs	r3, #2
 8008936:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	429a      	cmp	r2, r3
 8008960:	d204      	bcs.n	800896c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800896a:	e001      	b.n	8008970 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800896c:	2302      	movs	r3, #2
 800896e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	461a      	mov	r2, r3
 800898c:	4603      	mov	r3, r0
 800898e:	70fb      	strb	r3, [r7, #3]
 8008990:	460b      	mov	r3, r1
 8008992:	70bb      	strb	r3, [r7, #2]
 8008994:	4613      	mov	r3, r2
 8008996:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800899c:	2300      	movs	r3, #0
 800899e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80089a6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80089a8:	e025      	b.n	80089f6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	221a      	movs	r2, #26
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	3308      	adds	r3, #8
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	3302      	adds	r3, #2
 80089ba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	795b      	ldrb	r3, [r3, #5]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d002      	beq.n	80089cc <USBH_FindInterface+0x4e>
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	2bff      	cmp	r3, #255	@ 0xff
 80089ca:	d111      	bne.n	80089f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089d0:	78ba      	ldrb	r2, [r7, #2]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d002      	beq.n	80089dc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089d6:	78bb      	ldrb	r3, [r7, #2]
 80089d8:	2bff      	cmp	r3, #255	@ 0xff
 80089da:	d109      	bne.n	80089f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089e0:	787a      	ldrb	r2, [r7, #1]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d002      	beq.n	80089ec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089e6:	787b      	ldrb	r3, [r7, #1]
 80089e8:	2bff      	cmp	r3, #255	@ 0xff
 80089ea:	d101      	bne.n	80089f0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	e006      	b.n	80089fe <USBH_FindInterface+0x80>
    }
    if_ix++;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	3301      	adds	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d9d6      	bls.n	80089aa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80089fc:	23ff      	movs	r3, #255	@ 0xff
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fcfc 	bl	800a410 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008a18:	2101      	movs	r1, #1
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 fe15 	bl	800a64a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af04      	add	r7, sp, #16
 8008a32:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008a34:	2302      	movs	r3, #2
 8008a36:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d102      	bne.n	8008a4e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b0b      	cmp	r3, #11
 8008a56:	f200 81bc 	bhi.w	8008dd2 <USBH_Process+0x3a6>
 8008a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <USBH_Process+0x34>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a91 	.word	0x08008a91
 8008a64:	08008ac3 	.word	0x08008ac3
 8008a68:	08008b2d 	.word	0x08008b2d
 8008a6c:	08008d6d 	.word	0x08008d6d
 8008a70:	08008dd3 	.word	0x08008dd3
 8008a74:	08008bcd 	.word	0x08008bcd
 8008a78:	08008d13 	.word	0x08008d13
 8008a7c:	08008c03 	.word	0x08008c03
 8008a80:	08008c23 	.word	0x08008c23
 8008a84:	08008c41 	.word	0x08008c41
 8008a88:	08008c85 	.word	0x08008c85
 8008a8c:	08008d55 	.word	0x08008d55
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 819c 	beq.w	8008dd6 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008aa4:	20c8      	movs	r0, #200	@ 0xc8
 8008aa6:	f001 fe1a 	bl	800a6de <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fd0d 	bl	800a4ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008ac0:	e189      	b.n	8008dd6 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d107      	bne.n	8008ade <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008adc:	e18a      	b.n	8008df4 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008ae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ae8:	d914      	bls.n	8008b14 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008af0:	3301      	adds	r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d903      	bls.n	8008b0c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	220d      	movs	r2, #13
 8008b08:	701a      	strb	r2, [r3, #0]
      break;
 8008b0a:	e173      	b.n	8008df4 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	701a      	strb	r2, [r3, #0]
      break;
 8008b12:	e16f      	b.n	8008df4 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008b1a:	f103 020a 	add.w	r2, r3, #10
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008b24:	200a      	movs	r0, #10
 8008b26:	f001 fdda 	bl	800a6de <USBH_Delay>
      break;
 8008b2a:	e163      	b.n	8008df4 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b3c:	2104      	movs	r1, #4
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008b42:	2064      	movs	r0, #100	@ 0x64
 8008b44:	f001 fdcb 	bl	800a6de <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 fc97 	bl	800a47c <USBH_LL_GetSpeed>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2205      	movs	r2, #5
 8008b5c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 faa2 	bl	800a0aa <USBH_AllocPipe>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008b6e:	2180      	movs	r1, #128	@ 0x80
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 fa9a 	bl	800a0aa <USBH_AllocPipe>
 8008b76:	4603      	mov	r3, r0
 8008b78:	461a      	mov	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7919      	ldrb	r1, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b92:	9202      	str	r2, [sp, #8]
 8008b94:	2200      	movs	r2, #0
 8008b96:	9201      	str	r2, [sp, #4]
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2280      	movs	r2, #128	@ 0x80
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 fa54 	bl	800a04c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	7959      	ldrb	r1, [r3, #5]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008bb8:	9202      	str	r2, [sp, #8]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	9201      	str	r2, [sp, #4]
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fa41 	bl	800a04c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008bca:	e113      	b.n	8008df4 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f917 	bl	8008e00 <USBH_HandleEnum>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 80fd 	bne.w	8008dda <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d103      	bne.n	8008bfa <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008bf8:	e0ef      	b.n	8008dda <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	701a      	strb	r2, [r3, #0]
      break;
 8008c00:	e0eb      	b.n	8008dda <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 80e8 	beq.w	8008dde <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c14:	2101      	movs	r1, #1
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2208      	movs	r2, #8
 8008c1e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8008c20:	e0dd      	b.n	8008dde <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc3f 	bl	80094ae <USBH_SetCfg>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f040 80d5 	bne.w	8008de2 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2209      	movs	r2, #9
 8008c3c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008c3e:	e0d0      	b.n	8008de2 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d016      	beq.n	8008c7c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fc4f 	bl	80094f4 <USBH_SetFeature>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d103      	bne.n	8008c6a <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	220a      	movs	r2, #10
 8008c66:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008c68:	e0bd      	b.n	8008de6 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	f040 80b9 	bne.w	8008de6 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	220a      	movs	r2, #10
 8008c78:	701a      	strb	r2, [r3, #0]
      break;
 8008c7a:	e0b4      	b.n	8008de6 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	220a      	movs	r2, #10
 8008c80:	701a      	strb	r2, [r3, #0]
      break;
 8008c82:	e0b0      	b.n	8008de6 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 80ad 	beq.w	8008dea <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
 8008c9c:	e016      	b.n	8008ccc <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	32de      	adds	r2, #222	@ 0xde
 8008ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca8:	791a      	ldrb	r2, [r3, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d108      	bne.n	8008cc6 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	32de      	adds	r2, #222	@ 0xde
 8008cba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008cc4:	e005      	b.n	8008cd2 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0e5      	beq.n	8008c9e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d016      	beq.n	8008d0a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2206      	movs	r2, #6
 8008cf2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cfa:	2103      	movs	r1, #3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008d00:	e073      	b.n	8008dea <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	220d      	movs	r2, #13
 8008d06:	701a      	strb	r2, [r3, #0]
      break;
 8008d08:	e06f      	b.n	8008dea <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	220d      	movs	r2, #13
 8008d0e:	701a      	strb	r2, [r3, #0]
      break;
 8008d10:	e06b      	b.n	8008dea <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d017      	beq.n	8008d4c <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	4798      	blx	r3
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d103      	bne.n	8008d3c <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	220b      	movs	r2, #11
 8008d38:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008d3a:	e058      	b.n	8008dee <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d154      	bne.n	8008dee <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	220d      	movs	r2, #13
 8008d48:	701a      	strb	r2, [r3, #0]
      break;
 8008d4a:	e050      	b.n	8008dee <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	220d      	movs	r2, #13
 8008d50:	701a      	strb	r2, [r3, #0]
      break;
 8008d52:	e04c      	b.n	8008dee <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d049      	beq.n	8008df2 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
      }
      break;
 8008d6a:	e042      	b.n	8008df2 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff fd4b 	bl	8008810 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008da8:	2105      	movs	r1, #5
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d107      	bne.n	8008dca <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fe21 	bl	8008a0a <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008dc8:	e014      	b.n	8008df4 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fb20 	bl	800a410 <USBH_LL_Start>
      break;
 8008dd0:	e010      	b.n	8008df4 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e00e      	b.n	8008df4 <USBH_Process+0x3c8>
      break;
 8008dd6:	bf00      	nop
 8008dd8:	e00c      	b.n	8008df4 <USBH_Process+0x3c8>
      break;
 8008dda:	bf00      	nop
 8008ddc:	e00a      	b.n	8008df4 <USBH_Process+0x3c8>
    break;
 8008dde:	bf00      	nop
 8008de0:	e008      	b.n	8008df4 <USBH_Process+0x3c8>
      break;
 8008de2:	bf00      	nop
 8008de4:	e006      	b.n	8008df4 <USBH_Process+0x3c8>
      break;
 8008de6:	bf00      	nop
 8008de8:	e004      	b.n	8008df4 <USBH_Process+0x3c8>
      break;
 8008dea:	bf00      	nop
 8008dec:	e002      	b.n	8008df4 <USBH_Process+0x3c8>
      break;
 8008dee:	bf00      	nop
 8008df0:	e000      	b.n	8008df4 <USBH_Process+0x3c8>
      break;
 8008df2:	bf00      	nop
  }
  return USBH_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop

08008e00 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af04      	add	r7, sp, #16
 8008e06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	785b      	ldrb	r3, [r3, #1]
 8008e14:	2b07      	cmp	r3, #7
 8008e16:	f200 81bd 	bhi.w	8009194 <USBH_HandleEnum+0x394>
 8008e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e20 <USBH_HandleEnum+0x20>)
 8008e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008efb 	.word	0x08008efb
 8008e28:	08008f65 	.word	0x08008f65
 8008e2c:	08008fef 	.word	0x08008fef
 8008e30:	08009059 	.word	0x08009059
 8008e34:	080090c9 	.word	0x080090c9
 8008e38:	0800910f 	.word	0x0800910f
 8008e3c:	08009155 	.word	0x08009155
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e40:	2108      	movs	r1, #8
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa50 	bl	80092e8 <USBH_Get_DevDesc>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d12e      	bne.n	8008eb0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7919      	ldrb	r1, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e76:	9202      	str	r2, [sp, #8]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	9201      	str	r2, [sp, #4]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2280      	movs	r2, #128	@ 0x80
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 f8e2 	bl	800a04c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7959      	ldrb	r1, [r3, #5]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e9c:	9202      	str	r2, [sp, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	9201      	str	r2, [sp, #4]
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 f8cf 	bl	800a04c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008eae:	e173      	b.n	8009198 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	f040 8170 	bne.w	8009198 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d903      	bls.n	8008eda <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	220d      	movs	r2, #13
 8008ed6:	701a      	strb	r2, [r3, #0]
      break;
 8008ed8:	e15e      	b.n	8009198 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	795b      	ldrb	r3, [r3, #5]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 f903 	bl	800a0ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	791b      	ldrb	r3, [r3, #4]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f8fd 	bl	800a0ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	701a      	strb	r2, [r3, #0]
      break;
 8008ef8:	e14e      	b.n	8009198 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008efa:	2112      	movs	r1, #18
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f9f3 	bl	80092e8 <USBH_Get_DevDesc>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d103      	bne.n	8008f14 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f12:	e143      	b.n	800919c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	f040 8140 	bne.w	800919c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f22:	3301      	adds	r3, #1
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d903      	bls.n	8008f3e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	220d      	movs	r2, #13
 8008f3a:	701a      	strb	r2, [r3, #0]
      break;
 8008f3c:	e12e      	b.n	800919c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	795b      	ldrb	r3, [r3, #5]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 f8d1 	bl	800a0ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	791b      	ldrb	r3, [r3, #4]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f8cb 	bl	800a0ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
      break;
 8008f62:	e11b      	b.n	800919c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008f64:	2101      	movs	r1, #1
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa7d 	bl	8009466 <USBH_SetAddress>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d130      	bne.n	8008fd8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008f76:	2002      	movs	r0, #2
 8008f78:	f001 fbb1 	bl	800a6de <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2203      	movs	r2, #3
 8008f88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	7919      	ldrb	r1, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f9e:	9202      	str	r2, [sp, #8]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	9201      	str	r2, [sp, #4]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2280      	movs	r2, #128	@ 0x80
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 f84e 	bl	800a04c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7959      	ldrb	r1, [r3, #5]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fc4:	9202      	str	r2, [sp, #8]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	9201      	str	r2, [sp, #4]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 f83b 	bl	800a04c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fd6:	e0e3      	b.n	80091a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	f040 80e0 	bne.w	80091a0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	220d      	movs	r2, #13
 8008fe4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	705a      	strb	r2, [r3, #1]
      break;
 8008fec:	e0d8      	b.n	80091a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008fee:	2109      	movs	r1, #9
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f9a5 	bl	8009340 <USBH_Get_CfgDesc>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d103      	bne.n	8009008 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2204      	movs	r2, #4
 8009004:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009006:	e0cd      	b.n	80091a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b03      	cmp	r3, #3
 800900c:	f040 80ca 	bne.w	80091a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009016:	3301      	adds	r3, #1
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009026:	2b03      	cmp	r3, #3
 8009028:	d903      	bls.n	8009032 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	220d      	movs	r2, #13
 800902e:	701a      	strb	r2, [r3, #0]
      break;
 8009030:	e0b8      	b.n	80091a4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	795b      	ldrb	r3, [r3, #5]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 f857 	bl	800a0ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	791b      	ldrb	r3, [r3, #4]
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 f851 	bl	800a0ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
      break;
 8009056:	e0a5      	b.n	80091a4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f96d 	bl	8009340 <USBH_Get_CfgDesc>
 8009066:	4603      	mov	r3, r0
 8009068:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d103      	bne.n	8009078 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2205      	movs	r2, #5
 8009074:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009076:	e097      	b.n	80091a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b03      	cmp	r3, #3
 800907c:	f040 8094 	bne.w	80091a8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009086:	3301      	adds	r3, #1
 8009088:	b2da      	uxtb	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009096:	2b03      	cmp	r3, #3
 8009098:	d903      	bls.n	80090a2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	220d      	movs	r2, #13
 800909e:	701a      	strb	r2, [r3, #0]
      break;
 80090a0:	e082      	b.n	80091a8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	795b      	ldrb	r3, [r3, #5]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 f81f 	bl	800a0ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	791b      	ldrb	r3, [r3, #4]
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 f819 	bl	800a0ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
      break;
 80090c6:	e06f      	b.n	80091a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d019      	beq.n	8009106 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090de:	23ff      	movs	r3, #255	@ 0xff
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f957 	bl	8009394 <USBH_Get_StringDesc>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2206      	movs	r2, #6
 80090f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80090f6:	e059      	b.n	80091ac <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d156      	bne.n	80091ac <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2206      	movs	r2, #6
 8009102:	705a      	strb	r2, [r3, #1]
      break;
 8009104:	e052      	b.n	80091ac <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2206      	movs	r2, #6
 800910a:	705a      	strb	r2, [r3, #1]
      break;
 800910c:	e04e      	b.n	80091ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009114:	2b00      	cmp	r3, #0
 8009116:	d019      	beq.n	800914c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009124:	23ff      	movs	r3, #255	@ 0xff
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f934 	bl	8009394 <USBH_Get_StringDesc>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d103      	bne.n	800913e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2207      	movs	r2, #7
 800913a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800913c:	e038      	b.n	80091b0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d135      	bne.n	80091b0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2207      	movs	r2, #7
 8009148:	705a      	strb	r2, [r3, #1]
      break;
 800914a:	e031      	b.n	80091b0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2207      	movs	r2, #7
 8009150:	705a      	strb	r2, [r3, #1]
      break;
 8009152:	e02d      	b.n	80091b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800915a:	2b00      	cmp	r3, #0
 800915c:	d017      	beq.n	800918e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800916a:	23ff      	movs	r3, #255	@ 0xff
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f911 	bl	8009394 <USBH_Get_StringDesc>
 8009172:	4603      	mov	r3, r0
 8009174:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009180:	e018      	b.n	80091b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d115      	bne.n	80091b4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	73fb      	strb	r3, [r7, #15]
      break;
 800918c:	e012      	b.n	80091b4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
      break;
 8009192:	e00f      	b.n	80091b4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009194:	bf00      	nop
 8009196:	e00e      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 8009198:	bf00      	nop
 800919a:	e00c      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 800919c:	bf00      	nop
 800919e:	e00a      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 80091a0:	bf00      	nop
 80091a2:	e008      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 80091a4:	bf00      	nop
 80091a6:	e006      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 80091a8:	bf00      	nop
 80091aa:	e004      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 80091ac:	bf00      	nop
 80091ae:	e002      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 80091b0:	bf00      	nop
 80091b2:	e000      	b.n	80091b6 <USBH_HandleEnum+0x3b6>
      break;
 80091b4:	bf00      	nop
  }
  return Status;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80091d2:	bf00      	nop
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f804 	bl	8009202 <USBH_HandleSof>
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b0b      	cmp	r3, #11
 8009212:	d10a      	bne.n	800922a <USBH_HandleSof+0x28>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
  }
}
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8009242:	bf00      	nop
}
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8009266:	bf00      	nop
}
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 f8c0 	bl	800a446 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	791b      	ldrb	r3, [r3, #4]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 ff0d 	bl	800a0ec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	795b      	ldrb	r3, [r3, #5]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 ff07 	bl	800a0ec <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80092f4:	887b      	ldrh	r3, [r7, #2]
 80092f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092fa:	d901      	bls.n	8009300 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e01b      	b.n	8009338 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009306:	887b      	ldrh	r3, [r7, #2]
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	4613      	mov	r3, r2
 800930c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009310:	2100      	movs	r1, #0
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f872 	bl	80093fc <USBH_GetDescriptor>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009328:	887a      	ldrh	r2, [r7, #2]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f929 	bl	8009584 <USBH_ParseDevDesc>
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af02      	add	r7, sp, #8
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	331c      	adds	r3, #28
 8009350:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009352:	887b      	ldrh	r3, [r7, #2]
 8009354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009358:	d901      	bls.n	800935e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800935a:	2303      	movs	r3, #3
 800935c:	e016      	b.n	800938c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800935e:	887b      	ldrh	r3, [r7, #2]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f846 	bl	80093fc <USBH_GetDescriptor>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d107      	bne.n	800938a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800937a:	887b      	ldrh	r3, [r7, #2]
 800937c:	461a      	mov	r2, r3
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f9af 	bl	80096e4 <USBH_ParseCfgDesc>
 8009386:	4603      	mov	r3, r0
 8009388:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	461a      	mov	r2, r3
 80093a0:	460b      	mov	r3, r1
 80093a2:	72fb      	strb	r3, [r7, #11]
 80093a4:	4613      	mov	r3, r2
 80093a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80093a8:	893b      	ldrh	r3, [r7, #8]
 80093aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093ae:	d802      	bhi.n	80093b6 <USBH_Get_StringDesc+0x22>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e01c      	b.n	80093f4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	b29b      	uxth	r3, r3
 80093be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80093c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80093ca:	893b      	ldrh	r3, [r7, #8]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	460b      	mov	r3, r1
 80093d0:	2100      	movs	r1, #0
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 f812 	bl	80093fc <USBH_GetDescriptor>
 80093d8:	4603      	mov	r3, r0
 80093da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d107      	bne.n	80093f2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093e8:	893a      	ldrh	r2, [r7, #8]
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fb8c 	bl	8009b0a <USBH_ParseStringDesc>
  }

  return status;
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	607b      	str	r3, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	72fb      	strb	r3, [r7, #11]
 800940a:	4613      	mov	r3, r2
 800940c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	789b      	ldrb	r3, [r3, #2]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d11c      	bne.n	8009450 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009416:	7afb      	ldrb	r3, [r7, #11]
 8009418:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800941c:	b2da      	uxtb	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2206      	movs	r2, #6
 8009426:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	893a      	ldrh	r2, [r7, #8]
 800942c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800942e:	893b      	ldrh	r3, [r7, #8]
 8009430:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009438:	d104      	bne.n	8009444 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009440:	829a      	strh	r2, [r3, #20]
 8009442:	e002      	b.n	800944a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8b3a      	ldrh	r2, [r7, #24]
 800944e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009450:	8b3b      	ldrh	r3, [r7, #24]
 8009452:	461a      	mov	r2, r3
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fba4 	bl	8009ba4 <USBH_CtlReq>
 800945c:	4603      	mov	r3, r0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	789b      	ldrb	r3, [r3, #2]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d10f      	bne.n	800949a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2205      	movs	r2, #5
 8009484:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	b29a      	uxth	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800949a:	2200      	movs	r2, #0
 800949c:	2100      	movs	r1, #0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb80 	bl	8009ba4 <USBH_CtlReq>
 80094a4:	4603      	mov	r3, r0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	789b      	ldrb	r3, [r3, #2]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d10e      	bne.n	80094e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2209      	movs	r2, #9
 80094cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	887a      	ldrh	r2, [r7, #2]
 80094d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80094e0:	2200      	movs	r2, #0
 80094e2:	2100      	movs	r1, #0
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fb5d 	bl	8009ba4 <USBH_CtlReq>
 80094ea:	4603      	mov	r3, r0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	789b      	ldrb	r3, [r3, #2]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d10f      	bne.n	8009528 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2203      	movs	r2, #3
 8009512:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009528:	2200      	movs	r2, #0
 800952a:	2100      	movs	r1, #0
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fb39 	bl	8009ba4 <USBH_CtlReq>
 8009532:	4603      	mov	r3, r0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	789b      	ldrb	r3, [r3, #2]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10f      	bne.n	8009570 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	b29a      	uxth	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009570:	2200      	movs	r2, #0
 8009572:	2100      	movs	r1, #0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fb15 	bl	8009ba4 <USBH_CtlReq>
 800957a:	4603      	mov	r3, r0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009598:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80095a4:	2302      	movs	r3, #2
 80095a6:	e094      	b.n	80096d2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	785a      	ldrb	r2, [r3, #1]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	3302      	adds	r3, #2
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	3303      	adds	r3, #3
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	021b      	lsls	r3, r3, #8
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	791a      	ldrb	r2, [r3, #4]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	795a      	ldrb	r2, [r3, #5]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	799a      	ldrb	r2, [r3, #6]
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	79da      	ldrb	r2, [r3, #7]
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009602:	2b01      	cmp	r3, #1
 8009604:	d11b      	bne.n	800963e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	79db      	ldrb	r3, [r3, #7]
 800960a:	2b20      	cmp	r3, #32
 800960c:	dc0f      	bgt.n	800962e <USBH_ParseDevDesc+0xaa>
 800960e:	2b08      	cmp	r3, #8
 8009610:	db0f      	blt.n	8009632 <USBH_ParseDevDesc+0xae>
 8009612:	3b08      	subs	r3, #8
 8009614:	4a32      	ldr	r2, [pc, #200]	@ (80096e0 <USBH_ParseDevDesc+0x15c>)
 8009616:	fa22 f303 	lsr.w	r3, r2, r3
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	bf14      	ite	ne
 8009622:	2301      	movne	r3, #1
 8009624:	2300      	moveq	r3, #0
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d106      	bne.n	800963a <USBH_ParseDevDesc+0xb6>
 800962c:	e001      	b.n	8009632 <USBH_ParseDevDesc+0xae>
 800962e:	2b40      	cmp	r3, #64	@ 0x40
 8009630:	d003      	beq.n	800963a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2208      	movs	r2, #8
 8009636:	71da      	strb	r2, [r3, #7]
        break;
 8009638:	e000      	b.n	800963c <USBH_ParseDevDesc+0xb8>
        break;
 800963a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800963c:	e00e      	b.n	800965c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009644:	2b02      	cmp	r3, #2
 8009646:	d107      	bne.n	8009658 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	79db      	ldrb	r3, [r3, #7]
 800964c:	2b08      	cmp	r3, #8
 800964e:	d005      	beq.n	800965c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2208      	movs	r2, #8
 8009654:	71da      	strb	r2, [r3, #7]
 8009656:	e001      	b.n	800965c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009658:	2303      	movs	r3, #3
 800965a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800965c:	88fb      	ldrh	r3, [r7, #6]
 800965e:	2b08      	cmp	r3, #8
 8009660:	d936      	bls.n	80096d0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	3308      	adds	r3, #8
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	461a      	mov	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	3309      	adds	r3, #9
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	021b      	lsls	r3, r3, #8
 8009672:	b29b      	uxth	r3, r3
 8009674:	4313      	orrs	r3, r2
 8009676:	b29a      	uxth	r2, r3
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	330a      	adds	r3, #10
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	330b      	adds	r3, #11
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	021b      	lsls	r3, r3, #8
 800968c:	b29b      	uxth	r3, r3
 800968e:	4313      	orrs	r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	330c      	adds	r3, #12
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	330d      	adds	r3, #13
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	7b9a      	ldrb	r2, [r3, #14]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	7bda      	ldrb	r2, [r3, #15]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	7c1a      	ldrb	r2, [r3, #16]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	7c5a      	ldrb	r2, [r3, #17]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	371c      	adds	r7, #28
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	01000101 	.word	0x01000101

080096e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08c      	sub	sp, #48	@ 0x30
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80096f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009706:	2300      	movs	r3, #0
 8009708:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009712:	2302      	movs	r3, #2
 8009714:	e0de      	b.n	80098d4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	2b09      	cmp	r3, #9
 8009720:	d002      	beq.n	8009728 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009724:	2209      	movs	r2, #9
 8009726:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	785a      	ldrb	r2, [r3, #1]
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	3302      	adds	r3, #2
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	3303      	adds	r3, #3
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	b29b      	uxth	r3, r3
 800974a:	4313      	orrs	r3, r2
 800974c:	b29b      	uxth	r3, r3
 800974e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009752:	bf28      	it	cs
 8009754:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009758:	b29a      	uxth	r2, r3
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	791a      	ldrb	r2, [r3, #4]
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	795a      	ldrb	r2, [r3, #5]
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	799a      	ldrb	r2, [r3, #6]
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	79da      	ldrb	r2, [r3, #7]
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	7a1a      	ldrb	r2, [r3, #8]
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009786:	88fb      	ldrh	r3, [r7, #6]
 8009788:	2b09      	cmp	r3, #9
 800978a:	f240 80a1 	bls.w	80098d0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800978e:	2309      	movs	r3, #9
 8009790:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009796:	e085      	b.n	80098a4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009798:	f107 0316 	add.w	r3, r7, #22
 800979c:	4619      	mov	r1, r3
 800979e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097a0:	f000 f9e6 	bl	8009b70 <USBH_GetNextDesc>
 80097a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d17a      	bne.n	80098a4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b09      	cmp	r3, #9
 80097b4:	d002      	beq.n	80097bc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	2209      	movs	r2, #9
 80097ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80097bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097c0:	221a      	movs	r2, #26
 80097c2:	fb02 f303 	mul.w	r3, r2, r3
 80097c6:	3308      	adds	r3, #8
 80097c8:	6a3a      	ldr	r2, [r7, #32]
 80097ca:	4413      	add	r3, r2
 80097cc:	3302      	adds	r3, #2
 80097ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80097d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097d2:	69f8      	ldr	r0, [r7, #28]
 80097d4:	f000 f882 	bl	80098dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80097e2:	e043      	b.n	800986c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097e4:	f107 0316 	add.w	r3, r7, #22
 80097e8:	4619      	mov	r1, r3
 80097ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097ec:	f000 f9c0 	bl	8009b70 <USBH_GetNextDesc>
 80097f0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b05      	cmp	r3, #5
 80097f8:	d138      	bne.n	800986c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	795b      	ldrb	r3, [r3, #5]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d113      	bne.n	800982a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009806:	2b02      	cmp	r3, #2
 8009808:	d003      	beq.n	8009812 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	799b      	ldrb	r3, [r3, #6]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d10b      	bne.n	800982a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	79db      	ldrb	r3, [r3, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <USBH_ParseCfgDesc+0x14e>
 800981a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b09      	cmp	r3, #9
 8009820:	d007      	beq.n	8009832 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009824:	2209      	movs	r2, #9
 8009826:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009828:	e003      	b.n	8009832 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982c:	2207      	movs	r2, #7
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e000      	b.n	8009834 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009832:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009838:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800983c:	3201      	adds	r2, #1
 800983e:	00d2      	lsls	r2, r2, #3
 8009840:	211a      	movs	r1, #26
 8009842:	fb01 f303 	mul.w	r3, r1, r3
 8009846:	4413      	add	r3, r2
 8009848:	3308      	adds	r3, #8
 800984a:	6a3a      	ldr	r2, [r7, #32]
 800984c:	4413      	add	r3, r2
 800984e:	3304      	adds	r3, #4
 8009850:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009854:	69b9      	ldr	r1, [r7, #24]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f86f 	bl	800993a <USBH_ParseEPDesc>
 800985c:	4603      	mov	r3, r0
 800985e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009862:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009866:	3301      	adds	r3, #1
 8009868:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800986c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009870:	2b01      	cmp	r3, #1
 8009872:	d80a      	bhi.n	800988a <USBH_ParseCfgDesc+0x1a6>
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	791b      	ldrb	r3, [r3, #4]
 8009878:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800987c:	429a      	cmp	r2, r3
 800987e:	d204      	bcs.n	800988a <USBH_ParseCfgDesc+0x1a6>
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	885a      	ldrh	r2, [r3, #2]
 8009884:	8afb      	ldrh	r3, [r7, #22]
 8009886:	429a      	cmp	r2, r3
 8009888:	d8ac      	bhi.n	80097e4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	791b      	ldrb	r3, [r3, #4]
 800988e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009892:	429a      	cmp	r2, r3
 8009894:	d201      	bcs.n	800989a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8009896:	2303      	movs	r3, #3
 8009898:	e01c      	b.n	80098d4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800989a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800989e:	3301      	adds	r3, #1
 80098a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d805      	bhi.n	80098b8 <USBH_ParseCfgDesc+0x1d4>
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	885a      	ldrh	r2, [r3, #2]
 80098b0:	8afb      	ldrh	r3, [r7, #22]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	f63f af70 	bhi.w	8009798 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	791b      	ldrb	r3, [r3, #4]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	bf28      	it	cs
 80098c0:	2302      	movcs	r3, #2
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d201      	bcs.n	80098d0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e001      	b.n	80098d4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80098d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3730      	adds	r7, #48	@ 0x30
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781a      	ldrb	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	785a      	ldrb	r2, [r3, #1]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	789a      	ldrb	r2, [r3, #2]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	78da      	ldrb	r2, [r3, #3]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	791a      	ldrb	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	795a      	ldrb	r2, [r3, #5]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	799a      	ldrb	r2, [r3, #6]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	79da      	ldrb	r2, [r3, #7]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	7a1a      	ldrb	r2, [r3, #8]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	721a      	strb	r2, [r3, #8]
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800993a:	b480      	push	{r7}
 800993c:	b087      	sub	sp, #28
 800993e:	af00      	add	r7, sp, #0
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	785a      	ldrb	r2, [r3, #1]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	789a      	ldrb	r2, [r3, #2]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	78da      	ldrb	r2, [r3, #3]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	3304      	adds	r3, #4
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	461a      	mov	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3305      	adds	r3, #5
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	b29b      	uxth	r3, r3
 800997c:	4313      	orrs	r3, r2
 800997e:	b29a      	uxth	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	799a      	ldrb	r2, [r3, #6]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	889b      	ldrh	r3, [r3, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d009      	beq.n	80099a8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800999c:	d804      	bhi.n	80099a8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80099a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a6:	d901      	bls.n	80099ac <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80099a8:	2303      	movs	r3, #3
 80099aa:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d136      	bne.n	8009a24 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	78db      	ldrb	r3, [r3, #3]
 80099ba:	f003 0303 	and.w	r3, r3, #3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d108      	bne.n	80099d4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	889b      	ldrh	r3, [r3, #4]
 80099c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ca:	f240 8097 	bls.w	8009afc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099ce:	2303      	movs	r3, #3
 80099d0:	75fb      	strb	r3, [r7, #23]
 80099d2:	e093      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	78db      	ldrb	r3, [r3, #3]
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d107      	bne.n	80099f0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	889b      	ldrh	r3, [r3, #4]
 80099e4:	2b40      	cmp	r3, #64	@ 0x40
 80099e6:	f240 8089 	bls.w	8009afc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099ea:	2303      	movs	r3, #3
 80099ec:	75fb      	strb	r3, [r7, #23]
 80099ee:	e085      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	78db      	ldrb	r3, [r3, #3]
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d005      	beq.n	8009a08 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	78db      	ldrb	r3, [r3, #3]
 8009a00:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d10a      	bne.n	8009a1e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	799b      	ldrb	r3, [r3, #6]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <USBH_ParseEPDesc+0xde>
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	799b      	ldrb	r3, [r3, #6]
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d970      	bls.n	8009afa <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a1c:	e06d      	b.n	8009afa <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	75fb      	strb	r3, [r7, #23]
 8009a22:	e06b      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d13c      	bne.n	8009aa8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	78db      	ldrb	r3, [r3, #3]
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d005      	beq.n	8009a46 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	78db      	ldrb	r3, [r3, #3]
 8009a3e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d106      	bne.n	8009a54 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	889b      	ldrh	r3, [r3, #4]
 8009a4a:	2b40      	cmp	r3, #64	@ 0x40
 8009a4c:	d956      	bls.n	8009afc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a52:	e053      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	78db      	ldrb	r3, [r3, #3]
 8009a58:	f003 0303 	and.w	r3, r3, #3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d10e      	bne.n	8009a7e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	799b      	ldrb	r3, [r3, #6]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d007      	beq.n	8009a78 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009a6c:	2b10      	cmp	r3, #16
 8009a6e:	d803      	bhi.n	8009a78 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009a74:	2b40      	cmp	r3, #64	@ 0x40
 8009a76:	d941      	bls.n	8009afc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	75fb      	strb	r3, [r7, #23]
 8009a7c:	e03e      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	78db      	ldrb	r3, [r3, #3]
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	d10b      	bne.n	8009aa2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	799b      	ldrb	r3, [r3, #6]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d004      	beq.n	8009a9c <USBH_ParseEPDesc+0x162>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	889b      	ldrh	r3, [r3, #4]
 8009a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a9a:	d32f      	bcc.n	8009afc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	75fb      	strb	r3, [r7, #23]
 8009aa0:	e02c      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	75fb      	strb	r3, [r7, #23]
 8009aa6:	e029      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d120      	bne.n	8009af4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	78db      	ldrb	r3, [r3, #3]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	889b      	ldrh	r3, [r3, #4]
 8009ac2:	2b08      	cmp	r3, #8
 8009ac4:	d01a      	beq.n	8009afc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	75fb      	strb	r3, [r7, #23]
 8009aca:	e017      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	78db      	ldrb	r3, [r3, #3]
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d10a      	bne.n	8009aee <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	799b      	ldrb	r3, [r3, #6]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <USBH_ParseEPDesc+0x1ae>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	889b      	ldrh	r3, [r3, #4]
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d909      	bls.n	8009afc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	75fb      	strb	r3, [r7, #23]
 8009aec:	e006      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009aee:	2303      	movs	r3, #3
 8009af0:	75fb      	strb	r3, [r7, #23]
 8009af2:	e003      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009af4:	2303      	movs	r3, #3
 8009af6:	75fb      	strb	r3, [r7, #23]
 8009af8:	e000      	b.n	8009afc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009afa:	bf00      	nop
  }

  return status;
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b087      	sub	sp, #28
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d120      	bne.n	8009b64 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	1e9a      	subs	r2, r3, #2
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	bf28      	it	cs
 8009b2e:	4613      	movcs	r3, r2
 8009b30:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3302      	adds	r3, #2
 8009b36:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	82fb      	strh	r3, [r7, #22]
 8009b3c:	e00b      	b.n	8009b56 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b3e:	8afb      	ldrh	r3, [r7, #22]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	781a      	ldrb	r2, [r3, #0]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009b50:	8afb      	ldrh	r3, [r7, #22]
 8009b52:	3302      	adds	r3, #2
 8009b54:	82fb      	strh	r3, [r7, #22]
 8009b56:	8afa      	ldrh	r2, [r7, #22]
 8009b58:	8abb      	ldrh	r3, [r7, #20]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d3ef      	bcc.n	8009b3e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
  }
}
 8009b64:	bf00      	nop
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	7812      	ldrb	r2, [r2, #0]
 8009b82:	4413      	add	r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b96:	68fb      	ldr	r3, [r7, #12]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	789b      	ldrb	r3, [r3, #2]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d002      	beq.n	8009bc4 <USBH_CtlReq+0x20>
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d00f      	beq.n	8009be2 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8009bc2:	e027      	b.n	8009c14 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	88fa      	ldrh	r2, [r7, #6]
 8009bce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	75fb      	strb	r3, [r7, #23]
      break;
 8009be0:	e018      	b.n	8009c14 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 f81c 	bl	8009c20 <USBH_HandleControl>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <USBH_CtlReq+0x54>
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d106      	bne.n	8009c06 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	761a      	strb	r2, [r3, #24]
      break;
 8009c04:	e005      	b.n	8009c12 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d102      	bne.n	8009c12 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	709a      	strb	r2, [r3, #2]
      break;
 8009c12:	bf00      	nop
  }
  return status;
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	7e1b      	ldrb	r3, [r3, #24]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	2b0a      	cmp	r3, #10
 8009c38:	f200 8157 	bhi.w	8009eea <USBH_HandleControl+0x2ca>
 8009c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c44 <USBH_HandleControl+0x24>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c71 	.word	0x08009c71
 8009c48:	08009c8b 	.word	0x08009c8b
 8009c4c:	08009cf5 	.word	0x08009cf5
 8009c50:	08009d1b 	.word	0x08009d1b
 8009c54:	08009d55 	.word	0x08009d55
 8009c58:	08009d7f 	.word	0x08009d7f
 8009c5c:	08009dd1 	.word	0x08009dd1
 8009c60:	08009df3 	.word	0x08009df3
 8009c64:	08009e2f 	.word	0x08009e2f
 8009c68:	08009e55 	.word	0x08009e55
 8009c6c:	08009e93 	.word	0x08009e93
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f103 0110 	add.w	r1, r3, #16
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	795b      	ldrb	r3, [r3, #5]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f945 	bl	8009f0c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2202      	movs	r2, #2
 8009c86:	761a      	strb	r2, [r3, #24]
      break;
 8009c88:	e13a      	b.n	8009f00 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	795b      	ldrb	r3, [r3, #5]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fcc7 	bl	800a624 <USBH_LL_GetURBState>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d11e      	bne.n	8009cde <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7c1b      	ldrb	r3, [r3, #16]
 8009ca4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ca8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	8adb      	ldrh	r3, [r3, #22]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009cb2:	7b7b      	ldrb	r3, [r7, #13]
 8009cb4:	2b80      	cmp	r3, #128	@ 0x80
 8009cb6:	d103      	bne.n	8009cc0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2203      	movs	r2, #3
 8009cbc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009cbe:	e116      	b.n	8009eee <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2205      	movs	r2, #5
 8009cc4:	761a      	strb	r2, [r3, #24]
      break;
 8009cc6:	e112      	b.n	8009eee <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8009cc8:	7b7b      	ldrb	r3, [r7, #13]
 8009cca:	2b80      	cmp	r3, #128	@ 0x80
 8009ccc:	d103      	bne.n	8009cd6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2209      	movs	r2, #9
 8009cd2:	761a      	strb	r2, [r3, #24]
      break;
 8009cd4:	e10b      	b.n	8009eee <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2207      	movs	r2, #7
 8009cda:	761a      	strb	r2, [r3, #24]
      break;
 8009cdc:	e107      	b.n	8009eee <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d003      	beq.n	8009cec <USBH_HandleControl+0xcc>
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	f040 8101 	bne.w	8009eee <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	220b      	movs	r2, #11
 8009cf0:	761a      	strb	r2, [r3, #24]
      break;
 8009cf2:	e0fc      	b.n	8009eee <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6899      	ldr	r1, [r3, #8]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	899a      	ldrh	r2, [r3, #12]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	791b      	ldrb	r3, [r3, #4]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f93c 	bl	8009f8a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2204      	movs	r2, #4
 8009d16:	761a      	strb	r2, [r3, #24]
      break;
 8009d18:	e0f2      	b.n	8009f00 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	791b      	ldrb	r3, [r3, #4]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fc7f 	bl	800a624 <USBH_LL_GetURBState>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d103      	bne.n	8009d38 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2209      	movs	r2, #9
 8009d34:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009d36:	e0dc      	b.n	8009ef2 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	2b05      	cmp	r3, #5
 8009d3c:	d102      	bne.n	8009d44 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	73fb      	strb	r3, [r7, #15]
      break;
 8009d42:	e0d6      	b.n	8009ef2 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	f040 80d3 	bne.w	8009ef2 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	220b      	movs	r2, #11
 8009d50:	761a      	strb	r2, [r3, #24]
      break;
 8009d52:	e0ce      	b.n	8009ef2 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6899      	ldr	r1, [r3, #8]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	899a      	ldrh	r2, [r3, #12]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	795b      	ldrb	r3, [r3, #5]
 8009d60:	2001      	movs	r0, #1
 8009d62:	9000      	str	r0, [sp, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f8eb 	bl	8009f40 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2206      	movs	r2, #6
 8009d7a:	761a      	strb	r2, [r3, #24]
      break;
 8009d7c:	e0c0      	b.n	8009f00 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	795b      	ldrb	r3, [r3, #5]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fc4d 	bl	800a624 <USBH_LL_GetURBState>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d103      	bne.n	8009d9c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2207      	movs	r2, #7
 8009d98:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009d9a:	e0ac      	b.n	8009ef6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	2b05      	cmp	r3, #5
 8009da0:	d105      	bne.n	8009dae <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	220c      	movs	r2, #12
 8009da6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009da8:	2303      	movs	r3, #3
 8009daa:	73fb      	strb	r3, [r7, #15]
      break;
 8009dac:	e0a3      	b.n	8009ef6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d103      	bne.n	8009dbc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2205      	movs	r2, #5
 8009db8:	761a      	strb	r2, [r3, #24]
      break;
 8009dba:	e09c      	b.n	8009ef6 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	f040 8099 	bne.w	8009ef6 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	220b      	movs	r2, #11
 8009dc8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009dca:	2302      	movs	r3, #2
 8009dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dce:	e092      	b.n	8009ef6 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	791b      	ldrb	r3, [r3, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f8d6 	bl	8009f8a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2208      	movs	r2, #8
 8009dee:	761a      	strb	r2, [r3, #24]

      break;
 8009df0:	e086      	b.n	8009f00 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	791b      	ldrb	r3, [r3, #4]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fc13 	bl	800a624 <USBH_LL_GetURBState>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d105      	bne.n	8009e14 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	220d      	movs	r2, #13
 8009e0c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009e12:	e072      	b.n	8009efa <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d103      	bne.n	8009e22 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	220b      	movs	r2, #11
 8009e1e:	761a      	strb	r2, [r3, #24]
      break;
 8009e20:	e06b      	b.n	8009efa <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b05      	cmp	r3, #5
 8009e26:	d168      	bne.n	8009efa <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2c:	e065      	b.n	8009efa <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	795b      	ldrb	r3, [r3, #5]
 8009e32:	2201      	movs	r2, #1
 8009e34:	9200      	str	r2, [sp, #0]
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f880 	bl	8009f40 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	220a      	movs	r2, #10
 8009e50:	761a      	strb	r2, [r3, #24]
      break;
 8009e52:	e055      	b.n	8009f00 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	795b      	ldrb	r3, [r3, #5]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fbe2 	bl	800a624 <USBH_LL_GetURBState>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d105      	bne.n	8009e76 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	220d      	movs	r2, #13
 8009e72:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009e74:	e043      	b.n	8009efe <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d103      	bne.n	8009e84 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2209      	movs	r2, #9
 8009e80:	761a      	strb	r2, [r3, #24]
      break;
 8009e82:	e03c      	b.n	8009efe <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	d139      	bne.n	8009efe <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	220b      	movs	r2, #11
 8009e8e:	761a      	strb	r2, [r3, #24]
      break;
 8009e90:	e035      	b.n	8009efe <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	7e5b      	ldrb	r3, [r3, #25]
 8009e96:	3301      	adds	r3, #1
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	765a      	strb	r2, [r3, #25]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	7e5b      	ldrb	r3, [r3, #25]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d806      	bhi.n	8009eb4 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009eb2:	e025      	b.n	8009f00 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009eba:	2106      	movs	r1, #6
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	795b      	ldrb	r3, [r3, #5]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f90d 	bl	800a0ec <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	791b      	ldrb	r3, [r3, #4]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f907 	bl	800a0ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ee8:	e00a      	b.n	8009f00 <USBH_HandleControl+0x2e0>

    default:
      break;
 8009eea:	bf00      	nop
 8009eec:	e008      	b.n	8009f00 <USBH_HandleControl+0x2e0>
      break;
 8009eee:	bf00      	nop
 8009ef0:	e006      	b.n	8009f00 <USBH_HandleControl+0x2e0>
      break;
 8009ef2:	bf00      	nop
 8009ef4:	e004      	b.n	8009f00 <USBH_HandleControl+0x2e0>
      break;
 8009ef6:	bf00      	nop
 8009ef8:	e002      	b.n	8009f00 <USBH_HandleControl+0x2e0>
      break;
 8009efa:	bf00      	nop
 8009efc:	e000      	b.n	8009f00 <USBH_HandleControl+0x2e0>
      break;
 8009efe:	bf00      	nop
  }

  return status;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop

08009f0c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af04      	add	r7, sp, #16
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	4613      	mov	r3, r2
 8009f18:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f1a:	79f9      	ldrb	r1, [r7, #7]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9303      	str	r3, [sp, #12]
 8009f20:	2308      	movs	r3, #8
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	2200      	movs	r2, #0
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 fb46 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af04      	add	r7, sp, #16
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	460b      	mov	r3, r1
 8009f50:	80fb      	strh	r3, [r7, #6]
 8009f52:	4613      	mov	r3, r2
 8009f54:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f64:	7979      	ldrb	r1, [r7, #5]
 8009f66:	7e3b      	ldrb	r3, [r7, #24]
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	9302      	str	r3, [sp, #8]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	2301      	movs	r3, #1
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	2300      	movs	r3, #0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fb21 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b088      	sub	sp, #32
 8009f8e:	af04      	add	r7, sp, #16
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	4611      	mov	r1, r2
 8009f96:	461a      	mov	r2, r3
 8009f98:	460b      	mov	r3, r1
 8009f9a:	80fb      	strh	r3, [r7, #6]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fa0:	7979      	ldrb	r1, [r7, #5]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	9303      	str	r3, [sp, #12]
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	9302      	str	r3, [sp, #8]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	2301      	movs	r3, #1
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f000 fb03 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009fbc:	2300      	movs	r3, #0

}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b088      	sub	sp, #32
 8009fca:	af04      	add	r7, sp, #16
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	80fb      	strh	r3, [r7, #6]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fea:	7979      	ldrb	r1, [r7, #5]
 8009fec:	7e3b      	ldrb	r3, [r7, #24]
 8009fee:	9303      	str	r3, [sp, #12]
 8009ff0:	88fb      	ldrh	r3, [r7, #6]
 8009ff2:	9302      	str	r3, [sp, #8]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	2200      	movs	r2, #0
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 fade 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af04      	add	r7, sp, #16
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4611      	mov	r1, r2
 800a01c:	461a      	mov	r2, r3
 800a01e:	460b      	mov	r3, r1
 800a020:	80fb      	strh	r3, [r7, #6]
 800a022:	4613      	mov	r3, r2
 800a024:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a026:	7979      	ldrb	r1, [r7, #5]
 800a028:	2300      	movs	r3, #0
 800a02a:	9303      	str	r3, [sp, #12]
 800a02c:	88fb      	ldrh	r3, [r7, #6]
 800a02e:	9302      	str	r3, [sp, #8]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	2301      	movs	r3, #1
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2302      	movs	r3, #2
 800a03a:	2201      	movs	r2, #1
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 fac0 	bl	800a5c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af04      	add	r7, sp, #16
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	4608      	mov	r0, r1
 800a056:	4611      	mov	r1, r2
 800a058:	461a      	mov	r2, r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	70fb      	strb	r3, [r7, #3]
 800a05e:	460b      	mov	r3, r1
 800a060:	70bb      	strb	r3, [r7, #2]
 800a062:	4613      	mov	r3, r2
 800a064:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a066:	7878      	ldrb	r0, [r7, #1]
 800a068:	78ba      	ldrb	r2, [r7, #2]
 800a06a:	78f9      	ldrb	r1, [r7, #3]
 800a06c:	8b3b      	ldrh	r3, [r7, #24]
 800a06e:	9302      	str	r3, [sp, #8]
 800a070:	7d3b      	ldrb	r3, [r7, #20]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	7c3b      	ldrb	r3, [r7, #16]
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	4603      	mov	r3, r0
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa53 	bl	800a526 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa72 	bl	800a584 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f836 	bl	800a128 <USBH_GetFreePipe>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a0c0:	89fb      	ldrh	r3, [r7, #14]
 800a0c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d00a      	beq.n	800a0e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	89fb      	ldrh	r3, [r7, #14]
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	33e0      	adds	r3, #224	@ 0xe0
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	440b      	add	r3, r1
 800a0de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
 800a0e2:	b2db      	uxtb	r3, r3
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	2b0f      	cmp	r3, #15
 800a0fc:	d80d      	bhi.n	800a11a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	33e0      	adds	r3, #224	@ 0xe0
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	33e0      	adds	r3, #224	@ 0xe0
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	440b      	add	r3, r1
 800a118:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
 800a138:	e00f      	b.n	800a15a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	33e0      	adds	r3, #224	@ 0xe0
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d102      	bne.n	800a154 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	b29b      	uxth	r3, r3
 800a152:	e007      	b.n	800a164 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	3301      	adds	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	2b0f      	cmp	r3, #15
 800a15e:	d9ec      	bls.n	800a13a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a160:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a174:	2201      	movs	r2, #1
 800a176:	490e      	ldr	r1, [pc, #56]	@ (800a1b0 <MX_USB_HOST_Init+0x40>)
 800a178:	480e      	ldr	r0, [pc, #56]	@ (800a1b4 <MX_USB_HOST_Init+0x44>)
 800a17a:	f7fe fb0f 	bl	800879c <USBH_Init>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a184:	f7f6 fe94 	bl	8000eb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a188:	490b      	ldr	r1, [pc, #44]	@ (800a1b8 <MX_USB_HOST_Init+0x48>)
 800a18a:	480a      	ldr	r0, [pc, #40]	@ (800a1b4 <MX_USB_HOST_Init+0x44>)
 800a18c:	f7fe fbb1 	bl	80088f2 <USBH_RegisterClass>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a196:	f7f6 fe8b 	bl	8000eb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a19a:	4806      	ldr	r0, [pc, #24]	@ (800a1b4 <MX_USB_HOST_Init+0x44>)
 800a19c:	f7fe fc35 	bl	8008a0a <USBH_Start>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a1a6:	f7f6 fe83 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a1aa:	bf00      	nop
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0800a1d1 	.word	0x0800a1d1
 800a1b4:	20000288 	.word	0x20000288
 800a1b8:	2000000c 	.word	0x2000000c

0800a1bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a1c0:	4802      	ldr	r0, [pc, #8]	@ (800a1cc <MX_USB_HOST_Process+0x10>)
 800a1c2:	f7fe fc33 	bl	8008a2c <USBH_Process>
}
 800a1c6:	bf00      	nop
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000288 	.word	0x20000288

0800a1d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d819      	bhi.n	800a218 <USBH_UserProcess+0x48>
 800a1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <USBH_UserProcess+0x1c>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a219 	.word	0x0800a219
 800a1f0:	0800a209 	.word	0x0800a209
 800a1f4:	0800a219 	.word	0x0800a219
 800a1f8:	0800a211 	.word	0x0800a211
 800a1fc:	0800a201 	.word	0x0800a201
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a200:	4b09      	ldr	r3, [pc, #36]	@ (800a228 <USBH_UserProcess+0x58>)
 800a202:	2203      	movs	r2, #3
 800a204:	701a      	strb	r2, [r3, #0]
  break;
 800a206:	e008      	b.n	800a21a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a208:	4b07      	ldr	r3, [pc, #28]	@ (800a228 <USBH_UserProcess+0x58>)
 800a20a:	2202      	movs	r2, #2
 800a20c:	701a      	strb	r2, [r3, #0]
  break;
 800a20e:	e004      	b.n	800a21a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a210:	4b05      	ldr	r3, [pc, #20]	@ (800a228 <USBH_UserProcess+0x58>)
 800a212:	2201      	movs	r2, #1
 800a214:	701a      	strb	r2, [r3, #0]
  break;
 800a216:	e000      	b.n	800a21a <USBH_UserProcess+0x4a>

  default:
  break;
 800a218:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	20000660 	.word	0x20000660

0800a22c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08a      	sub	sp, #40	@ 0x28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a234:	f107 0314 	add.w	r3, r7, #20
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	605a      	str	r2, [r3, #4]
 800a23e:	609a      	str	r2, [r3, #8]
 800a240:	60da      	str	r2, [r3, #12]
 800a242:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a24c:	d147      	bne.n	800a2de <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a24e:	2300      	movs	r3, #0
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	4b25      	ldr	r3, [pc, #148]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a256:	4a24      	ldr	r2, [pc, #144]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a258:	f043 0301 	orr.w	r3, r3, #1
 800a25c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a25e:	4b22      	ldr	r3, [pc, #136]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a26a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a26e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a270:	2300      	movs	r3, #0
 800a272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a278:	f107 0314 	add.w	r3, r7, #20
 800a27c:	4619      	mov	r1, r3
 800a27e:	481b      	ldr	r0, [pc, #108]	@ (800a2ec <HAL_HCD_MspInit+0xc0>)
 800a280:	f7f7 ffd2 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a284:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a28a:	2302      	movs	r3, #2
 800a28c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a292:	2300      	movs	r3, #0
 800a294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a296:	230a      	movs	r3, #10
 800a298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a29a:	f107 0314 	add.w	r3, r7, #20
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4812      	ldr	r0, [pc, #72]	@ (800a2ec <HAL_HCD_MspInit+0xc0>)
 800a2a2:	f7f7 ffc1 	bl	8002228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a2a6:	4b10      	ldr	r3, [pc, #64]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a2a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2aa:	4a0f      	ldr	r2, [pc, #60]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a2ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b0:	6353      	str	r3, [r2, #52]	@ 0x34
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ba:	4a0b      	ldr	r2, [pc, #44]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a2bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2c0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a2c2:	4b09      	ldr	r3, [pc, #36]	@ (800a2e8 <HAL_HCD_MspInit+0xbc>)
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	2043      	movs	r0, #67	@ 0x43
 800a2d4:	f7f7 fc87 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2d8:	2043      	movs	r0, #67	@ 0x43
 800a2da:	f7f7 fca0 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2de:	bf00      	nop
 800a2e0:	3728      	adds	r7, #40	@ 0x28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	40023800 	.word	0x40023800
 800a2ec:	40020000 	.word	0x40020000

0800a2f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe ff6d 	bl	80091de <USBH_LL_IncTimer>
}
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe ffa9 	bl	8009272 <USBH_LL_Connect>
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe ffb2 	bl	80092a0 <USBH_LL_Disconnect>
}
 800a33c:	bf00      	nop
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
 800a350:	4613      	mov	r3, r2
 800a352:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe ff5f 	bl	8009232 <USBH_LL_PortEnabled>
}
 800a374:	bf00      	nop
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe ff5f 	bl	800924e <USBH_LL_PortDisabled>
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d12a      	bne.n	800a400 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a3aa:	4a18      	ldr	r2, [pc, #96]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a15      	ldr	r2, [pc, #84]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3b6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a3ba:	4b14      	ldr	r3, [pc, #80]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a3c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a3c2:	4b12      	ldr	r3, [pc, #72]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3c4:	2208      	movs	r2, #8
 800a3c6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a3c8:	4b10      	ldr	r3, [pc, #64]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3da:	4b0c      	ldr	r3, [pc, #48]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a3e0:	480a      	ldr	r0, [pc, #40]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3e2:	f7f8 f8d6 	bl	8002592 <HAL_HCD_Init>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a3ec:	f7f6 fd60 	bl	8000eb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a3f0:	4806      	ldr	r0, [pc, #24]	@ (800a40c <USBH_LL_Init+0x74>)
 800a3f2:	f7f8 fd37 	bl	8002e64 <HAL_HCD_GetCurrentFrame>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fe fee0 	bl	80091c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20000664 	.word	0x20000664

0800a410 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a426:	4618      	mov	r0, r3
 800a428:	f7f8 fca4 	bl	8002d74 <HAL_HCD_Start>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	4618      	mov	r0, r3
 800a434:	f000 f95e 	bl	800a6f4 <USBH_Get_USB_Status>
 800a438:	4603      	mov	r3, r0
 800a43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f8 fcac 	bl	8002dba <HAL_HCD_Stop>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f943 	bl	800a6f4 <USBH_Get_USB_Status>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a484:	2301      	movs	r3, #1
 800a486:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a48e:	4618      	mov	r0, r3
 800a490:	f7f8 fcf6 	bl	8002e80 <HAL_HCD_GetCurrentSpeed>
 800a494:	4603      	mov	r3, r0
 800a496:	2b02      	cmp	r3, #2
 800a498:	d00c      	beq.n	800a4b4 <USBH_LL_GetSpeed+0x38>
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d80d      	bhi.n	800a4ba <USBH_LL_GetSpeed+0x3e>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d002      	beq.n	800a4a8 <USBH_LL_GetSpeed+0x2c>
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d003      	beq.n	800a4ae <USBH_LL_GetSpeed+0x32>
 800a4a6:	e008      	b.n	800a4ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ac:	e008      	b.n	800a4c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b2:	e005      	b.n	800a4c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b8:	e002      	b.n	800a4c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4be:	bf00      	nop
  }
  return  speed;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f8 fc87 	bl	8002df4 <HAL_HCD_ResetPort>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f901 	bl	800a6f4 <USBH_Get_USB_Status>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7f8 fc8f 	bl	8002e3a <HAL_HCD_HC_GetXferCount>
 800a51c:	4603      	mov	r3, r0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a526:	b590      	push	{r4, r7, lr}
 800a528:	b089      	sub	sp, #36	@ 0x24
 800a52a:	af04      	add	r7, sp, #16
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	4608      	mov	r0, r1
 800a530:	4611      	mov	r1, r2
 800a532:	461a      	mov	r2, r3
 800a534:	4603      	mov	r3, r0
 800a536:	70fb      	strb	r3, [r7, #3]
 800a538:	460b      	mov	r3, r1
 800a53a:	70bb      	strb	r3, [r7, #2]
 800a53c:	4613      	mov	r3, r2
 800a53e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a54e:	787c      	ldrb	r4, [r7, #1]
 800a550:	78ba      	ldrb	r2, [r7, #2]
 800a552:	78f9      	ldrb	r1, [r7, #3]
 800a554:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a556:	9302      	str	r3, [sp, #8]
 800a558:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	4623      	mov	r3, r4
 800a566:	f7f8 f87b 	bl	8002660 <HAL_HCD_HC_Init>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f8bf 	bl	800a6f4 <USBH_Get_USB_Status>
 800a576:	4603      	mov	r3, r0
 800a578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	bd90      	pop	{r4, r7, pc}

0800a584 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a59e:	78fa      	ldrb	r2, [r7, #3]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f8 f914 	bl	80027d0 <HAL_HCD_HC_Halt>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 f8a0 	bl	800a6f4 <USBH_Get_USB_Status>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a5c2:	b590      	push	{r4, r7, lr}
 800a5c4:	b089      	sub	sp, #36	@ 0x24
 800a5c6:	af04      	add	r7, sp, #16
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	70fb      	strb	r3, [r7, #3]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70bb      	strb	r3, [r7, #2]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a5ea:	787c      	ldrb	r4, [r7, #1]
 800a5ec:	78ba      	ldrb	r2, [r7, #2]
 800a5ee:	78f9      	ldrb	r1, [r7, #3]
 800a5f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a5f4:	9303      	str	r3, [sp, #12]
 800a5f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5f8:	9302      	str	r3, [sp, #8]
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	4623      	mov	r3, r4
 800a606:	f7f8 f907 	bl	8002818 <HAL_HCD_HC_SubmitRequest>
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f86f 	bl	800a6f4 <USBH_Get_USB_Status>
 800a616:	4603      	mov	r3, r0
 800a618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	bd90      	pop	{r4, r7, pc}

0800a624 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f8 fbe8 	bl	8002e10 <HAL_HCD_HC_GetURBState>
 800a640:	4603      	mov	r3, r0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d103      	bne.n	800a668 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	4618      	mov	r0, r3
 800a664:	f000 f872 	bl	800a74c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a668:	20c8      	movs	r0, #200	@ 0xc8
 800a66a:	f7f6 ff5b 	bl	8001524 <HAL_Delay>
  return USBH_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
 800a684:	4613      	mov	r3, r2
 800a686:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a68e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	4613      	mov	r3, r2
 800a696:	011b      	lsls	r3, r3, #4
 800a698:	1a9b      	subs	r3, r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	440b      	add	r3, r1
 800a69e:	3317      	adds	r3, #23
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a6a6:	78fa      	ldrb	r2, [r7, #3]
 800a6a8:	68f9      	ldr	r1, [r7, #12]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	1a9b      	subs	r3, r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	440b      	add	r3, r1
 800a6b4:	333c      	adds	r3, #60	@ 0x3c
 800a6b6:	78ba      	ldrb	r2, [r7, #2]
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	e009      	b.n	800a6d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a6bc:	78fa      	ldrb	r2, [r7, #3]
 800a6be:	68f9      	ldr	r1, [r7, #12]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	011b      	lsls	r3, r3, #4
 800a6c4:	1a9b      	subs	r3, r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	333d      	adds	r3, #61	@ 0x3d
 800a6cc:	78ba      	ldrb	r2, [r7, #2]
 800a6ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7f6 ff1c 	bl	8001524 <HAL_Delay>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a702:	79fb      	ldrb	r3, [r7, #7]
 800a704:	2b03      	cmp	r3, #3
 800a706:	d817      	bhi.n	800a738 <USBH_Get_USB_Status+0x44>
 800a708:	a201      	add	r2, pc, #4	@ (adr r2, 800a710 <USBH_Get_USB_Status+0x1c>)
 800a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70e:	bf00      	nop
 800a710:	0800a721 	.word	0x0800a721
 800a714:	0800a727 	.word	0x0800a727
 800a718:	0800a72d 	.word	0x0800a72d
 800a71c:	0800a733 	.word	0x0800a733
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
    break;
 800a724:	e00b      	b.n	800a73e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a726:	2302      	movs	r3, #2
 800a728:	73fb      	strb	r3, [r7, #15]
    break;
 800a72a:	e008      	b.n	800a73e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a72c:	2301      	movs	r3, #1
 800a72e:	73fb      	strb	r3, [r7, #15]
    break;
 800a730:	e005      	b.n	800a73e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a732:	2302      	movs	r3, #2
 800a734:	73fb      	strb	r3, [r7, #15]
    break;
 800a736:	e002      	b.n	800a73e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a738:	2302      	movs	r3, #2
 800a73a:	73fb      	strb	r3, [r7, #15]
    break;
 800a73c:	bf00      	nop
  }
  return usb_status;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a75a:	79fb      	ldrb	r3, [r7, #7]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a760:	2300      	movs	r3, #0
 800a762:	73fb      	strb	r3, [r7, #15]
 800a764:	e001      	b.n	800a76a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a766:	2301      	movs	r3, #1
 800a768:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	461a      	mov	r2, r3
 800a76e:	2101      	movs	r1, #1
 800a770:	4803      	ldr	r0, [pc, #12]	@ (800a780 <MX_DriverVbusFS+0x34>)
 800a772:	f7f7 fef5 	bl	8002560 <HAL_GPIO_WritePin>
}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	40020800 	.word	0x40020800

0800a784 <malloc>:
 800a784:	4b02      	ldr	r3, [pc, #8]	@ (800a790 <malloc+0xc>)
 800a786:	4601      	mov	r1, r0
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	f000 b82d 	b.w	800a7e8 <_malloc_r>
 800a78e:	bf00      	nop
 800a790:	2000002c 	.word	0x2000002c

0800a794 <free>:
 800a794:	4b02      	ldr	r3, [pc, #8]	@ (800a7a0 <free+0xc>)
 800a796:	4601      	mov	r1, r0
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f000 b8f5 	b.w	800a988 <_free_r>
 800a79e:	bf00      	nop
 800a7a0:	2000002c 	.word	0x2000002c

0800a7a4 <sbrk_aligned>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	4e0f      	ldr	r6, [pc, #60]	@ (800a7e4 <sbrk_aligned+0x40>)
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	6831      	ldr	r1, [r6, #0]
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	b911      	cbnz	r1, 800a7b6 <sbrk_aligned+0x12>
 800a7b0:	f000 f8ae 	bl	800a910 <_sbrk_r>
 800a7b4:	6030      	str	r0, [r6, #0]
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f000 f8a9 	bl	800a910 <_sbrk_r>
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	d103      	bne.n	800a7ca <sbrk_aligned+0x26>
 800a7c2:	f04f 34ff 	mov.w	r4, #4294967295
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ca:	1cc4      	adds	r4, r0, #3
 800a7cc:	f024 0403 	bic.w	r4, r4, #3
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d0f8      	beq.n	800a7c6 <sbrk_aligned+0x22>
 800a7d4:	1a21      	subs	r1, r4, r0
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 f89a 	bl	800a910 <_sbrk_r>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d1f2      	bne.n	800a7c6 <sbrk_aligned+0x22>
 800a7e0:	e7ef      	b.n	800a7c2 <sbrk_aligned+0x1e>
 800a7e2:	bf00      	nop
 800a7e4:	20000a44 	.word	0x20000a44

0800a7e8 <_malloc_r>:
 800a7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	1ccd      	adds	r5, r1, #3
 800a7ee:	f025 0503 	bic.w	r5, r5, #3
 800a7f2:	3508      	adds	r5, #8
 800a7f4:	2d0c      	cmp	r5, #12
 800a7f6:	bf38      	it	cc
 800a7f8:	250c      	movcc	r5, #12
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	db01      	blt.n	800a804 <_malloc_r+0x1c>
 800a800:	42a9      	cmp	r1, r5
 800a802:	d904      	bls.n	800a80e <_malloc_r+0x26>
 800a804:	230c      	movs	r3, #12
 800a806:	6033      	str	r3, [r6, #0]
 800a808:	2000      	movs	r0, #0
 800a80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8e4 <_malloc_r+0xfc>
 800a812:	f000 f869 	bl	800a8e8 <__malloc_lock>
 800a816:	f8d8 3000 	ldr.w	r3, [r8]
 800a81a:	461c      	mov	r4, r3
 800a81c:	bb44      	cbnz	r4, 800a870 <_malloc_r+0x88>
 800a81e:	4629      	mov	r1, r5
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff ffbf 	bl	800a7a4 <sbrk_aligned>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	4604      	mov	r4, r0
 800a82a:	d158      	bne.n	800a8de <_malloc_r+0xf6>
 800a82c:	f8d8 4000 	ldr.w	r4, [r8]
 800a830:	4627      	mov	r7, r4
 800a832:	2f00      	cmp	r7, #0
 800a834:	d143      	bne.n	800a8be <_malloc_r+0xd6>
 800a836:	2c00      	cmp	r4, #0
 800a838:	d04b      	beq.n	800a8d2 <_malloc_r+0xea>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	4639      	mov	r1, r7
 800a83e:	4630      	mov	r0, r6
 800a840:	eb04 0903 	add.w	r9, r4, r3
 800a844:	f000 f864 	bl	800a910 <_sbrk_r>
 800a848:	4581      	cmp	r9, r0
 800a84a:	d142      	bne.n	800a8d2 <_malloc_r+0xea>
 800a84c:	6821      	ldr	r1, [r4, #0]
 800a84e:	1a6d      	subs	r5, r5, r1
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f7ff ffa6 	bl	800a7a4 <sbrk_aligned>
 800a858:	3001      	adds	r0, #1
 800a85a:	d03a      	beq.n	800a8d2 <_malloc_r+0xea>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	442b      	add	r3, r5
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	f8d8 3000 	ldr.w	r3, [r8]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	bb62      	cbnz	r2, 800a8c4 <_malloc_r+0xdc>
 800a86a:	f8c8 7000 	str.w	r7, [r8]
 800a86e:	e00f      	b.n	800a890 <_malloc_r+0xa8>
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	1b52      	subs	r2, r2, r5
 800a874:	d420      	bmi.n	800a8b8 <_malloc_r+0xd0>
 800a876:	2a0b      	cmp	r2, #11
 800a878:	d917      	bls.n	800a8aa <_malloc_r+0xc2>
 800a87a:	1961      	adds	r1, r4, r5
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	6025      	str	r5, [r4, #0]
 800a880:	bf18      	it	ne
 800a882:	6059      	strne	r1, [r3, #4]
 800a884:	6863      	ldr	r3, [r4, #4]
 800a886:	bf08      	it	eq
 800a888:	f8c8 1000 	streq.w	r1, [r8]
 800a88c:	5162      	str	r2, [r4, r5]
 800a88e:	604b      	str	r3, [r1, #4]
 800a890:	4630      	mov	r0, r6
 800a892:	f000 f82f 	bl	800a8f4 <__malloc_unlock>
 800a896:	f104 000b 	add.w	r0, r4, #11
 800a89a:	1d23      	adds	r3, r4, #4
 800a89c:	f020 0007 	bic.w	r0, r0, #7
 800a8a0:	1ac2      	subs	r2, r0, r3
 800a8a2:	bf1c      	itt	ne
 800a8a4:	1a1b      	subne	r3, r3, r0
 800a8a6:	50a3      	strne	r3, [r4, r2]
 800a8a8:	e7af      	b.n	800a80a <_malloc_r+0x22>
 800a8aa:	6862      	ldr	r2, [r4, #4]
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	bf0c      	ite	eq
 800a8b0:	f8c8 2000 	streq.w	r2, [r8]
 800a8b4:	605a      	strne	r2, [r3, #4]
 800a8b6:	e7eb      	b.n	800a890 <_malloc_r+0xa8>
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	6864      	ldr	r4, [r4, #4]
 800a8bc:	e7ae      	b.n	800a81c <_malloc_r+0x34>
 800a8be:	463c      	mov	r4, r7
 800a8c0:	687f      	ldr	r7, [r7, #4]
 800a8c2:	e7b6      	b.n	800a832 <_malloc_r+0x4a>
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d1fb      	bne.n	800a8c4 <_malloc_r+0xdc>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6053      	str	r3, [r2, #4]
 800a8d0:	e7de      	b.n	800a890 <_malloc_r+0xa8>
 800a8d2:	230c      	movs	r3, #12
 800a8d4:	6033      	str	r3, [r6, #0]
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f000 f80c 	bl	800a8f4 <__malloc_unlock>
 800a8dc:	e794      	b.n	800a808 <_malloc_r+0x20>
 800a8de:	6005      	str	r5, [r0, #0]
 800a8e0:	e7d6      	b.n	800a890 <_malloc_r+0xa8>
 800a8e2:	bf00      	nop
 800a8e4:	20000a48 	.word	0x20000a48

0800a8e8 <__malloc_lock>:
 800a8e8:	4801      	ldr	r0, [pc, #4]	@ (800a8f0 <__malloc_lock+0x8>)
 800a8ea:	f000 b84b 	b.w	800a984 <__retarget_lock_acquire_recursive>
 800a8ee:	bf00      	nop
 800a8f0:	20000b88 	.word	0x20000b88

0800a8f4 <__malloc_unlock>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	@ (800a8fc <__malloc_unlock+0x8>)
 800a8f6:	f000 b846 	b.w	800a986 <__retarget_lock_release_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	20000b88 	.word	0x20000b88

0800a900 <memset>:
 800a900:	4402      	add	r2, r0
 800a902:	4603      	mov	r3, r0
 800a904:	4293      	cmp	r3, r2
 800a906:	d100      	bne.n	800a90a <memset+0xa>
 800a908:	4770      	bx	lr
 800a90a:	f803 1b01 	strb.w	r1, [r3], #1
 800a90e:	e7f9      	b.n	800a904 <memset+0x4>

0800a910 <_sbrk_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d06      	ldr	r5, [pc, #24]	@ (800a92c <_sbrk_r+0x1c>)
 800a914:	2300      	movs	r3, #0
 800a916:	4604      	mov	r4, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	f7f6 fd1e 	bl	800135c <_sbrk>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_sbrk_r+0x1a>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	b103      	cbz	r3, 800a92a <_sbrk_r+0x1a>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	20000b84 	.word	0x20000b84

0800a930 <__errno>:
 800a930:	4b01      	ldr	r3, [pc, #4]	@ (800a938 <__errno+0x8>)
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	2000002c 	.word	0x2000002c

0800a93c <__libc_init_array>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4d0d      	ldr	r5, [pc, #52]	@ (800a974 <__libc_init_array+0x38>)
 800a940:	4c0d      	ldr	r4, [pc, #52]	@ (800a978 <__libc_init_array+0x3c>)
 800a942:	1b64      	subs	r4, r4, r5
 800a944:	10a4      	asrs	r4, r4, #2
 800a946:	2600      	movs	r6, #0
 800a948:	42a6      	cmp	r6, r4
 800a94a:	d109      	bne.n	800a960 <__libc_init_array+0x24>
 800a94c:	4d0b      	ldr	r5, [pc, #44]	@ (800a97c <__libc_init_array+0x40>)
 800a94e:	4c0c      	ldr	r4, [pc, #48]	@ (800a980 <__libc_init_array+0x44>)
 800a950:	f000 f864 	bl	800aa1c <_init>
 800a954:	1b64      	subs	r4, r4, r5
 800a956:	10a4      	asrs	r4, r4, #2
 800a958:	2600      	movs	r6, #0
 800a95a:	42a6      	cmp	r6, r4
 800a95c:	d105      	bne.n	800a96a <__libc_init_array+0x2e>
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	f855 3b04 	ldr.w	r3, [r5], #4
 800a964:	4798      	blx	r3
 800a966:	3601      	adds	r6, #1
 800a968:	e7ee      	b.n	800a948 <__libc_init_array+0xc>
 800a96a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a96e:	4798      	blx	r3
 800a970:	3601      	adds	r6, #1
 800a972:	e7f2      	b.n	800a95a <__libc_init_array+0x1e>
 800a974:	0800aa60 	.word	0x0800aa60
 800a978:	0800aa60 	.word	0x0800aa60
 800a97c:	0800aa60 	.word	0x0800aa60
 800a980:	0800aa64 	.word	0x0800aa64

0800a984 <__retarget_lock_acquire_recursive>:
 800a984:	4770      	bx	lr

0800a986 <__retarget_lock_release_recursive>:
 800a986:	4770      	bx	lr

0800a988 <_free_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4605      	mov	r5, r0
 800a98c:	2900      	cmp	r1, #0
 800a98e:	d041      	beq.n	800aa14 <_free_r+0x8c>
 800a990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a994:	1f0c      	subs	r4, r1, #4
 800a996:	2b00      	cmp	r3, #0
 800a998:	bfb8      	it	lt
 800a99a:	18e4      	addlt	r4, r4, r3
 800a99c:	f7ff ffa4 	bl	800a8e8 <__malloc_lock>
 800a9a0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa18 <_free_r+0x90>)
 800a9a2:	6813      	ldr	r3, [r2, #0]
 800a9a4:	b933      	cbnz	r3, 800a9b4 <_free_r+0x2c>
 800a9a6:	6063      	str	r3, [r4, #4]
 800a9a8:	6014      	str	r4, [r2, #0]
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b0:	f7ff bfa0 	b.w	800a8f4 <__malloc_unlock>
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d908      	bls.n	800a9ca <_free_r+0x42>
 800a9b8:	6820      	ldr	r0, [r4, #0]
 800a9ba:	1821      	adds	r1, r4, r0
 800a9bc:	428b      	cmp	r3, r1
 800a9be:	bf01      	itttt	eq
 800a9c0:	6819      	ldreq	r1, [r3, #0]
 800a9c2:	685b      	ldreq	r3, [r3, #4]
 800a9c4:	1809      	addeq	r1, r1, r0
 800a9c6:	6021      	streq	r1, [r4, #0]
 800a9c8:	e7ed      	b.n	800a9a6 <_free_r+0x1e>
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	b10b      	cbz	r3, 800a9d4 <_free_r+0x4c>
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d9fa      	bls.n	800a9ca <_free_r+0x42>
 800a9d4:	6811      	ldr	r1, [r2, #0]
 800a9d6:	1850      	adds	r0, r2, r1
 800a9d8:	42a0      	cmp	r0, r4
 800a9da:	d10b      	bne.n	800a9f4 <_free_r+0x6c>
 800a9dc:	6820      	ldr	r0, [r4, #0]
 800a9de:	4401      	add	r1, r0
 800a9e0:	1850      	adds	r0, r2, r1
 800a9e2:	4283      	cmp	r3, r0
 800a9e4:	6011      	str	r1, [r2, #0]
 800a9e6:	d1e0      	bne.n	800a9aa <_free_r+0x22>
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	6053      	str	r3, [r2, #4]
 800a9ee:	4408      	add	r0, r1
 800a9f0:	6010      	str	r0, [r2, #0]
 800a9f2:	e7da      	b.n	800a9aa <_free_r+0x22>
 800a9f4:	d902      	bls.n	800a9fc <_free_r+0x74>
 800a9f6:	230c      	movs	r3, #12
 800a9f8:	602b      	str	r3, [r5, #0]
 800a9fa:	e7d6      	b.n	800a9aa <_free_r+0x22>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	1821      	adds	r1, r4, r0
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf04      	itt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	6063      	str	r3, [r4, #4]
 800aa0a:	bf04      	itt	eq
 800aa0c:	1809      	addeq	r1, r1, r0
 800aa0e:	6021      	streq	r1, [r4, #0]
 800aa10:	6054      	str	r4, [r2, #4]
 800aa12:	e7ca      	b.n	800a9aa <_free_r+0x22>
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	bf00      	nop
 800aa18:	20000a48 	.word	0x20000a48

0800aa1c <_init>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	bf00      	nop
 800aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa22:	bc08      	pop	{r3}
 800aa24:	469e      	mov	lr, r3
 800aa26:	4770      	bx	lr

0800aa28 <_fini>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr
